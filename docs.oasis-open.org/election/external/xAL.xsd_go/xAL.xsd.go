//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/election/external/xAL.xsd
package gopkg_DocsOasisOpenOrgElectionExternalXalXsd

//	xAL: eXtensible Address Language
//	This is an XML document type definition (DTD) for
//	defining addresses.
//	Original Date of Creation: 1 March 2001
//	Copyright(c) 2000, OASIS. All Rights Reserved [http://www.oasis-open.org]
//	Contact: Customer Information Quality Technical Committee, OASIS
//	http://www.oasis-open.org/committees/ciq
//	VERSION: 2.0 [MAJOR RELEASE] Date of Creation: 01 May 2002
//	Last Update: 24 July 2002
//	Previous Version: 1.3
//	Common Attributes:Type - If not documented then it means, possible values of Type not limited to: Official, Unique, Abbreviation, OldName, Synonym
//	Code:Address element codes are used by groups like postal groups like ECCMA, ADIS, UN/PROLIST for postal services


import (
	xsdt "github.com/metaleap/go-xsd/types"
)

//	Used by postal services to encode the name of the element.
type XsdGoPkgHasAttr_Code_XsdtString_ struct {
	Code xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Code,attr"`

}

type XsdGoPkgHasAtts_GrPostal struct {
//	Used by postal services to encode the name of the element.
	XsdGoPkgHasAttr_Code_XsdtString_

}

//	Root element for a list of addresses
//	Specific to DTD to specify the version number of DTD
type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Version,attr"`

}

//	This container defines the details of the address. Can define multiple addresses including tracking address history
//	Key identifier for the element for not reinforced references from other elements. Not required to be unique for the document to be valid, but application may get confused if not unique. Extend this schema adding unique contraint if needed.
type XsdGoPkgHasAttr_AddressDetailsKey_XsdtString_ struct {
	AddressDetailsKey xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetailsKey,attr"`

}

//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
//	Suffix after the number. A in 12A Archer Street
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`

}

//	12-A where 12 is number and A is suffix and "-" is the separator
type XsdGoPkgHasAttr_NumberSuffixSeparator_XsdtString_ struct {
	NumberSuffixSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberSuffixSeparator,attr"`

}

//	Postal, residential, corporate, etc
type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Type,attr"`

}

type TxsdThoroughfareNumberSuffix struct {
	XsdGoPkgHasCdata

//	NEAR, ADJACENT TO, etc
//	12-A where 12 is number and A is suffix and "-" is the separator
	XsdGoPkgHasAttr_NumberSuffixSeparator_XsdtString_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElems_ThoroughfareNumberSuffix struct {
//	Suffix after the number. A in 12A Archer Street
	ThoroughfareNumberSuffixs []*TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberSuffix"`

}

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
type ThoroughfareTrailingTypeType struct {
	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_ThoroughfareTrailingTypesequenceThoroughfareschema_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_ struct {
//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	ThoroughfareTrailingType *ThoroughfareTrailingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareTrailingType"`

}

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
type ThoroughfareNameType struct {
	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElems_ThoroughfareNamesequenceThoroughfareschema_ThoroughfareName_ThoroughfareNameType_ struct {
//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	ThoroughfareNames []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareName"`

}

//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
//	A in 12A
type XsdGoPkgHasElems_PremiseNumberSuffix struct {
//	A in 12A
	PremiseNumberSuffixs []*TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSuffix"`

}

//	NEAR, ADJACENT TO, etc
type XsdGoPkgHasAttr_PremiseDependencyType_XsdtString_ struct {
	PremiseDependencyType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseDependencyType,attr"`

}

//	DES, DE, LA, LA, DU in RUE DU BOIS. These terms connect a premise/thoroughfare type and premise/thoroughfare name. Terms may appear with names AVE DU BOIS
type XsdGoPkgHasAttr_PremiseThoroughfareConnector_XsdtString_ struct {
	PremiseThoroughfareConnector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseThoroughfareConnector,attr"`

}

//	Specification for defining the premise number range. Some premises have number as Building C1-C7
//	Eg. Erode (Dist) where (Dist) is the Indicator
type XsdGoPkgHasAttr_Indicator_XsdtString_ struct {
	Indicator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Indicator,attr"`

}

//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
type XsdGoPkgHasAttr_Separator_XsdtString_ struct {
	Separator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Separator,attr"`

}

//	End number details of the premise number range
//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
//	No. occurs before 12 No.12
type TxsdPremiseNumberIndicatorOccurrence xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdPremiseNumberIndicatorOccurrence is "After".
func (me TxsdPremiseNumberIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	This convenience method just performs a simple type conversion to TxsdPremiseNumberIndicatorOccurrence's alias type xsdt.Nmtoken.
func (me TxsdPremiseNumberIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TxsdPremiseNumberIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseNumberIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdPremiseNumberIndicatorOccurrence is "Before".
func (me TxsdPremiseNumberIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Since TxsdPremiseNumberIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseNumberIndicatorOccurrence) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPremiseNumberIndicatorOccurrence_ struct {
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`

}

//	12 in BUILDING 12 occurs "after" premise type BUILDING
type XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdPremiseNumberNumberTypeOccurrence_ struct {
	NumberTypeOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberTypeOccurrence,attr"`

}

//	Building 12-14 is "Range" and Building 12 is "Single"
type TxsdPremiseNumberNumberType xsdt.Nmtoken

//	Since TxsdPremiseNumberNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseNumberNumberType) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberType is "Range".
func (me TxsdPremiseNumberNumberType) IsRange () bool { return me == "Range" }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberType is "Single".
func (me TxsdPremiseNumberNumberType) IsSingle () bool { return me == "Single" }

//	Since TxsdPremiseNumberNumberType is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseNumberNumberType) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseNumberNumberType's alias type xsdt.Nmtoken.
func (me TxsdPremiseNumberNumberType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_NumberType_TxsdPremiseNumberNumberType_ struct {
	NumberType TxsdPremiseNumberNumberType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberType,attr"`

}

type TxsdPremiseNumber struct {
	XsdGoPkgHasCdata

//	No. occurs before 12 No.12
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPremiseNumberIndicatorOccurrence_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

//	No. in House No.12, # in #12, etc.
	XsdGoPkgHasAttr_Indicator_XsdtString_

//	12 in BUILDING 12 occurs "after" premise type BUILDING
	XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdPremiseNumberNumberTypeOccurrence_

//	Building 12-14 is "Range" and Building 12 is "Single"
	XsdGoPkgHasAttr_NumberType_TxsdPremiseNumberNumberType_

}

type XsdGoPkgHasElems_PremiseNumber struct {
//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
	PremiseNumbers []*TxsdPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumber"`

}

//	A in A12
//	A-12 where 12 is number and A is prefix and "-" is the separator
type XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_ struct {
	NumberPrefixSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberPrefixSeparator,attr"`

}

type TxsdPremiseNumberPrefix struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

//	A-12 where 12 is number and A is prefix and "-" is the separator
	XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_GrPostal

}

type XsdGoPkgHasElems_PremiseNumberPrefix struct {
//	A in A12
	PremiseNumberPrefixs []*TxsdPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberPrefix"`

}

//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
type XsdGoPkgHasElems_AddressLine struct {
//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
	AddressLines []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLine"`

}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo struct {
	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_PremiseNumberSuffix

	XsdGoPkgHasElems_PremiseNumber

	XsdGoPkgHasElems_PremiseNumberPrefix

}

type XsdGoPkgHasElem_PremiseNumberRangeTosequencePremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRangeTo_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo_ struct {
//	End number details of the premise number range
	PremiseNumberRangeTo *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeTo"`

}

//	Start number details of the premise number range
type XsdGoPkgHasElem_PremiseNumberRangeFromsequencePremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRangeFrom_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom_ struct {
//	Start number details of the premise number range
	PremiseNumberRangeFrom *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeFrom"`

}

//	Eg. Odd or even number range
type XsdGoPkgHasAttr_RangeType_XsdtString_ struct {
	RangeType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 RangeType,attr"`

}

//	Building 23-25 where the number occurs after building name
type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence's alias type xsdt.Nmtoken.
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) String () string { return xsdt.Nmtoken(me).String() }

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "BeforeName".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsBeforeName () bool { return me == "BeforeName" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "AfterName".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsAfterName () bool { return me == "AfterName" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "AfterType".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsAfterType () bool { return me == "AfterType" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "BeforeType".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsBeforeType () bool { return me == "BeforeType" }

type XsdGoPkgHasAttr_NumberRangeOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence_ struct {
	NumberRangeOccurence TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberRangeOccurence,attr"`

}

//	No.12-14 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence_ struct {
	IndicatorOccurence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurence,attr"`

}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRange struct {
//	Eg. Odd or even number range
	XsdGoPkgHasAttr_RangeType_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_

//	Building 23-25 where the number occurs after building name
	XsdGoPkgHasAttr_NumberRangeOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence_

//	No.12-14 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence_

//	Eg. No. in Building No:C1-C5
	XsdGoPkgHasAttr_Indicator_XsdtString_

//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
	XsdGoPkgHasAttr_Separator_XsdtString_

//	End number details of the premise number range
	XsdGoPkgHasElem_PremiseNumberRangeTosequencePremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRangeTo_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo_

//	Start number details of the premise number range
	XsdGoPkgHasElem_PremiseNumberRangeFromsequencePremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRangeFrom_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom_

}

type XsdGoPkgHasElem_PremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRange_TxsdPremiseSequenceChoiceChoicePremiseNumberRange_ struct {
//	Specification for defining the premise number range. Some premises have number as Building C1-C7
	PremiseNumberRange *TxsdPremiseSequenceChoiceChoicePremiseNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRange"`

}

//	STREET, PREMISE, SUBPREMISE, PARK, FARM, etc
type XsdGoPkgHasAttr_PremiseDependency_XsdtString_ struct {
	PremiseDependency xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseDependency,attr"`

}

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites. Each sub-premise should be uniquely identifiable.
//	Prefix of the sub premise number. eg. A in A-12
type TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix struct {
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	A-12 where 12 is number and A is prefix and "-" is the separator
	XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_

}

type XsdGoPkgHasElems_SubPremiseNumberPrefixsequenceSubPremiseTypeschema_SubPremiseNumberPrefix_TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix_ struct {
//	Prefix of the sub premise number. eg. A in A-12
	SubPremiseNumberPrefixs []*TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberPrefix"`

}

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
type XsdGoPkgHasElem_SubPremisesequenceSubPremiseTypeschema_SubPremise_TSubPremiseType_ struct {
//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
	SubPremise *TSubPremiseType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremise"`

}

//	Suffix of the sub premise number. eg. A in 12A
type XsdGoPkgHasElems_SubPremiseNumberSuffixsequenceSubPremiseTypeschema_SubPremiseNumberSuffix_TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix_ struct {
//	Suffix of the sub premise number. eg. A in 12A
	SubPremiseNumberSuffixs []*TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberSuffix"`

}

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
//	Name of the the Mail Stop. eg. MSP, MS, etc
type XsdGoPkgHasElem_MailStopNamesequenceMailStopTypeschema_MailStopName_TxsdMailStopTypeSequenceMailStopName_ struct {
//	Name of the the Mail Stop. eg. MSP, MS, etc
	MailStopName *ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopName"`

}

//	Number of the Mail stop. eg. 123 in MS 123
//	"-" in MS-123
type XsdGoPkgHasAttr_NameNumberSeparator_XsdtString_ struct {
	NameNumberSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NameNumberSeparator,attr"`

}

type TxsdMailStopTypeSequenceMailStopNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	"-" in MS-123
	XsdGoPkgHasAttr_NameNumberSeparator_XsdtString_

}

type XsdGoPkgHasElem_MailStopNumbersequenceMailStopTypeschema_MailStopNumber_TxsdMailStopTypeSequenceMailStopNumber_ struct {
//	Number of the Mail stop. eg. 123 in MS 123
	MailStopNumber *TxsdMailStopTypeSequenceMailStopNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopNumber"`

}

type TMailStopType struct {
//	Name of the the Mail Stop. eg. MSP, MS, etc
	XsdGoPkgHasElem_MailStopNamesequenceMailStopTypeschema_MailStopName_TxsdMailStopTypeSequenceMailStopName_

//	Number of the Mail stop. eg. 123 in MS 123
	XsdGoPkgHasElem_MailStopNumbersequenceMailStopTypeschema_MailStopNumber_TxsdMailStopTypeSequenceMailStopNumber_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElem_MailStopsequenceFirmTypeschema_MailStop_TMailStopType_ struct {
//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	MailStop *TMailStopType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStop"`

}

//	Name of the firm
type XsdGoPkgHasElems_FirmNamesequenceFirmTypeschema_FirmName_TxsdFirmTypeSequenceFirmName_ struct {
//	Name of the firm
	FirmNames []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 FirmName"`

}

//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
//	GENERAL PO in MIAMI GENERAL PO
type TxsdPostalCodeSequencePostTownSequencePostTownSuffix struct {
	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_PostTownSuffixsequencePostTownsequencePostalCodeschema_PostTownSuffix_TxsdPostalCodeSequencePostTownSequencePostTownSuffix_ struct {
//	GENERAL PO in MIAMI GENERAL PO
	PostTownSuffix *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownSuffix"`

}

//	Name of the post town
type XsdGoPkgHasElems_PostTownNamesequencePostTownsequencePostalCodeschema_PostTownName_TxsdPostalCodeSequencePostTownSequencePostTownName_ struct {
//	Name of the post town
	PostTownNames []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownName"`

}

type TxsdPostalCodeSequencePostTown struct {
//	Name of the post town
	XsdGoPkgHasElems_PostTownNamesequencePostTownsequencePostalCodeschema_PostTownName_TxsdPostalCodeSequencePostTownSequencePostTownName_

//	eg. village, town, suburb, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	GENERAL PO in MIAMI GENERAL PO
	XsdGoPkgHasElem_PostTownSuffixsequencePostTownsequencePostalCodeschema_PostTownSuffix_TxsdPostalCodeSequencePostTownSequencePostTownSuffix_

	XsdGoPkgHasElems_AddressLine

}

type XsdGoPkgHasElem_PostTownsequencePostalCodeschema_PostTown_TxsdPostalCodeSequencePostTown_ struct {
//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
	PostTown *TxsdPostalCodeSequencePostTown `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTown"`

}

//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
type XsdGoPkgHasElems_PostalCodeNumbersequencePostalCodeschema_PostalCodeNumber_TxsdPostalCodeSequencePostalCodeNumber_ struct {
//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
	PostalCodeNumbers []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumber"`

}

//	Examples are: 1234 (USA), 1G (UK), etc.
//	The separator between postal code number and the extension. Eg. "-"
type XsdGoPkgHasAttr_NumberExtensionSeparator_XsdtString_ struct {
	NumberExtensionSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberExtensionSeparator,attr"`

}

type TxsdPostalCodeSequencePostalCodeNumberExtension struct {
//	The separator between postal code number and the extension. Eg. "-"
	XsdGoPkgHasAttr_NumberExtensionSeparator_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Delivery Point Suffix, New Postal Code, etc..
	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElems_PostalCodeNumberExtensionsequencePostalCodeschema_PostalCodeNumberExtension_TxsdPostalCodeSequencePostalCodeNumberExtension_ struct {
//	Examples are: 1234 (USA), 1G (UK), etc.
	PostalCodeNumberExtensions []*TxsdPostalCodeSequencePostalCodeNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumberExtension"`

}

type TxsdPostalCode struct {
//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
	XsdGoPkgHasElems_PostalCodeNumbersequencePostalCodeschema_PostalCodeNumber_TxsdPostalCodeSequencePostalCodeNumber_

//	Examples are: 1234 (USA), 1G (UK), etc.
	XsdGoPkgHasElems_PostalCodeNumberExtensionsequencePostalCodeschema_PostalCodeNumberExtension_TxsdPostalCodeSequencePostalCodeNumberExtension_

	XsdGoPkgHasElems_AddressLine

//	Area Code, Postcode, Delivery code as in NZ, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
	XsdGoPkgHasElem_PostTownsequencePostalCodeschema_PostTown_TxsdPostalCodeSequencePostTown_

}

type XsdGoPkgHasElem_PostalCode struct {
//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
	PostalCode *TxsdPostalCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCode"`

}

//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
//	Specification of the name of a department.
type XsdGoPkgHasElems_DepartmentNamesequenceDepartmentschema_DepartmentName_TxsdDepartmentSequenceDepartmentName_ struct {
//	Specification of the name of a department.
	DepartmentNames []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DepartmentName"`

}

type TxsdDepartment struct {
//	School in Physics School, Division in Radiology division of school of physics
	XsdGoPkgHasAttr_Type_XsdtString_

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	XsdGoPkgHasElem_MailStopsequenceFirmTypeschema_MailStop_TMailStopType_

	XsdGoPkgHasElem_PostalCode

	XsdGoPkgHasElems_AddressLine

//	Specification of the name of a department.
	XsdGoPkgHasElems_DepartmentNamesequenceDepartmentschema_DepartmentName_TxsdDepartmentSequenceDepartmentName_

}

type XsdGoPkgHasElems_Department struct {
//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
	Departments []*TxsdDepartment `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Department"`

}

type TFirmType struct {
//	Name of the firm
	XsdGoPkgHasElems_FirmNamesequenceFirmTypeschema_FirmName_TxsdFirmTypeSequenceFirmName_

	XsdGoPkgHasElem_PostalCode

	XsdGoPkgHasElems_Department

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_AddressLine

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	XsdGoPkgHasElem_MailStopsequenceFirmTypeschema_MailStop_TMailStopType_

}

type XsdGoPkgHasElem_FirmsequenceSubPremiseTypeschema_Firm_TFirmType_ struct {
//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	Firm *TFirmType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Firm"`

}

//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
//	"/" in 12/14 Archer Street where 12 is sub-premise number and 14 is premise number
type XsdGoPkgHasAttr_PremiseNumberSeparator_XsdtString_ struct {
	PremiseNumberSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSeparator,attr"`

}

//	12TH occurs "before" FLOOR (a type of subpremise) in 12TH FLOOR
type XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence_ struct {
	NumberTypeOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberTypeOccurrence,attr"`

}

//	"No." occurs before 1 in No.1, or TH occurs after 12 in 12TH
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence_ struct {
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`

}

type TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber struct {
//	12TH occurs "before" FLOOR (a type of subpremise) in 12TH FLOOR
	XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence_

//	"No." occurs before 1 in No.1, or TH occurs after 12 in 12TH
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence_

	XsdGoPkgHasCdata

//	"/" in 12/14 Archer Street where 12 is sub-premise number and 14 is premise number
	XsdGoPkgHasAttr_PremiseNumberSeparator_XsdtString_

//	"TH" in 12TH which is a floor number, "NO." in NO.1, "#" in APT #12, etc.
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_GrPostal

}

type XsdGoPkgHasElems_SubPremiseNumberchoicesequenceSubPremiseTypeschema_SubPremiseNumber_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber_ struct {
//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
	SubPremiseNumbers []*TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumber"`

}

//	Name of the building
//	Occurrence of the building name before/after the type. eg. EGIS BUILDING where name appears before type
type XsdGoPkgHasAttr_TypeOccurrence_TxsdBuildingNameTypeTypeOccurrence_ struct {
	TypeOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`

}

type TBuildingNameType struct {
	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

//	Occurrence of the building name before/after the type. eg. EGIS BUILDING where name appears before type
	XsdGoPkgHasAttr_TypeOccurrence_TxsdBuildingNameTypeTypeOccurrence_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElems_BuildingNamesequenceSubPremiseTypeschema_BuildingName_TBuildingNameType_ struct {
//	Name of the building
	BuildingNames []*TBuildingNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 BuildingName"`

}

//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElem_SubPremiseLocationchoicesequenceSubPremiseTypeschema_SubPremiseLocation_TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation_ struct {
//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
	SubPremiseLocation *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseLocation"`

}

//	Name of the SubPremise
//	EGIS Building where EGIS occurs before Building
type XsdGoPkgHasAttr_TypeOccurrence_TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence_ struct {
	TypeOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`

}

type TxsdSubPremiseTypeSequenceSubPremiseName struct {
//	EGIS Building where EGIS occurs before Building
	XsdGoPkgHasAttr_TypeOccurrence_TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElems_SubPremiseNamesequenceSubPremiseTypeschema_SubPremiseName_TxsdSubPremiseTypeSequenceSubPremiseName_ struct {
//	Name of the SubPremise
	SubPremiseNames []*TxsdSubPremiseTypeSequenceSubPremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseName"`

}

type TSubPremiseType struct {
//	Name of the SubPremise
	XsdGoPkgHasElems_SubPremiseNamesequenceSubPremiseTypeschema_SubPremiseName_TxsdSubPremiseTypeSequenceSubPremiseName_

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	XsdGoPkgHasElem_MailStopsequenceFirmTypeschema_MailStop_TMailStopType_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasAttr_Type_XsdtString_

//	Prefix of the sub premise number. eg. A in A-12
	XsdGoPkgHasElems_SubPremiseNumberPrefixsequenceSubPremiseTypeschema_SubPremiseNumberPrefix_TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix_

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
	XsdGoPkgHasElem_SubPremisesequenceSubPremiseTypeschema_SubPremise_TSubPremiseType_

//	Suffix of the sub premise number. eg. A in 12A
	XsdGoPkgHasElems_SubPremiseNumberSuffixsequenceSubPremiseTypeschema_SubPremiseNumberSuffix_TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix_

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	XsdGoPkgHasElem_FirmsequenceSubPremiseTypeschema_Firm_TFirmType_

//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
	XsdGoPkgHasElems_SubPremiseNumberchoicesequenceSubPremiseTypeschema_SubPremiseNumber_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber_

	XsdGoPkgHasElem_PostalCode

//	Name of the building
	XsdGoPkgHasElems_BuildingNamesequenceSubPremiseTypeschema_BuildingName_TBuildingNameType_

//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
	XsdGoPkgHasElem_SubPremiseLocationchoicesequenceSubPremiseTypeschema_SubPremiseLocation_TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation_

}

type XsdGoPkgHasElems_SubPremisechoicesequencePremiseschema_SubPremise_TSubPremiseType_ struct {
//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites. Each sub-premise should be uniquely identifiable.
	SubPremises []*TSubPremiseType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremise"`

}

//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
//	EGIS Building where EGIS occurs before Building, DES JARDINS occurs after COMPLEXE DES JARDINS
type XsdGoPkgHasAttr_TypeOccurrence_TxsdPremiseSequencePremiseNameTypeOccurrence_ struct {
	TypeOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`

}

type TxsdPremiseSequencePremiseName struct {
	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

//	EGIS Building where EGIS occurs before Building, DES JARDINS occurs after COMPLEXE DES JARDINS
	XsdGoPkgHasAttr_TypeOccurrence_TxsdPremiseSequencePremiseNameTypeOccurrence_

	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElems_PremiseNamesequencePremiseschema_PremiseName_TxsdPremiseSequencePremiseName_ struct {
//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
	PremiseNames []*TxsdPremiseSequencePremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseName"`

}

//	LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElem_PremiseLocationchoicesequencePremiseschema_PremiseLocation_TxsdPremiseSequenceChoicePremiseLocation_ struct {
//	LOBBY, BASEMENT, GROUND FLOOR, etc...
	PremiseLocation *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseLocation"`

}

type TxsdPremise struct {
//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites. Each sub-premise should be uniquely identifiable.
	XsdGoPkgHasElems_SubPremisechoicesequencePremiseschema_SubPremise_TSubPremiseType_

//	Specification of the name of a building.
	XsdGoPkgHasElems_BuildingNamesequenceSubPremiseTypeschema_BuildingName_TBuildingNameType_

	XsdGoPkgHasElems_PremiseNumberPrefix

	XsdGoPkgHasElems_PremiseNumber

	XsdGoPkgHasElems_AddressLine

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	XsdGoPkgHasElem_MailStopsequenceFirmTypeschema_MailStop_TMailStopType_

//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
	XsdGoPkgHasElems_PremiseNamesequencePremiseschema_PremiseName_TxsdPremiseSequencePremiseName_

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	XsdGoPkgHasElem_FirmsequenceSubPremiseTypeschema_Firm_TFirmType_

	XsdGoPkgHasElem_PostalCode

//	LOBBY, BASEMENT, GROUND FLOOR, etc...
	XsdGoPkgHasElem_PremiseLocationchoicesequencePremiseschema_PremiseLocation_TxsdPremiseSequenceChoicePremiseLocation_

	XsdGoPkgHasElems_PremiseNumberSuffix

//	NEAR, ADJACENT TO, etc
	XsdGoPkgHasAttr_PremiseDependencyType_XsdtString_

//	DES, DE, LA, LA, DU in RUE DU BOIS. These terms connect a premise/thoroughfare type and premise/thoroughfare name. Terms may appear with names AVE DU BOIS
	XsdGoPkgHasAttr_PremiseThoroughfareConnector_XsdtString_

//	COMPLEXE in COMPLEX DES JARDINS, A building, station, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	Specification for defining the premise number range. Some premises have number as Building C1-C7
	XsdGoPkgHasElem_PremiseNumberRangechoicechoicesequencePremiseschema_PremiseNumberRange_TxsdPremiseSequenceChoiceChoicePremiseNumberRange_

//	STREET, PREMISE, SUBPREMISE, PARK, FARM, etc
	XsdGoPkgHasAttr_PremiseDependency_XsdtString_

	XsdGoPkgHasElem_Premise

}

type XsdGoPkgHasElem_Premise struct {
//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
	Premise *TxsdPremise `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Premise"`

}

//	Does this thoroughfare have a a dependent thoroughfare? Corner of street X, etc
type TxsdThoroughfareDependentThoroughfares xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdThoroughfareDependentThoroughfares is "Yes".
func (me TxsdThoroughfareDependentThoroughfares) IsYes () bool { return me == "Yes" }

//	Returns true if the value of this enumerated TxsdThoroughfareDependentThoroughfares is "No".
func (me TxsdThoroughfareDependentThoroughfares) IsNo () bool { return me == "No" }

//	Since TxsdThoroughfareDependentThoroughfares is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareDependentThoroughfares) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareDependentThoroughfares's alias type xsdt.Nmtoken.
func (me TxsdThoroughfareDependentThoroughfares) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TxsdThoroughfareDependentThoroughfares is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareDependentThoroughfares) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

type XsdGoPkgHasAttr_DependentThoroughfares_TxsdThoroughfareDependentThoroughfares_ struct {
	DependentThoroughfares TxsdThoroughfareDependentThoroughfares `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfares,attr"`

}

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
type ThoroughfareLeadingTypeType struct {
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_ThoroughfareLeadingTypesequenceThoroughfareschema_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_ struct {
//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	ThoroughfareLeadingType *ThoroughfareLeadingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareLeadingType"`

}

//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
//	Starting number in the range
//	Prefix before the number. A in A12 Archer Street
type XsdGoPkgHasElems_ThoroughfareNumberPrefix struct {
//	Prefix before the number. A in A12 Archer Street
	ThoroughfareNumberPrefixs []*TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberPrefix"`

}

//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
//	12 Archer Street is "Single" and 12-14 Archer Street is "Range"
type XsdGoPkgHasAttr_NumberType_TxsdThoroughfareNumberNumberType_ struct {
	NumberType TxsdPremiseNumberNumberType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberType,attr"`

}

//	No.12 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareNumberIndicatorOccurrence_ struct {
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`

}

//	23 Archer St, Archer Street 23, St Archer 23
type XsdGoPkgHasAttr_NumberOccurrence_TxsdThoroughfareNumberNumberOccurrence_ struct {
	NumberOccurrence TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberOccurrence,attr"`

}

type TxsdThoroughfareNumber struct {
	XsdGoPkgHasCdata

//	No. in Street No.12 or "#" in Street # 12, etc.
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

//	No.12 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareNumberIndicatorOccurrence_

//	23 Archer St, Archer Street 23, St Archer 23
	XsdGoPkgHasAttr_NumberOccurrence_TxsdThoroughfareNumberNumberOccurrence_

//	12 Archer Street is "Single" and 12-14 Archer Street is "Range"
	XsdGoPkgHasAttr_NumberType_TxsdThoroughfareNumberNumberType_

}

type XsdGoPkgHasElems_ThoroughfareNumber struct {
//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
	ThoroughfareNumbers []*TxsdThoroughfareNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumber"`

}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom struct {
	XsdGoPkgHasElems_ThoroughfareNumber

	XsdGoPkgHasElems_ThoroughfareNumberSuffix

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_ThoroughfareNumberPrefix

}

type XsdGoPkgHasElem_ThoroughfareNumberFromsequenceThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberFrom_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom_ struct {
//	Starting number in the range
	ThoroughfareNumberFrom *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberFrom"`

}

//	Thoroughfare number ranges are odd or even
type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is "Odd".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) IsOdd () bool { return me == "Odd" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is "Even".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) IsEven () bool { return me == "Even" }

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType's alias type xsdt.Nmtoken.
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) String () string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_RangeType_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType_ struct {
	RangeType TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 RangeType,attr"`

}

//	Ending number in the range
type XsdGoPkgHasElem_ThoroughfareNumberTosequenceThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberTo_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo_ struct {
//	Ending number in the range
	ThoroughfareNumberTo *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberTo"`

}

//	No.12-14 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence_ struct {
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`

}

//	23-25 Archer St, where number appears before name
type XsdGoPkgHasAttr_NumberRangeOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence_ struct {
	NumberRangeOccurrence TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberRangeOccurrence,attr"`

}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRange struct {
	XsdGoPkgHasElems_AddressLine

//	Ending number in the range
	XsdGoPkgHasElem_ThoroughfareNumberTosequenceThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberTo_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo_

//	No.12-14 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence_

//	23-25 Archer St, where number appears before name
	XsdGoPkgHasAttr_NumberRangeOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence_

//	"No." No.12-13
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasAtts_GrPostal

//	Starting number in the range
	XsdGoPkgHasElem_ThoroughfareNumberFromsequenceThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberFrom_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom_

//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
	XsdGoPkgHasAttr_Separator_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_

//	Thoroughfare number ranges are odd or even
	XsdGoPkgHasAttr_RangeType_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType_

}

type XsdGoPkgHasElems_ThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberRange_TxsdThoroughfareSequenceChoiceThoroughfareNumberRange_ struct {
//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
	ThoroughfareNumberRanges []*TxsdThoroughfareSequenceChoiceThoroughfareNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberRange"`

}

//	Corner of Street1 AND Street 2 where AND is the Connector
type XsdGoPkgHasAttr_DependentThoroughfaresConnector_XsdtString_ struct {
	DependentThoroughfaresConnector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresConnector,attr"`

}

//	Corner of, Intersection of
type XsdGoPkgHasAttr_DependentThoroughfaresIndicator_XsdtString_ struct {
	DependentThoroughfaresIndicator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresIndicator,attr"`

}

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
type ThoroughfarePostDirectionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElem_ThoroughfarePostDirectionsequenceThoroughfareschema_ThoroughfarePostDirection_ThoroughfarePostDirectionType_ struct {
//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	ThoroughfarePostDirection *ThoroughfarePostDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePostDirection"`

}

//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
//	North Baker Street, where North is the pre-direction. The direction appears before the name.
type ThoroughfarePreDirectionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElem_ThoroughfarePreDirectionsequenceDependentThoroughfaresequenceThoroughfareschema_ThoroughfarePreDirection_ThoroughfarePreDirectionType_ struct {
//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	ThoroughfarePreDirection *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePreDirection"`

}

type TxsdThoroughfareSequenceDependentThoroughfare struct {
	XsdGoPkgHasAttr_Type_XsdtString_

//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	XsdGoPkgHasElem_ThoroughfarePreDirectionsequenceDependentThoroughfaresequenceThoroughfareschema_ThoroughfarePreDirection_ThoroughfarePreDirectionType_

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	XsdGoPkgHasElem_ThoroughfareLeadingTypesequenceThoroughfareschema_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_

	XsdGoPkgHasElems_AddressLine

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	XsdGoPkgHasElem_ThoroughfarePostDirectionsequenceThoroughfareschema_ThoroughfarePostDirection_ThoroughfarePostDirectionType_

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	XsdGoPkgHasElems_ThoroughfareNamesequenceThoroughfareschema_ThoroughfareName_ThoroughfareNameType_

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	XsdGoPkgHasElem_ThoroughfareTrailingTypesequenceThoroughfareschema_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_

}

type XsdGoPkgHasElem_DependentThoroughfaresequenceThoroughfareschema_DependentThoroughfare_TxsdThoroughfareSequenceDependentThoroughfare_ struct {
//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
	DependentThoroughfare *TxsdThoroughfareSequenceDependentThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfare"`

}

//	STS in GEORGE and ADELAIDE STS, RDS IN A and B RDS, etc. Use only when both the street types are the same
type XsdGoPkgHasAttr_DependentThoroughfaresType_XsdtString_ struct {
	DependentThoroughfaresType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresType,attr"`

}

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
//	Name of the large mail user. eg. Smith Ford International airport
type TxsdLargeMailUserTypeSequenceLargeMailUserName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Code_XsdtString_

//	Airport, Hospital, etc
	XsdGoPkgHasAttr_Type_XsdtString_

}

type XsdGoPkgHasElems_LargeMailUserNamesequenceLargeMailUserTypeschema_LargeMailUserName_TxsdLargeMailUserTypeSequenceLargeMailUserName_ struct {
//	Name of the large mail user. eg. Smith Ford International airport
	LargeMailUserNames []*TxsdLargeMailUserTypeSequenceLargeMailUserName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserName"`

}

//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
type TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier struct {
	XsdGoPkgHasAtts_GrPostal

//	CEDEX Code
	XsdGoPkgHasAttr_Type_XsdtString_

//	eg. Building 429 in which Building is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_LargeMailUserIdentifiersequenceLargeMailUserTypeschema_LargeMailUserIdentifier_TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier_ struct {
//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
	LargeMailUserIdentifier *TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserIdentifier"`

}

//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
type XsdGoPkgHasElem_Department struct {
//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
	Department *TxsdDepartment `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Department"`

}

//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
//	Some countries like USA have POBox as 12345-123
type TxsdPostBoxSequencePostBoxNumberExtension struct {
	XsdGoPkgHasCdata

//	"-" is the NumberExtensionSeparator in POBOX:12345-123
	XsdGoPkgHasAttr_NumberExtensionSeparator_XsdtString_

}

type XsdGoPkgHasElem_PostBoxNumberExtensionsequencePostBoxschema_PostBoxNumberExtension_TxsdPostBoxSequencePostBoxNumberExtension_ struct {
//	Some countries like USA have POBox as 12345-123
	PostBoxNumberExtension *TxsdPostBoxSequencePostBoxNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberExtension"`

}

//	Specification of the number of a postbox
type XsdGoPkgHasElem_PostBoxNumbersequencePostBoxschema_PostBoxNumber_TxsdPostBoxSequencePostBoxNumber_ struct {
//	Specification of the number of a postbox
	PostBoxNumber *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumber"`

}

//	Specification of the prefix of the post box number. eg. A in POBox:A-123
type TxsdPostBoxSequencePostBoxNumberPrefix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	A-12 where 12 is number and A is prefix and "-" is the separator
	XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_

}

type XsdGoPkgHasElem_PostBoxNumberPrefixsequencePostBoxschema_PostBoxNumberPrefix_TxsdPostBoxSequencePostBoxNumberPrefix_ struct {
//	Specification of the prefix of the post box number. eg. A in POBox:A-123
	PostBoxNumberPrefix *TxsdPostBoxSequencePostBoxNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberPrefix"`

}

//	Specification of the suffix of the post box number. eg. A in POBox:123A
type TxsdPostBoxSequencePostBoxNumberSuffix struct {
	XsdGoPkgHasAtts_GrPostal

//	12-A where 12 is number and A is suffix and "-" is the separator
	XsdGoPkgHasAttr_NumberSuffixSeparator_XsdtString_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_PostBoxNumberSuffixsequencePostBoxschema_PostBoxNumberSuffix_TxsdPostBoxSequencePostBoxNumberSuffix_ struct {
//	Specification of the suffix of the post box number. eg. A in POBox:123A
	PostBoxNumberSuffix *TxsdPostBoxSequencePostBoxNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberSuffix"`

}

type TxsdPostBox struct {
//	Possible values are, not limited to: POBox and Freepost.
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElem_PostalCode

//	Specification of the prefix of the post box number. eg. A in POBox:A-123
	XsdGoPkgHasElem_PostBoxNumberPrefixsequencePostBoxschema_PostBoxNumberPrefix_TxsdPostBoxSequencePostBoxNumberPrefix_

//	Specification of the suffix of the post box number. eg. A in POBox:123A
	XsdGoPkgHasElem_PostBoxNumberSuffixsequencePostBoxschema_PostBoxNumberSuffix_TxsdPostBoxSequencePostBoxNumberSuffix_

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from
//	a large mail user address, which contains no street.
	XsdGoPkgHasElem_FirmsequenceSubPremiseTypeschema_Firm_TFirmType_

	XsdGoPkgHasElems_AddressLine

//	Some countries like USA have POBox as 12345-123
	XsdGoPkgHasElem_PostBoxNumberExtensionsequencePostBoxschema_PostBoxNumberExtension_TxsdPostBoxSequencePostBoxNumberExtension_

//	Specification of the number of a postbox
	XsdGoPkgHasElem_PostBoxNumbersequencePostBoxschema_PostBoxNumber_TxsdPostBoxSequencePostBoxNumber_

//	LOCKED BAG NO:1234 where the Indicator is NO: and Type is LOCKED BAG
	XsdGoPkgHasAttr_Indicator_XsdtString_

}

type XsdGoPkgHasElem_PostBox struct {
//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
	PostBox *TxsdPostBox `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBox"`

}

type TLargeMailUserType struct {
	XsdGoPkgHasElem_Thoroughfare

	XsdGoPkgHasElem_PostalCode

	XsdGoPkgHasAttr_Type_XsdtString_

//	Name of the building
	XsdGoPkgHasElems_BuildingNamesequenceSubPremiseTypeschema_BuildingName_TBuildingNameType_

//	Name of the large mail user. eg. Smith Ford International airport
	XsdGoPkgHasElems_LargeMailUserNamesequenceLargeMailUserTypeschema_LargeMailUserName_TxsdLargeMailUserTypeSequenceLargeMailUserName_

//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
	XsdGoPkgHasElem_LargeMailUserIdentifiersequenceLargeMailUserTypeschema_LargeMailUserIdentifier_TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_Department

	XsdGoPkgHasElem_PostBox

}

type XsdGoPkgHasElem_LargeMailUserchoicesequenceDependentLocalityTypeschema_LargeMailUser_TLargeMailUserType_ struct {
//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	LargeMailUser *TLargeMailUserType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUser"`

}

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
type XsdGoPkgHasElem_DependentLocalitysequenceDependentLocalityTypeschema_DependentLocality_TDependentLocalityType_ struct {
//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	DependentLocality *TDependentLocalityType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocality"`

}

//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
type XsdGoPkgHasElems_PostOfficeNamechoicesequencePostOfficeschema_PostOfficeName_TxsdPostOfficeSequenceChoicePostOfficeName_ struct {
//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
	PostOfficeNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeName"`

}

//	A Postal van is specific for a route as in Is`rael, Rural route
//	Name of the Postal Route
type XsdGoPkgHasElems_PostalRouteNamechoicesequencePostalRouteTypeschema_PostalRouteName_TxsdPostalRouteTypeSequenceChoicePostalRouteName_ struct {
//	Name of the Postal Route
	PostalRouteNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteName"`

}

//	Number of the Postal Route
type XsdGoPkgHasElem_PostalRouteNumberchoicesequencePostalRouteTypeschema_PostalRouteNumber_TxsdPostalRouteTypeSequenceChoicePostalRouteNumber_ struct {
//	Number of the Postal Route
	PostalRouteNumber *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteNumber"`

}

type TPostalRouteType struct {
	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElem_PostBox

//	Name of the Postal Route
	XsdGoPkgHasElems_PostalRouteNamechoicesequencePostalRouteTypeschema_PostalRouteName_TxsdPostalRouteTypeSequenceChoicePostalRouteName_

//	Number of the Postal Route
	XsdGoPkgHasElem_PostalRouteNumberchoicesequencePostalRouteTypeschema_PostalRouteNumber_TxsdPostalRouteTypeSequenceChoicePostalRouteNumber_

}

type XsdGoPkgHasElem_PostalRoutesequencePostOfficeschema_PostalRoute_TPostalRouteType_ struct {
//	A Postal van is specific for a route as in Is`rael, Rural route
	PostalRoute *TPostalRouteType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRoute"`

}

//	Specification of the number of the postoffice. Common in rural postoffices
//	MS occurs before 62 in MS 62
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence_ struct {
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`

}

type TxsdPostOfficeSequenceChoicePostOfficeNumber struct {
//	MS in MS 62, # in MS # 12, etc.
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasAtts_GrPostal

//	MS occurs before 62 in MS 62
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_PostOfficeNumberchoicesequencePostOfficeschema_PostOfficeNumber_TxsdPostOfficeSequenceChoicePostOfficeNumber_ struct {
//	Specification of the number of the postoffice. Common in rural postoffices
	PostOfficeNumber *TxsdPostOfficeSequenceChoicePostOfficeNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeNumber"`

}

type TxsdPostOffice struct {
//	Could be a Mobile Postoffice Van as in Isreal
	XsdGoPkgHasAttr_Type_XsdtString_

//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
	XsdGoPkgHasElems_PostOfficeNamechoicesequencePostOfficeschema_PostOfficeName_TxsdPostOfficeSequenceChoicePostOfficeName_

//	A Postal van is specific for a route as in Is`rael, Rural route
	XsdGoPkgHasElem_PostalRoutesequencePostOfficeschema_PostalRoute_TPostalRouteType_

//	Specification of the number of the postoffice. Common in rural postoffices
	XsdGoPkgHasElem_PostOfficeNumberchoicesequencePostOfficeschema_PostOfficeNumber_TxsdPostOfficeSequenceChoicePostOfficeNumber_

//	eg. Kottivakkam (P.O) here (P.O) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasElem_PostalCode

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_PostBox

}

type XsdGoPkgHasElem_PostOffice struct {
//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
	PostOffice *TxsdPostOffice `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOffice"`

}

//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
//	Eg. SECTOR occurs before 5 in SECTOR 5
type XsdGoPkgHasAttr_NameNumberOccurrence_TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence_ struct {
	NameNumberOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NameNumberOccurrence,attr"`

}

type TxsdDependentLocalityTypeSequenceDependentLocalityNumber struct {
	XsdGoPkgHasCdata

//	Eg. SECTOR occurs before 5 in SECTOR 5
	XsdGoPkgHasAttr_NameNumberOccurrence_TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence_

	XsdGoPkgHasAtts_GrPostal

}

type XsdGoPkgHasElem_DependentLocalityNumbersequenceDependentLocalityTypeschema_DependentLocalityNumber_TxsdDependentLocalityTypeSequenceDependentLocalityNumber_ struct {
//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
	DependentLocalityNumber *TxsdDependentLocalityTypeSequenceDependentLocalityNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityNumber"`

}

//	"VIA" as in Hill Top VIA Parish where Parish is a locality and Hill Top is a dependent locality
type XsdGoPkgHasAttr_Connector_XsdtString_ struct {
	Connector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Connector,attr"`

}

//	Name of the dependent locality
type XsdGoPkgHasElems_DependentLocalityNamesequenceDependentLocalityTypeschema_DependentLocalityName_TxsdDependentLocalityTypeSequenceDependentLocalityName_ struct {
//	Name of the dependent locality
	DependentLocalityNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityName"`

}

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
type XsdGoPkgHasAttr_UsageType_XsdtString_ struct {
	UsageType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 UsageType,attr"`

}

type TDependentLocalityType struct {
//	Eg. Erode (Dist) where (Dist) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasElem_PostBox

//	"VIA" as in Hill Top VIA Parish where Parish is a locality and Hill Top is a dependent locality
	XsdGoPkgHasAttr_Connector_XsdtString_

//	Name of the dependent locality
	XsdGoPkgHasElems_DependentLocalityNamesequenceDependentLocalityTypeschema_DependentLocalityName_TxsdDependentLocalityTypeSequenceDependentLocalityName_

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	XsdGoPkgHasAttr_UsageType_XsdtString_

	XsdGoPkgHasElem_Thoroughfare

//	City or IndustrialEstate, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	XsdGoPkgHasElem_LargeMailUserchoicesequenceDependentLocalityTypeschema_LargeMailUser_TLargeMailUserType_

	XsdGoPkgHasElem_PostalCode

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	XsdGoPkgHasElem_DependentLocalitysequenceDependentLocalityTypeschema_DependentLocality_TDependentLocalityType_

	XsdGoPkgHasElem_PostOffice

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_Premise

//	A Postal van is specific for a route as in Is`rael, Rural route
	XsdGoPkgHasElem_PostalRoutesequencePostOfficeschema_PostalRoute_TPostalRouteType_

//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
	XsdGoPkgHasElem_DependentLocalityNumbersequenceDependentLocalityTypeschema_DependentLocalityNumber_TxsdDependentLocalityTypeSequenceDependentLocalityNumber_

}

type XsdGoPkgHasElem_DependentLocalitychoicesequenceThoroughfareschema_DependentLocality_TDependentLocalityType_ struct {
//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	DependentLocality *TDependentLocalityType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocality"`

}

type TxsdThoroughfare struct {
//	STS in GEORGE and ADELAIDE STS, RDS IN A and B RDS, etc. Use only when both the street types are the same
	XsdGoPkgHasAttr_DependentThoroughfaresType_XsdtString_

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	XsdGoPkgHasElem_DependentLocalitychoicesequenceThoroughfareschema_DependentLocality_TDependentLocalityType_

	XsdGoPkgHasElems_ThoroughfareNumber

	XsdGoPkgHasElems_ThoroughfareNumberSuffix

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	XsdGoPkgHasElem_ThoroughfareTrailingTypesequenceThoroughfareschema_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	XsdGoPkgHasElems_ThoroughfareNamesequenceThoroughfareschema_ThoroughfareName_ThoroughfareNameType_

	XsdGoPkgHasElem_Premise

//	Does this thoroughfare have a a dependent thoroughfare? Corner of street X, etc
	XsdGoPkgHasAttr_DependentThoroughfares_TxsdThoroughfareDependentThoroughfares_

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	XsdGoPkgHasElem_ThoroughfareLeadingTypesequenceThoroughfareschema_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_

//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
	XsdGoPkgHasElems_ThoroughfareNumberRangechoicesequenceThoroughfareschema_ThoroughfareNumberRange_TxsdThoroughfareSequenceChoiceThoroughfareNumberRange_

//	Corner of Street1 AND Street 2 where AND is the Connector
	XsdGoPkgHasAttr_DependentThoroughfaresConnector_XsdtString_

	XsdGoPkgHasElems_ThoroughfareNumberPrefix

	XsdGoPkgHasAttr_Type_XsdtString_

//	Corner of, Intersection of
	XsdGoPkgHasAttr_DependentThoroughfaresIndicator_XsdtString_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_PostalCode

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	XsdGoPkgHasElem_ThoroughfarePostDirectionsequenceThoroughfareschema_ThoroughfarePostDirection_ThoroughfarePostDirectionType_

//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
	XsdGoPkgHasElem_DependentThoroughfaresequenceThoroughfareschema_DependentThoroughfare_TxsdThoroughfareSequenceDependentThoroughfare_

//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	XsdGoPkgHasElem_ThoroughfarePreDirectionsequenceDependentThoroughfaresequenceThoroughfareschema_ThoroughfarePreDirection_ThoroughfarePreDirectionType_

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from
//	a large mail user address, which contains no street.
	XsdGoPkgHasElem_FirmsequenceSubPremiseTypeschema_Firm_TFirmType_

}

type XsdGoPkgHasElem_Thoroughfare struct {
//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
	Thoroughfare *TxsdThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Thoroughfare"`

}

//	Communication, Contact, etc.
type XsdGoPkgHasAttr_Usage_XsdtString_ struct {
	Usage xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Usage,attr"`

}

//	Container for Address lines
type TAddressLinesType struct {
	XsdGoPkgHasElems_AddressLine

}

type XsdGoPkgHasElem_AddressLineschoicesequenceAddressDetailsschema_AddressLines_TAddressLinesType_ struct {
//	Container for Address lines
	AddressLines *TAddressLinesType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLines"`

}

//	End date of the validity of address
type XsdGoPkgHasAttr_ValidToDate_XsdtString_ struct {
	ValidToDate xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ValidToDate,attr"`

}

//	Specification of a country
//	A country code according to the specified scheme
//	Country code scheme possible values, but not limited to: iso.3166-2, iso.3166-3 for two and three character country codes.
type XsdGoPkgHasAttr_Scheme_XsdtString_ struct {
	Scheme xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Scheme,attr"`

}

type TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode struct {
//	Country code scheme possible values, but not limited to: iso.3166-2, iso.3166-3 for two and three character country codes.
	XsdGoPkgHasAttr_Scheme_XsdtString_

	XsdGoPkgHasAtts_GrPostal

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElems_CountryNameCodesequenceCountrychoicesequenceAddressDetailsschema_CountryNameCode_TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode_ struct {
//	A country code according to the specified scheme
	CountryNameCodes []*TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryNameCode"`

}

//	Specification of the name of a country.
type XsdGoPkgHasElems_CountryName struct {
//	Specification of the name of a country.
	CountryNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryName"`

}

//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
//	Name of the locality
type XsdGoPkgHasElems_LocalityNamesequenceLocalityschema_LocalityName_TxsdLocalitySequenceLocalityName_ struct {
//	Name of the locality
	LocalityNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LocalityName"`

}

type TxsdLocality struct {
	XsdGoPkgHasElem_PostOffice

//	A Postal van is specific for a route as in Is`rael, Rural route
	XsdGoPkgHasElem_PostalRoutesequencePostOfficeschema_PostalRoute_TPostalRouteType_

	XsdGoPkgHasElem_Premise

//	Erode (Dist) where (Dist) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

	XsdGoPkgHasElem_PostalCode

//	Possible values not limited to: City, IndustrialEstate, etc
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_PostBox

//	Name of the locality
	XsdGoPkgHasElems_LocalityNamesequenceLocalityschema_LocalityName_TxsdLocalitySequenceLocalityName_

	XsdGoPkgHasElem_Thoroughfare

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	XsdGoPkgHasElem_DependentLocalitychoicesequenceThoroughfareschema_DependentLocality_TDependentLocalityType_

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	XsdGoPkgHasAttr_UsageType_XsdtString_

//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	XsdGoPkgHasElem_LargeMailUserchoicesequenceDependentLocalityTypeschema_LargeMailUser_TLargeMailUserType_

}

type XsdGoPkgHasElem_Locality struct {
//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
	Locality *TxsdLocality `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Locality"`

}

//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
//	Name of the sub-administrative area
type XsdGoPkgHasElems_SubAdministrativeAreaNamesequenceSubAdministrativeAreasequenceAdministrativeAreaschema_SubAdministrativeAreaName_TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName_ struct {
//	Name of the sub-administrative area
	SubAdministrativeAreaNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeAreaName"`

}

type TxsdAdministrativeAreaSequenceSubAdministrativeArea struct {
//	Name of the sub-administrative area
	XsdGoPkgHasElems_SubAdministrativeAreaNamesequenceSubAdministrativeAreasequenceAdministrativeAreaschema_SubAdministrativeAreaName_TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName_

	XsdGoPkgHasElem_Locality

	XsdGoPkgHasElem_PostOffice

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_PostalCode

//	Province or State or County or Kanton, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	XsdGoPkgHasAttr_UsageType_XsdtString_

//	Erode (Dist) where (Dist) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

}

type XsdGoPkgHasElem_SubAdministrativeAreasequenceAdministrativeAreaschema_SubAdministrativeArea_TxsdAdministrativeAreaSequenceSubAdministrativeArea_ struct {
//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
	SubAdministrativeArea *TxsdAdministrativeAreaSequenceSubAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeArea"`

}

//	Name of the administrative area. eg. MI in USA, NSW in Australia
type XsdGoPkgHasElems_AdministrativeAreaNamesequenceAdministrativeAreaschema_AdministrativeAreaName_TxsdAdministrativeAreaSequenceAdministrativeAreaName_ struct {
//	Name of the administrative area. eg. MI in USA, NSW in Australia
	AdministrativeAreaNames []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeAreaName"`

}

type TxsdAdministrativeArea struct {
//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
	XsdGoPkgHasElem_SubAdministrativeAreasequenceAdministrativeAreaschema_SubAdministrativeArea_TxsdAdministrativeAreaSequenceSubAdministrativeArea_

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	XsdGoPkgHasAttr_UsageType_XsdtString_

//	Erode (Dist) where (Dist) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

//	Province or State or County or Kanton, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	Name of the administrative area. eg. MI in USA, NSW in Australia
	XsdGoPkgHasElems_AdministrativeAreaNamesequenceAdministrativeAreaschema_AdministrativeAreaName_TxsdAdministrativeAreaSequenceAdministrativeAreaName_

	XsdGoPkgHasElem_PostOffice

	XsdGoPkgHasElem_PostalCode

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_Locality

}

type XsdGoPkgHasElem_AdministrativeArea struct {
//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
	AdministrativeArea *TxsdAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeArea"`

}

type TxsdAddressDetailsSequenceChoiceCountry struct {
	XsdGoPkgHasElem_AdministrativeArea

//	A country code according to the specified scheme
	XsdGoPkgHasElems_CountryNameCodesequenceCountrychoicesequenceAddressDetailsschema_CountryNameCode_TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElem_Thoroughfare

	XsdGoPkgHasElems_CountryName

	XsdGoPkgHasElem_Locality

}

type XsdGoPkgHasElem_CountrychoicesequenceAddressDetailsschema_Country_TxsdAddressDetailsSequenceChoiceCountry_ struct {
//	Specification of a country
	Country *TxsdAddressDetailsSequenceChoiceCountry `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Country"`

}

//	Type of address. Example: Postal, residential,business, primary, secondary, etc
type XsdGoPkgHasAttr_AddressType_XsdtString_ struct {
	AddressType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressType,attr"`

}

//	Moved, Living, Investment, Deceased, etc..
type XsdGoPkgHasAttr_CurrentStatus_XsdtString_ struct {
	CurrentStatus xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CurrentStatus,attr"`

}

//	Address as one line of free text
type XsdGoPkgHasElem_AddresschoicesequenceAddressDetailsschema_Address_TxsdAddressDetailsSequenceChoiceAddress_ struct {
//	Address as one line of free text
	Address *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Address"`

}

//	Start Date of the validity of address
type XsdGoPkgHasAttr_ValidFromDate_XsdtString_ struct {
	ValidFromDate xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ValidFromDate,attr"`

}

//	Postal authorities use specific postal service data to expedient delivery of mail
//	Latitude of delivery address
type XsdGoPkgHasElem_AddressLatitudesequencePostalServiceElementssequenceAddressDetailsschema_AddressLatitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude_ struct {
//	Latitude of delivery address
	AddressLatitude *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitude"`

}

//	any postal service elements not covered by the container can be represented using this element
type XsdGoPkgHasElems_SupplementaryPostalServiceDatasequencePostalServiceElementssequenceAddressDetailsschema_SupplementaryPostalServiceData_TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData_ struct {
//	any postal service elements not covered by the container can be represented using this element
	SupplementaryPostalServiceDatas []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SupplementaryPostalServiceData"`

}

//	Directly affects postal service distribution
type XsdGoPkgHasElem_EndorsementLineCodesequencePostalServiceElementssequenceAddressDetailsschema_EndorsementLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode_ struct {
//	Directly affects postal service distribution
	EndorsementLineCode *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 EndorsementLineCode"`

}

//	Required for some postal services
type XsdGoPkgHasElem_KeyLineCodesequencePostalServiceElementssequenceAddressDetailsschema_KeyLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode_ struct {
//	Required for some postal services
	KeyLineCode *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 KeyLineCode"`

}

//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
type TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode struct {
//	Specific to postal service
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_GrPostal

}

type XsdGoPkgHasElem_SortingCodesequencePostalServiceElementssequenceAddressDetailsschema_SortingCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode_ struct {
//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
	SortingCode *TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SortingCode"`

}

//	Longtitude of delivery address
type XsdGoPkgHasElem_AddressLongitudesequencePostalServiceElementssequenceAddressDetailsschema_AddressLongitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude_ struct {
//	Longtitude of delivery address
	AddressLongitude *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitude"`

}

//	Required for some postal services
type XsdGoPkgHasElem_BarcodesequencePostalServiceElementssequenceAddressDetailsschema_Barcode_TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode_ struct {
//	Required for some postal services
	Barcode *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Barcode"`

}

//	Latitude direction of delivery address;N = North and S = South
type XsdGoPkgHasElem_AddressLatitudeDirectionsequencePostalServiceElementssequenceAddressDetailsschema_AddressLatitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection_ struct {
//	Latitude direction of delivery address;N = North and S = South
	AddressLatitudeDirection *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitudeDirection"`

}

//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
//	Type of identifier. eg. DPID as in Australia
type XsdGoPkgHasAttr_IdentifierType_XsdtString_ struct {
	IdentifierType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IdentifierType,attr"`

}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Type_XsdtString_

//	Type of identifier. eg. DPID as in Australia
	XsdGoPkgHasAttr_IdentifierType_XsdtString_

	XsdGoPkgHasAtts_GrPostal

}

type XsdGoPkgHasElems_AddressIdentifiersequencePostalServiceElementssequenceAddressDetailsschema_AddressIdentifier_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier_ struct {
//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
	AddressIdentifiers []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressIdentifier"`

}

//	Longtitude direction of delivery address;N=North and S=South
type XsdGoPkgHasElem_AddressLongitudeDirectionsequencePostalServiceElementssequenceAddressDetailsschema_AddressLongitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection_ struct {
//	Longtitude direction of delivery address;N=North and S=South
	AddressLongitudeDirection *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitudeDirection"`

}

type TxsdAddressDetailsSequencePostalServiceElements struct {
//	Latitude direction of delivery address;N = North and S = South
	XsdGoPkgHasElem_AddressLatitudeDirectionsequencePostalServiceElementssequenceAddressDetailsschema_AddressLatitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection_

//	USPS, ECMA, UN/PROLIST, etc
	XsdGoPkgHasAttr_Type_XsdtString_

//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
	XsdGoPkgHasElems_AddressIdentifiersequencePostalServiceElementssequenceAddressDetailsschema_AddressIdentifier_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier_

//	Longtitude direction of delivery address;N=North and S=South
	XsdGoPkgHasElem_AddressLongitudeDirectionsequencePostalServiceElementssequenceAddressDetailsschema_AddressLongitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection_

//	Latitude of delivery address
	XsdGoPkgHasElem_AddressLatitudesequencePostalServiceElementssequenceAddressDetailsschema_AddressLatitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude_

//	any postal service elements not covered by the container can be represented using this element
	XsdGoPkgHasElems_SupplementaryPostalServiceDatasequencePostalServiceElementssequenceAddressDetailsschema_SupplementaryPostalServiceData_TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData_

//	Directly affects postal service distribution
	XsdGoPkgHasElem_EndorsementLineCodesequencePostalServiceElementssequenceAddressDetailsschema_EndorsementLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode_

//	Required for some postal services
	XsdGoPkgHasElem_KeyLineCodesequencePostalServiceElementssequenceAddressDetailsschema_KeyLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode_

//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
	XsdGoPkgHasElem_SortingCodesequencePostalServiceElementssequenceAddressDetailsschema_SortingCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode_

//	Longtitude of delivery address
	XsdGoPkgHasElem_AddressLongitudesequencePostalServiceElementssequenceAddressDetailsschema_AddressLongitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude_

//	Required for some postal services
	XsdGoPkgHasElem_BarcodesequencePostalServiceElementssequenceAddressDetailsschema_Barcode_TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode_

}

type XsdGoPkgHasElem_PostalServiceElementssequenceAddressDetailsschema_PostalServiceElements_TxsdAddressDetailsSequencePostalServiceElements_ struct {
//	Postal authorities use specific postal service data to expedient delivery of mail
	PostalServiceElements *TxsdAddressDetailsSequencePostalServiceElements `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalServiceElements"`

}

type TAddressDetails struct {
//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
	XsdGoPkgHasElem_AdministrativeArea

//	Type of address. Example: Postal, residential,business, primary, secondary, etc
	XsdGoPkgHasAttr_AddressType_XsdtString_

//	Moved, Living, Investment, Deceased, etc..
	XsdGoPkgHasAttr_CurrentStatus_XsdtString_

//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
//	Address as one line of free text
	XsdGoPkgHasElem_AddresschoicesequenceAddressDetailsschema_Address_TxsdAddressDetailsSequenceChoiceAddress_

	XsdGoPkgHasAtts_GrPostal

//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
	XsdGoPkgHasElem_Locality

//	Start Date of the validity of address
	XsdGoPkgHasAttr_ValidFromDate_XsdtString_

//	Postal authorities use specific postal service data to expedient delivery of mail
	XsdGoPkgHasElem_PostalServiceElementssequenceAddressDetailsschema_PostalServiceElements_TxsdAddressDetailsSequencePostalServiceElements_

//	Key identifier for the element for not reinforced references from other elements. Not required to be unique for the document to be valid, but application may get confused if not unique. Extend this schema adding unique contraint if needed.
	XsdGoPkgHasAttr_AddressDetailsKey_XsdtString_

//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
	XsdGoPkgHasElem_Thoroughfare

//	Communication, Contact, etc.
	XsdGoPkgHasAttr_Usage_XsdtString_

//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
//	Container for Address lines
	XsdGoPkgHasElem_AddressLineschoicesequenceAddressDetailsschema_AddressLines_TAddressLinesType_

//	End date of the validity of address
	XsdGoPkgHasAttr_ValidToDate_XsdtString_

//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
//	Specification of a country
	XsdGoPkgHasElem_CountrychoicesequenceAddressDetailsschema_Country_TxsdAddressDetailsSequenceChoiceCountry_

}

type XsdGoPkgHasElems_AddressDetails struct {
//	This container defines the details of the address. Can define multiple addresses including tracking address history
	AddressDetailses []*TAddressDetails `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetails"`

}

type TxsdXal struct {
//	Specific to DTD to specify the version number of DTD
	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasElems_AddressDetails

}

type XsdGoPkgHasElem_Xal struct {
//	Root element for a list of addresses
	Xal *TxsdXal `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 xAL"`

}

//	Root element for a list of addresses
type XsdGoPkgHasElems_Xal struct {
//	Root element for a list of addresses
	Xals []*TxsdXal `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 xAL"`

}

//	This container defines the details of the address. Can define multiple addresses including tracking address history
type XsdGoPkgHasElem_AddressDetails struct {
//	This container defines the details of the address. Can define multiple addresses including tracking address history
	AddressDetails *TAddressDetails `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetails"`

}

//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
type XsdGoPkgHasElem_AddressLine struct {
//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
	AddressLine *ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLine"`

}

//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
type XsdGoPkgHasElems_Locality struct {
//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
	Localities []*TxsdLocality `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Locality"`

}

//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
type XsdGoPkgHasElems_Thoroughfare struct {
//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
	Thoroughfares []*TxsdThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Thoroughfare"`

}

//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
type XsdGoPkgHasElems_AdministrativeArea struct {
//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
	AdministrativeAreas []*TxsdAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeArea"`

}

//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
type XsdGoPkgHasElems_PostOffice struct {
//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
	PostOffices []*TxsdPostOffice `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOffice"`

}

//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
type XsdGoPkgHasElems_PostalCode struct {
//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
	PostalCodes []*TxsdPostalCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCode"`

}

//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
type XsdGoPkgHasElems_PostBox struct {
//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
	PostBoxs []*TxsdPostBox `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBox"`

}

//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
type XsdGoPkgHasElems_Premise struct {
//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
	Premises []*TxsdPremise `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Premise"`

}

//	Prefix before the number. A in A12 Archer Street
type XsdGoPkgHasElem_ThoroughfareNumberPrefix struct {
//	Prefix before the number. A in A12 Archer Street
	ThoroughfareNumberPrefix *TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberPrefix"`

}

//	Suffix after the number. A in 12A Archer Street
type XsdGoPkgHasElem_ThoroughfareNumberSuffix struct {
//	Suffix after the number. A in 12A Archer Street
	ThoroughfareNumberSuffix *TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberSuffix"`

}

//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
type XsdGoPkgHasElem_ThoroughfareNumber struct {
//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
	ThoroughfareNumber *TxsdThoroughfareNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumber"`

}

//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
type XsdGoPkgHasElem_PremiseNumber struct {
//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
	PremiseNumber *TxsdPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumber"`

}

//	A in A12
type XsdGoPkgHasElem_PremiseNumberPrefix struct {
//	A in A12
	PremiseNumberPrefix *TxsdPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberPrefix"`

}

//	A in 12A
type XsdGoPkgHasElem_PremiseNumberSuffix struct {
//	A in 12A
	PremiseNumberSuffix *TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSuffix"`

}

//	Specification of the name of a country.
type XsdGoPkgHasElem_CountryName struct {
//	Specification of the name of a country.
	CountryName *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryName"`

}
