//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		schemas.opengis.net/kml/2.2.0/ogckml22.xsd
package go_Ogckml22

//	XML Schema Document for OGC KML version 2.2. Copyright (c)
//	2008 Open Geospatial Consortium.

import (
	xal "github.com/metaleap/go-xsd-pkg/docs.oasis-open.org/election/external/xAL.xsd_go"
	atom "github.com/metaleap/go-xsd-pkg/schemas.opengis.net/kml/2.2.0/atom-author-link.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.opengis.net/kml/2.2 id,attr"`
}

type XsdGoPkgHasAttr_TargetId_XsdtNCName_ struct {
	TargetId xsdt.NCName `xml:"http://www.opengis.net/kml/2.2 targetId,attr"`
}

type XsdGoPkgHasAtts_IdAttributes struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_TargetId_XsdtNCName_
}

type XsdGoPkgHasElems_Address struct {
	Addresses []xsdt.String `xml:"http://www.opengis.net/kml/2.2 address"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Address
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Address struct {
	Address xsdt.String `xml:"http://www.opengis.net/kml/2.2 address"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Address
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Altitude struct {
	Altitudes []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 altitude"`
}

//	Returns the default value for Altitude -- 0.0
func (me XsdGoPkgHasElems_Altitude) AltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Altitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Altitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Altitude instance.
func (me *XsdGoPkgHasElems_Altitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Altitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Altitude struct {
	Altitude xsdt.Double `xml:"http://www.opengis.net/kml/2.2 altitude"`
}

//	Returns the default value for Altitude -- 0.0
func (me XsdGoPkgHasElem_Altitude) AltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Altitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Altitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Altitude instance.
func (me *XsdGoPkgHasElem_Altitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Altitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TaltitudeModeEnumType xsdt.String

//	Returns true if the value of this enumerated TaltitudeModeEnumType is "relativeToGround".
func (me TaltitudeModeEnumType) IsRelativeToGround() bool { return me == "relativeToGround" }

//	Since TaltitudeModeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TaltitudeModeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TaltitudeModeEnumType is "absolute".
func (me TaltitudeModeEnumType) IsAbsolute() bool { return me == "absolute" }

//	This convenience method just performs a simple type conversion to TaltitudeModeEnumType's alias type xsdt.String.
func (me TaltitudeModeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TaltitudeModeEnumType is "clampToGround".
func (me TaltitudeModeEnumType) IsClampToGround() bool { return me == "clampToGround" }

//	Since TaltitudeModeEnumType is just a simple String type, this merely returns the current string value.
func (me TaltitudeModeEnumType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_AltitudeMode struct {
	AltitudeMode TaltitudeModeEnumType `xml:"http://www.opengis.net/kml/2.2 altitudeMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AltitudeMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AltitudeMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AltitudeMode instance.
func (me *XsdGoPkgHasElem_AltitudeMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AltitudeMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for AltitudeMode -- "clampToGround"
func (me XsdGoPkgHasElem_AltitudeMode) AltitudeModeDefault() TaltitudeModeEnumType {
	return TaltitudeModeEnumType("clampToGround")
}

type XsdGoPkgHasElem_AltitudeModeGroup struct {
	AltitudeModeGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 altitudeModeGroup"`

	XsdGoPkgHasElem_AltitudeMode
}

//	If the WalkHandlers.XsdGoPkgHasElem_AltitudeModeGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AltitudeModeGroup instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AltitudeModeGroup instance.
func (me *XsdGoPkgHasElem_AltitudeModeGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AltitudeModeGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_AltitudeMode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AltitudeMode struct {
	AltitudeModes []TaltitudeModeEnumType `xml:"http://www.opengis.net/kml/2.2 altitudeMode"`
}

//	Returns the default value for AltitudeMode -- "clampToGround"
func (me XsdGoPkgHasElems_AltitudeMode) AltitudeModeDefault() TaltitudeModeEnumType {
	return TaltitudeModeEnumType("clampToGround")
}

//	If the WalkHandlers.XsdGoPkgHasElems_AltitudeMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AltitudeMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AltitudeMode instance.
func (me *XsdGoPkgHasElems_AltitudeMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AltitudeMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AltitudeModeGroup struct {
	AltitudeModeGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 altitudeModeGroup"`

	XsdGoPkgHasElems_AltitudeMode
}

//	If the WalkHandlers.XsdGoPkgHasElems_AltitudeModeGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AltitudeModeGroup instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AltitudeModeGroup instance.
func (me *XsdGoPkgHasElems_AltitudeModeGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AltitudeModeGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AltitudeMode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TdateTimeType xsdt.String

//	TdateTimeType is an XSD union-type of several types. This is a simple type conversion to XsdtDate, but keep in mind the actual value may or may not be a valid XsdtDate value.
func (me TdateTimeType) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

//	TdateTimeType is an XSD union-type of several types. This is a simple type conversion to XsdtDateTime, but keep in mind the actual value may or may not be a valid XsdtDateTime value.
func (me TdateTimeType) ToXsdtDateTime() xsdt.DateTime { return xsdt.DateTime(me) }

//	Since TdateTimeType is just a simple String type, this merely returns the current string value.
func (me TdateTimeType) String() string { return xsdt.String(me).String() }

//	Since TdateTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdateTimeType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TdateTimeType's alias type xsdt.String.
func (me TdateTimeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TdateTimeType is an XSD union-type of several types. This is a simple type conversion to XsdtGYearMonth, but keep in mind the actual value may or may not be a valid XsdtGYearMonth value.
func (me TdateTimeType) ToXsdtGYearMonth() xsdt.GYearMonth { return xsdt.GYearMonth(me) }

//	TdateTimeType is an XSD union-type of several types. This is a simple type conversion to XsdtGYear, but keep in mind the actual value may or may not be a valid XsdtGYear value.
func (me TdateTimeType) ToXsdtGYear() xsdt.GYear { return xsdt.GYear(me) }

type XsdGoPkgHasElem_Begin struct {
	Begin TdateTimeType `xml:"http://www.opengis.net/kml/2.2 begin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Begin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Begin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Begin instance.
func (me *XsdGoPkgHasElem_Begin) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Begin
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Begin struct {
	Begins []TdateTimeType `xml:"http://www.opengis.net/kml/2.2 begin"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Begin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Begin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Begin instance.
func (me *XsdGoPkgHasElems_Begin) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Begin
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	aabbggrr
//	ffffffff: opaque white
//	ff000000: opaque black
type TcolorType xsdt.HexBinary

//	Since TcolorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcolorType) SetFromString(s string) { (*xsdt.HexBinary)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcolorType's alias type xsdt.HexBinary.
func (me TcolorType) ToXsdtHexBinary() xsdt.HexBinary { return xsdt.HexBinary(me) }

//	Since TcolorType is just a simple String type, this merely returns the current string value.
func (me TcolorType) String() string { return xsdt.HexBinary(me).String() }

type XsdGoPkgHasElems_BgColor struct {
	BgColors []TcolorType `xml:"http://www.opengis.net/kml/2.2 bgColor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BgColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BgColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BgColor instance.
func (me *XsdGoPkgHasElems_BgColor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BgColor
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for BgColor -- "ffffffff"
func (me XsdGoPkgHasElems_BgColor) BgColorDefault() TcolorType { return TcolorType("ffffffff") }

type XsdGoPkgHasElem_BgColor struct {
	BgColor TcolorType `xml:"http://www.opengis.net/kml/2.2 bgColor"`
}

//	Returns the default value for BgColor -- "ffffffff"
func (me XsdGoPkgHasElem_BgColor) BgColorDefault() TcolorType { return TcolorType("ffffffff") }

//	If the WalkHandlers.XsdGoPkgHasElem_BgColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BgColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BgColor instance.
func (me *XsdGoPkgHasElem_BgColor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BgColor
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type Tangle90Type xsdt.Double

//	Since Tangle90Type is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tangle90Type) SetFromString(s string) { (*xsdt.Double)(me).SetFromString(s) }

//	Returns a string representation of this Tangle90Type's current non-string scalar value.
func (me Tangle90Type) String() string { return xsdt.Double(me).String() }

//	This convenience method just performs a simple type conversion to Tangle90Type's alias type xsdt.Double.
func (me Tangle90Type) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

type XsdGoPkgHasElems_BottomFov struct {
	BottomFovs []Tangle90Type `xml:"http://www.opengis.net/kml/2.2 bottomFov"`
}

//	Returns the default value for BottomFov -- 0.0
func (me XsdGoPkgHasElems_BottomFov) BottomFovDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_BottomFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BottomFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BottomFov instance.
func (me *XsdGoPkgHasElems_BottomFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BottomFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BottomFov struct {
	BottomFov Tangle90Type `xml:"http://www.opengis.net/kml/2.2 bottomFov"`
}

//	Returns the default value for BottomFov -- 0.0
func (me XsdGoPkgHasElem_BottomFov) BottomFovDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_BottomFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BottomFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BottomFov instance.
func (me *XsdGoPkgHasElem_BottomFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BottomFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Color struct {
	Colors []TcolorType `xml:"http://www.opengis.net/kml/2.2 color"`
}

//	Returns the default value for Color -- "ffffffff"
func (me XsdGoPkgHasElems_Color) ColorDefault() TcolorType { return TcolorType("ffffffff") }

//	If the WalkHandlers.XsdGoPkgHasElems_Color function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Color instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Color instance.
func (me *XsdGoPkgHasElems_Color) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Color
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Color struct {
	Color TcolorType `xml:"http://www.opengis.net/kml/2.2 color"`
}

//	Returns the default value for Color -- "ffffffff"
func (me XsdGoPkgHasElem_Color) ColorDefault() TcolorType { return TcolorType("ffffffff") }

//	If the WalkHandlers.XsdGoPkgHasElem_Color function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Color instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Color instance.
func (me *XsdGoPkgHasElem_Color) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Color
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TcolorModeEnumType xsdt.String

//	Returns true if the value of this enumerated TcolorModeEnumType is "normal".
func (me TcolorModeEnumType) IsNormal() bool { return me == "normal" }

//	Returns true if the value of this enumerated TcolorModeEnumType is "random".
func (me TcolorModeEnumType) IsRandom() bool { return me == "random" }

//	Since TcolorModeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcolorModeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TcolorModeEnumType is just a simple String type, this merely returns the current string value.
func (me TcolorModeEnumType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcolorModeEnumType's alias type xsdt.String.
func (me TcolorModeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_ColorMode struct {
	ColorMode TcolorModeEnumType `xml:"http://www.opengis.net/kml/2.2 colorMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ColorMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ColorMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ColorMode instance.
func (me *XsdGoPkgHasElem_ColorMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ColorMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ColorMode -- "normal"
func (me XsdGoPkgHasElem_ColorMode) ColorModeDefault() TcolorModeEnumType {
	return TcolorModeEnumType("normal")
}

type XsdGoPkgHasElems_ColorMode struct {
	ColorModes []TcolorModeEnumType `xml:"http://www.opengis.net/kml/2.2 colorMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ColorMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ColorMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ColorMode instance.
func (me *XsdGoPkgHasElems_ColorMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ColorMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ColorMode -- "normal"
func (me XsdGoPkgHasElems_ColorMode) ColorModeDefault() TcolorModeEnumType {
	return TcolorModeEnumType("normal")
}

type XsdGoPkgHasElems_Cookie struct {
	Cookies []xsdt.String `xml:"http://www.opengis.net/kml/2.2 cookie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cookie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cookie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cookie instance.
func (me *XsdGoPkgHasElems_Cookie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Cookie
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Cookie struct {
	Cookie xsdt.String `xml:"http://www.opengis.net/kml/2.2 cookie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cookie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cookie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Cookie instance.
func (me *XsdGoPkgHasElem_Cookie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Cookie
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TcoordinatesType xsdt.String

//	TcoordinatesType declares a String containing a whitespace-separated list of xsdt.String values. This Values() method creates and returns a slice of all elements in that list.
func (me TcoordinatesType) Values() (list []xsdt.String) {
	var svals = xsdt.ListValues(string(me))
	list = make([]xsdt.String, len(svals))
	for i, s := range svals {
		list[i] = xsdt.String(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TcoordinatesType's alias type xsdt.String.
func (me TcoordinatesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TcoordinatesType is just a simple String type, this merely returns the current string value.
func (me TcoordinatesType) String() string { return xsdt.String(me).String() }

//	Since TcoordinatesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcoordinatesType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasElems_Coordinates struct {
	Coordinateses []TcoordinatesType `xml:"http://www.opengis.net/kml/2.2 coordinates"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Coordinates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Coordinates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Coordinates instance.
func (me *XsdGoPkgHasElems_Coordinates) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Coordinates
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Coordinates struct {
	Coordinates TcoordinatesType `xml:"http://www.opengis.net/kml/2.2 coordinates"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Coordinates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Coordinates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Coordinates instance.
func (me *XsdGoPkgHasElem_Coordinates) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Coordinates
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Description struct {
	Descriptions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 description"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Description instance.
func (me *XsdGoPkgHasElems_Description) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Description
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Description struct {
	Description xsdt.String `xml:"http://www.opengis.net/kml/2.2 description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Description instance.
func (me *XsdGoPkgHasElem_Description) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Description
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_DisplayName struct {
	DisplayNames []xsdt.String `xml:"http://www.opengis.net/kml/2.2 displayName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisplayName instance.
func (me *XsdGoPkgHasElems_DisplayName) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DisplayName
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_DisplayName struct {
	DisplayName xsdt.String `xml:"http://www.opengis.net/kml/2.2 displayName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DisplayName instance.
func (me *XsdGoPkgHasElem_DisplayName) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DisplayName
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TdisplayModeEnumType xsdt.String

//	Returns true if the value of this enumerated TdisplayModeEnumType is "default".
func (me TdisplayModeEnumType) IsDefault() bool { return me == "default" }

//	Returns true if the value of this enumerated TdisplayModeEnumType is "hide".
func (me TdisplayModeEnumType) IsHide() bool { return me == "hide" }

//	Since TdisplayModeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdisplayModeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TdisplayModeEnumType is just a simple String type, this merely returns the current string value.
func (me TdisplayModeEnumType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TdisplayModeEnumType's alias type xsdt.String.
func (me TdisplayModeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_DisplayMode struct {
	DisplayModes []TdisplayModeEnumType `xml:"http://www.opengis.net/kml/2.2 displayMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisplayMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisplayMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisplayMode instance.
func (me *XsdGoPkgHasElems_DisplayMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DisplayMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for DisplayMode -- "default"
func (me XsdGoPkgHasElems_DisplayMode) DisplayModeDefault() TdisplayModeEnumType {
	return TdisplayModeEnumType("default")
}

type XsdGoPkgHasElem_DisplayMode struct {
	DisplayMode TdisplayModeEnumType `xml:"http://www.opengis.net/kml/2.2 displayMode"`
}

//	Returns the default value for DisplayMode -- "default"
func (me XsdGoPkgHasElem_DisplayMode) DisplayModeDefault() TdisplayModeEnumType {
	return TdisplayModeEnumType("default")
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisplayMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisplayMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DisplayMode instance.
func (me *XsdGoPkgHasElem_DisplayMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DisplayMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_DrawOrder struct {
	DrawOrder xsdt.Int `xml:"http://www.opengis.net/kml/2.2 drawOrder"`
}

//	Returns the default value for DrawOrder -- 0
func (me XsdGoPkgHasElem_DrawOrder) DrawOrderDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_DrawOrder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DrawOrder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DrawOrder instance.
func (me *XsdGoPkgHasElem_DrawOrder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DrawOrder
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_DrawOrder struct {
	DrawOrders []xsdt.Int `xml:"http://www.opengis.net/kml/2.2 drawOrder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DrawOrder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DrawOrder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DrawOrder instance.
func (me *XsdGoPkgHasElems_DrawOrder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DrawOrder
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for DrawOrder -- 0
func (me XsdGoPkgHasElems_DrawOrder) DrawOrderDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

type Tangle180Type xsdt.Double

//	Since Tangle180Type is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tangle180Type) SetFromString(s string) { (*xsdt.Double)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tangle180Type's alias type xsdt.Double.
func (me Tangle180Type) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

//	Returns a string representation of this Tangle180Type's current non-string scalar value.
func (me Tangle180Type) String() string { return xsdt.Double(me).String() }

type XsdGoPkgHasElem_East struct {
	East Tangle180Type `xml:"http://www.opengis.net/kml/2.2 east"`
}

//	Returns the default value for East -- 180.0
func (me XsdGoPkgHasElem_East) EastDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("180.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_East function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_East instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_East instance.
func (me *XsdGoPkgHasElem_East) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_East
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_East struct {
	Easts []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 east"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_East function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_East instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_East instance.
func (me *XsdGoPkgHasElems_East) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_East
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for East -- 180.0
func (me XsdGoPkgHasElems_East) EastDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("180.0")
	return *x
}

type XsdGoPkgHasElem_End struct {
	End TdateTimeType `xml:"http://www.opengis.net/kml/2.2 end"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_End function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_End instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_End instance.
func (me *XsdGoPkgHasElem_End) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_End
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_End struct {
	Ends []TdateTimeType `xml:"http://www.opengis.net/kml/2.2 end"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_End function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_End instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_End instance.
func (me *XsdGoPkgHasElems_End) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_End
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Expires struct {
	Expireses []TdateTimeType `xml:"http://www.opengis.net/kml/2.2 expires"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Expires function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Expires instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Expires instance.
func (me *XsdGoPkgHasElems_Expires) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Expires
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Expires struct {
	Expires TdateTimeType `xml:"http://www.opengis.net/kml/2.2 expires"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Expires function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Expires instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Expires instance.
func (me *XsdGoPkgHasElem_Expires) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Expires
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Extrude struct {
	Extrudes []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 extrude"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extrude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extrude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extrude instance.
func (me *XsdGoPkgHasElems_Extrude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Extrude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Extrude -- 0
func (me XsdGoPkgHasElems_Extrude) ExtrudeDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElem_Extrude struct {
	Extrude xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 extrude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extrude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extrude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Extrude instance.
func (me *XsdGoPkgHasElem_Extrude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Extrude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Extrude -- 0
func (me XsdGoPkgHasElem_Extrude) ExtrudeDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElem_Fill struct {
	Fill xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 fill"`
}

//	Returns the default value for Fill -- 1
func (me XsdGoPkgHasElem_Fill) FillDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fill function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fill instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Fill instance.
func (me *XsdGoPkgHasElem_Fill) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Fill
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Fill struct {
	Fills []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 fill"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fill function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fill instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fill instance.
func (me *XsdGoPkgHasElems_Fill) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Fill
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Fill -- 1
func (me XsdGoPkgHasElems_Fill) FillDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

type XsdGoPkgHasElem_FlyToView struct {
	FlyToView xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 flyToView"`
}

//	Returns the default value for FlyToView -- 0
func (me XsdGoPkgHasElem_FlyToView) FlyToViewDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_FlyToView function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FlyToView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FlyToView instance.
func (me *XsdGoPkgHasElem_FlyToView) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_FlyToView
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_FlyToView struct {
	FlyToViews []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 flyToView"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FlyToView function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FlyToView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FlyToView instance.
func (me *XsdGoPkgHasElems_FlyToView) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_FlyToView
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for FlyToView -- 0
func (me XsdGoPkgHasElems_FlyToView) FlyToViewDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type TgridOriginEnumType xsdt.String

//	Since TgridOriginEnumType is just a simple String type, this merely returns the current string value.
func (me TgridOriginEnumType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TgridOriginEnumType's alias type xsdt.String.
func (me TgridOriginEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TgridOriginEnumType is "lowerLeft".
func (me TgridOriginEnumType) IsLowerLeft() bool { return me == "lowerLeft" }

//	Since TgridOriginEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TgridOriginEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TgridOriginEnumType is "upperLeft".
func (me TgridOriginEnumType) IsUpperLeft() bool { return me == "upperLeft" }

type XsdGoPkgHasElem_GridOrigin struct {
	GridOrigin TgridOriginEnumType `xml:"http://www.opengis.net/kml/2.2 gridOrigin"`
}

//	Returns the default value for GridOrigin -- "lowerLeft"
func (me XsdGoPkgHasElem_GridOrigin) GridOriginDefault() TgridOriginEnumType {
	return TgridOriginEnumType("lowerLeft")
}

//	If the WalkHandlers.XsdGoPkgHasElem_GridOrigin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GridOrigin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GridOrigin instance.
func (me *XsdGoPkgHasElem_GridOrigin) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_GridOrigin
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_GridOrigin struct {
	GridOrigins []TgridOriginEnumType `xml:"http://www.opengis.net/kml/2.2 gridOrigin"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GridOrigin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GridOrigin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GridOrigin instance.
func (me *XsdGoPkgHasElems_GridOrigin) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_GridOrigin
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for GridOrigin -- "lowerLeft"
func (me XsdGoPkgHasElems_GridOrigin) GridOriginDefault() TgridOriginEnumType {
	return TgridOriginEnumType("lowerLeft")
}

type Tangle360Type xsdt.Double

//	Returns a string representation of this Tangle360Type's current non-string scalar value.
func (me Tangle360Type) String() string { return xsdt.Double(me).String() }

//	This convenience method just performs a simple type conversion to Tangle360Type's alias type xsdt.Double.
func (me Tangle360Type) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

//	Since Tangle360Type is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tangle360Type) SetFromString(s string) { (*xsdt.Double)(me).SetFromString(s) }

type XsdGoPkgHasElems_Heading struct {
	Headings []Tangle360Type `xml:"http://www.opengis.net/kml/2.2 heading"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Heading function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Heading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Heading instance.
func (me *XsdGoPkgHasElems_Heading) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Heading
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Heading -- 0.0
func (me XsdGoPkgHasElems_Heading) HeadingDefault() Tangle360Type {
	var x = new(Tangle360Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_Heading struct {
	Heading Tangle360Type `xml:"http://www.opengis.net/kml/2.2 heading"`
}

//	Returns the default value for Heading -- 0.0
func (me XsdGoPkgHasElem_Heading) HeadingDefault() Tangle360Type {
	var x = new(Tangle360Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Heading function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Heading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Heading instance.
func (me *XsdGoPkgHasElem_Heading) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Heading
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	not anyURI due to $[x] substitution in
//	PhotoOverlay
type XsdGoPkgHasElems_Href struct {
	//	not anyURI due to $[x] substitution in
	//	PhotoOverlay
	Hrefs []xsdt.String `xml:"http://www.opengis.net/kml/2.2 href"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Href function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Href instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Href instance.
func (me *XsdGoPkgHasElems_Href) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Href
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	not anyURI due to $[x] substitution in
//	PhotoOverlay
type XsdGoPkgHasElem_Href struct {
	//	not anyURI due to $[x] substitution in
	//	PhotoOverlay
	Href xsdt.String `xml:"http://www.opengis.net/kml/2.2 href"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Href function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Href instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Href instance.
func (me *XsdGoPkgHasElem_Href) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Href
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_HttpQuery struct {
	HttpQueries []xsdt.String `xml:"http://www.opengis.net/kml/2.2 httpQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HttpQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HttpQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HttpQuery instance.
func (me *XsdGoPkgHasElems_HttpQuery) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_HttpQuery
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_HttpQuery struct {
	HttpQuery xsdt.String `xml:"http://www.opengis.net/kml/2.2 httpQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HttpQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HttpQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HttpQuery instance.
func (me *XsdGoPkgHasElem_HttpQuery) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_HttpQuery
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Y_XsdtDouble_10 struct {
	Y xsdt.Double `xml:"http://www.opengis.net/kml/2.2 y,attr"`
}

//	Returns the default value for Y -- 1.0
func (me XsdGoPkgHasAttr_Y_XsdtDouble_10) YDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasAttr_X_XsdtDouble_10 struct {
	X xsdt.Double `xml:"http://www.opengis.net/kml/2.2 x,attr"`
}

//	Returns the default value for X -- 1.0
func (me XsdGoPkgHasAttr_X_XsdtDouble_10) XDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type TunitsEnumType xsdt.String

//	Returns true if the value of this enumerated TunitsEnumType is "pixels".
func (me TunitsEnumType) IsPixels() bool { return me == "pixels" }

//	Returns true if the value of this enumerated TunitsEnumType is "fraction".
func (me TunitsEnumType) IsFraction() bool { return me == "fraction" }

//	Since TunitsEnumType is just a simple String type, this merely returns the current string value.
func (me TunitsEnumType) String() string { return xsdt.String(me).String() }

//	Since TunitsEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TunitsEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TunitsEnumType's alias type xsdt.String.
func (me TunitsEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TunitsEnumType is "insetPixels".
func (me TunitsEnumType) IsInsetPixels() bool { return me == "insetPixels" }

type XsdGoPkgHasAttr_Yunits_TunitsEnumType_Fraction struct {
	Yunits TunitsEnumType `xml:"http://www.opengis.net/kml/2.2 yunits,attr"`
}

//	Returns the default value for Yunits -- "fraction"
func (me XsdGoPkgHasAttr_Yunits_TunitsEnumType_Fraction) YunitsDefault() TunitsEnumType {
	return TunitsEnumType("fraction")
}

type XsdGoPkgHasAttr_Xunits_TunitsEnumType_Fraction struct {
	Xunits TunitsEnumType `xml:"http://www.opengis.net/kml/2.2 xunits,attr"`
}

//	Returns the default value for Xunits -- "fraction"
func (me XsdGoPkgHasAttr_Xunits_TunitsEnumType_Fraction) XunitsDefault() TunitsEnumType {
	return TunitsEnumType("fraction")
}

type Tvec2Type struct {
	XsdGoPkgHasAttr_Y_XsdtDouble_10

	XsdGoPkgHasAttr_X_XsdtDouble_10

	XsdGoPkgHasAttr_Yunits_TunitsEnumType_Fraction

	XsdGoPkgHasAttr_Xunits_TunitsEnumType_Fraction
}

//	If the WalkHandlers.Tvec2Type function is not nil (ie. was set by outside code), calls it with this Tvec2Type instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this Tvec2Type instance.
func (me *Tvec2Type) Walk() {
	fn := WalkHandlers.Tvec2Type
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_HotSpot struct {
	HotSpots []*Tvec2Type `xml:"http://www.opengis.net/kml/2.2 hotSpot"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HotSpot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HotSpot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HotSpot instance.
func (me *XsdGoPkgHasElems_HotSpot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_HotSpot
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.HotSpots {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_HotSpot struct {
	HotSpot *Tvec2Type `xml:"http://www.opengis.net/kml/2.2 hotSpot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HotSpot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HotSpot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HotSpot instance.
func (me *XsdGoPkgHasElem_HotSpot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_HotSpot
	if fn != nil {
		fn(me, true)
	}
	me.HotSpot.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TstyleStateEnumType xsdt.String

//	Returns true if the value of this enumerated TstyleStateEnumType is "highlight".
func (me TstyleStateEnumType) IsHighlight() bool { return me == "highlight" }

//	Since TstyleStateEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TstyleStateEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TstyleStateEnumType's alias type xsdt.String.
func (me TstyleStateEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TstyleStateEnumType is "normal".
func (me TstyleStateEnumType) IsNormal() bool { return me == "normal" }

//	Since TstyleStateEnumType is just a simple String type, this merely returns the current string value.
func (me TstyleStateEnumType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_Key struct {
	Key TstyleStateEnumType `xml:"http://www.opengis.net/kml/2.2 key"`
}

//	Returns the default value for Key -- "normal"
func (me XsdGoPkgHasElem_Key) KeyDefault() TstyleStateEnumType { return TstyleStateEnumType("normal") }

//	If the WalkHandlers.XsdGoPkgHasElem_Key function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Key instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Key instance.
func (me *XsdGoPkgHasElem_Key) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Key
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Key struct {
	Keys []TstyleStateEnumType `xml:"http://www.opengis.net/kml/2.2 key"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Key function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Key instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Key instance.
func (me *XsdGoPkgHasElems_Key) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Key
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Key -- "normal"
func (me XsdGoPkgHasElems_Key) KeyDefault() TstyleStateEnumType { return TstyleStateEnumType("normal") }

type XsdGoPkgHasElems_Latitude struct {
	Latitudes []Tangle90Type `xml:"http://www.opengis.net/kml/2.2 latitude"`
}

//	Returns the default value for Latitude -- 0.0
func (me XsdGoPkgHasElems_Latitude) LatitudeDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Latitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Latitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Latitude instance.
func (me *XsdGoPkgHasElems_Latitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Latitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Latitude struct {
	Latitude Tangle90Type `xml:"http://www.opengis.net/kml/2.2 latitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Latitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Latitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Latitude instance.
func (me *XsdGoPkgHasElem_Latitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Latitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Latitude -- 0.0
func (me XsdGoPkgHasElem_Latitude) LatitudeDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_LeftFov struct {
	LeftFov Tangle180Type `xml:"http://www.opengis.net/kml/2.2 leftFov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LeftFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LeftFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LeftFov instance.
func (me *XsdGoPkgHasElem_LeftFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LeftFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for LeftFov -- 0.0
func (me XsdGoPkgHasElem_LeftFov) LeftFovDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_LeftFov struct {
	LeftFovs []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 leftFov"`
}

//	Returns the default value for LeftFov -- 0.0
func (me XsdGoPkgHasElems_LeftFov) LeftFovDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_LeftFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LeftFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LeftFov instance.
func (me *XsdGoPkgHasElems_LeftFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LeftFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinkDescription struct {
	LinkDescription xsdt.String `xml:"http://www.opengis.net/kml/2.2 linkDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinkDescription instance.
func (me *XsdGoPkgHasElem_LinkDescription) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinkDescription
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinkDescription struct {
	LinkDescriptions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 linkDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkDescription instance.
func (me *XsdGoPkgHasElems_LinkDescription) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinkDescription
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinkName struct {
	LinkName xsdt.String `xml:"http://www.opengis.net/kml/2.2 linkName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinkName instance.
func (me *XsdGoPkgHasElem_LinkName) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinkName
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinkName struct {
	LinkNames []xsdt.String `xml:"http://www.opengis.net/kml/2.2 linkName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkName instance.
func (me *XsdGoPkgHasElems_LinkName) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinkName
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_MaxLines_XsdtInt_2 struct {
	MaxLines xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxLines,attr"`
}

//	Returns the default value for MaxLines -- 2
func (me XsdGoPkgHasAttr_MaxLines_XsdtInt_2) MaxLinesDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("2")
	return *x
}

type TSnippetType struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	XsdGoPkgHasAttr_MaxLines_XsdtInt_2
}

//	If the WalkHandlers.TSnippetType function is not nil (ie. was set by outside code), calls it with this TSnippetType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TSnippetType instance.
func (me *TSnippetType) Walk() {
	fn := WalkHandlers.TSnippetType
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TSnippetType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_LinkSnippet struct {
	LinkSnippet *TSnippetType `xml:"http://www.opengis.net/kml/2.2 linkSnippet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkSnippet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkSnippet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinkSnippet instance.
func (me *XsdGoPkgHasElem_LinkSnippet) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinkSnippet
	if fn != nil {
		fn(me, true)
	}
	me.LinkSnippet.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinkSnippet struct {
	LinkSnippets []*TSnippetType `xml:"http://www.opengis.net/kml/2.2 linkSnippet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkSnippet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkSnippet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkSnippet instance.
func (me *XsdGoPkgHasElems_LinkSnippet) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinkSnippet
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LinkSnippets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TlistItemTypeEnumType xsdt.String

//	Since TlistItemTypeEnumType is just a simple String type, this merely returns the current string value.
func (me TlistItemTypeEnumType) String() string { return xsdt.String(me).String() }

//	Since TlistItemTypeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistItemTypeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TlistItemTypeEnumType is "checkOffOnly".
func (me TlistItemTypeEnumType) IsCheckOffOnly() bool { return me == "checkOffOnly" }

//	Returns true if the value of this enumerated TlistItemTypeEnumType is "check".
func (me TlistItemTypeEnumType) IsCheck() bool { return me == "check" }

//	Returns true if the value of this enumerated TlistItemTypeEnumType is "radioFolder".
func (me TlistItemTypeEnumType) IsRadioFolder() bool { return me == "radioFolder" }

//	Returns true if the value of this enumerated TlistItemTypeEnumType is "checkHideChildren".
func (me TlistItemTypeEnumType) IsCheckHideChildren() bool { return me == "checkHideChildren" }

//	This convenience method just performs a simple type conversion to TlistItemTypeEnumType's alias type xsdt.String.
func (me TlistItemTypeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_ListItemType struct {
	ListItemTypes []TlistItemTypeEnumType `xml:"http://www.opengis.net/kml/2.2 listItemType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ListItemType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ListItemType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ListItemType instance.
func (me *XsdGoPkgHasElems_ListItemType) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ListItemType
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ListItemType -- "check"
func (me XsdGoPkgHasElems_ListItemType) ListItemTypeDefault() TlistItemTypeEnumType {
	return TlistItemTypeEnumType("check")
}

type XsdGoPkgHasElem_ListItemType struct {
	ListItemType TlistItemTypeEnumType `xml:"http://www.opengis.net/kml/2.2 listItemType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ListItemType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ListItemType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ListItemType instance.
func (me *XsdGoPkgHasElem_ListItemType) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ListItemType
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ListItemType -- "check"
func (me XsdGoPkgHasElem_ListItemType) ListItemTypeDefault() TlistItemTypeEnumType {
	return TlistItemTypeEnumType("check")
}

type XsdGoPkgHasElem_Longitude struct {
	Longitude Tangle180Type `xml:"http://www.opengis.net/kml/2.2 longitude"`
}

//	Returns the default value for Longitude -- 0.0
func (me XsdGoPkgHasElem_Longitude) LongitudeDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Longitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Longitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Longitude instance.
func (me *XsdGoPkgHasElem_Longitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Longitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Longitude struct {
	Longitudes []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 longitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Longitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Longitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Longitude instance.
func (me *XsdGoPkgHasElems_Longitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Longitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Longitude -- 0.0
func (me XsdGoPkgHasElems_Longitude) LongitudeDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_MaxSnippetLines struct {
	MaxSnippetLines xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxSnippetLines"`
}

//	Returns the default value for MaxSnippetLines -- 2
func (me XsdGoPkgHasElem_MaxSnippetLines) MaxSnippetLinesDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("2")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxSnippetLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxSnippetLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxSnippetLines instance.
func (me *XsdGoPkgHasElem_MaxSnippetLines) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxSnippetLines
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxSnippetLines struct {
	MaxSnippetLineses []xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxSnippetLines"`
}

//	Returns the default value for MaxSnippetLines -- 2
func (me XsdGoPkgHasElems_MaxSnippetLines) MaxSnippetLinesDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("2")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxSnippetLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxSnippetLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxSnippetLines instance.
func (me *XsdGoPkgHasElems_MaxSnippetLines) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxSnippetLines
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MaxSessionLength struct {
	MaxSessionLength xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxSessionLength"`
}

//	Returns the default value for MaxSessionLength -- -1.0
func (me XsdGoPkgHasElem_MaxSessionLength) MaxSessionLengthDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("-1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxSessionLength function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxSessionLength instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxSessionLength instance.
func (me *XsdGoPkgHasElem_MaxSessionLength) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxSessionLength
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxSessionLength struct {
	MaxSessionLengths []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxSessionLength"`
}

//	Returns the default value for MaxSessionLength -- -1.0
func (me XsdGoPkgHasElems_MaxSessionLength) MaxSessionLengthDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("-1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxSessionLength function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxSessionLength instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxSessionLength instance.
func (me *XsdGoPkgHasElems_MaxSessionLength) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxSessionLength
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Message struct {
	Messages []xsdt.String `xml:"http://www.opengis.net/kml/2.2 message"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Message function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Message instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Message instance.
func (me *XsdGoPkgHasElems_Message) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Message
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Message struct {
	Message xsdt.String `xml:"http://www.opengis.net/kml/2.2 message"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Message function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Message instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Message instance.
func (me *XsdGoPkgHasElem_Message) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Message
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MinAltitude struct {
	MinAltitude xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minAltitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MinAltitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MinAltitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MinAltitude instance.
func (me *XsdGoPkgHasElem_MinAltitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MinAltitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinAltitude -- 0.0
func (me XsdGoPkgHasElem_MinAltitude) MinAltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_MinAltitude struct {
	MinAltitudes []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minAltitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MinAltitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MinAltitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MinAltitude instance.
func (me *XsdGoPkgHasElems_MinAltitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MinAltitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinAltitude -- 0.0
func (me XsdGoPkgHasElems_MinAltitude) MinAltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_MinFadeExtent struct {
	MinFadeExtents []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minFadeExtent"`
}

//	Returns the default value for MinFadeExtent -- 0.0
func (me XsdGoPkgHasElems_MinFadeExtent) MinFadeExtentDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MinFadeExtent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MinFadeExtent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MinFadeExtent instance.
func (me *XsdGoPkgHasElems_MinFadeExtent) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MinFadeExtent
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MinFadeExtent struct {
	MinFadeExtent xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minFadeExtent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MinFadeExtent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MinFadeExtent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MinFadeExtent instance.
func (me *XsdGoPkgHasElem_MinFadeExtent) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MinFadeExtent
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinFadeExtent -- 0.0
func (me XsdGoPkgHasElem_MinFadeExtent) MinFadeExtentDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_MinLodPixels struct {
	MinLodPixels xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minLodPixels"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MinLodPixels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MinLodPixels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MinLodPixels instance.
func (me *XsdGoPkgHasElem_MinLodPixels) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MinLodPixels
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinLodPixels -- 0.0
func (me XsdGoPkgHasElem_MinLodPixels) MinLodPixelsDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_MinLodPixels struct {
	MinLodPixelses []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minLodPixels"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MinLodPixels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MinLodPixels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MinLodPixels instance.
func (me *XsdGoPkgHasElems_MinLodPixels) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MinLodPixels
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinLodPixels -- 0.0
func (me XsdGoPkgHasElems_MinLodPixels) MinLodPixelsDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_MinRefreshPeriod struct {
	MinRefreshPeriod xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minRefreshPeriod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MinRefreshPeriod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MinRefreshPeriod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MinRefreshPeriod instance.
func (me *XsdGoPkgHasElem_MinRefreshPeriod) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MinRefreshPeriod
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinRefreshPeriod -- 0.0
func (me XsdGoPkgHasElem_MinRefreshPeriod) MinRefreshPeriodDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_MinRefreshPeriod struct {
	MinRefreshPeriods []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 minRefreshPeriod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MinRefreshPeriod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MinRefreshPeriod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MinRefreshPeriod instance.
func (me *XsdGoPkgHasElems_MinRefreshPeriod) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MinRefreshPeriod
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MinRefreshPeriod -- 0.0
func (me XsdGoPkgHasElems_MinRefreshPeriod) MinRefreshPeriodDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_MaxAltitude struct {
	MaxAltitude xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxAltitude"`
}

//	Returns the default value for MaxAltitude -- 0.0
func (me XsdGoPkgHasElem_MaxAltitude) MaxAltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxAltitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxAltitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxAltitude instance.
func (me *XsdGoPkgHasElem_MaxAltitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxAltitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxAltitude struct {
	MaxAltitudes []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxAltitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxAltitude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxAltitude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxAltitude instance.
func (me *XsdGoPkgHasElems_MaxAltitude) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxAltitude
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MaxAltitude -- 0.0
func (me XsdGoPkgHasElems_MaxAltitude) MaxAltitudeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_MaxFadeExtent struct {
	MaxFadeExtent xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxFadeExtent"`
}

//	Returns the default value for MaxFadeExtent -- 0.0
func (me XsdGoPkgHasElem_MaxFadeExtent) MaxFadeExtentDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxFadeExtent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxFadeExtent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxFadeExtent instance.
func (me *XsdGoPkgHasElem_MaxFadeExtent) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxFadeExtent
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxFadeExtent struct {
	MaxFadeExtents []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxFadeExtent"`
}

//	Returns the default value for MaxFadeExtent -- 0.0
func (me XsdGoPkgHasElems_MaxFadeExtent) MaxFadeExtentDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxFadeExtent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxFadeExtent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxFadeExtent instance.
func (me *XsdGoPkgHasElems_MaxFadeExtent) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxFadeExtent
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxLodPixels struct {
	MaxLodPixelses []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxLodPixels"`
}

//	Returns the default value for MaxLodPixels -- -1.0
func (me XsdGoPkgHasElems_MaxLodPixels) MaxLodPixelsDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("-1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxLodPixels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxLodPixels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxLodPixels instance.
func (me *XsdGoPkgHasElems_MaxLodPixels) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxLodPixels
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MaxLodPixels struct {
	MaxLodPixels xsdt.Double `xml:"http://www.opengis.net/kml/2.2 maxLodPixels"`
}

//	Returns the default value for MaxLodPixels -- -1.0
func (me XsdGoPkgHasElem_MaxLodPixels) MaxLodPixelsDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("-1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxLodPixels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxLodPixels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxLodPixels instance.
func (me *XsdGoPkgHasElem_MaxLodPixels) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxLodPixels
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MaxHeight struct {
	MaxHeight xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxHeight"`
}

//	Returns the default value for MaxHeight -- 0
func (me XsdGoPkgHasElem_MaxHeight) MaxHeightDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxHeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxHeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxHeight instance.
func (me *XsdGoPkgHasElem_MaxHeight) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxHeight
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxHeight struct {
	MaxHeights []xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxHeight"`
}

//	Returns the default value for MaxHeight -- 0
func (me XsdGoPkgHasElems_MaxHeight) MaxHeightDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxHeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxHeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxHeight instance.
func (me *XsdGoPkgHasElems_MaxHeight) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxHeight
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MaxWidth struct {
	MaxWidth xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxWidth"`
}

//	Returns the default value for MaxWidth -- 0
func (me XsdGoPkgHasElem_MaxWidth) MaxWidthDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxWidth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxWidth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxWidth instance.
func (me *XsdGoPkgHasElem_MaxWidth) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MaxWidth
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MaxWidth struct {
	MaxWidths []xsdt.Int `xml:"http://www.opengis.net/kml/2.2 maxWidth"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxWidth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxWidth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxWidth instance.
func (me *XsdGoPkgHasElems_MaxWidth) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MaxWidth
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for MaxWidth -- 0
func (me XsdGoPkgHasElems_MaxWidth) MaxWidthDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElem_Name struct {
	Name xsdt.String `xml:"http://www.opengis.net/kml/2.2 name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Name function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Name instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Name instance.
func (me *XsdGoPkgHasElem_Name) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Name
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Name struct {
	Names []xsdt.String `xml:"http://www.opengis.net/kml/2.2 name"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Name function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Name instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Name instance.
func (me *XsdGoPkgHasElems_Name) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Name
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Near struct {
	Near xsdt.Double `xml:"http://www.opengis.net/kml/2.2 near"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Near function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Near instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Near instance.
func (me *XsdGoPkgHasElem_Near) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Near
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Near -- 0.0
func (me XsdGoPkgHasElem_Near) NearDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_Near struct {
	Nears []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 near"`
}

//	Returns the default value for Near -- 0.0
func (me XsdGoPkgHasElems_Near) NearDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Near function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Near instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Near instance.
func (me *XsdGoPkgHasElems_Near) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Near
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_North struct {
	Norths []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 north"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_North function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_North instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_North instance.
func (me *XsdGoPkgHasElems_North) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_North
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for North -- 180.0
func (me XsdGoPkgHasElems_North) NorthDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("180.0")
	return *x
}

type XsdGoPkgHasElem_North struct {
	North Tangle180Type `xml:"http://www.opengis.net/kml/2.2 north"`
}

//	Returns the default value for North -- 180.0
func (me XsdGoPkgHasElem_North) NorthDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("180.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_North function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_North instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_North instance.
func (me *XsdGoPkgHasElem_North) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_North
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Open struct {
	Open xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 open"`
}

//	Returns the default value for Open -- 0
func (me XsdGoPkgHasElem_Open) OpenDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Open function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Open instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Open instance.
func (me *XsdGoPkgHasElem_Open) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Open
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Open struct {
	Opens []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 open"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Open function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Open instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Open instance.
func (me *XsdGoPkgHasElems_Open) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Open
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Open -- 0
func (me XsdGoPkgHasElems_Open) OpenDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElem_Outline struct {
	Outline xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 outline"`
}

//	Returns the default value for Outline -- 1
func (me XsdGoPkgHasElem_Outline) OutlineDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Outline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Outline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Outline instance.
func (me *XsdGoPkgHasElem_Outline) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Outline
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Outline struct {
	Outlines []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 outline"`
}

//	Returns the default value for Outline -- 1
func (me XsdGoPkgHasElems_Outline) OutlineDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Outline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Outline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Outline instance.
func (me *XsdGoPkgHasElems_Outline) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Outline
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_OverlayXY struct {
	OverlayXYs []*Tvec2Type `xml:"http://www.opengis.net/kml/2.2 overlayXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OverlayXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OverlayXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OverlayXY instance.
func (me *XsdGoPkgHasElems_OverlayXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_OverlayXY
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.OverlayXYs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_OverlayXY struct {
	OverlayXY *Tvec2Type `xml:"http://www.opengis.net/kml/2.2 overlayXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OverlayXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OverlayXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OverlayXY instance.
func (me *XsdGoPkgHasElem_OverlayXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_OverlayXY
	if fn != nil {
		fn(me, true)
	}
	me.OverlayXY.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PhoneNumber struct {
	PhoneNumbers []xsdt.String `xml:"http://www.opengis.net/kml/2.2 phoneNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhoneNumber instance.
func (me *XsdGoPkgHasElems_PhoneNumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PhoneNumber
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PhoneNumber struct {
	PhoneNumber xsdt.String `xml:"http://www.opengis.net/kml/2.2 phoneNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PhoneNumber instance.
func (me *XsdGoPkgHasElem_PhoneNumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PhoneNumber
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Range struct {
	Ranges []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 range"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Range function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Range instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Range instance.
func (me *XsdGoPkgHasElems_Range) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Range
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Range -- 0.0
func (me XsdGoPkgHasElems_Range) RangeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_Range struct {
	Range xsdt.Double `xml:"http://www.opengis.net/kml/2.2 range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Range function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Range instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Range instance.
func (me *XsdGoPkgHasElem_Range) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Range
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Range -- 0.0
func (me XsdGoPkgHasElem_Range) RangeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("0.0")
	return *x
}

type TrefreshModeEnumType xsdt.String

//	Returns true if the value of this enumerated TrefreshModeEnumType is "onInterval".
func (me TrefreshModeEnumType) IsOnInterval() bool { return me == "onInterval" }

//	Since TrefreshModeEnumType is just a simple String type, this merely returns the current string value.
func (me TrefreshModeEnumType) String() string { return xsdt.String(me).String() }

//	Since TrefreshModeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TrefreshModeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TrefreshModeEnumType is "onChange".
func (me TrefreshModeEnumType) IsOnChange() bool { return me == "onChange" }

//	Returns true if the value of this enumerated TrefreshModeEnumType is "onExpire".
func (me TrefreshModeEnumType) IsOnExpire() bool { return me == "onExpire" }

//	This convenience method just performs a simple type conversion to TrefreshModeEnumType's alias type xsdt.String.
func (me TrefreshModeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_RefreshMode struct {
	RefreshModes []TrefreshModeEnumType `xml:"http://www.opengis.net/kml/2.2 refreshMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RefreshMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RefreshMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RefreshMode instance.
func (me *XsdGoPkgHasElems_RefreshMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RefreshMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for RefreshMode -- "onChange"
func (me XsdGoPkgHasElems_RefreshMode) RefreshModeDefault() TrefreshModeEnumType {
	return TrefreshModeEnumType("onChange")
}

type XsdGoPkgHasElem_RefreshMode struct {
	RefreshMode TrefreshModeEnumType `xml:"http://www.opengis.net/kml/2.2 refreshMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RefreshMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RefreshMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RefreshMode instance.
func (me *XsdGoPkgHasElem_RefreshMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RefreshMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for RefreshMode -- "onChange"
func (me XsdGoPkgHasElem_RefreshMode) RefreshModeDefault() TrefreshModeEnumType {
	return TrefreshModeEnumType("onChange")
}

type XsdGoPkgHasElem_RefreshInterval struct {
	RefreshInterval xsdt.Double `xml:"http://www.opengis.net/kml/2.2 refreshInterval"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RefreshInterval function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RefreshInterval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RefreshInterval instance.
func (me *XsdGoPkgHasElem_RefreshInterval) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RefreshInterval
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for RefreshInterval -- 4.0
func (me XsdGoPkgHasElem_RefreshInterval) RefreshIntervalDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("4.0")
	return *x
}

type XsdGoPkgHasElems_RefreshInterval struct {
	RefreshIntervals []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 refreshInterval"`
}

//	Returns the default value for RefreshInterval -- 4.0
func (me XsdGoPkgHasElems_RefreshInterval) RefreshIntervalDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("4.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_RefreshInterval function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RefreshInterval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RefreshInterval instance.
func (me *XsdGoPkgHasElems_RefreshInterval) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RefreshInterval
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_RefreshVisibility struct {
	RefreshVisibility xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 refreshVisibility"`
}

//	Returns the default value for RefreshVisibility -- 0
func (me XsdGoPkgHasElem_RefreshVisibility) RefreshVisibilityDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_RefreshVisibility function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RefreshVisibility instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RefreshVisibility instance.
func (me *XsdGoPkgHasElem_RefreshVisibility) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RefreshVisibility
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_RefreshVisibility struct {
	RefreshVisibilities []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 refreshVisibility"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RefreshVisibility function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RefreshVisibility instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RefreshVisibility instance.
func (me *XsdGoPkgHasElems_RefreshVisibility) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RefreshVisibility
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for RefreshVisibility -- 0
func (me XsdGoPkgHasElems_RefreshVisibility) RefreshVisibilityDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElems_RightFov struct {
	RightFovs []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 rightFov"`
}

//	Returns the default value for RightFov -- 0.0
func (me XsdGoPkgHasElems_RightFov) RightFovDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_RightFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RightFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RightFov instance.
func (me *XsdGoPkgHasElems_RightFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RightFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_RightFov struct {
	RightFov Tangle180Type `xml:"http://www.opengis.net/kml/2.2 rightFov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RightFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RightFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RightFov instance.
func (me *XsdGoPkgHasElem_RightFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RightFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for RightFov -- 0.0
func (me XsdGoPkgHasElem_RightFov) RightFovDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElem_Roll struct {
	Roll Tangle180Type `xml:"http://www.opengis.net/kml/2.2 roll"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Roll function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Roll instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Roll instance.
func (me *XsdGoPkgHasElem_Roll) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Roll
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Roll -- 0.0
func (me XsdGoPkgHasElem_Roll) RollDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_Roll struct {
	Rolls []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 roll"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Roll function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Roll instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Roll instance.
func (me *XsdGoPkgHasElems_Roll) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Roll
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Roll -- 0.0
func (me XsdGoPkgHasElems_Roll) RollDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_Rotation struct {
	Rotations []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 rotation"`
}

//	Returns the default value for Rotation -- 0.0
func (me XsdGoPkgHasElems_Rotation) RotationDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Rotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rotation instance.
func (me *XsdGoPkgHasElems_Rotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Rotation
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Rotation struct {
	Rotation Tangle180Type `xml:"http://www.opengis.net/kml/2.2 rotation"`
}

//	Returns the default value for Rotation -- 0.0
func (me XsdGoPkgHasElem_Rotation) RotationDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Rotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Rotation instance.
func (me *XsdGoPkgHasElem_Rotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Rotation
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_RotationXY struct {
	RotationXYs []*Tvec2Type `xml:"http://www.opengis.net/kml/2.2 rotationXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RotationXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RotationXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RotationXY instance.
func (me *XsdGoPkgHasElems_RotationXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RotationXY
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.RotationXYs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_RotationXY struct {
	RotationXY *Tvec2Type `xml:"http://www.opengis.net/kml/2.2 rotationXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RotationXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RotationXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RotationXY instance.
func (me *XsdGoPkgHasElem_RotationXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RotationXY
	if fn != nil {
		fn(me, true)
	}
	me.RotationXY.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Scale struct {
	Scale xsdt.Double `xml:"http://www.opengis.net/kml/2.2 scale"`
}

//	Returns the default value for Scale -- 1.0
func (me XsdGoPkgHasElem_Scale) ScaleDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Scale instance.
func (me *XsdGoPkgHasElem_Scale) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Scale
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Scale struct {
	Scales []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 scale"`
}

//	Returns the default value for Scale -- 1.0
func (me XsdGoPkgHasElems_Scale) ScaleDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scale instance.
func (me *XsdGoPkgHasElems_Scale) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Scale
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScreenXY struct {
	ScreenXYs []*Tvec2Type `xml:"http://www.opengis.net/kml/2.2 screenXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScreenXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScreenXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScreenXY instance.
func (me *XsdGoPkgHasElems_ScreenXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScreenXY
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ScreenXYs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScreenXY struct {
	ScreenXY *Tvec2Type `xml:"http://www.opengis.net/kml/2.2 screenXY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScreenXY function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScreenXY instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ScreenXY instance.
func (me *XsdGoPkgHasElem_ScreenXY) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScreenXY
	if fn != nil {
		fn(me, true)
	}
	me.ScreenXY.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TshapeEnumType xsdt.String

//	This convenience method just performs a simple type conversion to TshapeEnumType's alias type xsdt.String.
func (me TshapeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TshapeEnumType is "rectangle".
func (me TshapeEnumType) IsRectangle() bool { return me == "rectangle" }

//	Returns true if the value of this enumerated TshapeEnumType is "cylinder".
func (me TshapeEnumType) IsCylinder() bool { return me == "cylinder" }

//	Since TshapeEnumType is just a simple String type, this merely returns the current string value.
func (me TshapeEnumType) String() string { return xsdt.String(me).String() }

//	Since TshapeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TshapeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TshapeEnumType is "sphere".
func (me TshapeEnumType) IsSphere() bool { return me == "sphere" }

type XsdGoPkgHasElem_Shape struct {
	Shape TshapeEnumType `xml:"http://www.opengis.net/kml/2.2 shape"`
}

//	Returns the default value for Shape -- "rectangle"
func (me XsdGoPkgHasElem_Shape) ShapeDefault() TshapeEnumType { return TshapeEnumType("rectangle") }

//	If the WalkHandlers.XsdGoPkgHasElem_Shape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Shape instance.
func (me *XsdGoPkgHasElem_Shape) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Shape
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Shape struct {
	Shapes []TshapeEnumType `xml:"http://www.opengis.net/kml/2.2 shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shape instance.
func (me *XsdGoPkgHasElems_Shape) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Shape
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Shape -- "rectangle"
func (me XsdGoPkgHasElems_Shape) ShapeDefault() TshapeEnumType { return TshapeEnumType("rectangle") }

type XsdGoPkgHasElem_Size struct {
	Size *Tvec2Type `xml:"http://www.opengis.net/kml/2.2 size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Size function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Size instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Size instance.
func (me *XsdGoPkgHasElem_Size) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Size
	if fn != nil {
		fn(me, true)
	}
	me.Size.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Size struct {
	Sizes []*Tvec2Type `xml:"http://www.opengis.net/kml/2.2 size"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Size function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Size instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Size instance.
func (me *XsdGoPkgHasElems_Size) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Size
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sizes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_South struct {
	South Tangle180Type `xml:"http://www.opengis.net/kml/2.2 south"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_South function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_South instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_South instance.
func (me *XsdGoPkgHasElem_South) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_South
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for South -- -180.0
func (me XsdGoPkgHasElem_South) SouthDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("-180.0")
	return *x
}

type XsdGoPkgHasElems_South struct {
	Souths []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 south"`
}

//	Returns the default value for South -- -180.0
func (me XsdGoPkgHasElems_South) SouthDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("-180.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_South function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_South instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_South instance.
func (me *XsdGoPkgHasElems_South) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_South
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SourceHref struct {
	SourceHrefs []xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 sourceHref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceHref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceHref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceHref instance.
func (me *XsdGoPkgHasElems_SourceHref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SourceHref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SourceHref struct {
	SourceHref xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 sourceHref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceHref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceHref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourceHref instance.
func (me *XsdGoPkgHasElem_SourceHref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SourceHref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Snippet struct {
	Snippets []xsdt.String `xml:"http://www.opengis.net/kml/2.2 snippet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Snippet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Snippet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Snippet instance.
func (me *XsdGoPkgHasElems_Snippet) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Snippet
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Snippet struct {
	Snippet xsdt.String `xml:"http://www.opengis.net/kml/2.2 snippet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Snippet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Snippet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Snippet instance.
func (me *XsdGoPkgHasElem_Snippet) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Snippet
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TitemIconStateEnumType xsdt.String

//	Returns true if the value of this enumerated TitemIconStateEnumType is "closed".
func (me TitemIconStateEnumType) IsClosed() bool { return me == "closed" }

//	This convenience method just performs a simple type conversion to TitemIconStateEnumType's alias type xsdt.String.
func (me TitemIconStateEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TitemIconStateEnumType is "error".
func (me TitemIconStateEnumType) IsError() bool { return me == "error" }

//	Returns true if the value of this enumerated TitemIconStateEnumType is "fetching2".
func (me TitemIconStateEnumType) IsFetching2() bool { return me == "fetching2" }

//	Since TitemIconStateEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TitemIconStateEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TitemIconStateEnumType is just a simple String type, this merely returns the current string value.
func (me TitemIconStateEnumType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TitemIconStateEnumType is "open".
func (me TitemIconStateEnumType) IsOpen() bool { return me == "open" }

//	Returns true if the value of this enumerated TitemIconStateEnumType is "fetching1".
func (me TitemIconStateEnumType) IsFetching1() bool { return me == "fetching1" }

//	Returns true if the value of this enumerated TitemIconStateEnumType is "fetching0".
func (me TitemIconStateEnumType) IsFetching0() bool { return me == "fetching0" }

type TitemIconStateType xsdt.String

//	Since TitemIconStateType is just a simple String type, this merely returns the current string value.
func (me TitemIconStateType) String() string { return xsdt.String(me).String() }

//	Since TitemIconStateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TitemIconStateType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TitemIconStateType's alias type xsdt.String.
func (me TitemIconStateType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TitemIconStateType declares a String containing a whitespace-separated list of TitemIconStateEnumType values. This Values() method creates and returns a slice of all elements in that list.
func (me TitemIconStateType) Values() (list []TitemIconStateEnumType) {
	var svals = xsdt.ListValues(string(me))
	list = make([]TitemIconStateEnumType, len(svals))
	for i, s := range svals {
		list[i] = TitemIconStateEnumType(s)
	}
	return
}

type XsdGoPkgHasElems_State struct {
	States []TitemIconStateType `xml:"http://www.opengis.net/kml/2.2 state"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_State instance.
func (me *XsdGoPkgHasElems_State) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_State
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_State struct {
	State TitemIconStateType `xml:"http://www.opengis.net/kml/2.2 state"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_State instance.
func (me *XsdGoPkgHasElem_State) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_State
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleUrl struct {
	StyleUrl xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 styleUrl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleUrl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleUrl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleUrl instance.
func (me *XsdGoPkgHasElem_StyleUrl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleUrl
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleUrl struct {
	StyleUrls []xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 styleUrl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleUrl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleUrl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleUrl instance.
func (me *XsdGoPkgHasElems_StyleUrl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleUrl
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TargetHref struct {
	TargetHref xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 targetHref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TargetHref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TargetHref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TargetHref instance.
func (me *XsdGoPkgHasElem_TargetHref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TargetHref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TargetHref struct {
	TargetHrefs []xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 targetHref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TargetHref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TargetHref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TargetHref instance.
func (me *XsdGoPkgHasElems_TargetHref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TargetHref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tessellate struct {
	Tessellates []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 tessellate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tessellate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tessellate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tessellate instance.
func (me *XsdGoPkgHasElems_Tessellate) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tessellate
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Tessellate -- 0
func (me XsdGoPkgHasElems_Tessellate) TessellateDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

type XsdGoPkgHasElem_Tessellate struct {
	Tessellate xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 tessellate"`
}

//	Returns the default value for Tessellate -- 0
func (me XsdGoPkgHasElem_Tessellate) TessellateDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tessellate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tessellate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Tessellate instance.
func (me *XsdGoPkgHasElem_Tessellate) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tessellate
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Text struct {
	Texts []xsdt.String `xml:"http://www.opengis.net/kml/2.2 text"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Text instance.
func (me *XsdGoPkgHasElems_Text) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Text
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Text struct {
	Text xsdt.String `xml:"http://www.opengis.net/kml/2.2 text"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Text instance.
func (me *XsdGoPkgHasElem_Text) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Text
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TextColor struct {
	TextColors []TcolorType `xml:"http://www.opengis.net/kml/2.2 textColor"`
}

//	Returns the default value for TextColor -- "ff000000"
func (me XsdGoPkgHasElems_TextColor) TextColorDefault() TcolorType { return TcolorType("ff000000") }

//	If the WalkHandlers.XsdGoPkgHasElems_TextColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TextColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TextColor instance.
func (me *XsdGoPkgHasElems_TextColor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TextColor
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TextColor struct {
	TextColor TcolorType `xml:"http://www.opengis.net/kml/2.2 textColor"`
}

//	Returns the default value for TextColor -- "ff000000"
func (me XsdGoPkgHasElem_TextColor) TextColorDefault() TcolorType { return TcolorType("ff000000") }

//	If the WalkHandlers.XsdGoPkgHasElem_TextColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TextColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TextColor instance.
func (me *XsdGoPkgHasElem_TextColor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TextColor
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TileSize struct {
	TileSize xsdt.Int `xml:"http://www.opengis.net/kml/2.2 tileSize"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TileSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TileSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TileSize instance.
func (me *XsdGoPkgHasElem_TileSize) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TileSize
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for TileSize -- 256
func (me XsdGoPkgHasElem_TileSize) TileSizeDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("256")
	return *x
}

type XsdGoPkgHasElems_TileSize struct {
	TileSizes []xsdt.Int `xml:"http://www.opengis.net/kml/2.2 tileSize"`
}

//	Returns the default value for TileSize -- 256
func (me XsdGoPkgHasElems_TileSize) TileSizeDefault() xsdt.Int {
	var x = new(xsdt.Int)
	x.SetFromString("256")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_TileSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TileSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TileSize instance.
func (me *XsdGoPkgHasElems_TileSize) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TileSize
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type Tanglepos180Type xsdt.Double

//	This convenience method just performs a simple type conversion to Tanglepos180Type's alias type xsdt.Double.
func (me Tanglepos180Type) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

//	Since Tanglepos180Type is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tanglepos180Type) SetFromString(s string) { (*xsdt.Double)(me).SetFromString(s) }

//	Returns a string representation of this Tanglepos180Type's current non-string scalar value.
func (me Tanglepos180Type) String() string { return xsdt.Double(me).String() }

type XsdGoPkgHasElems_Tilt struct {
	Tilts []Tanglepos180Type `xml:"http://www.opengis.net/kml/2.2 tilt"`
}

//	Returns the default value for Tilt -- 0.0
func (me XsdGoPkgHasElems_Tilt) TiltDefault() Tanglepos180Type {
	var x = new(Tanglepos180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tilt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tilt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tilt instance.
func (me *XsdGoPkgHasElems_Tilt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tilt
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tilt struct {
	Tilt Tanglepos180Type `xml:"http://www.opengis.net/kml/2.2 tilt"`
}

//	Returns the default value for Tilt -- 0.0
func (me XsdGoPkgHasElem_Tilt) TiltDefault() Tanglepos180Type {
	var x = new(Tanglepos180Type)
	x.SetFromString("0.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tilt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tilt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Tilt instance.
func (me *XsdGoPkgHasElem_Tilt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tilt
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TopFov struct {
	TopFov Tangle90Type `xml:"http://www.opengis.net/kml/2.2 topFov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TopFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TopFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TopFov instance.
func (me *XsdGoPkgHasElem_TopFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TopFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for TopFov -- 0.0
func (me XsdGoPkgHasElem_TopFov) TopFovDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_TopFov struct {
	TopFovs []Tangle90Type `xml:"http://www.opengis.net/kml/2.2 topFov"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TopFov function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TopFov instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TopFov instance.
func (me *XsdGoPkgHasElems_TopFov) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TopFov
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for TopFov -- 0.0
func (me XsdGoPkgHasElems_TopFov) TopFovDefault() Tangle90Type {
	var x = new(Tangle90Type)
	x.SetFromString("0.0")
	return *x
}

type XsdGoPkgHasElems_Value struct {
	Values []xsdt.String `xml:"http://www.opengis.net/kml/2.2 value"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Value function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Value instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Value instance.
func (me *XsdGoPkgHasElems_Value) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Value
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Value struct {
	Value xsdt.String `xml:"http://www.opengis.net/kml/2.2 value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Value function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Value instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Value instance.
func (me *XsdGoPkgHasElem_Value) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Value
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ViewBoundScale struct {
	ViewBoundScales []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 viewBoundScale"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewBoundScale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewBoundScale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewBoundScale instance.
func (me *XsdGoPkgHasElems_ViewBoundScale) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewBoundScale
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ViewBoundScale -- 1.0
func (me XsdGoPkgHasElems_ViewBoundScale) ViewBoundScaleDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasElem_ViewBoundScale struct {
	ViewBoundScale xsdt.Double `xml:"http://www.opengis.net/kml/2.2 viewBoundScale"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewBoundScale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewBoundScale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewBoundScale instance.
func (me *XsdGoPkgHasElem_ViewBoundScale) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewBoundScale
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ViewBoundScale -- 1.0
func (me XsdGoPkgHasElem_ViewBoundScale) ViewBoundScaleDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasElems_ViewFormat struct {
	ViewFormats []xsdt.String `xml:"http://www.opengis.net/kml/2.2 viewFormat"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewFormat instance.
func (me *XsdGoPkgHasElems_ViewFormat) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewFormat
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ViewFormat struct {
	ViewFormat xsdt.String `xml:"http://www.opengis.net/kml/2.2 viewFormat"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewFormat instance.
func (me *XsdGoPkgHasElem_ViewFormat) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewFormat
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TviewRefreshModeEnumType xsdt.String

//	Returns true if the value of this enumerated TviewRefreshModeEnumType is "onRequest".
func (me TviewRefreshModeEnumType) IsOnRequest() bool { return me == "onRequest" }

//	Since TviewRefreshModeEnumType is just a simple String type, this merely returns the current string value.
func (me TviewRefreshModeEnumType) String() string { return xsdt.String(me).String() }

//	Since TviewRefreshModeEnumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TviewRefreshModeEnumType) SetFromString(s string) { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TviewRefreshModeEnumType is "never".
func (me TviewRefreshModeEnumType) IsNever() bool { return me == "never" }

//	This convenience method just performs a simple type conversion to TviewRefreshModeEnumType's alias type xsdt.String.
func (me TviewRefreshModeEnumType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TviewRefreshModeEnumType is "onStop".
func (me TviewRefreshModeEnumType) IsOnStop() bool { return me == "onStop" }

//	Returns true if the value of this enumerated TviewRefreshModeEnumType is "onRegion".
func (me TviewRefreshModeEnumType) IsOnRegion() bool { return me == "onRegion" }

type XsdGoPkgHasElem_ViewRefreshMode struct {
	ViewRefreshMode TviewRefreshModeEnumType `xml:"http://www.opengis.net/kml/2.2 viewRefreshMode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewRefreshMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewRefreshMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewRefreshMode instance.
func (me *XsdGoPkgHasElem_ViewRefreshMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewRefreshMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for ViewRefreshMode -- "never"
func (me XsdGoPkgHasElem_ViewRefreshMode) ViewRefreshModeDefault() TviewRefreshModeEnumType {
	return TviewRefreshModeEnumType("never")
}

type XsdGoPkgHasElems_ViewRefreshMode struct {
	ViewRefreshModes []TviewRefreshModeEnumType `xml:"http://www.opengis.net/kml/2.2 viewRefreshMode"`
}

//	Returns the default value for ViewRefreshMode -- "never"
func (me XsdGoPkgHasElems_ViewRefreshMode) ViewRefreshModeDefault() TviewRefreshModeEnumType {
	return TviewRefreshModeEnumType("never")
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewRefreshMode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewRefreshMode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewRefreshMode instance.
func (me *XsdGoPkgHasElems_ViewRefreshMode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewRefreshMode
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ViewRefreshTime struct {
	ViewRefreshTime xsdt.Double `xml:"http://www.opengis.net/kml/2.2 viewRefreshTime"`
}

//	Returns the default value for ViewRefreshTime -- 4.0
func (me XsdGoPkgHasElem_ViewRefreshTime) ViewRefreshTimeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("4.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewRefreshTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewRefreshTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewRefreshTime instance.
func (me *XsdGoPkgHasElem_ViewRefreshTime) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewRefreshTime
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ViewRefreshTime struct {
	ViewRefreshTimes []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 viewRefreshTime"`
}

//	Returns the default value for ViewRefreshTime -- 4.0
func (me XsdGoPkgHasElems_ViewRefreshTime) ViewRefreshTimeDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("4.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewRefreshTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewRefreshTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewRefreshTime instance.
func (me *XsdGoPkgHasElems_ViewRefreshTime) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewRefreshTime
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Visibility struct {
	Visibility xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 visibility"`
}

//	Returns the default value for Visibility -- 1
func (me XsdGoPkgHasElem_Visibility) VisibilityDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Visibility function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Visibility instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Visibility instance.
func (me *XsdGoPkgHasElem_Visibility) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Visibility
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Visibility struct {
	Visibilities []xsdt.Boolean `xml:"http://www.opengis.net/kml/2.2 visibility"`
}

//	Returns the default value for Visibility -- 1
func (me XsdGoPkgHasElems_Visibility) VisibilityDefault() xsdt.Boolean {
	var x = new(xsdt.Boolean)
	x.SetFromString("1")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Visibility function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Visibility instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Visibility instance.
func (me *XsdGoPkgHasElems_Visibility) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Visibility
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_West struct {
	Wests []Tangle180Type `xml:"http://www.opengis.net/kml/2.2 west"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_West function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_West instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_West instance.
func (me *XsdGoPkgHasElems_West) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_West
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for West -- -180.0
func (me XsdGoPkgHasElems_West) WestDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("-180.0")
	return *x
}

type XsdGoPkgHasElem_West struct {
	West Tangle180Type `xml:"http://www.opengis.net/kml/2.2 west"`
}

//	Returns the default value for West -- -180.0
func (me XsdGoPkgHasElem_West) WestDefault() Tangle180Type {
	var x = new(Tangle180Type)
	x.SetFromString("-180.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_West function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_West instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_West instance.
func (me *XsdGoPkgHasElem_West) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_West
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_When struct {
	When TdateTimeType `xml:"http://www.opengis.net/kml/2.2 when"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_When function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_When instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_When instance.
func (me *XsdGoPkgHasElem_When) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_When
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_When struct {
	Whens []TdateTimeType `xml:"http://www.opengis.net/kml/2.2 when"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_When function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_When instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_When instance.
func (me *XsdGoPkgHasElems_When) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_When
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Width struct {
	Width xsdt.Double `xml:"http://www.opengis.net/kml/2.2 width"`
}

//	Returns the default value for Width -- 1.0
func (me XsdGoPkgHasElem_Width) WidthDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Width function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Width instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Width instance.
func (me *XsdGoPkgHasElem_Width) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Width
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Width struct {
	Widths []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 width"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Width function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Width instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Width instance.
func (me *XsdGoPkgHasElems_Width) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Width
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Width -- 1.0
func (me XsdGoPkgHasElems_Width) WidthDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasElems_X struct {
	Xs []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 x"`
}

//	Returns the default value for X -- 1.0
func (me XsdGoPkgHasElems_X) XDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_X function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X instance.
func (me *XsdGoPkgHasElems_X) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_X
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_X struct {
	X xsdt.Double `xml:"http://www.opengis.net/kml/2.2 x"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X instance.
func (me *XsdGoPkgHasElem_X) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_X
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for X -- 1.0
func (me XsdGoPkgHasElem_X) XDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasElem_Y struct {
	Y xsdt.Double `xml:"http://www.opengis.net/kml/2.2 y"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Y function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Y instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Y instance.
func (me *XsdGoPkgHasElem_Y) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Y
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Returns the default value for Y -- 1.0
func (me XsdGoPkgHasElem_Y) YDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

type XsdGoPkgHasElems_Y struct {
	Ys []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 y"`
}

//	Returns the default value for Y -- 1.0
func (me XsdGoPkgHasElems_Y) YDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Y function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Y instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Y instance.
func (me *XsdGoPkgHasElems_Y) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Y
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Z struct {
	Z xsdt.Double `xml:"http://www.opengis.net/kml/2.2 z"`
}

//	Returns the default value for Z -- 1.0
func (me XsdGoPkgHasElem_Z) ZDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElem_Z function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Z instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Z instance.
func (me *XsdGoPkgHasElem_Z) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Z
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Z struct {
	Zs []xsdt.Double `xml:"http://www.opengis.net/kml/2.2 z"`
}

//	Returns the default value for Z -- 1.0
func (me XsdGoPkgHasElems_Z) ZDefault() xsdt.Double {
	var x = new(xsdt.Double)
	x.SetFromString("1.0")
	return *x
}

//	If the WalkHandlers.XsdGoPkgHasElems_Z function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Z instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Z instance.
func (me *XsdGoPkgHasElems_Z) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Z
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_FolderObjectExtensionGroup struct {
	FolderObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 FolderObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FolderObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FolderObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FolderObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_FolderObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_FolderObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LocationObjectExtensionGroup struct {
	LocationObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LocationObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LocationObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LocationObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LocationObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PolygonObjectExtensionGroup struct {
	PolygonObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PolygonObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolygonObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolygonObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolygonObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PolygonObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PolygonObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BasicLinkObjectExtensionGroup struct {
	BasicLinkObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 BasicLinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BasicLinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BasicLinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BasicLinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_BasicLinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BasicLinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ObjectSimpleExtensionGroup struct {
	ObjectSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ObjectSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObjectSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObjectSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObjectSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ObjectSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ObjectSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractObjectType struct {
	XsdGoPkgHasAtts_IdAttributes

	XsdGoPkgHasElems_ObjectSimpleExtensionGroup
}

//	If the WalkHandlers.TAbstractObjectType function is not nil (ie. was set by outside code), calls it with this TAbstractObjectType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAbstractObjectType instance.
func (me *TAbstractObjectType) Walk() {
	fn := WalkHandlers.TAbstractObjectType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_ObjectSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup struct {
	BasicLinkSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BasicLinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TBasicLinkType struct {
	XsdGoPkgHasElems_BasicLinkObjectExtensionGroup

	TAbstractObjectType

	XsdGoPkgHasElem_Href

	XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup
}

//	If the WalkHandlers.TBasicLinkType function is not nil (ie. was set by outside code), calls it with this TBasicLinkType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TBasicLinkType instance.
func (me *TBasicLinkType) Walk() {
	fn := WalkHandlers.TBasicLinkType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_Href.Walk()
	me.XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_BasicLinkObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinkObjectExtensionGroup struct {
	LinkObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinkSimpleExtensionGroup struct {
	LinkSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLinkType struct {
	XsdGoPkgHasElem_ViewRefreshMode

	XsdGoPkgHasElem_ViewFormat

	XsdGoPkgHasElem_ViewBoundScale

	XsdGoPkgHasElems_LinkSimpleExtensionGroup

	XsdGoPkgHasElem_ViewRefreshTime

	XsdGoPkgHasElem_RefreshMode

	XsdGoPkgHasElem_RefreshInterval

	TBasicLinkType

	XsdGoPkgHasElems_LinkObjectExtensionGroup

	XsdGoPkgHasElem_HttpQuery
}

//	If the WalkHandlers.TLinkType function is not nil (ie. was set by outside code), calls it with this TLinkType instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TLinkType instance.
func (me *TLinkType) Walk() {
	fn := WalkHandlers.TLinkType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_HttpQuery.Walk()
	me.XsdGoPkgHasElem_ViewRefreshMode.Walk()
	me.XsdGoPkgHasElem_ViewFormat.Walk()
	me.XsdGoPkgHasElem_ViewBoundScale.Walk()
	me.XsdGoPkgHasElems_LinkSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ViewRefreshTime.Walk()
	me.XsdGoPkgHasElem_RefreshMode.Walk()
	me.XsdGoPkgHasElem_RefreshInterval.Walk()
	me.TBasicLinkType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Icon struct {
	Icon *TLinkType `xml:"http://www.opengis.net/kml/2.2 Icon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Icon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Icon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Icon instance.
func (me *XsdGoPkgHasElem_Icon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Icon
	if fn != nil {
		fn(me, true)
	}
	me.Icon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup struct {
	AbstractStyleSelectorObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AliasObjectExtensionGroup struct {
	AliasObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AliasObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AliasObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AliasObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AliasObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AliasObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AliasObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AliasSimpleExtensionGroup struct {
	AliasSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AliasSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AliasSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AliasSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AliasSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AliasSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AliasSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAliasType struct {
	XsdGoPkgHasElem_TargetHref

	XsdGoPkgHasElems_AliasObjectExtensionGroup

	XsdGoPkgHasElems_AliasSimpleExtensionGroup

	TAbstractObjectType

	XsdGoPkgHasElem_SourceHref
}

//	If the WalkHandlers.TAliasType function is not nil (ie. was set by outside code), calls it with this TAliasType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TAliasType instance.
func (me *TAliasType) Walk() {
	fn := WalkHandlers.TAliasType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_SourceHref.Walk()
	me.XsdGoPkgHasElem_TargetHref.Walk()
	me.XsdGoPkgHasElems_AliasObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AliasSimpleExtensionGroup.Walk()
	me.TAbstractObjectType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Alias struct {
	Alias *TAliasType `xml:"http://www.opengis.net/kml/2.2 Alias"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Alias function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Alias instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Alias instance.
func (me *XsdGoPkgHasElem_Alias) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Alias
	if fn != nil {
		fn(me, true)
	}
	me.Alias.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ModelObjectExtensionGroup struct {
	ModelObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ModelObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ModelObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ModelObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ModelObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ModelObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ModelObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PointObjectExtensionGroup struct {
	PointObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PointObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PointObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PointObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PointObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PointObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PointObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractViewObjectExtensionGroup struct {
	AbstractViewObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractViewObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractViewObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractViewObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractViewObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractViewObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractViewObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup struct {
	AbstractSubStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LodObjectExtensionGroup struct {
	LodObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LodObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LodObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LodObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LodObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LodObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LodObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup struct {
	AbstractGeometryObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractGeometryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeSpanObjectExtensionGroup struct {
	TimeSpanObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 TimeSpanObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeSpanObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeSpanObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeSpanObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_TimeSpanObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeSpanObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup struct {
	AbstractTimePrimitiveObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup struct {
	AbstractTimePrimitiveSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractTimePrimitiveType struct {
	XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup

	XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup

	TAbstractObjectType
}

//	If the WalkHandlers.TAbstractTimePrimitiveType function is not nil (ie. was set by outside code), calls it with this TAbstractTimePrimitiveType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractTimePrimitiveType instance.
func (me *TAbstractTimePrimitiveType) Walk() {
	fn := WalkHandlers.TAbstractTimePrimitiveType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup struct {
	TimeSpanSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 TimeSpanSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TimeSpanType struct {
	XsdGoPkgHasElems_TimeSpanObjectExtensionGroup

	TAbstractTimePrimitiveType

	XsdGoPkgHasElem_End

	XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup

	XsdGoPkgHasElem_Begin
}

//	If the WalkHandlers.TimeSpanType function is not nil (ie. was set by outside code), calls it with this TimeSpanType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TimeSpanType instance.
func (me *TimeSpanType) Walk() {
	fn := WalkHandlers.TimeSpanType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_End.Walk()
	me.XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Begin.Walk()
	me.XsdGoPkgHasElems_TimeSpanObjectExtensionGroup.Walk()
	me.TAbstractTimePrimitiveType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeSpan struct {
	TimeSpan *TimeSpanType `xml:"http://www.opengis.net/kml/2.2 TimeSpan"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeSpan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeSpan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeSpan instance.
func (me *XsdGoPkgHasElem_TimeSpan) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeSpan
	if fn != nil {
		fn(me, true)
	}
	me.TimeSpan.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeStampObjectExtensionGroup struct {
	TimeStampObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 TimeStampObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeStampObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeStampObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeStampObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_TimeStampObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeStampObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeStampSimpleExtensionGroup struct {
	TimeStampSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 TimeStampSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeStampSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeStampSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeStampSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_TimeStampSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeStampSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TimeStampType struct {
	TAbstractTimePrimitiveType

	XsdGoPkgHasElem_When

	XsdGoPkgHasElems_TimeStampObjectExtensionGroup

	XsdGoPkgHasElems_TimeStampSimpleExtensionGroup
}

//	If the WalkHandlers.TimeStampType function is not nil (ie. was set by outside code), calls it with this TimeStampType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TimeStampType instance.
func (me *TimeStampType) Walk() {
	fn := WalkHandlers.TimeStampType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_TimeStampSimpleExtensionGroup.Walk()
	me.TAbstractTimePrimitiveType.Walk()
	me.XsdGoPkgHasElem_When.Walk()
	me.XsdGoPkgHasElems_TimeStampObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeStamp struct {
	TimeStamp *TimeStampType `xml:"http://www.opengis.net/kml/2.2 TimeStamp"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeStamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeStamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeStamp instance.
func (me *XsdGoPkgHasElem_TimeStamp) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeStamp
	if fn != nil {
		fn(me, true)
	}
	me.TimeStamp.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractTimePrimitiveGroup struct {
	AbstractTimePrimitiveGroup *TAbstractTimePrimitiveType `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveGroup"`

	XsdGoPkgHasElem_TimeSpan

	XsdGoPkgHasElem_TimeStamp
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractTimePrimitiveGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractTimePrimitiveGroup instance.
func (me *XsdGoPkgHasElem_AbstractTimePrimitiveGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_TimeSpan.Walk()
	me.XsdGoPkgHasElem_TimeStamp.Walk()
	me.AbstractTimePrimitiveGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup struct {
	NetworkLinkControlObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControlObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ItemIconSimpleExtensionGroup struct {
	ItemIconSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ItemIconSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemIconSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemIconSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemIconSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ItemIconSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ItemIconSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ItemIconObjectExtensionGroup struct {
	ItemIconObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ItemIconObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemIconObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemIconObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemIconObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ItemIconObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ItemIconObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TItemIconType struct {
	XsdGoPkgHasElems_ItemIconObjectExtensionGroup

	XsdGoPkgHasElem_Href

	XsdGoPkgHasElems_ItemIconSimpleExtensionGroup

	TAbstractObjectType

	XsdGoPkgHasElem_State
}

//	If the WalkHandlers.TItemIconType function is not nil (ie. was set by outside code), calls it with this TItemIconType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TItemIconType instance.
func (me *TItemIconType) Walk() {
	fn := WalkHandlers.TItemIconType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_ItemIconObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Href.Walk()
	me.XsdGoPkgHasElems_ItemIconSimpleExtensionGroup.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_State.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ItemIcon struct {
	ItemIcon *TItemIconType `xml:"http://www.opengis.net/kml/2.2 ItemIcon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemIcon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemIcon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ItemIcon instance.
func (me *XsdGoPkgHasElem_ItemIcon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ItemIcon
	if fn != nil {
		fn(me, true)
	}
	me.ItemIcon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup struct {
	ViewVolumeSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ViewVolumeSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup struct {
	ViewVolumeObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ViewVolumeObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TViewVolumeType struct {
	XsdGoPkgHasElem_RightFov

	XsdGoPkgHasElem_BottomFov

	XsdGoPkgHasElem_Near

	TAbstractObjectType

	XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup

	XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup

	XsdGoPkgHasElem_LeftFov

	XsdGoPkgHasElem_TopFov
}

//	If the WalkHandlers.TViewVolumeType function is not nil (ie. was set by outside code), calls it with this TViewVolumeType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TViewVolumeType instance.
func (me *TViewVolumeType) Walk() {
	fn := WalkHandlers.TViewVolumeType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Near.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LeftFov.Walk()
	me.XsdGoPkgHasElem_TopFov.Walk()
	me.XsdGoPkgHasElem_RightFov.Walk()
	me.XsdGoPkgHasElem_BottomFov.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ViewVolume struct {
	ViewVolume *TViewVolumeType `xml:"http://www.opengis.net/kml/2.2 ViewVolume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ViewVolume instance.
func (me *XsdGoPkgHasElem_ViewVolume) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewVolume
	if fn != nil {
		fn(me, true)
	}
	me.ViewVolume.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineStringSimpleExtensionGroup struct {
	LineStringSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LineStringSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineStringSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineStringSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineStringSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LineStringSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineStringSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineStringObjectExtensionGroup struct {
	LineStringObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LineStringObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineStringObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineStringObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineStringObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LineStringObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineStringObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup struct {
	AbstractGeometrySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractGeometrySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup struct {
	AbstractGeometryObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractGeometryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractGeometryType struct {
	TAbstractObjectType

	XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup

	XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup
}

//	If the WalkHandlers.TAbstractGeometryType function is not nil (ie. was set by outside code), calls it with this TAbstractGeometryType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractGeometryType instance.
func (me *TAbstractGeometryType) Walk() {
	fn := WalkHandlers.TAbstractGeometryType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TLineStringType struct {
	XsdGoPkgHasElem_Tessellate

	TAbstractGeometryType

	XsdGoPkgHasElem_Coordinates

	XsdGoPkgHasElem_Extrude

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElems_LineStringSimpleExtensionGroup

	XsdGoPkgHasElems_LineStringObjectExtensionGroup
}

//	If the WalkHandlers.TLineStringType function is not nil (ie. was set by outside code), calls it with this TLineStringType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TLineStringType instance.
func (me *TLineStringType) Walk() {
	fn := WalkHandlers.TLineStringType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.XsdGoPkgHasElems_LineStringSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LineStringObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Tessellate.Walk()
	me.TAbstractGeometryType.Walk()
	me.XsdGoPkgHasElem_Coordinates.Walk()
	me.XsdGoPkgHasElem_Extrude.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineString struct {
	LineString *TLineStringType `xml:"http://www.opengis.net/kml/2.2 LineString"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LineString instance.
func (me *XsdGoPkgHasElem_LineString) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineString
	if fn != nil {
		fn(me, true)
	}
	me.LineString.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ResourceMapObjectExtensionGroup struct {
	ResourceMapObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ResourceMapObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceMapObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceMapObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceMapObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ResourceMapObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ResourceMapObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup struct {
	ResourceMapSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ResourceMapSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Alias struct {
	Aliases []*TAliasType `xml:"http://www.opengis.net/kml/2.2 Alias"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Alias function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Alias instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Alias instance.
func (me *XsdGoPkgHasElems_Alias) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Alias
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Aliases {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TResourceMapType struct {
	XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup

	XsdGoPkgHasElems_Alias

	TAbstractObjectType

	XsdGoPkgHasElems_ResourceMapObjectExtensionGroup
}

//	If the WalkHandlers.TResourceMapType function is not nil (ie. was set by outside code), calls it with this TResourceMapType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TResourceMapType instance.
func (me *TResourceMapType) Walk() {
	fn := WalkHandlers.TResourceMapType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alias.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_ResourceMapObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ResourceMap struct {
	ResourceMap *TResourceMapType `xml:"http://www.opengis.net/kml/2.2 ResourceMap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceMap instance.
func (me *XsdGoPkgHasElem_ResourceMap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ResourceMap
	if fn != nil {
		fn(me, true)
	}
	me.ResourceMap.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Link struct {
	Link *TLinkType `xml:"http://www.opengis.net/kml/2.2 Link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Link instance.
func (me *XsdGoPkgHasElem_Link) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Link
	if fn != nil {
		fn(me, true)
	}
	me.Link.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ModelSimpleExtensionGroup struct {
	ModelSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ModelSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ModelSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ModelSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ModelSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ModelSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ModelSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LocationObjectExtensionGroup struct {
	LocationObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LocationObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LocationObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LocationObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LocationSimpleExtensionGroup struct {
	LocationSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LocationSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LocationSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LocationSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLocationType struct {
	TAbstractObjectType

	XsdGoPkgHasElems_LocationObjectExtensionGroup

	XsdGoPkgHasElem_Latitude

	XsdGoPkgHasElems_LocationSimpleExtensionGroup

	XsdGoPkgHasElem_Longitude

	XsdGoPkgHasElem_Altitude
}

//	If the WalkHandlers.TLocationType function is not nil (ie. was set by outside code), calls it with this TLocationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TLocationType instance.
func (me *TLocationType) Walk() {
	fn := WalkHandlers.TLocationType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LocationSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Longitude.Walk()
	me.XsdGoPkgHasElem_Altitude.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_LocationObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Latitude.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Location struct {
	Location *TLocationType `xml:"http://www.opengis.net/kml/2.2 Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Location instance.
func (me *XsdGoPkgHasElem_Location) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Location
	if fn != nil {
		fn(me, true)
	}
	me.Location.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_OrientationSimpleExtensionGroup struct {
	OrientationSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 OrientationSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrientationSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrientationSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrientationSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_OrientationSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_OrientationSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_OrientationObjectExtensionGroup struct {
	OrientationObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 OrientationObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrientationObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrientationObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrientationObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_OrientationObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_OrientationObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TOrientationType struct {
	XsdGoPkgHasElems_OrientationSimpleExtensionGroup

	XsdGoPkgHasElem_Roll

	TAbstractObjectType

	XsdGoPkgHasElem_Heading

	XsdGoPkgHasElem_Tilt

	XsdGoPkgHasElems_OrientationObjectExtensionGroup
}

//	If the WalkHandlers.TOrientationType function is not nil (ie. was set by outside code), calls it with this TOrientationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TOrientationType instance.
func (me *TOrientationType) Walk() {
	fn := WalkHandlers.TOrientationType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_OrientationSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Roll.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_Heading.Walk()
	me.XsdGoPkgHasElem_Tilt.Walk()
	me.XsdGoPkgHasElems_OrientationObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Orientation struct {
	Orientation *TOrientationType `xml:"http://www.opengis.net/kml/2.2 Orientation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orientation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orientation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orientation instance.
func (me *XsdGoPkgHasElem_Orientation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Orientation
	if fn != nil {
		fn(me, true)
	}
	me.Orientation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ModelObjectExtensionGroup struct {
	ModelObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ModelObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ModelObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ModelObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ModelObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ModelObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ModelObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TModelType struct {
	XsdGoPkgHasElem_Location

	TAbstractGeometryType

	XsdGoPkgHasElem_Orientation

	XsdGoPkgHasElems_ModelObjectExtensionGroup

	XsdGoPkgHasElem_Scale

	XsdGoPkgHasElem_ResourceMap

	XsdGoPkgHasElem_Link

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElems_ModelSimpleExtensionGroup
}

//	If the WalkHandlers.TModelType function is not nil (ie. was set by outside code), calls it with this TModelType instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TModelType instance.
func (me *TModelType) Walk() {
	fn := WalkHandlers.TModelType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Location.Walk()
	me.TAbstractGeometryType.Walk()
	me.XsdGoPkgHasElem_Orientation.Walk()
	me.XsdGoPkgHasElems_ModelObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Scale.Walk()
	me.XsdGoPkgHasElem_ResourceMap.Walk()
	me.XsdGoPkgHasElem_Link.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.XsdGoPkgHasElems_ModelSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Model struct {
	Model *TModelType `xml:"http://www.opengis.net/kml/2.2 Model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Model function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Model instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Model instance.
func (me *XsdGoPkgHasElem_Model) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Model
	if fn != nil {
		fn(me, true)
	}
	me.Model.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup struct {
	MultiGeometrySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 MultiGeometrySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup struct {
	MultiGeometryObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 MultiGeometryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Model struct {
	Models []*TModelType `xml:"http://www.opengis.net/kml/2.2 Model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Model function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Model instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Model instance.
func (me *XsdGoPkgHasElems_Model) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Model
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Models {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinearRingSimpleExtensionGroup struct {
	LinearRingSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LinearRingSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinearRingSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinearRingSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinearRingSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LinearRingSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinearRingSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinearRingObjectExtensionGroup struct {
	LinearRingObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LinearRingObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinearRingObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinearRingObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinearRingObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LinearRingObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinearRingObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLinearRingType struct {
	XsdGoPkgHasElems_LinearRingSimpleExtensionGroup

	TAbstractGeometryType

	XsdGoPkgHasElems_LinearRingObjectExtensionGroup

	XsdGoPkgHasElem_Extrude

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElem_Tessellate

	XsdGoPkgHasElem_Coordinates
}

//	If the WalkHandlers.TLinearRingType function is not nil (ie. was set by outside code), calls it with this TLinearRingType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TLinearRingType instance.
func (me *TLinearRingType) Walk() {
	fn := WalkHandlers.TLinearRingType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Tessellate.Walk()
	me.XsdGoPkgHasElem_Coordinates.Walk()
	me.XsdGoPkgHasElems_LinearRingSimpleExtensionGroup.Walk()
	me.TAbstractGeometryType.Walk()
	me.XsdGoPkgHasElems_LinearRingObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Extrude.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LinearRing struct {
	LinearRings []*TLinearRingType `xml:"http://www.opengis.net/kml/2.2 LinearRing"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinearRing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinearRing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinearRing instance.
func (me *XsdGoPkgHasElems_LinearRing) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LinearRing
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LinearRings {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineString struct {
	LineStrings []*TLineStringType `xml:"http://www.opengis.net/kml/2.2 LineString"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineString instance.
func (me *XsdGoPkgHasElems_LineString) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineString
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LineStrings {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_MultiGeometry struct {
	MultiGeometries []*TMultiGeometryType `xml:"http://www.opengis.net/kml/2.2 MultiGeometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MultiGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MultiGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MultiGeometry instance.
func (me *XsdGoPkgHasElems_MultiGeometry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_MultiGeometry
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BoundaryObjectExtensionGroup struct {
	BoundaryObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 BoundaryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BoundaryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BoundaryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BoundaryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_BoundaryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BoundaryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BoundarySimpleExtensionGroup struct {
	BoundarySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BoundarySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BoundarySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BoundarySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BoundarySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_BoundarySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BoundarySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinearRing struct {
	LinearRing *TLinearRingType `xml:"http://www.opengis.net/kml/2.2 LinearRing"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinearRing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinearRing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinearRing instance.
func (me *XsdGoPkgHasElem_LinearRing) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinearRing
	if fn != nil {
		fn(me, true)
	}
	me.LinearRing.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TBoundaryType struct {
	XsdGoPkgHasElem_LinearRing

	XsdGoPkgHasElems_BoundaryObjectExtensionGroup

	XsdGoPkgHasElems_BoundarySimpleExtensionGroup
}

//	If the WalkHandlers.TBoundaryType function is not nil (ie. was set by outside code), calls it with this TBoundaryType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TBoundaryType instance.
func (me *TBoundaryType) Walk() {
	fn := WalkHandlers.TBoundaryType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_LinearRing.Walk()
	me.XsdGoPkgHasElems_BoundaryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_BoundarySimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_OuterBoundaryIs struct {
	OuterBoundaryIs *TBoundaryType `xml:"http://www.opengis.net/kml/2.2 outerBoundaryIs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OuterBoundaryIs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OuterBoundaryIs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OuterBoundaryIs instance.
func (me *XsdGoPkgHasElem_OuterBoundaryIs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_OuterBoundaryIs
	if fn != nil {
		fn(me, true)
	}
	me.OuterBoundaryIs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PolygonSimpleExtensionGroup struct {
	PolygonSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PolygonSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolygonSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolygonSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolygonSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PolygonSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PolygonSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PolygonObjectExtensionGroup struct {
	PolygonObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PolygonObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolygonObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolygonObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolygonObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PolygonObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PolygonObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_InnerBoundaryIs struct {
	InnerBoundaryIses []*TBoundaryType `xml:"http://www.opengis.net/kml/2.2 innerBoundaryIs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InnerBoundaryIs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InnerBoundaryIs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InnerBoundaryIs instance.
func (me *XsdGoPkgHasElems_InnerBoundaryIs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_InnerBoundaryIs
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.InnerBoundaryIses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TPolygonType struct {
	XsdGoPkgHasElems_PolygonObjectExtensionGroup

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElem_Tessellate

	XsdGoPkgHasElems_InnerBoundaryIs

	XsdGoPkgHasElem_OuterBoundaryIs

	XsdGoPkgHasElem_Extrude

	XsdGoPkgHasElems_PolygonSimpleExtensionGroup

	TAbstractGeometryType
}

//	If the WalkHandlers.TPolygonType function is not nil (ie. was set by outside code), calls it with this TPolygonType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TPolygonType instance.
func (me *TPolygonType) Walk() {
	fn := WalkHandlers.TPolygonType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.XsdGoPkgHasElem_Tessellate.Walk()
	me.XsdGoPkgHasElems_InnerBoundaryIs.Walk()
	me.XsdGoPkgHasElem_OuterBoundaryIs.Walk()
	me.XsdGoPkgHasElem_Extrude.Walk()
	me.XsdGoPkgHasElems_PolygonSimpleExtensionGroup.Walk()
	me.TAbstractGeometryType.Walk()
	me.XsdGoPkgHasElems_PolygonObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Polygon struct {
	Polygons []*TPolygonType `xml:"http://www.opengis.net/kml/2.2 Polygon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Polygon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Polygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Polygon instance.
func (me *XsdGoPkgHasElems_Polygon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Polygon
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Polygons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PointSimpleExtensionGroup struct {
	PointSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PointSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PointSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PointSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PointSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PointSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PointSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PointObjectExtensionGroup struct {
	PointObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PointObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PointObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PointObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PointObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PointObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PointObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TPointType struct {
	XsdGoPkgHasElem_Extrude

	XsdGoPkgHasElems_PointObjectExtensionGroup

	XsdGoPkgHasElem_AltitudeModeGroup

	TAbstractGeometryType

	XsdGoPkgHasElem_Coordinates

	XsdGoPkgHasElems_PointSimpleExtensionGroup
}

//	If the WalkHandlers.TPointType function is not nil (ie. was set by outside code), calls it with this TPointType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TPointType instance.
func (me *TPointType) Walk() {
	fn := WalkHandlers.TPointType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractGeometryType.Walk()
	me.XsdGoPkgHasElem_Coordinates.Walk()
	me.XsdGoPkgHasElems_PointSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Extrude.Walk()
	me.XsdGoPkgHasElems_PointObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Point struct {
	Points []*TPointType `xml:"http://www.opengis.net/kml/2.2 Point"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Point function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Point instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Point instance.
func (me *XsdGoPkgHasElems_Point) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Point
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Points {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractGeometryGroup struct {
	AbstractGeometryGroups []*TAbstractGeometryType `xml:"http://www.opengis.net/kml/2.2 AbstractGeometryGroup"`

	XsdGoPkgHasElems_Model

	XsdGoPkgHasElems_LinearRing

	XsdGoPkgHasElems_LineString

	XsdGoPkgHasElems_MultiGeometry

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Point
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractGeometryGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractGeometryGroup instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractGeometryGroup instance.
func (me *XsdGoPkgHasElems_AbstractGeometryGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractGeometryGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Polygon.Walk()
	me.XsdGoPkgHasElems_Point.Walk()
	me.XsdGoPkgHasElems_Model.Walk()
	me.XsdGoPkgHasElems_LinearRing.Walk()
	me.XsdGoPkgHasElems_LineString.Walk()
	me.XsdGoPkgHasElems_MultiGeometry.Walk()
	for _, x := range me.AbstractGeometryGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TMultiGeometryType struct {
	XsdGoPkgHasElems_AbstractGeometryGroup

	XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup

	TAbstractGeometryType

	XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup
}

//	If the WalkHandlers.TMultiGeometryType function is not nil (ie. was set by outside code), calls it with this TMultiGeometryType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TMultiGeometryType instance.
func (me *TMultiGeometryType) Walk() {
	fn := WalkHandlers.TMultiGeometryType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractGeometryGroup.Walk()
	me.XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup.Walk()
	me.TAbstractGeometryType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MultiGeometry struct {
	MultiGeometry *TMultiGeometryType `xml:"http://www.opengis.net/kml/2.2 MultiGeometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MultiGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MultiGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MultiGeometry instance.
func (me *XsdGoPkgHasElem_MultiGeometry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MultiGeometry
	if fn != nil {
		fn(me, true)
	}
	me.MultiGeometry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Point struct {
	Point *TPointType `xml:"http://www.opengis.net/kml/2.2 Point"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Point function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Point instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Point instance.
func (me *XsdGoPkgHasElem_Point) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Point
	if fn != nil {
		fn(me, true)
	}
	me.Point.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Polygon struct {
	Polygon *TPolygonType `xml:"http://www.opengis.net/kml/2.2 Polygon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Polygon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Polygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Polygon instance.
func (me *XsdGoPkgHasElem_Polygon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Polygon
	if fn != nil {
		fn(me, true)
	}
	me.Polygon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractGeometryGroup struct {
	AbstractGeometryGroup *TAbstractGeometryType `xml:"http://www.opengis.net/kml/2.2 AbstractGeometryGroup"`

	XsdGoPkgHasElem_MultiGeometry

	XsdGoPkgHasElem_LinearRing

	XsdGoPkgHasElem_Point

	XsdGoPkgHasElem_Polygon

	XsdGoPkgHasElem_LineString

	XsdGoPkgHasElem_Model
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractGeometryGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractGeometryGroup instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractGeometryGroup instance.
func (me *XsdGoPkgHasElem_AbstractGeometryGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractGeometryGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_LineString.Walk()
	me.XsdGoPkgHasElem_Model.Walk()
	me.XsdGoPkgHasElem_MultiGeometry.Walk()
	me.XsdGoPkgHasElem_LinearRing.Walk()
	me.XsdGoPkgHasElem_Point.Walk()
	me.XsdGoPkgHasElem_Polygon.Walk()
	me.AbstractGeometryGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineStyleObjectExtensionGroup struct {
	LineStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LineStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LineStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LookAtObjectExtensionGroup struct {
	LookAtObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LookAtObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LookAtObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LookAtObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LookAtObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LookAtObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LookAtObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LookAtSimpleExtensionGroup struct {
	LookAtSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LookAtSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LookAtSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LookAtSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LookAtSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LookAtSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LookAtSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup struct {
	AbstractViewSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractViewSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractViewObjectExtensionGroup struct {
	AbstractViewObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractViewObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractViewObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractViewObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractViewObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractViewObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractViewObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractViewType struct {
	TAbstractObjectType

	XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup

	XsdGoPkgHasElems_AbstractViewObjectExtensionGroup
}

//	If the WalkHandlers.TAbstractViewType function is not nil (ie. was set by outside code), calls it with this TAbstractViewType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractViewType instance.
func (me *TAbstractViewType) Walk() {
	fn := WalkHandlers.TAbstractViewType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractViewObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TLookAtType struct {
	XsdGoPkgHasElem_Latitude

	TAbstractViewType

	XsdGoPkgHasElem_Tilt

	XsdGoPkgHasElem_Altitude

	XsdGoPkgHasElems_LookAtObjectExtensionGroup

	XsdGoPkgHasElem_Longitude

	XsdGoPkgHasElem_Heading

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElems_LookAtSimpleExtensionGroup

	XsdGoPkgHasElem_Range
}

//	If the WalkHandlers.TLookAtType function is not nil (ie. was set by outside code), calls it with this TLookAtType instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TLookAtType instance.
func (me *TLookAtType) Walk() {
	fn := WalkHandlers.TLookAtType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LookAtObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Longitude.Walk()
	me.XsdGoPkgHasElem_Heading.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.XsdGoPkgHasElems_LookAtSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Range.Walk()
	me.XsdGoPkgHasElem_Latitude.Walk()
	me.TAbstractViewType.Walk()
	me.XsdGoPkgHasElem_Tilt.Walk()
	me.XsdGoPkgHasElem_Altitude.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LookAt struct {
	LookAt *TLookAtType `xml:"http://www.opengis.net/kml/2.2 LookAt"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LookAt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LookAt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LookAt instance.
func (me *XsdGoPkgHasElem_LookAt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LookAt
	if fn != nil {
		fn(me, true)
	}
	me.LookAt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_CameraSimpleExtensionGroup struct {
	CameraSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 CameraSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CameraSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CameraSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CameraSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_CameraSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_CameraSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_CameraObjectExtensionGroup struct {
	CameraObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 CameraObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CameraObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CameraObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CameraObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_CameraObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_CameraObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TCameraType struct {
	XsdGoPkgHasElem_Longitude

	XsdGoPkgHasElem_Latitude

	XsdGoPkgHasElems_CameraObjectExtensionGroup

	XsdGoPkgHasElem_Heading

	XsdGoPkgHasElem_AltitudeModeGroup

	XsdGoPkgHasElem_Tilt

	XsdGoPkgHasElem_Altitude

	TAbstractViewType

	XsdGoPkgHasElems_CameraSimpleExtensionGroup

	XsdGoPkgHasElem_Roll
}

//	If the WalkHandlers.TCameraType function is not nil (ie. was set by outside code), calls it with this TCameraType instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TCameraType instance.
func (me *TCameraType) Walk() {
	fn := WalkHandlers.TCameraType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Roll.Walk()
	me.XsdGoPkgHasElem_Longitude.Walk()
	me.XsdGoPkgHasElem_Latitude.Walk()
	me.XsdGoPkgHasElems_CameraObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Heading.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.XsdGoPkgHasElem_Tilt.Walk()
	me.XsdGoPkgHasElem_Altitude.Walk()
	me.TAbstractViewType.Walk()
	me.XsdGoPkgHasElems_CameraSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Camera struct {
	Camera *TCameraType `xml:"http://www.opengis.net/kml/2.2 Camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Camera instance.
func (me *XsdGoPkgHasElem_Camera) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Camera
	if fn != nil {
		fn(me, true)
	}
	me.Camera.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractViewGroup struct {
	AbstractViewGroup *TAbstractViewType `xml:"http://www.opengis.net/kml/2.2 AbstractViewGroup"`

	XsdGoPkgHasElem_LookAt

	XsdGoPkgHasElem_Camera
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractViewGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractViewGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractViewGroup instance.
func (me *XsdGoPkgHasElem_AbstractViewGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractViewGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_LookAt.Walk()
	me.XsdGoPkgHasElem_Camera.Walk()
	me.AbstractViewGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_OrientationObjectExtensionGroup struct {
	OrientationObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 OrientationObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrientationObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrientationObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrientationObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_OrientationObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_OrientationObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Url deprecated in 2.2
type XsdGoPkgHasElem_Url struct {
	//	Url deprecated in 2.2
	Url *TLinkType `xml:"http://www.opengis.net/kml/2.2 Url"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Url instance.
func (me *XsdGoPkgHasElem_Url) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Url
	if fn != nil {
		fn(me, true)
	}
	me.Url.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleMap struct {
	StyleMap *TStyleMapType `xml:"http://www.opengis.net/kml/2.2 StyleMap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleMap instance.
func (me *XsdGoPkgHasElem_StyleMap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleMap
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup struct {
	AbstractStyleSelectorSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup struct {
	AbstractStyleSelectorObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractStyleSelectorType struct {
	XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup

	XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup

	TAbstractObjectType
}

//	If the WalkHandlers.TAbstractStyleSelectorType function is not nil (ie. was set by outside code), calls it with this TAbstractStyleSelectorType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractStyleSelectorType instance.
func (me *TAbstractStyleSelectorType) Walk() {
	fn := WalkHandlers.TAbstractStyleSelectorType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup struct {
	LabelStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LabelStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup struct {
	AbstractSubStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup struct {
	AbstractSubStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractSubStyleType struct {
	TAbstractObjectType

	XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup

	XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup
}

//	If the WalkHandlers.TAbstractSubStyleType function is not nil (ie. was set by outside code), calls it with this TAbstractSubStyleType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractSubStyleType instance.
func (me *TAbstractSubStyleType) Walk() {
	fn := WalkHandlers.TAbstractSubStyleType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup struct {
	AbstractColorStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup struct {
	AbstractColorStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractColorStyleType struct {
	XsdGoPkgHasElem_Color

	TAbstractSubStyleType

	XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup

	XsdGoPkgHasElem_ColorMode

	XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup
}

//	If the WalkHandlers.TAbstractColorStyleType function is not nil (ie. was set by outside code), calls it with this TAbstractColorStyleType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TAbstractColorStyleType instance.
func (me *TAbstractColorStyleType) Walk() {
	fn := WalkHandlers.TAbstractColorStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ColorMode.Walk()
	me.XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Color.Walk()
	me.TAbstractSubStyleType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LabelStyleObjectExtensionGroup struct {
	LabelStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LabelStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabelStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabelStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabelStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LabelStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LabelStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLabelStyleType struct {
	XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup

	XsdGoPkgHasElem_Scale

	TAbstractColorStyleType

	XsdGoPkgHasElems_LabelStyleObjectExtensionGroup
}

//	If the WalkHandlers.TLabelStyleType function is not nil (ie. was set by outside code), calls it with this TLabelStyleType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TLabelStyleType instance.
func (me *TLabelStyleType) Walk() {
	fn := WalkHandlers.TLabelStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Scale.Walk()
	me.TAbstractColorStyleType.Walk()
	me.XsdGoPkgHasElems_LabelStyleObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LabelStyle struct {
	LabelStyle *TLabelStyleType `xml:"http://www.opengis.net/kml/2.2 LabelStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabelStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabelStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LabelStyle instance.
func (me *XsdGoPkgHasElem_LabelStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LabelStyle
	if fn != nil {
		fn(me, true)
	}
	me.LabelStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup struct {
	PolyStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PolyStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PolyStyleObjectExtensionGroup struct {
	PolyStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PolyStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolyStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolyStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolyStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PolyStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PolyStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TPolyStyleType struct {
	XsdGoPkgHasElem_Fill

	TAbstractColorStyleType

	XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup

	XsdGoPkgHasElem_Outline

	XsdGoPkgHasElems_PolyStyleObjectExtensionGroup
}

//	If the WalkHandlers.TPolyStyleType function is not nil (ie. was set by outside code), calls it with this TPolyStyleType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPolyStyleType instance.
func (me *TPolyStyleType) Walk() {
	fn := WalkHandlers.TPolyStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_PolyStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Fill.Walk()
	me.TAbstractColorStyleType.Walk()
	me.XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Outline.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PolyStyle struct {
	PolyStyle *TPolyStyleType `xml:"http://www.opengis.net/kml/2.2 PolyStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolyStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolyStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PolyStyle instance.
func (me *XsdGoPkgHasElem_PolyStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PolyStyle
	if fn != nil {
		fn(me, true)
	}
	me.PolyStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineStyleObjectExtensionGroup struct {
	LineStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LineStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LineStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineStyleSimpleExtensionGroup struct {
	LineStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LineStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LineStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLineStyleType struct {
	XsdGoPkgHasElems_LineStyleObjectExtensionGroup

	XsdGoPkgHasElems_LineStyleSimpleExtensionGroup

	TAbstractColorStyleType

	XsdGoPkgHasElem_Width
}

//	If the WalkHandlers.TLineStyleType function is not nil (ie. was set by outside code), calls it with this TLineStyleType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TLineStyleType instance.
func (me *TLineStyleType) Walk() {
	fn := WalkHandlers.TLineStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LineStyleSimpleExtensionGroup.Walk()
	me.TAbstractColorStyleType.Walk()
	me.XsdGoPkgHasElem_Width.Walk()
	me.XsdGoPkgHasElems_LineStyleObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineStyle struct {
	LineStyle *TLineStyleType `xml:"http://www.opengis.net/kml/2.2 LineStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LineStyle instance.
func (me *XsdGoPkgHasElem_LineStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineStyle
	if fn != nil {
		fn(me, true)
	}
	me.LineStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_ struct {
	Icon *TBasicLinkType `xml:"http://www.opengis.net/kml/2.2 Icon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_ instance.
func (me *XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_
	if fn != nil {
		fn(me, true)
	}
	me.Icon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_IconStyleSimpleExtensionGroup struct {
	IconStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 IconStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IconStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IconStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IconStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_IconStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_IconStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_IconStyleObjectExtensionGroup struct {
	IconStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 IconStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IconStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IconStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IconStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_IconStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_IconStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TIconStyleType struct {
	TAbstractColorStyleType

	XsdGoPkgHasElem_Heading

	XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_

	XsdGoPkgHasElem_Scale

	XsdGoPkgHasElem_HotSpot

	XsdGoPkgHasElems_IconStyleSimpleExtensionGroup

	XsdGoPkgHasElems_IconStyleObjectExtensionGroup
}

//	If the WalkHandlers.TIconStyleType function is not nil (ie. was set by outside code), calls it with this TIconStyleType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TIconStyleType instance.
func (me *TIconStyleType) Walk() {
	fn := WalkHandlers.TIconStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_.Walk()
	me.XsdGoPkgHasElem_Scale.Walk()
	me.XsdGoPkgHasElem_HotSpot.Walk()
	me.XsdGoPkgHasElems_IconStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_IconStyleObjectExtensionGroup.Walk()
	me.TAbstractColorStyleType.Walk()
	me.XsdGoPkgHasElem_Heading.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_IconStyle struct {
	IconStyle *TIconStyleType `xml:"http://www.opengis.net/kml/2.2 IconStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IconStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IconStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IconStyle instance.
func (me *XsdGoPkgHasElem_IconStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_IconStyle
	if fn != nil {
		fn(me, true)
	}
	me.IconStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleSimpleExtensionGroup struct {
	StyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 StyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_StyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ListStyleObjectExtensionGroup struct {
	ListStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ListStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ListStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ListStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ListStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ListStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ListStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ListStyleSimpleExtensionGroup struct {
	ListStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ListStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ListStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ListStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ListStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ListStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ListStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ItemIcon struct {
	ItemIcons []*TItemIconType `xml:"http://www.opengis.net/kml/2.2 ItemIcon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemIcon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemIcon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemIcon instance.
func (me *XsdGoPkgHasElems_ItemIcon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ItemIcon
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ItemIcons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TListStyleType struct {
	TAbstractSubStyleType

	XsdGoPkgHasElems_ListStyleObjectExtensionGroup

	XsdGoPkgHasElems_ListStyleSimpleExtensionGroup

	XsdGoPkgHasElem_ListItemType

	XsdGoPkgHasElem_MaxSnippetLines

	XsdGoPkgHasElems_ItemIcon

	XsdGoPkgHasElem_BgColor
}

//	If the WalkHandlers.TListStyleType function is not nil (ie. was set by outside code), calls it with this TListStyleType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TListStyleType instance.
func (me *TListStyleType) Walk() {
	fn := WalkHandlers.TListStyleType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractSubStyleType.Walk()
	me.XsdGoPkgHasElems_ListStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ListStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ListItemType.Walk()
	me.XsdGoPkgHasElem_MaxSnippetLines.Walk()
	me.XsdGoPkgHasElems_ItemIcon.Walk()
	me.XsdGoPkgHasElem_BgColor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ListStyle struct {
	ListStyle *TListStyleType `xml:"http://www.opengis.net/kml/2.2 ListStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ListStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ListStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ListStyle instance.
func (me *XsdGoPkgHasElem_ListStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ListStyle
	if fn != nil {
		fn(me, true)
	}
	me.ListStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleObjectExtensionGroup struct {
	StyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 StyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_StyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup struct {
	BalloonStyleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 BalloonStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup struct {
	BalloonStyleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BalloonStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TBalloonStyleType struct {
	TAbstractSubStyleType

	XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup

	//	color deprecated in 2.1
	XsdGoPkgHasElem_BgColor

	XsdGoPkgHasElem_DisplayMode

	XsdGoPkgHasElem_TextColor

	//	color deprecated in 2.1
	XsdGoPkgHasElem_Color

	XsdGoPkgHasElem_Text

	XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup
}

//	If the WalkHandlers.TBalloonStyleType function is not nil (ie. was set by outside code), calls it with this TBalloonStyleType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TBalloonStyleType instance.
func (me *TBalloonStyleType) Walk() {
	fn := WalkHandlers.TBalloonStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_TextColor.Walk()
	me.XsdGoPkgHasElem_Color.Walk()
	me.XsdGoPkgHasElem_Text.Walk()
	me.XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup.Walk()
	me.TAbstractSubStyleType.Walk()
	me.XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_BgColor.Walk()
	me.XsdGoPkgHasElem_DisplayMode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BalloonStyle struct {
	BalloonStyle *TBalloonStyleType `xml:"http://www.opengis.net/kml/2.2 BalloonStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BalloonStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BalloonStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BalloonStyle instance.
func (me *XsdGoPkgHasElem_BalloonStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BalloonStyle
	if fn != nil {
		fn(me, true)
	}
	me.BalloonStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TStyleType struct {
	XsdGoPkgHasElem_IconStyle

	XsdGoPkgHasElems_StyleSimpleExtensionGroup

	XsdGoPkgHasElem_ListStyle

	XsdGoPkgHasElems_StyleObjectExtensionGroup

	XsdGoPkgHasElem_BalloonStyle

	TAbstractStyleSelectorType

	XsdGoPkgHasElem_LabelStyle

	XsdGoPkgHasElem_PolyStyle

	XsdGoPkgHasElem_LineStyle
}

//	If the WalkHandlers.TStyleType function is not nil (ie. was set by outside code), calls it with this TStyleType instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TStyleType instance.
func (me *TStyleType) Walk() {
	fn := WalkHandlers.TStyleType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_StyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_BalloonStyle.Walk()
	me.TAbstractStyleSelectorType.Walk()
	me.XsdGoPkgHasElem_LabelStyle.Walk()
	me.XsdGoPkgHasElem_PolyStyle.Walk()
	me.XsdGoPkgHasElem_LineStyle.Walk()
	me.XsdGoPkgHasElem_IconStyle.Walk()
	me.XsdGoPkgHasElems_StyleSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ListStyle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Style struct {
	Style *TStyleType `xml:"http://www.opengis.net/kml/2.2 Style"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Style function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Style instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Style instance.
func (me *XsdGoPkgHasElem_Style) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Style
	if fn != nil {
		fn(me, true)
	}
	me.Style.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractStyleSelectorGroup struct {
	AbstractStyleSelectorGroup *TAbstractStyleSelectorType `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorGroup"`

	XsdGoPkgHasElem_StyleMap

	XsdGoPkgHasElem_Style
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractStyleSelectorGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractStyleSelectorGroup instance.
func (me *XsdGoPkgHasElem_AbstractStyleSelectorGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_StyleMap.Walk()
	me.XsdGoPkgHasElem_Style.Walk()
	me.AbstractStyleSelectorGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PairObjectExtensionGroup struct {
	PairObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PairObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PairObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PairObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PairObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PairObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PairObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PairSimpleExtensionGroup struct {
	PairSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PairSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PairSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PairSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PairSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PairSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PairSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TPairType struct {
	XsdGoPkgHasElems_PairObjectExtensionGroup

	XsdGoPkgHasElems_PairSimpleExtensionGroup

	XsdGoPkgHasElem_Key

	XsdGoPkgHasElem_AbstractStyleSelectorGroup

	XsdGoPkgHasElem_StyleUrl

	TAbstractObjectType
}

//	If the WalkHandlers.TPairType function is not nil (ie. was set by outside code), calls it with this TPairType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TPairType instance.
func (me *TPairType) Walk() {
	fn := WalkHandlers.TPairType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_PairObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_PairSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Key.Walk()
	me.XsdGoPkgHasElem_AbstractStyleSelectorGroup.Walk()
	me.XsdGoPkgHasElem_StyleUrl.Walk()
	me.TAbstractObjectType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Pair struct {
	Pairs []*TPairType `xml:"http://www.opengis.net/kml/2.2 Pair"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pair function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pair instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pair instance.
func (me *XsdGoPkgHasElems_Pair) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Pair
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Pairs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleMapSimpleExtensionGroup struct {
	StyleMapSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 StyleMapSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleMapSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleMapSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleMapSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_StyleMapSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleMapSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleMapObjectExtensionGroup struct {
	StyleMapObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 StyleMapObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleMapObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleMapObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleMapObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_StyleMapObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleMapObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TStyleMapType struct {
	XsdGoPkgHasElems_StyleMapObjectExtensionGroup

	TAbstractStyleSelectorType

	XsdGoPkgHasElems_Pair

	XsdGoPkgHasElems_StyleMapSimpleExtensionGroup
}

//	If the WalkHandlers.TStyleMapType function is not nil (ie. was set by outside code), calls it with this TStyleMapType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TStyleMapType instance.
func (me *TStyleMapType) Walk() {
	fn := WalkHandlers.TStyleMapType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractStyleSelectorType.Walk()
	me.XsdGoPkgHasElems_Pair.Walk()
	me.XsdGoPkgHasElems_StyleMapSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_StyleMapObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_StyleMap struct {
	StyleMaps []*TStyleMapType `xml:"http://www.opengis.net/kml/2.2 StyleMap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StyleMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StyleMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StyleMap instance.
func (me *XsdGoPkgHasElems_StyleMap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_StyleMap
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.StyleMaps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Style struct {
	Styles []*TStyleType `xml:"http://www.opengis.net/kml/2.2 Style"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Style function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Style instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Style instance.
func (me *XsdGoPkgHasElems_Style) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Style
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Styles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractStyleSelectorGroup struct {
	AbstractStyleSelectorGroups []*TAbstractStyleSelectorType `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorGroup"`

	XsdGoPkgHasElems_StyleMap

	XsdGoPkgHasElems_Style
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractStyleSelectorGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractStyleSelectorGroup instance.
func (me *XsdGoPkgHasElems_AbstractStyleSelectorGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractStyleSelectorGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_StyleMap.Walk()
	me.XsdGoPkgHasElems_Style.Walk()
	for _, x := range me.AbstractStyleSelectorGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup struct {
	AbstractFeatureObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Metadata deprecated in 2.2
//	MetadataType deprecated in 2.2
type TMetadataType struct {
}

//	If the WalkHandlers.TMetadataType function is not nil (ie. was set by outside code), calls it with this TMetadataType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TMetadataType instance.
func (me *TMetadataType) Walk() {
	fn := WalkHandlers.TMetadataType
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Metadata struct {
	//	Metadata deprecated in 2.2
	Metadata *TMetadataType `xml:"http://www.opengis.net/kml/2.2 Metadata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Metadata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Metadata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Metadata instance.
func (me *XsdGoPkgHasElem_Metadata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Metadata
	if fn != nil {
		fn(me, true)
	}
	me.Metadata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SchemaDataExtension struct {
	SchemaDataExtensions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 SchemaDataExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchemaDataExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchemaDataExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchemaDataExtension instance.
func (me *XsdGoPkgHasElems_SchemaDataExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SchemaDataExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_SchemaUrl_XsdtAnyURI_ struct {
	SchemaUrl xsdt.AnyURI `xml:"http://www.opengis.net/kml/2.2 schemaUrl,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.opengis.net/kml/2.2 name,attr"`
}

type TSimpleDataType struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TSimpleDataType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

//	If the WalkHandlers.TSimpleDataType function is not nil (ie. was set by outside code), calls it with this TSimpleDataType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TSimpleDataType instance.
func (me *TSimpleDataType) Walk() {
	fn := WalkHandlers.TSimpleDataType
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SimpleData struct {
	SimpleDatas []*TSimpleDataType `xml:"http://www.opengis.net/kml/2.2 SimpleData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SimpleData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SimpleData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SimpleData instance.
func (me *XsdGoPkgHasElems_SimpleData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SimpleData
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.SimpleDatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TSchemaDataType struct {
	XsdGoPkgHasElems_SchemaDataExtension

	XsdGoPkgHasAttr_SchemaUrl_XsdtAnyURI_

	TAbstractObjectType

	XsdGoPkgHasElems_SimpleData
}

//	If the WalkHandlers.TSchemaDataType function is not nil (ie. was set by outside code), calls it with this TSchemaDataType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TSchemaDataType instance.
func (me *TSchemaDataType) Walk() {
	fn := WalkHandlers.TSchemaDataType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_SchemaDataExtension.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElems_SimpleData.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SchemaData struct {
	SchemaDatas []*TSchemaDataType `xml:"http://www.opengis.net/kml/2.2 SchemaData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchemaData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchemaData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchemaData instance.
func (me *XsdGoPkgHasElems_SchemaData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SchemaData
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.SchemaDatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_DataExtension struct {
	DataExtensions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 DataExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataExtension instance.
func (me *XsdGoPkgHasElems_DataExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DataExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TDataType struct {
	XsdGoPkgHasElem_DisplayName

	XsdGoPkgHasElems_DataExtension

	TAbstractObjectType

	XsdGoPkgHasElem_Value

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TDataType function is not nil (ie. was set by outside code), calls it with this TDataType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TDataType instance.
func (me *TDataType) Walk() {
	fn := WalkHandlers.TDataType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_Value.Walk()
	me.XsdGoPkgHasElem_DisplayName.Walk()
	me.XsdGoPkgHasElems_DataExtension.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Data struct {
	Datas []*TDataType `xml:"http://www.opengis.net/kml/2.2 Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Data instance.
func (me *XsdGoPkgHasElems_Data) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Data
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Datas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TExtendedDataType struct {
	XsdGoPkgHasElems_SchemaData

	XsdGoPkgHasElems_Data
}

//	If the WalkHandlers.TExtendedDataType function is not nil (ie. was set by outside code), calls it with this TExtendedDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TExtendedDataType instance.
func (me *TExtendedDataType) Walk() {
	fn := WalkHandlers.TExtendedDataType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Data.Walk()
	me.XsdGoPkgHasElems_SchemaData.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ExtendedData struct {
	ExtendedData *TExtendedDataType `xml:"http://www.opengis.net/kml/2.2 ExtendedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtendedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtendedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtendedData instance.
func (me *XsdGoPkgHasElem_ExtendedData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ExtendedData
	if fn != nil {
		fn(me, true)
	}
	me.ExtendedData.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup struct {
	AbstractFeatureSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup struct {
	AbstractLatLonBoxObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractLatLonBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup struct {
	AbstractLatLonBoxSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractLatLonBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractLatLonBoxType struct {
	XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup

	XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup

	XsdGoPkgHasElem_North

	XsdGoPkgHasElem_South

	XsdGoPkgHasElem_West

	TAbstractObjectType

	XsdGoPkgHasElem_East
}

//	If the WalkHandlers.TAbstractLatLonBoxType function is not nil (ie. was set by outside code), calls it with this TAbstractLatLonBoxType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TAbstractLatLonBoxType instance.
func (me *TAbstractLatLonBoxType) Walk() {
	fn := WalkHandlers.TAbstractLatLonBoxType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_West.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_East.Walk()
	me.XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_North.Walk()
	me.XsdGoPkgHasElem_South.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup struct {
	LatLonAltBoxSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LatLonAltBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup struct {
	LatLonAltBoxObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LatLonAltBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLatLonAltBoxType struct {
	XsdGoPkgHasElem_MinAltitude

	XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup

	XsdGoPkgHasElem_AltitudeModeGroup

	TAbstractLatLonBoxType

	XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup

	XsdGoPkgHasElem_MaxAltitude
}

//	If the WalkHandlers.TLatLonAltBoxType function is not nil (ie. was set by outside code), calls it with this TLatLonAltBoxType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TLatLonAltBoxType instance.
func (me *TLatLonAltBoxType) Walk() {
	fn := WalkHandlers.TLatLonAltBoxType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.TAbstractLatLonBoxType.Walk()
	me.XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_MaxAltitude.Walk()
	me.XsdGoPkgHasElem_MinAltitude.Walk()
	me.XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonAltBox struct {
	LatLonAltBox *TLatLonAltBoxType `xml:"http://www.opengis.net/kml/2.2 LatLonAltBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonAltBox function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonAltBox instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LatLonAltBox instance.
func (me *XsdGoPkgHasElem_LatLonAltBox) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonAltBox
	if fn != nil {
		fn(me, true)
	}
	me.LatLonAltBox.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_RegionSimpleExtensionGroup struct {
	RegionSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 RegionSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegionSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegionSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegionSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_RegionSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RegionSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LodSimpleExtensionGroup struct {
	LodSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LodSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LodSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LodSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LodSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LodSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LodSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LodObjectExtensionGroup struct {
	LodObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LodObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LodObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LodObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LodObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LodObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LodObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLodType struct {
	XsdGoPkgHasElems_LodSimpleExtensionGroup

	XsdGoPkgHasElems_LodObjectExtensionGroup

	TAbstractObjectType

	XsdGoPkgHasElem_MinLodPixels

	XsdGoPkgHasElem_MaxFadeExtent

	XsdGoPkgHasElem_MinFadeExtent

	XsdGoPkgHasElem_MaxLodPixels
}

//	If the WalkHandlers.TLodType function is not nil (ie. was set by outside code), calls it with this TLodType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TLodType instance.
func (me *TLodType) Walk() {
	fn := WalkHandlers.TLodType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_LodObjectExtensionGroup.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_MinLodPixels.Walk()
	me.XsdGoPkgHasElem_MaxFadeExtent.Walk()
	me.XsdGoPkgHasElem_MinFadeExtent.Walk()
	me.XsdGoPkgHasElem_MaxLodPixels.Walk()
	me.XsdGoPkgHasElems_LodSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Lod struct {
	Lod *TLodType `xml:"http://www.opengis.net/kml/2.2 Lod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lod instance.
func (me *XsdGoPkgHasElem_Lod) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Lod
	if fn != nil {
		fn(me, true)
	}
	me.Lod.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_RegionObjectExtensionGroup struct {
	RegionObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 RegionObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegionObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegionObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegionObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_RegionObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_RegionObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TRegionType struct {
	TAbstractObjectType

	XsdGoPkgHasElem_LatLonAltBox

	XsdGoPkgHasElems_RegionSimpleExtensionGroup

	XsdGoPkgHasElem_Lod

	XsdGoPkgHasElems_RegionObjectExtensionGroup
}

//	If the WalkHandlers.TRegionType function is not nil (ie. was set by outside code), calls it with this TRegionType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TRegionType instance.
func (me *TRegionType) Walk() {
	fn := WalkHandlers.TRegionType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_RegionObjectExtensionGroup.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_LatLonAltBox.Walk()
	me.XsdGoPkgHasElems_RegionSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Lod.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Region struct {
	Region *TRegionType `xml:"http://www.opengis.net/kml/2.2 Region"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Region function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Region instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Region instance.
func (me *XsdGoPkgHasElem_Region) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Region
	if fn != nil {
		fn(me, true)
	}
	me.Region.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractFeatureType struct {
	XsdGoPkgHasElems_AbstractStyleSelectorGroup

	XsdGoPkgHasElem_Description

	XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup

	//	Metadata deprecated in 2.2
	XsdGoPkgHasElem_Metadata

	XsdGoPkgHasElem_Visibility

	TAbstractObjectType

	XsdGoPkgHasElem_AbstractTimePrimitiveGroup

	atom.XsdGoPkgHasElem_Link

	XsdGoPkgHasElem_Open

	XsdGoPkgHasElem_Address

	//	Metadata deprecated in 2.2
	XsdGoPkgHasElem_ExtendedData

	atom.XsdGoPkgHasElem_Author

	XsdGoPkgHasElem_AbstractViewGroup

	XsdGoPkgHasElem_Name

	XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup

	XsdGoPkgHasElem_PhoneNumber

	XsdGoPkgHasElem_Region

	//	Snippet deprecated in 2.2
	XsdGoPkgHasElem_Snippet

	xal.XsdGoPkgHasElem_AddressDetails

	XsdGoPkgHasElem_StyleUrl
}

//	If the WalkHandlers.TAbstractFeatureType function is not nil (ie. was set by outside code), calls it with this TAbstractFeatureType instance as the single argument. Then calls the Walk() method on 17/20 embed(s) and 0/0 field(s) belonging to this TAbstractFeatureType instance.
func (me *TAbstractFeatureType) Walk() {
	fn := WalkHandlers.TAbstractFeatureType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Visibility.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_AbstractTimePrimitiveGroup.Walk()
	me.XsdGoPkgHasElem_Open.Walk()
	me.XsdGoPkgHasElem_Address.Walk()
	me.XsdGoPkgHasElem_ExtendedData.Walk()
	me.XsdGoPkgHasElem_AbstractViewGroup.Walk()
	me.XsdGoPkgHasElem_Name.Walk()
	me.XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PhoneNumber.Walk()
	me.XsdGoPkgHasElem_Region.Walk()
	me.XsdGoPkgHasElem_Snippet.Walk()
	me.XsdGoPkgHasElem_StyleUrl.Walk()
	me.XsdGoPkgHasElems_AbstractStyleSelectorGroup.Walk()
	me.XsdGoPkgHasElem_Description.Walk()
	me.XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Metadata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup struct {
	NetworkLinkObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 NetworkLinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup struct {
	NetworkLinkSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TNetworkLinkType struct {
	XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup

	//	Url deprecated in 2.2
	XsdGoPkgHasElem_Link

	XsdGoPkgHasElem_FlyToView

	//	Url deprecated in 2.2
	XsdGoPkgHasElem_Url

	XsdGoPkgHasElem_RefreshVisibility

	TAbstractFeatureType

	XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup
}

//	If the WalkHandlers.TNetworkLinkType function is not nil (ie. was set by outside code), calls it with this TNetworkLinkType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TNetworkLinkType instance.
func (me *TNetworkLinkType) Walk() {
	fn := WalkHandlers.TNetworkLinkType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Link.Walk()
	me.XsdGoPkgHasElem_FlyToView.Walk()
	me.XsdGoPkgHasElem_Url.Walk()
	me.XsdGoPkgHasElem_RefreshVisibility.Walk()
	me.TAbstractFeatureType.Walk()
	me.XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLink struct {
	NetworkLink *TNetworkLinkType `xml:"http://www.opengis.net/kml/2.2 NetworkLink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLink instance.
func (me *XsdGoPkgHasElem_NetworkLink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLink
	if fn != nil {
		fn(me, true)
	}
	me.NetworkLink.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup struct {
	LatLonBoxObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 LatLonBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup struct {
	LatLonBoxSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LatLonBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TLatLonBoxType struct {
	XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup

	XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup

	XsdGoPkgHasElem_Rotation

	TAbstractLatLonBoxType
}

//	If the WalkHandlers.TLatLonBoxType function is not nil (ie. was set by outside code), calls it with this TLatLonBoxType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TLatLonBoxType instance.
func (me *TLatLonBoxType) Walk() {
	fn := WalkHandlers.TLatLonBoxType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractLatLonBoxType.Walk()
	me.XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Rotation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonBox struct {
	LatLonBox *TLatLonBoxType `xml:"http://www.opengis.net/kml/2.2 LatLonBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonBox function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonBox instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LatLonBox instance.
func (me *XsdGoPkgHasElem_LatLonBox) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonBox
	if fn != nil {
		fn(me, true)
	}
	me.LatLonBox.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup struct {
	AbstractOverlayObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup struct {
	AbstractOverlaySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractOverlayType struct {
	TAbstractFeatureType

	XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup

	XsdGoPkgHasElem_Color

	XsdGoPkgHasElem_DrawOrder

	XsdGoPkgHasElem_Icon

	XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup
}

//	If the WalkHandlers.TAbstractOverlayType function is not nil (ie. was set by outside code), calls it with this TAbstractOverlayType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TAbstractOverlayType instance.
func (me *TAbstractOverlayType) Walk() {
	fn := WalkHandlers.TAbstractOverlayType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup.Walk()
	me.TAbstractFeatureType.Walk()
	me.XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Color.Walk()
	me.XsdGoPkgHasElem_DrawOrder.Walk()
	me.XsdGoPkgHasElem_Icon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup struct {
	GroundOverlaySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 GroundOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup struct {
	GroundOverlayObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 GroundOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TGroundOverlayType struct {
	XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup

	XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup

	XsdGoPkgHasElem_LatLonBox

	XsdGoPkgHasElem_Altitude

	XsdGoPkgHasElem_AltitudeModeGroup

	TAbstractOverlayType
}

//	If the WalkHandlers.TGroundOverlayType function is not nil (ie. was set by outside code), calls it with this TGroundOverlayType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TGroundOverlayType instance.
func (me *TGroundOverlayType) Walk() {
	fn := WalkHandlers.TGroundOverlayType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Altitude.Walk()
	me.XsdGoPkgHasElem_AltitudeModeGroup.Walk()
	me.TAbstractOverlayType.Walk()
	me.XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LatLonBox.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_GroundOverlay struct {
	GroundOverlay *TGroundOverlayType `xml:"http://www.opengis.net/kml/2.2 GroundOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GroundOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GroundOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GroundOverlay instance.
func (me *XsdGoPkgHasElem_GroundOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_GroundOverlay
	if fn != nil {
		fn(me, true)
	}
	me.GroundOverlay.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup struct {
	PhotoOverlaySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PhotoOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup struct {
	PhotoOverlayObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PhotoOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup struct {
	ImagePyramidSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ImagePyramidSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup struct {
	ImagePyramidObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ImagePyramidObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TImagePyramidType struct {
	XsdGoPkgHasElem_MaxHeight

	XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup

	XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup

	XsdGoPkgHasElem_GridOrigin

	XsdGoPkgHasElem_MaxWidth

	TAbstractObjectType

	XsdGoPkgHasElem_TileSize
}

//	If the WalkHandlers.TImagePyramidType function is not nil (ie. was set by outside code), calls it with this TImagePyramidType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TImagePyramidType instance.
func (me *TImagePyramidType) Walk() {
	fn := WalkHandlers.TImagePyramidType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_MaxHeight.Walk()
	me.XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_GridOrigin.Walk()
	me.XsdGoPkgHasElem_MaxWidth.Walk()
	me.TAbstractObjectType.Walk()
	me.XsdGoPkgHasElem_TileSize.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ImagePyramid struct {
	ImagePyramid *TImagePyramidType `xml:"http://www.opengis.net/kml/2.2 ImagePyramid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ImagePyramid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ImagePyramid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ImagePyramid instance.
func (me *XsdGoPkgHasElem_ImagePyramid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ImagePyramid
	if fn != nil {
		fn(me, true)
	}
	me.ImagePyramid.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TPhotoOverlayType struct {
	XsdGoPkgHasElem_Point

	TAbstractOverlayType

	XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup

	XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup

	XsdGoPkgHasElem_Shape

	XsdGoPkgHasElem_ViewVolume

	XsdGoPkgHasElem_ImagePyramid

	XsdGoPkgHasElem_Rotation
}

//	If the WalkHandlers.TPhotoOverlayType function is not nil (ie. was set by outside code), calls it with this TPhotoOverlayType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TPhotoOverlayType instance.
func (me *TPhotoOverlayType) Walk() {
	fn := WalkHandlers.TPhotoOverlayType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Point.Walk()
	me.TAbstractOverlayType.Walk()
	me.XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Shape.Walk()
	me.XsdGoPkgHasElem_ViewVolume.Walk()
	me.XsdGoPkgHasElem_ImagePyramid.Walk()
	me.XsdGoPkgHasElem_Rotation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PhotoOverlay struct {
	PhotoOverlay *TPhotoOverlayType `xml:"http://www.opengis.net/kml/2.2 PhotoOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhotoOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhotoOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhotoOverlay instance.
func (me *XsdGoPkgHasElem_PhotoOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PhotoOverlay
	if fn != nil {
		fn(me, true)
	}
	me.PhotoOverlay.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup struct {
	ScreenOverlayObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ScreenOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup struct {
	ScreenOverlaySimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ScreenOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TScreenOverlayType struct {
	XsdGoPkgHasElem_OverlayXY

	XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup

	XsdGoPkgHasElem_Rotation

	XsdGoPkgHasElem_RotationXY

	XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup

	TAbstractOverlayType

	XsdGoPkgHasElem_Size

	XsdGoPkgHasElem_ScreenXY
}

//	If the WalkHandlers.TScreenOverlayType function is not nil (ie. was set by outside code), calls it with this TScreenOverlayType instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TScreenOverlayType instance.
func (me *TScreenOverlayType) Walk() {
	fn := WalkHandlers.TScreenOverlayType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup.Walk()
	me.TAbstractOverlayType.Walk()
	me.XsdGoPkgHasElem_Size.Walk()
	me.XsdGoPkgHasElem_ScreenXY.Walk()
	me.XsdGoPkgHasElem_OverlayXY.Walk()
	me.XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Rotation.Walk()
	me.XsdGoPkgHasElem_RotationXY.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScreenOverlay struct {
	ScreenOverlay *TScreenOverlayType `xml:"http://www.opengis.net/kml/2.2 ScreenOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScreenOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScreenOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ScreenOverlay instance.
func (me *XsdGoPkgHasElem_ScreenOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScreenOverlay
	if fn != nil {
		fn(me, true)
	}
	me.ScreenOverlay.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractOverlayGroup struct {
	AbstractOverlayGroup *TAbstractOverlayType `xml:"http://www.opengis.net/kml/2.2 AbstractOverlayGroup"`

	XsdGoPkgHasElem_PhotoOverlay

	XsdGoPkgHasElem_ScreenOverlay

	XsdGoPkgHasElem_GroundOverlay
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractOverlayGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractOverlayGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractOverlayGroup instance.
func (me *XsdGoPkgHasElem_AbstractOverlayGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractOverlayGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_PhotoOverlay.Walk()
	me.XsdGoPkgHasElem_ScreenOverlay.Walk()
	me.XsdGoPkgHasElem_GroundOverlay.Walk()
	me.AbstractOverlayGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup struct {
	PlacemarkSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PlacemarkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PlacemarkObjectExtensionGroup struct {
	PlacemarkObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 PlacemarkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PlacemarkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PlacemarkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PlacemarkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_PlacemarkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PlacemarkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TPlacemarkType struct {
	TAbstractFeatureType

	XsdGoPkgHasElem_AbstractGeometryGroup

	XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup

	XsdGoPkgHasElems_PlacemarkObjectExtensionGroup
}

//	If the WalkHandlers.TPlacemarkType function is not nil (ie. was set by outside code), calls it with this TPlacemarkType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPlacemarkType instance.
func (me *TPlacemarkType) Walk() {
	fn := WalkHandlers.TPlacemarkType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_PlacemarkObjectExtensionGroup.Walk()
	me.TAbstractFeatureType.Walk()
	me.XsdGoPkgHasElem_AbstractGeometryGroup.Walk()
	me.XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Placemark struct {
	Placemark *TPlacemarkType `xml:"http://www.opengis.net/kml/2.2 Placemark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Placemark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Placemark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Placemark instance.
func (me *XsdGoPkgHasElem_Placemark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Placemark
	if fn != nil {
		fn(me, true)
	}
	me.Placemark.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_DocumentSimpleExtensionGroup struct {
	DocumentSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 DocumentSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_DocumentSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DocumentSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Document struct {
	Documents []*TDocumentType `xml:"http://www.opengis.net/kml/2.2 Document"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Document function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Document instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Document instance.
func (me *XsdGoPkgHasElems_Document) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Document
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_FolderSimpleExtensionGroup struct {
	FolderSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 FolderSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FolderSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FolderSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FolderSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_FolderSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_FolderSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup struct {
	AbstractContainerSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractContainerSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup struct {
	AbstractContainerObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractContainerObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TAbstractContainerType struct {
	XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup

	XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup

	TAbstractFeatureType
}

//	If the WalkHandlers.TAbstractContainerType function is not nil (ie. was set by outside code), calls it with this TAbstractContainerType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAbstractContainerType instance.
func (me *TAbstractContainerType) Walk() {
	fn := WalkHandlers.TAbstractContainerType
	if fn != nil {
		fn(me, true)
	}
	me.TAbstractFeatureType.Walk()
	me.XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_FolderObjectExtensionGroup struct {
	FolderObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 FolderObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FolderObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FolderObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FolderObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_FolderObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_FolderObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TFolderType struct {
	XsdGoPkgHasElems_AbstractFeatureGroup

	XsdGoPkgHasElems_FolderSimpleExtensionGroup

	TAbstractContainerType

	XsdGoPkgHasElems_FolderObjectExtensionGroup
}

//	If the WalkHandlers.TFolderType function is not nil (ie. was set by outside code), calls it with this TFolderType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TFolderType instance.
func (me *TFolderType) Walk() {
	fn := WalkHandlers.TFolderType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_FolderObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_FolderSimpleExtensionGroup.Walk()
	me.TAbstractContainerType.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Folder struct {
	Folders []*TFolderType `xml:"http://www.opengis.net/kml/2.2 Folder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Folder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Folder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Folder instance.
func (me *XsdGoPkgHasElems_Folder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Folder
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Folders {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractContainerGroup struct {
	AbstractContainerGroups []*TAbstractContainerType `xml:"http://www.opengis.net/kml/2.2 AbstractContainerGroup"`

	XsdGoPkgHasElems_Folder

	XsdGoPkgHasElems_Document
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractContainerGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractContainerGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractContainerGroup instance.
func (me *XsdGoPkgHasElems_AbstractContainerGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractContainerGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Folder.Walk()
	me.XsdGoPkgHasElems_Document.Walk()
	for _, x := range me.AbstractContainerGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_NetworkLink struct {
	NetworkLinks []*TNetworkLinkType `xml:"http://www.opengis.net/kml/2.2 NetworkLink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLink instance.
func (me *XsdGoPkgHasElems_NetworkLink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLink
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.NetworkLinks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PhotoOverlay struct {
	PhotoOverlays []*TPhotoOverlayType `xml:"http://www.opengis.net/kml/2.2 PhotoOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhotoOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhotoOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhotoOverlay instance.
func (me *XsdGoPkgHasElems_PhotoOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PhotoOverlay
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.PhotoOverlays {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScreenOverlay struct {
	ScreenOverlays []*TScreenOverlayType `xml:"http://www.opengis.net/kml/2.2 ScreenOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScreenOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScreenOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScreenOverlay instance.
func (me *XsdGoPkgHasElems_ScreenOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScreenOverlay
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ScreenOverlays {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_GroundOverlay struct {
	GroundOverlays []*TGroundOverlayType `xml:"http://www.opengis.net/kml/2.2 GroundOverlay"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GroundOverlay function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GroundOverlay instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GroundOverlay instance.
func (me *XsdGoPkgHasElems_GroundOverlay) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_GroundOverlay
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.GroundOverlays {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractOverlayGroup struct {
	AbstractOverlayGroups []*TAbstractOverlayType `xml:"http://www.opengis.net/kml/2.2 AbstractOverlayGroup"`

	XsdGoPkgHasElems_ScreenOverlay

	XsdGoPkgHasElems_GroundOverlay

	XsdGoPkgHasElems_PhotoOverlay
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractOverlayGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractOverlayGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractOverlayGroup instance.
func (me *XsdGoPkgHasElems_AbstractOverlayGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractOverlayGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_ScreenOverlay.Walk()
	me.XsdGoPkgHasElems_GroundOverlay.Walk()
	me.XsdGoPkgHasElems_PhotoOverlay.Walk()
	for _, x := range me.AbstractOverlayGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Placemark struct {
	Placemarks []*TPlacemarkType `xml:"http://www.opengis.net/kml/2.2 Placemark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Placemark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Placemark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Placemark instance.
func (me *XsdGoPkgHasElems_Placemark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Placemark
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Placemarks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractFeatureGroup struct {
	AbstractFeatureGroups []*TAbstractFeatureType `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureGroup"`

	XsdGoPkgHasElems_NetworkLink

	XsdGoPkgHasElems_AbstractOverlayGroup

	XsdGoPkgHasElems_Placemark

	XsdGoPkgHasElems_AbstractContainerGroup
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractFeatureGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractFeatureGroup instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractFeatureGroup instance.
func (me *XsdGoPkgHasElems_AbstractFeatureGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractFeatureGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Placemark.Walk()
	me.XsdGoPkgHasElems_AbstractContainerGroup.Walk()
	me.XsdGoPkgHasElems_NetworkLink.Walk()
	me.XsdGoPkgHasElems_AbstractOverlayGroup.Walk()
	for _, x := range me.AbstractFeatureGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SchemaExtension struct {
	SchemaExtensions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 SchemaExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SchemaExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SchemaExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SchemaExtension instance.
func (me *XsdGoPkgHasElems_SchemaExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SchemaExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://www.opengis.net/kml/2.2 type,attr"`
}

type XsdGoPkgHasElems_SimpleFieldExtension struct {
	SimpleFieldExtensions []xsdt.String `xml:"http://www.opengis.net/kml/2.2 SimpleFieldExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SimpleFieldExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SimpleFieldExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SimpleFieldExtension instance.
func (me *XsdGoPkgHasElems_SimpleFieldExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SimpleFieldExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TSimpleFieldType struct {
	XsdGoPkgHasElems_SimpleFieldExtension

	XsdGoPkgHasElem_DisplayName

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_
}

//	If the WalkHandlers.TSimpleFieldType function is not nil (ie. was set by outside code), calls it with this TSimpleFieldType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TSimpleFieldType instance.
func (me *TSimpleFieldType) Walk() {
	fn := WalkHandlers.TSimpleFieldType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_DisplayName.Walk()
	me.XsdGoPkgHasElems_SimpleFieldExtension.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_SimpleField struct {
	SimpleFields []*TSimpleFieldType `xml:"http://www.opengis.net/kml/2.2 SimpleField"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SimpleField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SimpleField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SimpleField instance.
func (me *XsdGoPkgHasElems_SimpleField) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_SimpleField
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.SimpleFields {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TSchemaType struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElems_SchemaExtension

	XsdGoPkgHasElems_SimpleField

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TSchemaType function is not nil (ie. was set by outside code), calls it with this TSchemaType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TSchemaType instance.
func (me *TSchemaType) Walk() {
	fn := WalkHandlers.TSchemaType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_SimpleField.Walk()
	me.XsdGoPkgHasElems_SchemaExtension.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Schema struct {
	Schemas []*TSchemaType `xml:"http://www.opengis.net/kml/2.2 Schema"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Schema function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Schema instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Schema instance.
func (me *XsdGoPkgHasElems_Schema) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Schema
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Schemas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_DocumentObjectExtensionGroup struct {
	DocumentObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 DocumentObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_DocumentObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_DocumentObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TDocumentType struct {
	XsdGoPkgHasElems_DocumentSimpleExtensionGroup

	XsdGoPkgHasElems_AbstractFeatureGroup

	TAbstractContainerType

	XsdGoPkgHasElems_Schema

	XsdGoPkgHasElems_DocumentObjectExtensionGroup
}

//	If the WalkHandlers.TDocumentType function is not nil (ie. was set by outside code), calls it with this TDocumentType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TDocumentType instance.
func (me *TDocumentType) Walk() {
	fn := WalkHandlers.TDocumentType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_DocumentObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_DocumentSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractFeatureGroup.Walk()
	me.TAbstractContainerType.Walk()
	me.XsdGoPkgHasElems_Schema.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Document struct {
	Document *TDocumentType `xml:"http://www.opengis.net/kml/2.2 Document"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Document function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Document instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Document instance.
func (me *XsdGoPkgHasElem_Document) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Document
	if fn != nil {
		fn(me, true)
	}
	me.Document.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Folder struct {
	Folder *TFolderType `xml:"http://www.opengis.net/kml/2.2 Folder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Folder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Folder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Folder instance.
func (me *XsdGoPkgHasElem_Folder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Folder
	if fn != nil {
		fn(me, true)
	}
	me.Folder.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractContainerGroup struct {
	AbstractContainerGroup *TAbstractContainerType `xml:"http://www.opengis.net/kml/2.2 AbstractContainerGroup"`

	XsdGoPkgHasElem_Folder

	XsdGoPkgHasElem_Document
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractContainerGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractContainerGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractContainerGroup instance.
func (me *XsdGoPkgHasElem_AbstractContainerGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractContainerGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Folder.Walk()
	me.XsdGoPkgHasElem_Document.Walk()
	me.AbstractContainerGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractFeatureGroup struct {
	AbstractFeatureGroup *TAbstractFeatureType `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureGroup"`

	XsdGoPkgHasElem_AbstractContainerGroup

	XsdGoPkgHasElem_NetworkLink

	XsdGoPkgHasElem_AbstractOverlayGroup

	XsdGoPkgHasElem_Placemark
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractFeatureGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractFeatureGroup instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractFeatureGroup instance.
func (me *XsdGoPkgHasElem_AbstractFeatureGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractFeatureGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_AbstractOverlayGroup.Walk()
	me.XsdGoPkgHasElem_Placemark.Walk()
	me.XsdGoPkgHasElem_AbstractContainerGroup.Walk()
	me.XsdGoPkgHasElem_NetworkLink.Walk()
	me.AbstractFeatureGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup struct {
	AbstractTimePrimitiveObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LabelStyleObjectExtensionGroup struct {
	LabelStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LabelStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabelStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabelStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LabelStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LabelStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LabelStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup struct {
	AbstractOverlayObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LookAtObjectExtensionGroup struct {
	LookAtObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LookAtObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LookAtObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LookAtObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LookAtObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LookAtObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LookAtObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_IconStyleObjectExtensionGroup struct {
	IconStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 IconStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IconStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IconStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IconStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_IconStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_IconStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup struct {
	AbstractColorStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup struct {
	ImagePyramidObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ImagePyramidObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_KmlObjectExtensionGroup struct {
	KmlObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 KmlObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KmlObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KmlObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KmlObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_KmlObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_KmlObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup struct {
	PhotoOverlayObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PhotoOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BoundaryObjectExtensionGroup struct {
	BoundaryObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 BoundaryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BoundaryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BoundaryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BoundaryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_BoundaryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BoundaryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Data struct {
	Data *TDataType `xml:"http://www.opengis.net/kml/2.2 Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Data instance.
func (me *XsdGoPkgHasElem_Data) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Data
	if fn != nil {
		fn(me, true)
	}
	me.Data.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup struct {
	GroundOverlayObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 GroundOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PolyStyleObjectExtensionGroup struct {
	PolyStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PolyStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolyStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolyStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolyStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PolyStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PolyStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ResourceMapObjectExtensionGroup struct {
	ResourceMapObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ResourceMapObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceMapObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceMapObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ResourceMapObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ResourceMapObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ResourceMapObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SchemaData struct {
	SchemaData *TSchemaDataType `xml:"http://www.opengis.net/kml/2.2 SchemaData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchemaData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchemaData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SchemaData instance.
func (me *XsdGoPkgHasElem_SchemaData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SchemaData
	if fn != nil {
		fn(me, true)
	}
	me.SchemaData.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinearRingObjectExtensionGroup struct {
	LinearRingObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LinearRingObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinearRingObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinearRingObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinearRingObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LinearRingObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinearRingObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup struct {
	AbstractFeatureObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup struct {
	ScreenOverlayObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ScreenOverlayObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Pair struct {
	Pair *TPairType `xml:"http://www.opengis.net/kml/2.2 Pair"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pair function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pair instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pair instance.
func (me *XsdGoPkgHasElem_Pair) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Pair
	if fn != nil {
		fn(me, true)
	}
	me.Pair.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BasicLinkObjectExtensionGroup struct {
	BasicLinkObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 BasicLinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BasicLinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BasicLinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BasicLinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_BasicLinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BasicLinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ItemIconObjectExtensionGroup struct {
	ItemIconObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ItemIconObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemIconObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemIconObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ItemIconObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ItemIconObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ItemIconObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup struct {
	AbstractContainerObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractContainerObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AliasObjectExtensionGroup struct {
	AliasObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AliasObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AliasObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AliasObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AliasObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AliasObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AliasObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_DocumentObjectExtensionGroup struct {
	DocumentObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 DocumentObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DocumentObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_DocumentObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DocumentObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinkObjectExtensionGroup struct {
	LinkObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractColorStyleGroup struct {
	AbstractColorStyleGroup *TAbstractColorStyleType `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleGroup"`

	XsdGoPkgHasElem_IconStyle

	XsdGoPkgHasElem_LineStyle

	XsdGoPkgHasElem_LabelStyle

	XsdGoPkgHasElem_PolyStyle
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractColorStyleGroup instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractColorStyleGroup instance.
func (me *XsdGoPkgHasElem_AbstractColorStyleGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_IconStyle.Walk()
	me.XsdGoPkgHasElem_LineStyle.Walk()
	me.XsdGoPkgHasElem_LabelStyle.Walk()
	me.XsdGoPkgHasElem_PolyStyle.Walk()
	me.AbstractColorStyleGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractSubStyleGroup struct {
	AbstractSubStyleGroup *TAbstractSubStyleType `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleGroup"`

	XsdGoPkgHasElem_BalloonStyle

	XsdGoPkgHasElem_AbstractColorStyleGroup

	XsdGoPkgHasElem_ListStyle
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractSubStyleGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractSubStyleGroup instance.
func (me *XsdGoPkgHasElem_AbstractSubStyleGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_BalloonStyle.Walk()
	me.XsdGoPkgHasElem_AbstractColorStyleGroup.Walk()
	me.XsdGoPkgHasElem_ListStyle.Walk()
	me.AbstractSubStyleGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup struct {
	NetworkLinkObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 NetworkLinkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup struct {
	LatLonBoxObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LatLonBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup struct {
	MultiGeometryObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 MultiGeometryObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup struct {
	AbstractLatLonBoxObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 AbstractLatLonBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeSpanObjectExtensionGroup struct {
	TimeSpanObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 TimeSpanObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeSpanObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeSpanObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimeSpanObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_TimeSpanObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeSpanObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeStampObjectExtensionGroup struct {
	TimeStampObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 TimeStampObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeStampObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeStampObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimeStampObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_TimeStampObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeStampObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PlacemarkObjectExtensionGroup struct {
	PlacemarkObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PlacemarkObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PlacemarkObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PlacemarkObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PlacemarkObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PlacemarkObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PlacemarkObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ListStyleObjectExtensionGroup struct {
	ListStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ListStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ListStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ListStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ListStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ListStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ListStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup struct {
	LatLonAltBoxObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LatLonAltBoxObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_CameraObjectExtensionGroup struct {
	CameraObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 CameraObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CameraObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CameraObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CameraObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_CameraObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_CameraObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScaleObjectExtensionGroup struct {
	ScaleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ScaleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScaleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScaleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ScaleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ScaleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScaleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineStringObjectExtensionGroup struct {
	LineStringObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 LineStringObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineStringObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineStringObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineStringObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_LineStringObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineStringObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup struct {
	ViewVolumeObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 ViewVolumeObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleObjectExtensionGroup struct {
	StyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 StyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_StyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleMapObjectExtensionGroup struct {
	StyleMapObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 StyleMapObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleMapObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleMapObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleMapObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_StyleMapObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleMapObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PairObjectExtensionGroup struct {
	PairObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 PairObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PairObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PairObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PairObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_PairObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PairObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup struct {
	BalloonStyleObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 BalloonStyleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_RegionObjectExtensionGroup struct {
	RegionObjectExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 RegionObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegionObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegionObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RegionObjectExtensionGroup instance.
func (me *XsdGoPkgHasElem_RegionObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RegionObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractObjectGroup struct {
	AbstractObjectGroup *TAbstractObjectType `xml:"http://www.opengis.net/kml/2.2 AbstractObjectGroup"`

	XsdGoPkgHasElem_StyleMapObjectExtensionGroup

	XsdGoPkgHasElem_PairObjectExtensionGroup

	XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup

	XsdGoPkgHasElem_RegionObjectExtensionGroup

	XsdGoPkgHasElem_FolderObjectExtensionGroup

	XsdGoPkgHasElem_LocationObjectExtensionGroup

	XsdGoPkgHasElem_PolygonObjectExtensionGroup

	XsdGoPkgHasElem_Icon

	XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup

	XsdGoPkgHasElem_Alias

	XsdGoPkgHasElem_ModelObjectExtensionGroup

	XsdGoPkgHasElem_PointObjectExtensionGroup

	XsdGoPkgHasElem_AbstractViewObjectExtensionGroup

	XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup

	XsdGoPkgHasElem_LodObjectExtensionGroup

	XsdGoPkgHasElem_Scale

	XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup

	XsdGoPkgHasElem_AbstractTimePrimitiveGroup

	XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup

	XsdGoPkgHasElem_ItemIcon

	XsdGoPkgHasElem_ViewVolume

	XsdGoPkgHasElem_AbstractGeometryGroup

	XsdGoPkgHasElem_LineStyleObjectExtensionGroup

	XsdGoPkgHasElem_AbstractViewGroup

	XsdGoPkgHasElem_OrientationObjectExtensionGroup

	XsdGoPkgHasElem_Link

	XsdGoPkgHasElem_AbstractFeatureGroup

	XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup

	XsdGoPkgHasElem_LabelStyleObjectExtensionGroup

	XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup

	XsdGoPkgHasElem_LookAtObjectExtensionGroup

	XsdGoPkgHasElem_IconStyleObjectExtensionGroup

	XsdGoPkgHasElem_ImagePyramid

	XsdGoPkgHasElem_LatLonBox

	XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup

	XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup

	XsdGoPkgHasElem_KmlObjectExtensionGroup

	XsdGoPkgHasElem_AbstractStyleSelectorGroup

	XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup

	XsdGoPkgHasElem_Lod

	XsdGoPkgHasElem_BoundaryObjectExtensionGroup

	XsdGoPkgHasElem_Data

	XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup

	XsdGoPkgHasElem_PolyStyleObjectExtensionGroup

	XsdGoPkgHasElem_ResourceMapObjectExtensionGroup

	XsdGoPkgHasElem_SchemaData

	XsdGoPkgHasElem_Location

	XsdGoPkgHasElem_LinearRingObjectExtensionGroup

	XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup

	XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup

	XsdGoPkgHasElem_Pair

	XsdGoPkgHasElem_BasicLinkObjectExtensionGroup

	XsdGoPkgHasElem_ItemIconObjectExtensionGroup

	XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup

	XsdGoPkgHasElem_AliasObjectExtensionGroup

	XsdGoPkgHasElem_DocumentObjectExtensionGroup

	XsdGoPkgHasElem_LinkObjectExtensionGroup

	XsdGoPkgHasElem_AbstractSubStyleGroup

	XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup

	XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup

	XsdGoPkgHasElem_ResourceMap

	XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup

	XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup

	XsdGoPkgHasElem_TimeSpanObjectExtensionGroup

	XsdGoPkgHasElem_TimeStampObjectExtensionGroup

	XsdGoPkgHasElem_PlacemarkObjectExtensionGroup

	XsdGoPkgHasElem_ListStyleObjectExtensionGroup

	XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup

	XsdGoPkgHasElem_CameraObjectExtensionGroup

	XsdGoPkgHasElem_Region

	XsdGoPkgHasElem_ScaleObjectExtensionGroup

	XsdGoPkgHasElem_LineStringObjectExtensionGroup

	//	Url deprecated in 2.2
	XsdGoPkgHasElem_Url

	XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup

	XsdGoPkgHasElem_StyleObjectExtensionGroup

	XsdGoPkgHasElem_Orientation

	XsdGoPkgHasElem_LatLonAltBox
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractObjectGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractObjectGroup instance as the single argument. Then calls the Walk() method on 77/77 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractObjectGroup instance.
func (me *XsdGoPkgHasElem_AbstractObjectGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractObjectGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_LodObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Scale.Walk()
	me.XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractTimePrimitiveGroup.Walk()
	me.XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ItemIcon.Walk()
	me.XsdGoPkgHasElem_ViewVolume.Walk()
	me.XsdGoPkgHasElem_AbstractGeometryGroup.Walk()
	me.XsdGoPkgHasElem_LineStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractViewGroup.Walk()
	me.XsdGoPkgHasElem_OrientationObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Link.Walk()
	me.XsdGoPkgHasElem_AbstractFeatureGroup.Walk()
	me.XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LabelStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LookAtObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_IconStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ImagePyramid.Walk()
	me.XsdGoPkgHasElem_LatLonBox.Walk()
	me.XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_KmlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractStyleSelectorGroup.Walk()
	me.XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Lod.Walk()
	me.XsdGoPkgHasElem_BoundaryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Data.Walk()
	me.XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PolyStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ResourceMapObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_SchemaData.Walk()
	me.XsdGoPkgHasElem_Location.Walk()
	me.XsdGoPkgHasElem_LinearRingObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Pair.Walk()
	me.XsdGoPkgHasElem_BasicLinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ItemIconObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AliasObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_DocumentObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractSubStyleGroup.Walk()
	me.XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ResourceMap.Walk()
	me.XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_TimeSpanObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_TimeStampObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PlacemarkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_ListStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_CameraObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Region.Walk()
	me.XsdGoPkgHasElem_ScaleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LineStringObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Url.Walk()
	me.XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_StyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Orientation.Walk()
	me.XsdGoPkgHasElem_LatLonAltBox.Walk()
	me.XsdGoPkgHasElem_StyleMapObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PairObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_RegionObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_FolderObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_LocationObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PolygonObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Icon.Walk()
	me.XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Alias.Walk()
	me.XsdGoPkgHasElem_ModelObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_PointObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractViewObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup.Walk()
	me.AbstractObjectGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeStamp struct {
	TimeStamps []*TimeStampType `xml:"http://www.opengis.net/kml/2.2 TimeStamp"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeStamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeStamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeStamp instance.
func (me *XsdGoPkgHasElems_TimeStamp) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeStamp
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.TimeStamps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_TimeSpan struct {
	TimeSpans []*TimeSpanType `xml:"http://www.opengis.net/kml/2.2 TimeSpan"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeSpan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeSpan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeSpan instance.
func (me *XsdGoPkgHasElems_TimeSpan) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_TimeSpan
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.TimeSpans {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractTimePrimitiveGroup struct {
	AbstractTimePrimitiveGroups []*TAbstractTimePrimitiveType `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveGroup"`

	XsdGoPkgHasElems_TimeSpan

	XsdGoPkgHasElems_TimeStamp
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractTimePrimitiveGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractTimePrimitiveGroup instance.
func (me *XsdGoPkgHasElems_AbstractTimePrimitiveGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractTimePrimitiveGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_TimeStamp.Walk()
	me.XsdGoPkgHasElems_TimeSpan.Walk()
	for _, x := range me.AbstractTimePrimitiveGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Location struct {
	Locations []*TLocationType `xml:"http://www.opengis.net/kml/2.2 Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Location instance.
func (me *XsdGoPkgHasElems_Location) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Location
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Locations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Url deprecated in 2.2
type XsdGoPkgHasElems_Url struct {
	//	Url deprecated in 2.2
	Urls []*TLinkType `xml:"http://www.opengis.net/kml/2.2 Url"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Url instance.
func (me *XsdGoPkgHasElems_Url) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Url
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Urls {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ImagePyramid struct {
	ImagePyramids []*TImagePyramidType `xml:"http://www.opengis.net/kml/2.2 ImagePyramid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ImagePyramid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ImagePyramid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ImagePyramid instance.
func (me *XsdGoPkgHasElems_ImagePyramid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ImagePyramid
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ImagePyramids {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Camera struct {
	Cameras []*TCameraType `xml:"http://www.opengis.net/kml/2.2 Camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Camera instance.
func (me *XsdGoPkgHasElems_Camera) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Camera
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cameras {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LookAt struct {
	LookAts []*TLookAtType `xml:"http://www.opengis.net/kml/2.2 LookAt"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LookAt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LookAt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LookAt instance.
func (me *XsdGoPkgHasElems_LookAt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LookAt
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LookAts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractViewGroup struct {
	AbstractViewGroups []*TAbstractViewType `xml:"http://www.opengis.net/kml/2.2 AbstractViewGroup"`

	XsdGoPkgHasElems_Camera

	XsdGoPkgHasElems_LookAt
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractViewGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractViewGroup instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractViewGroup instance.
func (me *XsdGoPkgHasElems_AbstractViewGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractViewGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Camera.Walk()
	me.XsdGoPkgHasElems_LookAt.Walk()
	for _, x := range me.AbstractViewGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_PolyStyle struct {
	PolyStyles []*TPolyStyleType `xml:"http://www.opengis.net/kml/2.2 PolyStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolyStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolyStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolyStyle instance.
func (me *XsdGoPkgHasElems_PolyStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_PolyStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.PolyStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_IconStyle struct {
	IconStyles []*TIconStyleType `xml:"http://www.opengis.net/kml/2.2 IconStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IconStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IconStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IconStyle instance.
func (me *XsdGoPkgHasElems_IconStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_IconStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.IconStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LineStyle struct {
	LineStyles []*TLineStyleType `xml:"http://www.opengis.net/kml/2.2 LineStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineStyle instance.
func (me *XsdGoPkgHasElems_LineStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LineStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LineStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LabelStyle struct {
	LabelStyles []*TLabelStyleType `xml:"http://www.opengis.net/kml/2.2 LabelStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabelStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabelStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabelStyle instance.
func (me *XsdGoPkgHasElems_LabelStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LabelStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LabelStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractColorStyleGroup struct {
	AbstractColorStyleGroups []*TAbstractColorStyleType `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleGroup"`

	XsdGoPkgHasElems_LineStyle

	XsdGoPkgHasElems_LabelStyle

	XsdGoPkgHasElems_PolyStyle

	XsdGoPkgHasElems_IconStyle
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractColorStyleGroup instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractColorStyleGroup instance.
func (me *XsdGoPkgHasElems_AbstractColorStyleGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractColorStyleGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_PolyStyle.Walk()
	me.XsdGoPkgHasElems_IconStyle.Walk()
	me.XsdGoPkgHasElems_LineStyle.Walk()
	me.XsdGoPkgHasElems_LabelStyle.Walk()
	for _, x := range me.AbstractColorStyleGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ListStyle struct {
	ListStyles []*TListStyleType `xml:"http://www.opengis.net/kml/2.2 ListStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ListStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ListStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ListStyle instance.
func (me *XsdGoPkgHasElems_ListStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ListStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ListStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_BalloonStyle struct {
	BalloonStyles []*TBalloonStyleType `xml:"http://www.opengis.net/kml/2.2 BalloonStyle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BalloonStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BalloonStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BalloonStyle instance.
func (me *XsdGoPkgHasElems_BalloonStyle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_BalloonStyle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.BalloonStyles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractSubStyleGroup struct {
	AbstractSubStyleGroups []*TAbstractSubStyleType `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleGroup"`

	XsdGoPkgHasElems_AbstractColorStyleGroup

	XsdGoPkgHasElems_ListStyle

	XsdGoPkgHasElems_BalloonStyle
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractSubStyleGroup instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractSubStyleGroup instance.
func (me *XsdGoPkgHasElems_AbstractSubStyleGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractSubStyleGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractColorStyleGroup.Walk()
	me.XsdGoPkgHasElems_ListStyle.Walk()
	me.XsdGoPkgHasElems_BalloonStyle.Walk()
	for _, x := range me.AbstractSubStyleGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup struct {
	NetworkLinkControlObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControlObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Link struct {
	Links []*TLinkType `xml:"http://www.opengis.net/kml/2.2 Link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Link instance.
func (me *XsdGoPkgHasElems_Link) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Link
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Links {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Region struct {
	Regions []*TRegionType `xml:"http://www.opengis.net/kml/2.2 Region"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Region function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Region instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Region instance.
func (me *XsdGoPkgHasElems_Region) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Region
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Regions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonAltBox struct {
	LatLonAltBoxs []*TLatLonAltBoxType `xml:"http://www.opengis.net/kml/2.2 LatLonAltBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonAltBox function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonAltBox instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonAltBox instance.
func (me *XsdGoPkgHasElems_LatLonAltBox) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonAltBox
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LatLonAltBoxs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Icon struct {
	Icons []*TLinkType `xml:"http://www.opengis.net/kml/2.2 Icon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Icon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Icon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Icon instance.
func (me *XsdGoPkgHasElems_Icon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Icon
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Icons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Orientation struct {
	Orientations []*TOrientationType `xml:"http://www.opengis.net/kml/2.2 Orientation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orientation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orientation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orientation instance.
func (me *XsdGoPkgHasElems_Orientation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Orientation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Orientations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ResourceMap struct {
	ResourceMaps []*TResourceMapType `xml:"http://www.opengis.net/kml/2.2 ResourceMap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceMap instance.
func (me *XsdGoPkgHasElems_ResourceMap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ResourceMap
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ResourceMaps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_LatLonBox struct {
	LatLonBoxs []*TLatLonBoxType `xml:"http://www.opengis.net/kml/2.2 LatLonBox"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LatLonBox function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LatLonBox instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LatLonBox instance.
func (me *XsdGoPkgHasElems_LatLonBox) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_LatLonBox
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.LatLonBoxs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_KmlObjectExtensionGroup struct {
	KmlObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 KmlObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KmlObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KmlObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KmlObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_KmlObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_KmlObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Lod struct {
	Lods []*TLodType `xml:"http://www.opengis.net/kml/2.2 Lod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lod instance.
func (me *XsdGoPkgHasElems_Lod) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Lod
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Lods {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ViewVolume struct {
	ViewVolumes []*TViewVolumeType `xml:"http://www.opengis.net/kml/2.2 ViewVolume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewVolume instance.
func (me *XsdGoPkgHasElems_ViewVolume) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ViewVolume
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ViewVolumes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScaleObjectExtensionGroup struct {
	ScaleObjectExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 ScaleObjectExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScaleObjectExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScaleObjectExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScaleObjectExtensionGroup instance.
func (me *XsdGoPkgHasElems_ScaleObjectExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScaleObjectExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_AbstractObjectGroup struct {
	AbstractObjectGroups []*TAbstractObjectType `xml:"http://www.opengis.net/kml/2.2 AbstractObjectGroup"`

	XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup

	XsdGoPkgHasElems_LatLonAltBox

	XsdGoPkgHasElems_PolyStyleObjectExtensionGroup

	XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup

	XsdGoPkgHasElems_LookAtObjectExtensionGroup

	XsdGoPkgHasElems_Icon

	XsdGoPkgHasElems_Orientation

	XsdGoPkgHasElems_LinkObjectExtensionGroup

	XsdGoPkgHasElems_LabelStyleObjectExtensionGroup

	XsdGoPkgHasElems_ItemIcon

	XsdGoPkgHasElems_ResourceMap

	XsdGoPkgHasElems_ListStyleObjectExtensionGroup

	XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup

	XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup

	XsdGoPkgHasElems_OrientationObjectExtensionGroup

	XsdGoPkgHasElems_PointObjectExtensionGroup

	XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup

	XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup

	XsdGoPkgHasElems_BoundaryObjectExtensionGroup

	XsdGoPkgHasElems_LineStyleObjectExtensionGroup

	XsdGoPkgHasElems_Alias

	XsdGoPkgHasElems_LatLonBox

	XsdGoPkgHasElems_RegionObjectExtensionGroup

	XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup

	XsdGoPkgHasElems_ResourceMapObjectExtensionGroup

	XsdGoPkgHasElems_KmlObjectExtensionGroup

	XsdGoPkgHasElems_LocationObjectExtensionGroup

	XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup

	XsdGoPkgHasElems_ModelObjectExtensionGroup

	XsdGoPkgHasElems_Lod

	XsdGoPkgHasElems_LinearRingObjectExtensionGroup

	XsdGoPkgHasElems_ViewVolume

	XsdGoPkgHasElems_PolygonObjectExtensionGroup

	XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup

	XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup

	XsdGoPkgHasElems_StyleMapObjectExtensionGroup

	XsdGoPkgHasElems_Pair

	XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup

	XsdGoPkgHasElems_ScaleObjectExtensionGroup

	XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup

	XsdGoPkgHasElems_AbstractTimePrimitiveGroup

	XsdGoPkgHasElems_Location

	XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup

	XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup

	XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup

	XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup

	XsdGoPkgHasElems_ItemIconObjectExtensionGroup

	XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup

	XsdGoPkgHasElems_AbstractStyleSelectorGroup

	XsdGoPkgHasElems_LodObjectExtensionGroup

	XsdGoPkgHasElems_AliasObjectExtensionGroup

	XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup

	XsdGoPkgHasElems_DocumentObjectExtensionGroup

	//	Url deprecated in 2.2
	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup

	XsdGoPkgHasElems_CameraObjectExtensionGroup

	XsdGoPkgHasElems_PairObjectExtensionGroup

	XsdGoPkgHasElems_LineStringObjectExtensionGroup

	XsdGoPkgHasElems_Scale

	XsdGoPkgHasElems_BasicLinkObjectExtensionGroup

	XsdGoPkgHasElems_ImagePyramid

	XsdGoPkgHasElems_FolderObjectExtensionGroup

	XsdGoPkgHasElems_AbstractViewObjectExtensionGroup

	XsdGoPkgHasElems_StyleObjectExtensionGroup

	XsdGoPkgHasElems_TimeStampObjectExtensionGroup

	XsdGoPkgHasElems_IconStyleObjectExtensionGroup

	XsdGoPkgHasElems_SchemaData

	XsdGoPkgHasElems_AbstractFeatureGroup

	XsdGoPkgHasElems_AbstractViewGroup

	XsdGoPkgHasElems_PlacemarkObjectExtensionGroup

	XsdGoPkgHasElems_AbstractSubStyleGroup

	XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_TimeSpanObjectExtensionGroup

	XsdGoPkgHasElems_Data

	XsdGoPkgHasElems_Region

	XsdGoPkgHasElems_AbstractGeometryGroup
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractObjectGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractObjectGroup instance as the single argument. Then calls the Walk() method on 77/77 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractObjectGroup instance.
func (me *XsdGoPkgHasElems_AbstractObjectGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_AbstractObjectGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ItemIconObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractStyleSelectorGroup.Walk()
	me.XsdGoPkgHasElems_LodObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AliasObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_DocumentObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Url.Walk()
	me.XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_CameraObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_PairObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LineStringObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Scale.Walk()
	me.XsdGoPkgHasElems_BasicLinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ImagePyramid.Walk()
	me.XsdGoPkgHasElems_FolderObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractViewObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_StyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_TimeStampObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_IconStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_SchemaData.Walk()
	me.XsdGoPkgHasElems_AbstractFeatureGroup.Walk()
	me.XsdGoPkgHasElems_AbstractViewGroup.Walk()
	me.XsdGoPkgHasElems_PlacemarkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractSubStyleGroup.Walk()
	me.XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_TimeSpanObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Data.Walk()
	me.XsdGoPkgHasElems_Region.Walk()
	me.XsdGoPkgHasElems_AbstractGeometryGroup.Walk()
	me.XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LatLonAltBox.Walk()
	me.XsdGoPkgHasElems_PolyStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LookAtObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Icon.Walk()
	me.XsdGoPkgHasElems_Orientation.Walk()
	me.XsdGoPkgHasElems_LinkObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LabelStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ItemIcon.Walk()
	me.XsdGoPkgHasElems_ResourceMap.Walk()
	me.XsdGoPkgHasElems_ListStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_OrientationObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_PointObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_BoundaryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LineStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Alias.Walk()
	me.XsdGoPkgHasElems_LatLonBox.Walk()
	me.XsdGoPkgHasElems_RegionObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ResourceMapObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_KmlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_LocationObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ModelObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Lod.Walk()
	me.XsdGoPkgHasElems_LinearRingObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ViewVolume.Walk()
	me.XsdGoPkgHasElems_PolygonObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_StyleMapObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_Pair.Walk()
	me.XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_ScaleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractTimePrimitiveGroup.Walk()
	me.XsdGoPkgHasElems_Location.Walk()
	me.XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup.Walk()
	for _, x := range me.AbstractObjectGroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ObjectSimpleExtensionGroup struct {
	ObjectSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ObjectSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObjectSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObjectSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ObjectSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ObjectSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ObjectSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup struct {
	AbstractFeatureSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractFeatureSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup struct {
	AbstractViewSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractViewSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LookAtSimpleExtensionGroup struct {
	LookAtSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LookAtSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LookAtSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LookAtSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LookAtSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LookAtSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LookAtSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_CameraSimpleExtensionGroup struct {
	CameraSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 CameraSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CameraSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CameraSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CameraSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_CameraSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_CameraSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	Metadata deprecated in 2.2
type XsdGoPkgHasElems_Metadata struct {
	//	Metadata deprecated in 2.2
	Metadatas []*TMetadataType `xml:"http://www.opengis.net/kml/2.2 Metadata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Metadata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Metadata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Metadata instance.
func (me *XsdGoPkgHasElems_Metadata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Metadata
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Metadatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ExtendedData struct {
	ExtendedDatas []*TExtendedDataType `xml:"http://www.opengis.net/kml/2.2 ExtendedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtendedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtendedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtendedData instance.
func (me *XsdGoPkgHasElems_ExtendedData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ExtendedData
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.ExtendedDatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SchemaDataExtension struct {
	SchemaDataExtension xsdt.String `xml:"http://www.opengis.net/kml/2.2 SchemaDataExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchemaDataExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchemaDataExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SchemaDataExtension instance.
func (me *XsdGoPkgHasElem_SchemaDataExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SchemaDataExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SimpleData struct {
	SimpleData *TSimpleDataType `xml:"http://www.opengis.net/kml/2.2 SimpleData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SimpleData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SimpleData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SimpleData instance.
func (me *XsdGoPkgHasElem_SimpleData) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SimpleData
	if fn != nil {
		fn(me, true)
	}
	me.SimpleData.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_DataExtension struct {
	DataExtension xsdt.String `xml:"http://www.opengis.net/kml/2.2 DataExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DataExtension instance.
func (me *XsdGoPkgHasElem_DataExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DataExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup struct {
	AbstractContainerSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractContainerSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup struct {
	AbstractGeometrySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractGeometrySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup struct {
	AbstractOverlaySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup struct {
	AbstractStyleSelectorSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractStyleSelectorSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup struct {
	AbstractTimePrimitiveSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractTimePrimitiveSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

//	<kml> is the root element.
type XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup struct {
	NetworkLinkControlSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControlSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TCreateType struct {
	XsdGoPkgHasElems_AbstractContainerGroup
}

//	If the WalkHandlers.TCreateType function is not nil (ie. was set by outside code), calls it with this TCreateType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TCreateType instance.
func (me *TCreateType) Walk() {
	fn := WalkHandlers.TCreateType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractContainerGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Create struct {
	Creates []*TCreateType `xml:"http://www.opengis.net/kml/2.2 Create"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Create function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Create instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Create instance.
func (me *XsdGoPkgHasElems_Create) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Create
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Creates {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_UpdateExtensionGroup struct {
	UpdateExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 UpdateExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateExtensionGroup instance.
func (me *XsdGoPkgHasElems_UpdateExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_UpdateExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_UpdateOpExtensionGroup struct {
	UpdateOpExtensionGroups []xsdt.String `xml:"http://www.opengis.net/kml/2.2 UpdateOpExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateOpExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateOpExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateOpExtensionGroup instance.
func (me *XsdGoPkgHasElems_UpdateOpExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_UpdateOpExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TChangeType struct {
	XsdGoPkgHasElems_AbstractObjectGroup
}

//	If the WalkHandlers.TChangeType function is not nil (ie. was set by outside code), calls it with this TChangeType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TChangeType instance.
func (me *TChangeType) Walk() {
	fn := WalkHandlers.TChangeType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractObjectGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Change struct {
	Changes []*TChangeType `xml:"http://www.opengis.net/kml/2.2 Change"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Change function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Change instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Change instance.
func (me *XsdGoPkgHasElems_Change) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Change
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Changes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TDeleteType struct {
	XsdGoPkgHasElems_AbstractFeatureGroup
}

//	If the WalkHandlers.TDeleteType function is not nil (ie. was set by outside code), calls it with this TDeleteType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDeleteType instance.
func (me *TDeleteType) Walk() {
	fn := WalkHandlers.TDeleteType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_AbstractFeatureGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Delete struct {
	Deletes []*TDeleteType `xml:"http://www.opengis.net/kml/2.2 Delete"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Delete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Delete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Delete instance.
func (me *XsdGoPkgHasElems_Delete) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Delete
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Deletes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TUpdateType struct {
	XsdGoPkgHasElems_UpdateExtensionGroup

	XsdGoPkgHasElem_TargetHref

	XsdGoPkgHasElems_UpdateOpExtensionGroup

	XsdGoPkgHasElems_Change

	XsdGoPkgHasElems_Delete

	XsdGoPkgHasElems_Create
}

//	If the WalkHandlers.TUpdateType function is not nil (ie. was set by outside code), calls it with this TUpdateType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TUpdateType instance.
func (me *TUpdateType) Walk() {
	fn := WalkHandlers.TUpdateType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Change.Walk()
	me.XsdGoPkgHasElems_Delete.Walk()
	me.XsdGoPkgHasElems_Create.Walk()
	me.XsdGoPkgHasElems_UpdateExtensionGroup.Walk()
	me.XsdGoPkgHasElem_TargetHref.Walk()
	me.XsdGoPkgHasElems_UpdateOpExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Update struct {
	Update *TUpdateType `xml:"http://www.opengis.net/kml/2.2 Update"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Update function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Update instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Update instance.
func (me *XsdGoPkgHasElem_Update) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Update
	if fn != nil {
		fn(me, true)
	}
	me.Update.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TNetworkLinkControlType struct {
	XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup

	XsdGoPkgHasElem_AbstractViewGroup

	XsdGoPkgHasElem_MaxSessionLength

	XsdGoPkgHasElem_LinkName

	XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup

	XsdGoPkgHasElem_Update

	XsdGoPkgHasElem_Message

	XsdGoPkgHasElem_Expires

	XsdGoPkgHasElem_LinkSnippet

	XsdGoPkgHasElem_Cookie

	XsdGoPkgHasElem_LinkDescription

	XsdGoPkgHasElem_MinRefreshPeriod
}

//	If the WalkHandlers.TNetworkLinkControlType function is not nil (ie. was set by outside code), calls it with this TNetworkLinkControlType instance as the single argument. Then calls the Walk() method on 12/12 embed(s) and 0/0 field(s) belonging to this TNetworkLinkControlType instance.
func (me *TNetworkLinkControlType) Walk() {
	fn := WalkHandlers.TNetworkLinkControlType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractViewGroup.Walk()
	me.XsdGoPkgHasElem_MaxSessionLength.Walk()
	me.XsdGoPkgHasElem_LinkName.Walk()
	me.XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_Update.Walk()
	me.XsdGoPkgHasElem_Message.Walk()
	me.XsdGoPkgHasElem_Expires.Walk()
	me.XsdGoPkgHasElem_LinkSnippet.Walk()
	me.XsdGoPkgHasElem_Cookie.Walk()
	me.XsdGoPkgHasElem_LinkDescription.Walk()
	me.XsdGoPkgHasElem_MinRefreshPeriod.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLinkControl struct {
	NetworkLinkControl *TNetworkLinkControlType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLinkControl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLinkControl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLinkControl instance.
func (me *XsdGoPkgHasElem_NetworkLinkControl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLinkControl
	if fn != nil {
		fn(me, true)
	}
	me.NetworkLinkControl.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_KmlSimpleExtensionGroup struct {
	KmlSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 KmlSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KmlSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KmlSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KmlSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_KmlSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_KmlSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Hint_XsdtString_ struct {
	Hint xsdt.String `xml:"http://www.opengis.net/kml/2.2 hint,attr"`
}

type TKmlType struct {
	XsdGoPkgHasAttr_Hint_XsdtString_

	XsdGoPkgHasElem_NetworkLinkControl

	XsdGoPkgHasElems_KmlObjectExtensionGroup

	XsdGoPkgHasElem_AbstractFeatureGroup

	XsdGoPkgHasElems_KmlSimpleExtensionGroup
}

//	If the WalkHandlers.TKmlType function is not nil (ie. was set by outside code), calls it with this TKmlType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TKmlType instance.
func (me *TKmlType) Walk() {
	fn := WalkHandlers.TKmlType
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_NetworkLinkControl.Walk()
	me.XsdGoPkgHasElems_KmlObjectExtensionGroup.Walk()
	me.XsdGoPkgHasElem_AbstractFeatureGroup.Walk()
	me.XsdGoPkgHasElems_KmlSimpleExtensionGroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Kml struct {
	//	<kml> is the root element.
	Kmls []*TKmlType `xml:"http://www.opengis.net/kml/2.2 kml"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Kml function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Kml instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Kml instance.
func (me *XsdGoPkgHasElems_Kml) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Kml
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Kmls {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

//	<kml> is the root element.
type XsdGoPkgHasElem_Kml struct {
	//	<kml> is the root element.
	Kml *TKmlType `xml:"http://www.opengis.net/kml/2.2 kml"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Kml function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Kml instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Kml instance.
func (me *XsdGoPkgHasElem_Kml) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Kml
	if fn != nil {
		fn(me, true)
	}
	me.Kml.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_KmlSimpleExtensionGroup struct {
	KmlSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 KmlSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KmlSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KmlSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KmlSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_KmlSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_KmlSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_NetworkLinkControl struct {
	NetworkLinkControls []*TNetworkLinkControlType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetworkLinkControl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetworkLinkControl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetworkLinkControl instance.
func (me *XsdGoPkgHasElems_NetworkLinkControl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_NetworkLinkControl
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.NetworkLinkControls {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup struct {
	NetworkLinkControlSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkControlSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_DocumentSimpleExtensionGroup struct {
	DocumentSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 DocumentSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DocumentSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_DocumentSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_DocumentSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Schema struct {
	Schema *TSchemaType `xml:"http://www.opengis.net/kml/2.2 Schema"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Schema function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Schema instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Schema instance.
func (me *XsdGoPkgHasElem_Schema) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Schema
	if fn != nil {
		fn(me, true)
	}
	me.Schema.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SchemaExtension struct {
	SchemaExtension xsdt.String `xml:"http://www.opengis.net/kml/2.2 SchemaExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SchemaExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SchemaExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SchemaExtension instance.
func (me *XsdGoPkgHasElem_SchemaExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SchemaExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SimpleField struct {
	SimpleField *TSimpleFieldType `xml:"http://www.opengis.net/kml/2.2 SimpleField"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SimpleField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SimpleField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SimpleField instance.
func (me *XsdGoPkgHasElem_SimpleField) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SimpleField
	if fn != nil {
		fn(me, true)
	}
	me.SimpleField.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_SimpleFieldExtension struct {
	SimpleFieldExtension xsdt.String `xml:"http://www.opengis.net/kml/2.2 SimpleFieldExtension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SimpleFieldExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SimpleFieldExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SimpleFieldExtension instance.
func (me *XsdGoPkgHasElem_SimpleFieldExtension) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_SimpleFieldExtension
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_FolderSimpleExtensionGroup struct {
	FolderSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 FolderSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FolderSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FolderSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FolderSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_FolderSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_FolderSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup struct {
	PlacemarkSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PlacemarkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup struct {
	NetworkLinkSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 NetworkLinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_RegionSimpleExtensionGroup struct {
	RegionSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 RegionSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegionSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegionSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RegionSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_RegionSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_RegionSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup struct {
	LatLonAltBoxSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LatLonAltBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LodSimpleExtensionGroup struct {
	LodSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LodSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LodSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LodSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LodSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LodSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LodSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinkSimpleExtensionGroup struct {
	LinkSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup struct {
	MultiGeometrySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 MultiGeometrySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PointSimpleExtensionGroup struct {
	PointSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PointSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PointSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PointSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PointSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PointSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PointSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineStringSimpleExtensionGroup struct {
	LineStringSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LineStringSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineStringSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineStringSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineStringSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LineStringSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineStringSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LinearRingSimpleExtensionGroup struct {
	LinearRingSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LinearRingSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinearRingSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinearRingSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LinearRingSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LinearRingSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LinearRingSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PolygonSimpleExtensionGroup struct {
	PolygonSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PolygonSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolygonSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolygonSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolygonSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PolygonSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PolygonSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_OuterBoundaryIs struct {
	OuterBoundaryIses []*TBoundaryType `xml:"http://www.opengis.net/kml/2.2 outerBoundaryIs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OuterBoundaryIs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OuterBoundaryIs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OuterBoundaryIs instance.
func (me *XsdGoPkgHasElems_OuterBoundaryIs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_OuterBoundaryIs
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.OuterBoundaryIses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_InnerBoundaryIs struct {
	InnerBoundaryIs *TBoundaryType `xml:"http://www.opengis.net/kml/2.2 innerBoundaryIs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InnerBoundaryIs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InnerBoundaryIs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InnerBoundaryIs instance.
func (me *XsdGoPkgHasElem_InnerBoundaryIs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_InnerBoundaryIs
	if fn != nil {
		fn(me, true)
	}
	me.InnerBoundaryIs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BoundarySimpleExtensionGroup struct {
	BoundarySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BoundarySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BoundarySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BoundarySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BoundarySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_BoundarySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BoundarySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ModelSimpleExtensionGroup struct {
	ModelSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ModelSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ModelSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ModelSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ModelSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ModelSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ModelSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LocationSimpleExtensionGroup struct {
	LocationSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LocationSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LocationSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LocationSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LocationSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_OrientationSimpleExtensionGroup struct {
	OrientationSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 OrientationSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrientationSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrientationSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrientationSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_OrientationSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_OrientationSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScaleSimpleExtensionGroup struct {
	ScaleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ScaleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScaleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScaleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ScaleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ScaleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScaleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_ScaleSimpleExtensionGroup struct {
	ScaleSimpleExtensionGroups []xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ScaleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScaleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScaleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScaleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElems_ScaleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_ScaleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup struct {
	ResourceMapSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ResourceMapSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AliasSimpleExtensionGroup struct {
	AliasSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AliasSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AliasSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AliasSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AliasSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AliasSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AliasSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup struct {
	GroundOverlaySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 GroundOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup struct {
	AbstractLatLonBoxSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractLatLonBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup struct {
	LatLonBoxSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LatLonBoxSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup struct {
	ScreenOverlaySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ScreenOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup struct {
	PhotoOverlaySimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PhotoOverlaySimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup struct {
	ViewVolumeSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ViewVolumeSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup struct {
	ImagePyramidSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ImagePyramidSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleSimpleExtensionGroup struct {
	StyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 StyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_StyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_StyleMapSimpleExtensionGroup struct {
	StyleMapSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 StyleMapSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StyleMapSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StyleMapSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StyleMapSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_StyleMapSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_StyleMapSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PairSimpleExtensionGroup struct {
	PairSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PairSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PairSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PairSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PairSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PairSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PairSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup struct {
	AbstractSubStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractSubStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup struct {
	AbstractColorStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 AbstractColorStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_IconStyleSimpleExtensionGroup struct {
	IconStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 IconStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IconStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IconStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IconStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_IconStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_IconStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup struct {
	BasicLinkSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BasicLinkSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup struct {
	LabelStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LabelStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_LineStyleSimpleExtensionGroup struct {
	LineStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 LineStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_LineStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_LineStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup struct {
	PolyStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 PolyStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup struct {
	BalloonStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 BalloonStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ListStyleSimpleExtensionGroup struct {
	ListStyleSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ListStyleSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ListStyleSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ListStyleSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ListStyleSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ListStyleSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ListStyleSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_ItemIconSimpleExtensionGroup struct {
	ItemIconSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 ItemIconSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemIconSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemIconSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ItemIconSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_ItemIconSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_ItemIconSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeStampSimpleExtensionGroup struct {
	TimeStampSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 TimeStampSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeStampSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeStampSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimeStampSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_TimeStampSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeStampSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup struct {
	TimeSpanSimpleExtensionGroup xsdt.AnySimpleType `xml:"http://www.opengis.net/kml/2.2 TimeSpanSimpleExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup instance.
func (me *XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Update struct {
	Updates []*TUpdateType `xml:"http://www.opengis.net/kml/2.2 Update"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Update function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Update instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Update instance.
func (me *XsdGoPkgHasElems_Update) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Update
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Updates {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_UpdateOpExtensionGroup struct {
	UpdateOpExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 UpdateOpExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateOpExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateOpExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UpdateOpExtensionGroup instance.
func (me *XsdGoPkgHasElem_UpdateOpExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_UpdateOpExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_UpdateExtensionGroup struct {
	UpdateExtensionGroup xsdt.String `xml:"http://www.opengis.net/kml/2.2 UpdateExtensionGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateExtensionGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateExtensionGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UpdateExtensionGroup instance.
func (me *XsdGoPkgHasElem_UpdateExtensionGroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_UpdateExtensionGroup
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Create struct {
	Create *TCreateType `xml:"http://www.opengis.net/kml/2.2 Create"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Create function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Create instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Create instance.
func (me *XsdGoPkgHasElem_Create) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Create
	if fn != nil {
		fn(me, true)
	}
	me.Create.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Delete struct {
	Delete *TDeleteType `xml:"http://www.opengis.net/kml/2.2 Delete"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Delete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Delete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Delete instance.
func (me *XsdGoPkgHasElem_Delete) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Delete
	if fn != nil {
		fn(me, true)
	}
	me.Delete.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Change struct {
	Change *TChangeType `xml:"http://www.opengis.net/kml/2.2 Change"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Change function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Change instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Change instance.
func (me *XsdGoPkgHasElem_Change) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Change
	if fn != nil {
		fn(me, true)
	}
	me.Change.Walk()
	if fn != nil {
		fn(me, false)
	}
}

//	Provides 601 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
var WalkHandlers = &XsdGoPkgWalkHandlers{}

//	Provides 601 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup                                      func(o *XsdGoPkgHasElem_AbstractColorStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup                                       func(o *XsdGoPkgHasElems_AbstractGeometrySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LinearRingSimpleExtensionGroup                                              func(o *XsdGoPkgHasElem_LinearRingSimpleExtensionGroup, enter bool)
	TLinkType                                                                                   func(o *TLinkType, enter bool)
	XsdGoPkgHasElems_Message                                                                    func(o *XsdGoPkgHasElems_Message, enter bool)
	XsdGoPkgHasElem_ViewBoundScale                                                              func(o *XsdGoPkgHasElem_ViewBoundScale, enter bool)
	XsdGoPkgHasElem_MinFadeExtent                                                               func(o *XsdGoPkgHasElem_MinFadeExtent, enter bool)
	XsdGoPkgHasElems_LatLonAltBox                                                               func(o *XsdGoPkgHasElems_LatLonAltBox, enter bool)
	XsdGoPkgHasElems_Outline                                                                    func(o *XsdGoPkgHasElems_Outline, enter bool)
	XsdGoPkgHasElem_LineStyleObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_LineStyleObjectExtensionGroup, enter bool)
	TViewVolumeType                                                                             func(o *TViewVolumeType, enter bool)
	XsdGoPkgHasElems_ScreenXY                                                                   func(o *XsdGoPkgHasElems_ScreenXY, enter bool)
	XsdGoPkgHasElem_Polygon                                                                     func(o *XsdGoPkgHasElem_Polygon, enter bool)
	XsdGoPkgHasElem_MinAltitude                                                                 func(o *XsdGoPkgHasElem_MinAltitude, enter bool)
	XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup                                       func(o *XsdGoPkgHasElem_AbstractContainerSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_LatLonBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_SourceHref                                                                  func(o *XsdGoPkgHasElem_SourceHref, enter bool)
	XsdGoPkgHasElem_ScaleSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElem_ScaleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_TimeSpan                                                                   func(o *XsdGoPkgHasElems_TimeSpan, enter bool)
	XsdGoPkgHasElem_Placemark                                                                   func(o *XsdGoPkgHasElem_Placemark, enter bool)
	XsdGoPkgHasElems_AbstractFeatureGroup                                                       func(o *XsdGoPkgHasElems_AbstractFeatureGroup, enter bool)
	XsdGoPkgHasElems_Cookie                                                                     func(o *XsdGoPkgHasElems_Cookie, enter bool)
	XsdGoPkgHasElem_RefreshMode                                                                 func(o *XsdGoPkgHasElem_RefreshMode, enter bool)
	XsdGoPkgHasElem_NetworkLinkControl                                                          func(o *XsdGoPkgHasElem_NetworkLinkControl, enter bool)
	XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup                                   func(o *XsdGoPkgHasElem_AbstractStyleSelectorSimpleExtensionGroup, enter bool)
	TAbstractStyleSelectorType                                                                  func(o *TAbstractStyleSelectorType, enter bool)
	XsdGoPkgHasElems_AltitudeMode                                                               func(o *XsdGoPkgHasElems_AltitudeMode, enter bool)
	XsdGoPkgHasElem_Href                                                                        func(o *XsdGoPkgHasElem_Href, enter bool)
	TBoundaryType                                                                               func(o *TBoundaryType, enter bool)
	XsdGoPkgHasElems_SchemaData                                                                 func(o *XsdGoPkgHasElems_SchemaData, enter bool)
	XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup                                       func(o *XsdGoPkgHasElems_AbstractSubStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_BalloonStyle                                                                func(o *XsdGoPkgHasElem_BalloonStyle, enter bool)
	TAbstractContainerType                                                                      func(o *TAbstractContainerType, enter bool)
	XsdGoPkgHasElem_StyleUrl                                                                    func(o *XsdGoPkgHasElem_StyleUrl, enter bool)
	XsdGoPkgHasElem_LookAt                                                                      func(o *XsdGoPkgHasElem_LookAt, enter bool)
	XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup                                         func(o *XsdGoPkgHasElem_AbstractFeatureSimpleExtensionGroup, enter bool)
	TDataType                                                                                   func(o *TDataType, enter bool)
	XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_LatLonBoxSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PairObjectExtensionGroup                                                    func(o *XsdGoPkgHasElem_PairObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ExtendedData                                                               func(o *XsdGoPkgHasElems_ExtendedData, enter bool)
	XsdGoPkgHasElems_Value                                                                      func(o *XsdGoPkgHasElems_Value, enter bool)
	TSimpleDataType                                                                             func(o *TSimpleDataType, enter bool)
	XsdGoPkgHasElem_Model                                                                       func(o *XsdGoPkgHasElem_Model, enter bool)
	XsdGoPkgHasElems_StyleSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElems_StyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_North                                                                       func(o *XsdGoPkgHasElem_North, enter bool)
	XsdGoPkgHasElems_HotSpot                                                                    func(o *XsdGoPkgHasElems_HotSpot, enter bool)
	XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup                                           func(o *XsdGoPkgHasElem_ScreenOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_BoundaryObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_BoundaryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Value                                                                       func(o *XsdGoPkgHasElem_Value, enter bool)
	XsdGoPkgHasElem_StyleMapObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_StyleMapObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LineStyleSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_LineStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup                                       func(o *XsdGoPkgHasElems_AbstractSubStyleObjectExtensionGroup, enter bool)
	TGroundOverlayType                                                                          func(o *TGroundOverlayType, enter bool)
	XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup                                           func(o *XsdGoPkgHasElems_BalloonStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Altitude                                                                   func(o *XsdGoPkgHasElems_Altitude, enter bool)
	XsdGoPkgHasElems_Color                                                                      func(o *XsdGoPkgHasElems_Color, enter bool)
	XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup                                      func(o *XsdGoPkgHasElem_NetworkLinkControlSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ViewBoundScale                                                             func(o *XsdGoPkgHasElems_ViewBoundScale, enter bool)
	XsdGoPkgHasElems_DrawOrder                                                                  func(o *XsdGoPkgHasElems_DrawOrder, enter bool)
	XsdGoPkgHasElem_StyleMapSimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_StyleMapSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ListItemType                                                               func(o *XsdGoPkgHasElems_ListItemType, enter bool)
	XsdGoPkgHasElems_PolygonObjectExtensionGroup                                                func(o *XsdGoPkgHasElems_PolygonObjectExtensionGroup, enter bool)
	TListStyleType                                                                              func(o *TListStyleType, enter bool)
	XsdGoPkgHasElems_Open                                                                       func(o *XsdGoPkgHasElems_Open, enter bool)
	XsdGoPkgHasElems_ViewVolume                                                                 func(o *XsdGoPkgHasElems_ViewVolume, enter bool)
	XsdGoPkgHasElem_Delete                                                                      func(o *XsdGoPkgHasElem_Delete, enter bool)
	XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup                                            func(o *XsdGoPkgHasElem_PhotoOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_DocumentObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_DocumentObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Style                                                                      func(o *XsdGoPkgHasElems_Style, enter bool)
	XsdGoPkgHasElem_LineStringObjectExtensionGroup                                              func(o *XsdGoPkgHasElem_LineStringObjectExtensionGroup, enter bool)
	TLocationType                                                                               func(o *TLocationType, enter bool)
	XsdGoPkgHasElem_DocumentObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_DocumentObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_UpdateExtensionGroup                                                        func(o *XsdGoPkgHasElem_UpdateExtensionGroup, enter bool)
	XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup                                           func(o *XsdGoPkgHasElems_PhotoOverlayObjectExtensionGroup, enter bool)
	TModelType                                                                                  func(o *TModelType, enter bool)
	XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup                                   func(o *XsdGoPkgHasElem_AbstractTimePrimitiveSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_GridOrigin                                                                 func(o *XsdGoPkgHasElems_GridOrigin, enter bool)
	XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup                                             func(o *XsdGoPkgHasElem_NetworkLinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Tilt                                                                       func(o *XsdGoPkgHasElems_Tilt, enter bool)
	XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup                                  func(o *XsdGoPkgHasElems_AbstractTimePrimitiveSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup                                        func(o *XsdGoPkgHasElem_AbstractGeometryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ModelSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElems_ModelSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup                                   func(o *XsdGoPkgHasElem_AbstractTimePrimitiveObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ModelObjectExtensionGroup                                                  func(o *XsdGoPkgHasElems_ModelObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_ListStyleSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_ListStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Altitude                                                                    func(o *XsdGoPkgHasElem_Altitude, enter bool)
	XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup                                         func(o *XsdGoPkgHasElem_AbstractOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Tessellate                                                                 func(o *XsdGoPkgHasElems_Tessellate, enter bool)
	XsdGoPkgHasElem_ObjectSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElem_ObjectSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_DisplayName                                                                func(o *XsdGoPkgHasElems_DisplayName, enter bool)
	TNetworkLinkType                                                                            func(o *TNetworkLinkType, enter bool)
	XsdGoPkgHasElem_Expires                                                                     func(o *XsdGoPkgHasElem_Expires, enter bool)
	TAbstractTimePrimitiveType                                                                  func(o *TAbstractTimePrimitiveType, enter bool)
	XsdGoPkgHasElem_Folder                                                                      func(o *XsdGoPkgHasElem_Folder, enter bool)
	XsdGoPkgHasElem_Style                                                                       func(o *XsdGoPkgHasElem_Style, enter bool)
	TLodType                                                                                    func(o *TLodType, enter bool)
	TUpdateType                                                                                 func(o *TUpdateType, enter bool)
	TAbstractSubStyleType                                                                       func(o *TAbstractSubStyleType, enter bool)
	XsdGoPkgHasElems_SchemaDataExtension                                                        func(o *XsdGoPkgHasElems_SchemaDataExtension, enter bool)
	XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup                                  func(o *XsdGoPkgHasElems_AbstractTimePrimitiveObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup                                      func(o *XsdGoPkgHasElems_AbstractLatLonBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Metadata                                                                    func(o *XsdGoPkgHasElem_Metadata, enter bool)
	XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup                                           func(o *XsdGoPkgHasElem_ScreenOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_PolyStyleObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_PolyStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_East                                                                        func(o *XsdGoPkgHasElem_East, enter bool)
	XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup                                     func(o *XsdGoPkgHasElems_NetworkLinkControlObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Fill                                                                        func(o *XsdGoPkgHasElem_Fill, enter bool)
	XsdGoPkgHasElem_Y                                                                           func(o *XsdGoPkgHasElem_Y, enter bool)
	XsdGoPkgHasElem_ImagePyramid                                                                func(o *XsdGoPkgHasElem_ImagePyramid, enter bool)
	TPointType                                                                                  func(o *TPointType, enter bool)
	XsdGoPkgHasElems_North                                                                      func(o *XsdGoPkgHasElems_North, enter bool)
	XsdGoPkgHasElems_HttpQuery                                                                  func(o *XsdGoPkgHasElems_HttpQuery, enter bool)
	XsdGoPkgHasElems_ViewRefreshMode                                                            func(o *XsdGoPkgHasElems_ViewRefreshMode, enter bool)
	XsdGoPkgHasElem_LatLonAltBox                                                                func(o *XsdGoPkgHasElem_LatLonAltBox, enter bool)
	XsdGoPkgHasElem_RegionObjectExtensionGroup                                                  func(o *XsdGoPkgHasElem_RegionObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_SimpleData                                                                 func(o *XsdGoPkgHasElems_SimpleData, enter bool)
	XsdGoPkgHasElems_TimeSpanObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_TimeSpanObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ListStyle                                                                  func(o *XsdGoPkgHasElems_ListStyle, enter bool)
	XsdGoPkgHasElem_Visibility                                                                  func(o *XsdGoPkgHasElem_Visibility, enter bool)
	TSchemaType                                                                                 func(o *TSchemaType, enter bool)
	XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup                                             func(o *XsdGoPkgHasElem_NetworkLinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ObjectSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElems_ObjectSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Fill                                                                       func(o *XsdGoPkgHasElems_Fill, enter bool)
	TLineStyleType                                                                              func(o *TLineStyleType, enter bool)
	XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_ func(o *XsdGoPkgHasElem_IconsequenceextensioncomplexContentIconStyleTypeschema_Icon_TBasicLinkType_, enter bool)
	XsdGoPkgHasElem_TileSize                                                                    func(o *XsdGoPkgHasElem_TileSize, enter bool)
	XsdGoPkgHasElem_IconStyleSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_IconStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_SchemaExtension                                                             func(o *XsdGoPkgHasElem_SchemaExtension, enter bool)
	XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup                                            func(o *XsdGoPkgHasElem_BalloonStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AltitudeModeGroup                                                           func(o *XsdGoPkgHasElem_AltitudeModeGroup, enter bool)
	XsdGoPkgHasElems_Name                                                                       func(o *XsdGoPkgHasElems_Name, enter bool)
	XsdGoPkgHasElem_OverlayXY                                                                   func(o *XsdGoPkgHasElem_OverlayXY, enter bool)
	XsdGoPkgHasElems_LodSimpleExtensionGroup                                                    func(o *XsdGoPkgHasElems_LodSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_ViewRefreshTime                                                             func(o *XsdGoPkgHasElem_ViewRefreshTime, enter bool)
	XsdGoPkgHasElems_CameraObjectExtensionGroup                                                 func(o *XsdGoPkgHasElems_CameraObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_TimeSpanSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_DisplayMode                                                                 func(o *XsdGoPkgHasElem_DisplayMode, enter bool)
	TItemIconType                                                                               func(o *TItemIconType, enter bool)
	TBalloonStyleType                                                                           func(o *TBalloonStyleType, enter bool)
	TAbstractGeometryType                                                                       func(o *TAbstractGeometryType, enter bool)
	XsdGoPkgHasElem_StyleSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElem_StyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PairSimpleExtensionGroup                                                    func(o *XsdGoPkgHasElem_PairSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_RefreshInterval                                                            func(o *XsdGoPkgHasElems_RefreshInterval, enter bool)
	XsdGoPkgHasElem_TimeStampSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_TimeStampSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ScreenOverlay                                                              func(o *XsdGoPkgHasElems_ScreenOverlay, enter bool)
	XsdGoPkgHasElem_PhotoOverlay                                                                func(o *XsdGoPkgHasElem_PhotoOverlay, enter bool)
	XsdGoPkgHasElem_LatLonBox                                                                   func(o *XsdGoPkgHasElem_LatLonBox, enter bool)
	XsdGoPkgHasElem_TimeSpanObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_TimeSpanObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Heading                                                                     func(o *XsdGoPkgHasElem_Heading, enter bool)
	XsdGoPkgHasElem_LabelStyle                                                                  func(o *XsdGoPkgHasElem_LabelStyle, enter bool)
	XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup                                      func(o *XsdGoPkgHasElem_NetworkLinkControlObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup                                            func(o *XsdGoPkgHasElem_AbstractViewSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup                                         func(o *XsdGoPkgHasElem_AbstractOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_OrientationSimpleExtensionGroup                                            func(o *XsdGoPkgHasElems_OrientationSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Width                                                                       func(o *XsdGoPkgHasElem_Width, enter bool)
	XsdGoPkgHasElems_LatLonBox                                                                  func(o *XsdGoPkgHasElems_LatLonBox, enter bool)
	XsdGoPkgHasElems_PointObjectExtensionGroup                                                  func(o *XsdGoPkgHasElems_PointObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_MaxSnippetLines                                                             func(o *XsdGoPkgHasElem_MaxSnippetLines, enter bool)
	XsdGoPkgHasElems_Longitude                                                                  func(o *XsdGoPkgHasElems_Longitude, enter bool)
	XsdGoPkgHasElem_MaxSessionLength                                                            func(o *XsdGoPkgHasElem_MaxSessionLength, enter bool)
	XsdGoPkgHasElems_SimpleFieldExtension                                                       func(o *XsdGoPkgHasElems_SimpleFieldExtension, enter bool)
	XsdGoPkgHasElem_X                                                                           func(o *XsdGoPkgHasElem_X, enter bool)
	XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup                                        func(o *XsdGoPkgHasElems_AbstractFeatureSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_HttpQuery                                                                   func(o *XsdGoPkgHasElem_HttpQuery, enter bool)
	TLatLonBoxType                                                                              func(o *TLatLonBoxType, enter bool)
	XsdGoPkgHasElem_AliasSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElem_AliasSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LocationObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_LocationObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractColorStyleGroup                                                    func(o *XsdGoPkgHasElems_AbstractColorStyleGroup, enter bool)
	XsdGoPkgHasElems_State                                                                      func(o *XsdGoPkgHasElems_State, enter bool)
	XsdGoPkgHasElems_Point                                                                      func(o *XsdGoPkgHasElems_Point, enter bool)
	XsdGoPkgHasElems_KmlObjectExtensionGroup                                                    func(o *XsdGoPkgHasElems_KmlObjectExtensionGroup, enter bool)
	TDocumentType                                                                               func(o *TDocumentType, enter bool)
	XsdGoPkgHasElem_TopFov                                                                      func(o *XsdGoPkgHasElem_TopFov, enter bool)
	XsdGoPkgHasElems_FolderObjectExtensionGroup                                                 func(o *XsdGoPkgHasElems_FolderObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LinearRingSimpleExtensionGroup                                             func(o *XsdGoPkgHasElems_LinearRingSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Snippet                                                                    func(o *XsdGoPkgHasElems_Snippet, enter bool)
	XsdGoPkgHasElem_HotSpot                                                                     func(o *XsdGoPkgHasElem_HotSpot, enter bool)
	XsdGoPkgHasElem_MinLodPixels                                                                func(o *XsdGoPkgHasElem_MinLodPixels, enter bool)
	XsdGoPkgHasElem_Range                                                                       func(o *XsdGoPkgHasElem_Range, enter bool)
	TPlacemarkType                                                                              func(o *TPlacemarkType, enter bool)
	XsdGoPkgHasElems_DisplayMode                                                                func(o *XsdGoPkgHasElems_DisplayMode, enter bool)
	XsdGoPkgHasElem_NetworkLink                                                                 func(o *XsdGoPkgHasElem_NetworkLink, enter bool)
	XsdGoPkgHasElems_AbstractTimePrimitiveGroup                                                 func(o *XsdGoPkgHasElems_AbstractTimePrimitiveGroup, enter bool)
	XsdGoPkgHasElem_Kml                                                                         func(o *XsdGoPkgHasElem_Kml, enter bool)
	XsdGoPkgHasElems_Expires                                                                    func(o *XsdGoPkgHasElems_Expires, enter bool)
	TScreenOverlayType                                                                          func(o *TScreenOverlayType, enter bool)
	XsdGoPkgHasElem_Create                                                                      func(o *XsdGoPkgHasElem_Create, enter bool)
	XsdGoPkgHasElem_Near                                                                        func(o *XsdGoPkgHasElem_Near, enter bool)
	TLabelStyleType                                                                             func(o *TLabelStyleType, enter bool)
	TFolderType                                                                                 func(o *TFolderType, enter bool)
	XsdGoPkgHasElem_SimpleFieldExtension                                                        func(o *XsdGoPkgHasElem_SimpleFieldExtension, enter bool)
	XsdGoPkgHasElems_BottomFov                                                                  func(o *XsdGoPkgHasElems_BottomFov, enter bool)
	XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup                                          func(o *XsdGoPkgHasElems_MultiGeometryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup                                              func(o *XsdGoPkgHasElem_ViewVolumeObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Change                                                                     func(o *XsdGoPkgHasElems_Change, enter bool)
	XsdGoPkgHasElems_InnerBoundaryIs                                                            func(o *XsdGoPkgHasElems_InnerBoundaryIs, enter bool)
	XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_PlacemarkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LinkDescription                                                             func(o *XsdGoPkgHasElem_LinkDescription, enter bool)
	XsdGoPkgHasElems_TimeStamp                                                                  func(o *XsdGoPkgHasElems_TimeStamp, enter bool)
	XsdGoPkgHasElem_ColorMode                                                                   func(o *XsdGoPkgHasElem_ColorMode, enter bool)
	XsdGoPkgHasElem_AbstractGeometryGroup                                                       func(o *XsdGoPkgHasElem_AbstractGeometryGroup, enter bool)
	XsdGoPkgHasElems_PairObjectExtensionGroup                                                   func(o *XsdGoPkgHasElems_PairObjectExtensionGroup, enter bool)
	TMultiGeometryType                                                                          func(o *TMultiGeometryType, enter bool)
	XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup                                  func(o *XsdGoPkgHasElems_AbstractStyleSelectorSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Url                                                                        func(o *XsdGoPkgHasElems_Url, enter bool)
	TAbstractLatLonBoxType                                                                      func(o *TAbstractLatLonBoxType, enter bool)
	XsdGoPkgHasElem_Cookie                                                                      func(o *XsdGoPkgHasElem_Cookie, enter bool)
	XsdGoPkgHasElems_BgColor                                                                    func(o *XsdGoPkgHasElems_BgColor, enter bool)
	XsdGoPkgHasElems_Range                                                                      func(o *XsdGoPkgHasElems_Range, enter bool)
	XsdGoPkgHasElems_OuterBoundaryIs                                                            func(o *XsdGoPkgHasElems_OuterBoundaryIs, enter bool)
	XsdGoPkgHasElems_LookAtObjectExtensionGroup                                                 func(o *XsdGoPkgHasElems_LookAtObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_LinkObjectExtensionGroup                                                    func(o *XsdGoPkgHasElem_LinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup                                          func(o *XsdGoPkgHasElems_MultiGeometrySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_BgColor                                                                     func(o *XsdGoPkgHasElem_BgColor, enter bool)
	XsdGoPkgHasElem_MaxHeight                                                                   func(o *XsdGoPkgHasElem_MaxHeight, enter bool)
	XsdGoPkgHasElem_RegionSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElem_RegionSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup                                            func(o *XsdGoPkgHasElems_NetworkLinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_StyleMap                                                                   func(o *XsdGoPkgHasElems_StyleMap, enter bool)
	XsdGoPkgHasElem_Size                                                                        func(o *XsdGoPkgHasElem_Size, enter bool)
	XsdGoPkgHasElem_Orientation                                                                 func(o *XsdGoPkgHasElem_Orientation, enter bool)
	XsdGoPkgHasElem_TimeStampObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_TimeStampObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_OrientationSimpleExtensionGroup                                             func(o *XsdGoPkgHasElem_OrientationSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_MaxSnippetLines                                                            func(o *XsdGoPkgHasElems_MaxSnippetLines, enter bool)
	XsdGoPkgHasElem_PointSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElem_PointSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_PolyStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_StyleObjectExtensionGroup                                                   func(o *XsdGoPkgHasElem_StyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_RefreshMode                                                                func(o *XsdGoPkgHasElems_RefreshMode, enter bool)
	XsdGoPkgHasElem_AbstractSubStyleGroup                                                       func(o *XsdGoPkgHasElem_AbstractSubStyleGroup, enter bool)
	XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup                                          func(o *XsdGoPkgHasElems_ScreenOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LookAt                                                                     func(o *XsdGoPkgHasElems_LookAt, enter bool)
	TOrientationType                                                                            func(o *TOrientationType, enter bool)
	TPolygonType                                                                                func(o *TPolygonType, enter bool)
	XsdGoPkgHasElems_AbstractViewGroup                                                          func(o *XsdGoPkgHasElems_AbstractViewGroup, enter bool)
	XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup                                           func(o *XsdGoPkgHasElems_LatLonAltBoxSimpleExtensionGroup, enter bool)
	TimeStampType                                                                               func(o *TimeStampType, enter bool)
	XsdGoPkgHasElem_LookAtObjectExtensionGroup                                                  func(o *XsdGoPkgHasElem_LookAtObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_IconStyle                                                                   func(o *XsdGoPkgHasElem_IconStyle, enter bool)
	XsdGoPkgHasElem_SimpleData                                                                  func(o *XsdGoPkgHasElem_SimpleData, enter bool)
	XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_BasicLinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LodObjectExtensionGroup                                                     func(o *XsdGoPkgHasElem_LodObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Snippet                                                                     func(o *XsdGoPkgHasElem_Snippet, enter bool)
	XsdGoPkgHasElems_IconStyle                                                                  func(o *XsdGoPkgHasElems_IconStyle, enter bool)
	XsdGoPkgHasElem_Tilt                                                                        func(o *XsdGoPkgHasElem_Tilt, enter bool)
	XsdGoPkgHasElem_LocationSimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_LocationSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_MinFadeExtent                                                              func(o *XsdGoPkgHasElems_MinFadeExtent, enter bool)
	XsdGoPkgHasElem_ModelObjectExtensionGroup                                                   func(o *XsdGoPkgHasElem_ModelObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractTimePrimitiveGroup                                                  func(o *XsdGoPkgHasElem_AbstractTimePrimitiveGroup, enter bool)
	XsdGoPkgHasElem_PhoneNumber                                                                 func(o *XsdGoPkgHasElem_PhoneNumber, enter bool)
	XsdGoPkgHasElems_Alias                                                                      func(o *XsdGoPkgHasElems_Alias, enter bool)
	XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup                                     func(o *XsdGoPkgHasElems_AbstractColorStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Polygon                                                                    func(o *XsdGoPkgHasElems_Polygon, enter bool)
	XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_LatLonBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LinkDescription                                                            func(o *XsdGoPkgHasElems_LinkDescription, enter bool)
	XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup                                      func(o *XsdGoPkgHasElems_AbstractContainerSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup                                   func(o *XsdGoPkgHasElem_AbstractStyleSelectorObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_RightFov                                                                    func(o *XsdGoPkgHasElem_RightFov, enter bool)
	XsdGoPkgHasElems_Z                                                                          func(o *XsdGoPkgHasElems_Z, enter bool)
	XsdGoPkgHasElem_LinearRing                                                                  func(o *XsdGoPkgHasElem_LinearRing, enter bool)
	XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_BasicLinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_KmlSimpleExtensionGroup                                                     func(o *XsdGoPkgHasElem_KmlSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Roll                                                                        func(o *XsdGoPkgHasElem_Roll, enter bool)
	XsdGoPkgHasElems_Pair                                                                       func(o *XsdGoPkgHasElems_Pair, enter bool)
	XsdGoPkgHasElems_Roll                                                                       func(o *XsdGoPkgHasElems_Roll, enter bool)
	TCameraType                                                                                 func(o *TCameraType, enter bool)
	XsdGoPkgHasElem_AbstractContainerGroup                                                      func(o *XsdGoPkgHasElem_AbstractContainerGroup, enter bool)
	XsdGoPkgHasElems_PolygonSimpleExtensionGroup                                                func(o *XsdGoPkgHasElems_PolygonSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_ViewFormat                                                                  func(o *XsdGoPkgHasElem_ViewFormat, enter bool)
	XsdGoPkgHasElems_MaxFadeExtent                                                              func(o *XsdGoPkgHasElems_MaxFadeExtent, enter bool)
	XsdGoPkgHasElem_AbstractFeatureGroup                                                        func(o *XsdGoPkgHasElem_AbstractFeatureGroup, enter bool)
	XsdGoPkgHasElem_FolderObjectExtensionGroup                                                  func(o *XsdGoPkgHasElem_FolderObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ImagePyramid                                                               func(o *XsdGoPkgHasElems_ImagePyramid, enter bool)
	XsdGoPkgHasElems_MinLodPixels                                                               func(o *XsdGoPkgHasElems_MinLodPixels, enter bool)
	XsdGoPkgHasElem_RefreshVisibility                                                           func(o *XsdGoPkgHasElem_RefreshVisibility, enter bool)
	XsdGoPkgHasElems_KmlSimpleExtensionGroup                                                    func(o *XsdGoPkgHasElems_KmlSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Size                                                                       func(o *XsdGoPkgHasElems_Size, enter bool)
	TStyleMapType                                                                               func(o *TStyleMapType, enter bool)
	XsdGoPkgHasElems_Placemark                                                                  func(o *XsdGoPkgHasElems_Placemark, enter bool)
	XsdGoPkgHasElems_Shape                                                                      func(o *XsdGoPkgHasElems_Shape, enter bool)
	XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup                                             func(o *XsdGoPkgHasElems_ViewVolumeSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Url                                                                         func(o *XsdGoPkgHasElem_Url, enter bool)
	XsdGoPkgHasElems_SchemaExtension                                                            func(o *XsdGoPkgHasElems_SchemaExtension, enter bool)
	XsdGoPkgHasElems_PolyStyle                                                                  func(o *XsdGoPkgHasElems_PolyStyle, enter bool)
	XsdGoPkgHasElems_AbstractObjectGroup                                                        func(o *XsdGoPkgHasElems_AbstractObjectGroup, enter bool)
	XsdGoPkgHasElems_ColorMode                                                                  func(o *XsdGoPkgHasElems_ColorMode, enter bool)
	TDeleteType                                                                                 func(o *TDeleteType, enter bool)
	XsdGoPkgHasElems_UpdateOpExtensionGroup                                                     func(o *XsdGoPkgHasElems_UpdateOpExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractStyleSelectorGroup                                                  func(o *XsdGoPkgHasElem_AbstractStyleSelectorGroup, enter bool)
	TAbstractColorStyleType                                                                     func(o *TAbstractColorStyleType, enter bool)
	XsdGoPkgHasElem_Tessellate                                                                  func(o *XsdGoPkgHasElem_Tessellate, enter bool)
	XsdGoPkgHasElem_Pair                                                                        func(o *XsdGoPkgHasElem_Pair, enter bool)
	XsdGoPkgHasElem_Point                                                                       func(o *XsdGoPkgHasElem_Point, enter bool)
	XsdGoPkgHasElem_ExtendedData                                                                func(o *XsdGoPkgHasElem_ExtendedData, enter bool)
	XsdGoPkgHasElems_UpdateExtensionGroup                                                       func(o *XsdGoPkgHasElems_UpdateExtensionGroup, enter bool)
	XsdGoPkgHasElems_Y                                                                          func(o *XsdGoPkgHasElems_Y, enter bool)
	XsdGoPkgHasElem_KmlObjectExtensionGroup                                                     func(o *XsdGoPkgHasElem_KmlObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Href                                                                       func(o *XsdGoPkgHasElems_Href, enter bool)
	XsdGoPkgHasElem_Address                                                                     func(o *XsdGoPkgHasElem_Address, enter bool)
	XsdGoPkgHasElems_LocationObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_LocationObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AliasSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElems_AliasSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_ListItemType                                                                func(o *XsdGoPkgHasElem_ListItemType, enter bool)
	XsdGoPkgHasElem_When                                                                        func(o *XsdGoPkgHasElem_When, enter bool)
	XsdGoPkgHasElems_Width                                                                      func(o *XsdGoPkgHasElems_Width, enter bool)
	TLookAtType                                                                                 func(o *TLookAtType, enter bool)
	XsdGoPkgHasElems_ScaleSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElems_ScaleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Scale                                                                      func(o *XsdGoPkgHasElems_Scale, enter bool)
	XsdGoPkgHasElems_LinkSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElems_LinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Text                                                                       func(o *XsdGoPkgHasElems_Text, enter bool)
	XsdGoPkgHasElem_ItemIconObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_ItemIconObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_RotationXY                                                                 func(o *XsdGoPkgHasElems_RotationXY, enter bool)
	XsdGoPkgHasElems_AbstractGeometryGroup                                                      func(o *XsdGoPkgHasElems_AbstractGeometryGroup, enter bool)
	XsdGoPkgHasElem_ViewRefreshMode                                                             func(o *XsdGoPkgHasElem_ViewRefreshMode, enter bool)
	XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_TimeSpanSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_SchemaData                                                                  func(o *XsdGoPkgHasElem_SchemaData, enter bool)
	XsdGoPkgHasElems_Metadata                                                                   func(o *XsdGoPkgHasElems_Metadata, enter bool)
	XsdGoPkgHasElem_Schema                                                                      func(o *XsdGoPkgHasElem_Schema, enter bool)
	XsdGoPkgHasElem_AbstractViewGroup                                                           func(o *XsdGoPkgHasElem_AbstractViewGroup, enter bool)
	XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup                                      func(o *XsdGoPkgHasElems_AbstractContainerObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Document                                                                    func(o *XsdGoPkgHasElem_Document, enter bool)
	XsdGoPkgHasElem_Scale                                                                       func(o *XsdGoPkgHasElem_Scale, enter bool)
	XsdGoPkgHasElem_Description                                                                 func(o *XsdGoPkgHasElem_Description, enter bool)
	TBasicLinkType                                                                              func(o *TBasicLinkType, enter bool)
	XsdGoPkgHasElem_DocumentSimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_DocumentSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Visibility                                                                 func(o *XsdGoPkgHasElems_Visibility, enter bool)
	XsdGoPkgHasElems_RefreshVisibility                                                          func(o *XsdGoPkgHasElems_RefreshVisibility, enter bool)
	XsdGoPkgHasElem_InnerBoundaryIs                                                             func(o *XsdGoPkgHasElem_InnerBoundaryIs, enter bool)
	XsdGoPkgHasElem_StyleMap                                                                    func(o *XsdGoPkgHasElem_StyleMap, enter bool)
	XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup                                           func(o *XsdGoPkgHasElems_ImagePyramidSimpleExtensionGroup, enter bool)
	TLineStringType                                                                             func(o *TLineStringType, enter bool)
	XsdGoPkgHasElem_BoundaryObjectExtensionGroup                                                func(o *XsdGoPkgHasElem_BoundaryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_PolygonSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElem_PolygonSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_ResourceMapObjectExtensionGroup                                             func(o *XsdGoPkgHasElem_ResourceMapObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_PhotoOverlay                                                               func(o *XsdGoPkgHasElems_PhotoOverlay, enter bool)
	XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup                                            func(o *XsdGoPkgHasElem_BalloonStyleObjectExtensionGroup, enter bool)
	TAbstractObjectType                                                                         func(o *TAbstractObjectType, enter bool)
	XsdGoPkgHasElems_When                                                                       func(o *XsdGoPkgHasElems_When, enter bool)
	XsdGoPkgHasElem_ListStyle                                                                   func(o *XsdGoPkgHasElem_ListStyle, enter bool)
	XsdGoPkgHasElem_Region                                                                      func(o *XsdGoPkgHasElem_Region, enter bool)
	XsdGoPkgHasElem_CameraSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElem_CameraSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ItemIconObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_ItemIconObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Orientation                                                                func(o *XsdGoPkgHasElems_Orientation, enter bool)
	XsdGoPkgHasElem_LineStyleSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_LineStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_West                                                                        func(o *XsdGoPkgHasElem_West, enter bool)
	XsdGoPkgHasElem_ScaleObjectExtensionGroup                                                   func(o *XsdGoPkgHasElem_ScaleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Rotation                                                                    func(o *XsdGoPkgHasElem_Rotation, enter bool)
	XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup                                             func(o *XsdGoPkgHasElem_ResourceMapSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Name                                                                        func(o *XsdGoPkgHasElem_Name, enter bool)
	XsdGoPkgHasElems_Address                                                                    func(o *XsdGoPkgHasElems_Address, enter bool)
	XsdGoPkgHasElems_Create                                                                     func(o *XsdGoPkgHasElems_Create, enter bool)
	XsdGoPkgHasElems_LabelStyleObjectExtensionGroup                                             func(o *XsdGoPkgHasElems_LabelStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_RefreshInterval                                                             func(o *XsdGoPkgHasElem_RefreshInterval, enter bool)
	XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup                                      func(o *XsdGoPkgHasElems_AbstractLatLonBoxSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_TextColor                                                                   func(o *XsdGoPkgHasElem_TextColor, enter bool)
	XsdGoPkgHasElems_IconStyleSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_IconStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_MinAltitude                                                                func(o *XsdGoPkgHasElems_MinAltitude, enter bool)
	XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup                                             func(o *XsdGoPkgHasElems_ViewVolumeObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_MaxAltitude                                                                func(o *XsdGoPkgHasElems_MaxAltitude, enter bool)
	XsdGoPkgHasElems_Lod                                                                        func(o *XsdGoPkgHasElems_Lod, enter bool)
	XsdGoPkgHasElem_Update                                                                      func(o *XsdGoPkgHasElem_Update, enter bool)
	XsdGoPkgHasElems_ViewRefreshTime                                                            func(o *XsdGoPkgHasElems_ViewRefreshTime, enter bool)
	XsdGoPkgHasElems_LineStringSimpleExtensionGroup                                             func(o *XsdGoPkgHasElems_LineStringSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_SourceHref                                                                 func(o *XsdGoPkgHasElems_SourceHref, enter bool)
	XsdGoPkgHasElem_ScreenOverlay                                                               func(o *XsdGoPkgHasElem_ScreenOverlay, enter bool)
	XsdGoPkgHasElem_ListStyleObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_ListStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Link                                                                       func(o *XsdGoPkgHasElems_Link, enter bool)
	TKmlType                                                                                    func(o *TKmlType, enter bool)
	XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup                                      func(o *XsdGoPkgHasElem_AbstractColorStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_West                                                                       func(o *XsdGoPkgHasElems_West, enter bool)
	XsdGoPkgHasElems_ItemIconSimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_ItemIconSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup                                           func(o *XsdGoPkgHasElems_BalloonStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_BalloonStyle                                                               func(o *XsdGoPkgHasElems_BalloonStyle, enter bool)
	TCreateType                                                                                 func(o *TCreateType, enter bool)
	XsdGoPkgHasElems_Delete                                                                     func(o *XsdGoPkgHasElems_Delete, enter bool)
	TSchemaDataType                                                                             func(o *TSchemaDataType, enter bool)
	XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup                                           func(o *XsdGoPkgHasElem_GroundOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Extrude                                                                     func(o *XsdGoPkgHasElem_Extrude, enter bool)
	XsdGoPkgHasElem_RotationXY                                                                  func(o *XsdGoPkgHasElem_RotationXY, enter bool)
	XsdGoPkgHasElems_TopFov                                                                     func(o *XsdGoPkgHasElems_TopFov, enter bool)
	XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup                                     func(o *XsdGoPkgHasElems_NetworkLinkControlSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup                                            func(o *XsdGoPkgHasElem_PhotoOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Region                                                                     func(o *XsdGoPkgHasElems_Region, enter bool)
	XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup                                          func(o *XsdGoPkgHasElems_GroundOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup                                       func(o *XsdGoPkgHasElems_AbstractGeometryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractSubStyleGroup                                                      func(o *XsdGoPkgHasElems_AbstractSubStyleGroup, enter bool)
	XsdGoPkgHasElems_Coordinates                                                                func(o *XsdGoPkgHasElems_Coordinates, enter bool)
	XsdGoPkgHasElem_AbstractViewObjectExtensionGroup                                            func(o *XsdGoPkgHasElem_AbstractViewObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Icon                                                                       func(o *XsdGoPkgHasElems_Icon, enter bool)
	XsdGoPkgHasElem_AbstractColorStyleGroup                                                     func(o *XsdGoPkgHasElem_AbstractColorStyleGroup, enter bool)
	XsdGoPkgHasElem_ItemIconSimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_ItemIconSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PolygonObjectExtensionGroup                                                 func(o *XsdGoPkgHasElem_PolygonObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractViewObjectExtensionGroup                                           func(o *XsdGoPkgHasElems_AbstractViewObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup                                        func(o *XsdGoPkgHasElems_AbstractFeatureObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Document                                                                   func(o *XsdGoPkgHasElems_Document, enter bool)
	XsdGoPkgHasElems_LodObjectExtensionGroup                                                    func(o *XsdGoPkgHasElems_LodObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Data                                                                        func(o *XsdGoPkgHasElem_Data, enter bool)
	XsdGoPkgHasElem_DisplayName                                                                 func(o *XsdGoPkgHasElem_DisplayName, enter bool)
	XsdGoPkgHasElem_Alias                                                                       func(o *XsdGoPkgHasElem_Alias, enter bool)
	TPolyStyleType                                                                              func(o *TPolyStyleType, enter bool)
	TLatLonAltBoxType                                                                           func(o *TLatLonAltBoxType, enter bool)
	XsdGoPkgHasElems_GroundOverlay                                                              func(o *XsdGoPkgHasElems_GroundOverlay, enter bool)
	XsdGoPkgHasElem_FolderSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElem_FolderSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LinkSimpleExtensionGroup                                                    func(o *XsdGoPkgHasElem_LinkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_PairSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElems_PairSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Rotation                                                                   func(o *XsdGoPkgHasElems_Rotation, enter bool)
	XsdGoPkgHasElem_Color                                                                       func(o *XsdGoPkgHasElem_Color, enter bool)
	XsdGoPkgHasElems_LinkSnippet                                                                func(o *XsdGoPkgHasElems_LinkSnippet, enter bool)
	XsdGoPkgHasElems_DocumentSimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_DocumentSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Camera                                                                      func(o *XsdGoPkgHasElem_Camera, enter bool)
	XsdGoPkgHasElem_LeftFov                                                                     func(o *XsdGoPkgHasElem_LeftFov, enter bool)
	XsdGoPkgHasElems_LocationSimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_LocationSimpleExtensionGroup, enter bool)
	TStyleType                                                                                  func(o *TStyleType, enter bool)
	XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup                                        func(o *XsdGoPkgHasElem_AbstractSubStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Extrude                                                                    func(o *XsdGoPkgHasElems_Extrude, enter bool)
	XsdGoPkgHasElems_Begin                                                                      func(o *XsdGoPkgHasElems_Begin, enter bool)
	XsdGoPkgHasElems_AbstractStyleSelectorGroup                                                 func(o *XsdGoPkgHasElems_AbstractStyleSelectorGroup, enter bool)
	XsdGoPkgHasElems_LookAtSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElems_LookAtSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_End                                                                        func(o *XsdGoPkgHasElems_End, enter bool)
	XsdGoPkgHasElems_BasicLinkObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_BasicLinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Location                                                                   func(o *XsdGoPkgHasElems_Location, enter bool)
	XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup                                           func(o *XsdGoPkgHasElems_LatLonAltBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Folder                                                                     func(o *XsdGoPkgHasElems_Folder, enter bool)
	XsdGoPkgHasElem_TimeStamp                                                                   func(o *XsdGoPkgHasElem_TimeStamp, enter bool)
	TSimpleFieldType                                                                            func(o *TSimpleFieldType, enter bool)
	XsdGoPkgHasElems_Camera                                                                     func(o *XsdGoPkgHasElems_Camera, enter bool)
	XsdGoPkgHasElem_SchemaDataExtension                                                         func(o *XsdGoPkgHasElem_SchemaDataExtension, enter bool)
	XsdGoPkgHasElem_BasicLinkObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_BasicLinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_RegionSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElems_RegionSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup                                              func(o *XsdGoPkgHasElem_ViewVolumeSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Location                                                                    func(o *XsdGoPkgHasElem_Location, enter bool)
	XsdGoPkgHasElems_NetworkLinkControl                                                         func(o *XsdGoPkgHasElems_NetworkLinkControl, enter bool)
	XsdGoPkgHasElems_ListStyleObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_ListStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractObjectGroup                                                         func(o *XsdGoPkgHasElem_AbstractObjectGroup, enter bool)
	XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_LatLonBoxSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup                                            func(o *XsdGoPkgHasElems_ResourceMapSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup                                            func(o *XsdGoPkgHasElem_LatLonAltBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Update                                                                     func(o *XsdGoPkgHasElems_Update, enter bool)
	XsdGoPkgHasElems_MinRefreshPeriod                                                           func(o *XsdGoPkgHasElems_MinRefreshPeriod, enter bool)
	XsdGoPkgHasElems_BoundarySimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_BoundarySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup                                       func(o *XsdGoPkgHasElem_AbstractLatLonBoxSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_PolyStyle                                                                   func(o *XsdGoPkgHasElem_PolyStyle, enter bool)
	XsdGoPkgHasElems_IconStyleObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_IconStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_AltitudeModeGroup                                                          func(o *XsdGoPkgHasElems_AltitudeModeGroup, enter bool)
	XsdGoPkgHasElems_ItemIcon                                                                   func(o *XsdGoPkgHasElems_ItemIcon, enter bool)
	XsdGoPkgHasElem_MaxLodPixels                                                                func(o *XsdGoPkgHasElem_MaxLodPixels, enter bool)
	XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup                                          func(o *XsdGoPkgHasElems_GroundOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_StyleMapObjectExtensionGroup                                               func(o *XsdGoPkgHasElems_StyleMapObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_Kml                                                                        func(o *XsdGoPkgHasElems_Kml, enter bool)
	TPairType                                                                                   func(o *TPairType, enter bool)
	XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup                                         func(o *XsdGoPkgHasElem_AbstractFeatureObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_MaxWidth                                                                    func(o *XsdGoPkgHasElem_MaxWidth, enter bool)
	XsdGoPkgHasElems_SimpleField                                                                func(o *XsdGoPkgHasElems_SimpleField, enter bool)
	XsdGoPkgHasElem_ResourceMap                                                                 func(o *XsdGoPkgHasElem_ResourceMap, enter bool)
	XsdGoPkgHasElem_Shape                                                                       func(o *XsdGoPkgHasElem_Shape, enter bool)
	TAbstractOverlayType                                                                        func(o *TAbstractOverlayType, enter bool)
	XsdGoPkgHasElems_MultiGeometry                                                              func(o *XsdGoPkgHasElems_MultiGeometry, enter bool)
	XsdGoPkgHasElem_DataExtension                                                               func(o *XsdGoPkgHasElem_DataExtension, enter bool)
	XsdGoPkgHasElems_RegionObjectExtensionGroup                                                 func(o *XsdGoPkgHasElems_RegionObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Text                                                                        func(o *XsdGoPkgHasElem_Text, enter bool)
	XsdGoPkgHasElem_AltitudeMode                                                                func(o *XsdGoPkgHasElem_AltitudeMode, enter bool)
	XsdGoPkgHasElems_AliasObjectExtensionGroup                                                  func(o *XsdGoPkgHasElems_AliasObjectExtensionGroup, enter bool)
	TAbstractViewType                                                                           func(o *TAbstractViewType, enter bool)
	TAbstractFeatureType                                                                        func(o *TAbstractFeatureType, enter bool)
	XsdGoPkgHasElems_FlyToView                                                                  func(o *XsdGoPkgHasElems_FlyToView, enter bool)
	XsdGoPkgHasElem_MinRefreshPeriod                                                            func(o *XsdGoPkgHasElem_MinRefreshPeriod, enter bool)
	XsdGoPkgHasElem_TimeSpan                                                                    func(o *XsdGoPkgHasElem_TimeSpan, enter bool)
	XsdGoPkgHasElems_MaxLodPixels                                                               func(o *XsdGoPkgHasElems_MaxLodPixels, enter bool)
	XsdGoPkgHasElem_IconStyleObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_IconStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_ScreenXY                                                                    func(o *XsdGoPkgHasElem_ScreenXY, enter bool)
	XsdGoPkgHasElem_South                                                                       func(o *XsdGoPkgHasElem_South, enter bool)
	XsdGoPkgHasElems_Description                                                                func(o *XsdGoPkgHasElems_Description, enter bool)
	XsdGoPkgHasElem_Key                                                                         func(o *XsdGoPkgHasElem_Key, enter bool)
	XsdGoPkgHasElems_Near                                                                       func(o *XsdGoPkgHasElems_Near, enter bool)
	TIconStyleType                                                                              func(o *TIconStyleType, enter bool)
	XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup                                               func(o *XsdGoPkgHasElem_PlacemarkSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup                                        func(o *XsdGoPkgHasElems_AbstractOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_LineString                                                                  func(o *XsdGoPkgHasElem_LineString, enter bool)
	XsdGoPkgHasElem_Begin                                                                       func(o *XsdGoPkgHasElem_Begin, enter bool)
	TNetworkLinkControlType                                                                     func(o *TNetworkLinkControlType, enter bool)
	XsdGoPkgHasElems_LineString                                                                 func(o *XsdGoPkgHasElems_LineString, enter bool)
	XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_PolyStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Z                                                                           func(o *XsdGoPkgHasElem_Z, enter bool)
	XsdGoPkgHasElems_DataExtension                                                              func(o *XsdGoPkgHasElems_DataExtension, enter bool)
	XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup                                           func(o *XsdGoPkgHasElems_AbstractViewSimpleExtensionGroup, enter bool)
	TExtendedDataType                                                                           func(o *TExtendedDataType, enter bool)
	XsdGoPkgHasElems_LinkName                                                                   func(o *XsdGoPkgHasElems_LinkName, enter bool)
	TChangeType                                                                                 func(o *TChangeType, enter bool)
	XsdGoPkgHasElem_CameraObjectExtensionGroup                                                  func(o *XsdGoPkgHasElem_CameraObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup                                              func(o *XsdGoPkgHasElem_LabelStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_LineStringObjectExtensionGroup                                             func(o *XsdGoPkgHasElems_LineStringObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Change                                                                      func(o *XsdGoPkgHasElem_Change, enter bool)
	XsdGoPkgHasElem_BoundarySimpleExtensionGroup                                                func(o *XsdGoPkgHasElem_BoundarySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup                                             func(o *XsdGoPkgHasElems_LabelStyleSimpleExtensionGroup, enter bool)
	TSnippetType                                                                                func(o *TSnippetType, enter bool)
	XsdGoPkgHasElems_X                                                                          func(o *XsdGoPkgHasElems_X, enter bool)
	XsdGoPkgHasElem_GridOrigin                                                                  func(o *XsdGoPkgHasElem_GridOrigin, enter bool)
	XsdGoPkgHasElems_Data                                                                       func(o *XsdGoPkgHasElems_Data, enter bool)
	XsdGoPkgHasElem_Icon                                                                        func(o *XsdGoPkgHasElem_Icon, enter bool)
	XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup                                            func(o *XsdGoPkgHasElem_ImagePyramidObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_StyleObjectExtensionGroup                                                  func(o *XsdGoPkgHasElems_StyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_South                                                                      func(o *XsdGoPkgHasElems_South, enter bool)
	XsdGoPkgHasElems_LinearRingObjectExtensionGroup                                             func(o *XsdGoPkgHasElems_LinearRingObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup                                            func(o *XsdGoPkgHasElems_NetworkLinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_TextColor                                                                  func(o *XsdGoPkgHasElems_TextColor, enter bool)
	XsdGoPkgHasElems_Heading                                                                    func(o *XsdGoPkgHasElems_Heading, enter bool)
	XsdGoPkgHasElem_LabelStyleObjectExtensionGroup                                              func(o *XsdGoPkgHasElem_LabelStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_PointObjectExtensionGroup                                                   func(o *XsdGoPkgHasElem_PointObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_MaxFadeExtent                                                               func(o *XsdGoPkgHasElem_MaxFadeExtent, enter bool)
	XsdGoPkgHasElems_ScaleObjectExtensionGroup                                                  func(o *XsdGoPkgHasElems_ScaleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup                                           func(o *XsdGoPkgHasElem_MultiGeometryObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup                                       func(o *XsdGoPkgHasElem_AbstractContainerObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LabelStyle                                                                 func(o *XsdGoPkgHasElems_LabelStyle, enter bool)
	XsdGoPkgHasElems_ResourceMap                                                                func(o *XsdGoPkgHasElems_ResourceMap, enter bool)
	XsdGoPkgHasElems_OverlayXY                                                                  func(o *XsdGoPkgHasElems_OverlayXY, enter bool)
	XsdGoPkgHasElems_RightFov                                                                   func(o *XsdGoPkgHasElems_RightFov, enter bool)
	XsdGoPkgHasElems_LinkObjectExtensionGroup                                                   func(o *XsdGoPkgHasElems_LinkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Latitude                                                                    func(o *XsdGoPkgHasElem_Latitude, enter bool)
	XsdGoPkgHasElems_LineStyleObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_LineStyleObjectExtensionGroup, enter bool)
	Tvec2Type                                                                                   func(o *Tvec2Type, enter bool)
	XsdGoPkgHasElem_ItemIcon                                                                    func(o *XsdGoPkgHasElem_ItemIcon, enter bool)
	XsdGoPkgHasElems_MaxSessionLength                                                           func(o *XsdGoPkgHasElems_MaxSessionLength, enter bool)
	XsdGoPkgHasElem_ModelSimpleExtensionGroup                                                   func(o *XsdGoPkgHasElem_ModelSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_TimeStampSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_TimeStampSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Link                                                                        func(o *XsdGoPkgHasElem_Link, enter bool)
	XsdGoPkgHasElem_ViewVolume                                                                  func(o *XsdGoPkgHasElem_ViewVolume, enter bool)
	XsdGoPkgHasElem_Lod                                                                         func(o *XsdGoPkgHasElem_Lod, enter bool)
	XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup                                        func(o *XsdGoPkgHasElems_AbstractOverlaySimpleExtensionGroup, enter bool)
	TResourceMapType                                                                            func(o *TResourceMapType, enter bool)
	XsdGoPkgHasElem_LineStyle                                                                   func(o *XsdGoPkgHasElem_LineStyle, enter bool)
	XsdGoPkgHasElems_AbstractOverlayGroup                                                       func(o *XsdGoPkgHasElems_AbstractOverlayGroup, enter bool)
	TPhotoOverlayType                                                                           func(o *TPhotoOverlayType, enter bool)
	XsdGoPkgHasElem_Outline                                                                     func(o *XsdGoPkgHasElem_Outline, enter bool)
	XsdGoPkgHasElem_State                                                                       func(o *XsdGoPkgHasElem_State, enter bool)
	XsdGoPkgHasElems_Key                                                                        func(o *XsdGoPkgHasElems_Key, enter bool)
	XsdGoPkgHasElem_DrawOrder                                                                   func(o *XsdGoPkgHasElem_DrawOrder, enter bool)
	XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup                                           func(o *XsdGoPkgHasElems_ImagePyramidObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_End                                                                         func(o *XsdGoPkgHasElem_End, enter bool)
	TMetadataType                                                                               func(o *TMetadataType, enter bool)
	XsdGoPkgHasElems_TileSize                                                                   func(o *XsdGoPkgHasElems_TileSize, enter bool)
	TimeSpanType                                                                                func(o *TimeSpanType, enter bool)
	XsdGoPkgHasElem_SimpleField                                                                 func(o *XsdGoPkgHasElem_SimpleField, enter bool)
	XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup                                            func(o *XsdGoPkgHasElem_ImagePyramidSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_Latitude                                                                   func(o *XsdGoPkgHasElems_Latitude, enter bool)
	XsdGoPkgHasElems_Schema                                                                     func(o *XsdGoPkgHasElems_Schema, enter bool)
	XsdGoPkgHasElem_LineStringSimpleExtensionGroup                                              func(o *XsdGoPkgHasElem_LineStringSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_Coordinates                                                                 func(o *XsdGoPkgHasElem_Coordinates, enter bool)
	XsdGoPkgHasElem_Message                                                                     func(o *XsdGoPkgHasElem_Message, enter bool)
	XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup                                            func(o *XsdGoPkgHasElem_LatLonAltBoxSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_GroundOverlay                                                               func(o *XsdGoPkgHasElem_GroundOverlay, enter bool)
	XsdGoPkgHasElems_MaxWidth                                                                   func(o *XsdGoPkgHasElems_MaxWidth, enter bool)
	XsdGoPkgHasElems_LinearRing                                                                 func(o *XsdGoPkgHasElems_LinearRing, enter bool)
	XsdGoPkgHasElems_Model                                                                      func(o *XsdGoPkgHasElems_Model, enter bool)
	XsdGoPkgHasElems_TargetHref                                                                 func(o *XsdGoPkgHasElems_TargetHref, enter bool)
	XsdGoPkgHasElems_LineStyle                                                                  func(o *XsdGoPkgHasElems_LineStyle, enter bool)
	XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup                                           func(o *XsdGoPkgHasElem_GroundOverlayObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Longitude                                                                   func(o *XsdGoPkgHasElem_Longitude, enter bool)
	XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup                                           func(o *XsdGoPkgHasElems_PhotoOverlaySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_LinkSnippet                                                                 func(o *XsdGoPkgHasElem_LinkSnippet, enter bool)
	XsdGoPkgHasElem_MultiGeometry                                                               func(o *XsdGoPkgHasElem_MultiGeometry, enter bool)
	XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup                                     func(o *XsdGoPkgHasElems_AbstractColorStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_MaxHeight                                                                  func(o *XsdGoPkgHasElems_MaxHeight, enter bool)
	XsdGoPkgHasElem_UpdateOpExtensionGroup                                                      func(o *XsdGoPkgHasElem_UpdateOpExtensionGroup, enter bool)
	XsdGoPkgHasElems_FolderSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElems_FolderSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup                                           func(o *XsdGoPkgHasElem_MultiGeometrySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_PhoneNumber                                                                func(o *XsdGoPkgHasElems_PhoneNumber, enter bool)
	XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup                                  func(o *XsdGoPkgHasElems_AbstractStyleSelectorObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_LodSimpleExtensionGroup                                                     func(o *XsdGoPkgHasElem_LodSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_ViewFormat                                                                 func(o *XsdGoPkgHasElems_ViewFormat, enter bool)
	XsdGoPkgHasElems_AbstractContainerGroup                                                     func(o *XsdGoPkgHasElems_AbstractContainerGroup, enter bool)
	XsdGoPkgHasElem_LinkName                                                                    func(o *XsdGoPkgHasElem_LinkName, enter bool)
	XsdGoPkgHasElem_LinearRingObjectExtensionGroup                                              func(o *XsdGoPkgHasElem_LinearRingObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_FlyToView                                                                   func(o *XsdGoPkgHasElem_FlyToView, enter bool)
	XsdGoPkgHasElems_NetworkLink                                                                func(o *XsdGoPkgHasElems_NetworkLink, enter bool)
	XsdGoPkgHasElems_East                                                                       func(o *XsdGoPkgHasElems_East, enter bool)
	XsdGoPkgHasElems_StyleUrl                                                                   func(o *XsdGoPkgHasElems_StyleUrl, enter bool)
	XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup                                        func(o *XsdGoPkgHasElem_AbstractGeometrySimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_CameraSimpleExtensionGroup                                                 func(o *XsdGoPkgHasElems_CameraSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_PointSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElems_PointSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_MaxAltitude                                                                 func(o *XsdGoPkgHasElem_MaxAltitude, enter bool)
	XsdGoPkgHasElems_TimeStampObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_TimeStampObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_LookAtSimpleExtensionGroup                                                  func(o *XsdGoPkgHasElem_LookAtSimpleExtensionGroup, enter bool)
	TRegionType                                                                                 func(o *TRegionType, enter bool)
	XsdGoPkgHasElem_PolyStyleObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_PolyStyleObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup                                          func(o *XsdGoPkgHasElems_ScreenOverlaySimpleExtensionGroup, enter bool)
	TImagePyramidType                                                                           func(o *TImagePyramidType, enter bool)
	XsdGoPkgHasElem_OrientationObjectExtensionGroup                                             func(o *XsdGoPkgHasElem_OrientationObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_Open                                                                        func(o *XsdGoPkgHasElem_Open, enter bool)
	XsdGoPkgHasElem_BottomFov                                                                   func(o *XsdGoPkgHasElem_BottomFov, enter bool)
	TLinearRingType                                                                             func(o *TLinearRingType, enter bool)
	XsdGoPkgHasElems_PlacemarkObjectExtensionGroup                                              func(o *XsdGoPkgHasElems_PlacemarkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_StyleMapSimpleExtensionGroup                                               func(o *XsdGoPkgHasElems_StyleMapSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup                                        func(o *XsdGoPkgHasElem_AbstractSubStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElems_OrientationObjectExtensionGroup                                            func(o *XsdGoPkgHasElems_OrientationObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_ListStyleSimpleExtensionGroup                                              func(o *XsdGoPkgHasElems_ListStyleSimpleExtensionGroup, enter bool)
	XsdGoPkgHasElem_OuterBoundaryIs                                                             func(o *XsdGoPkgHasElem_OuterBoundaryIs, enter bool)
	XsdGoPkgHasElem_PlacemarkObjectExtensionGroup                                               func(o *XsdGoPkgHasElem_PlacemarkObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AliasObjectExtensionGroup                                                   func(o *XsdGoPkgHasElem_AliasObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_AbstractOverlayGroup                                                        func(o *XsdGoPkgHasElem_AbstractOverlayGroup, enter bool)
	XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup                                       func(o *XsdGoPkgHasElem_AbstractLatLonBoxObjectExtensionGroup, enter bool)
	XsdGoPkgHasElems_LeftFov                                                                    func(o *XsdGoPkgHasElems_LeftFov, enter bool)
	TAliasType                                                                                  func(o *TAliasType, enter bool)
	XsdGoPkgHasElems_ResourceMapObjectExtensionGroup                                            func(o *XsdGoPkgHasElems_ResourceMapObjectExtensionGroup, enter bool)
	XsdGoPkgHasElem_TargetHref                                                                  func(o *XsdGoPkgHasElem_TargetHref, enter bool)
}
