//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/TR/2002/WD-SVG11-20020108/SVG.xsd
package gopkg_WwwW3OrgTr2002WdSvg1120020108SvgXsd



import (
	xml "github.com/metaleap/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
	xlink "github.com/metaleap/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xlink.xsd_go"
)

//	All elements have an ID
type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.w3.org/2000/svg id,attr"`

}

type XsdGoPkgHasAtts_StdAttrs struct {
	xml.XsdGoPkgHasAttr_Base

	XsdGoPkgHasAttr_Id_XsdtId_

}

//	Common attributes for elements that might contain character data content
type XsdGoPkgHasAtts_LangSpaceAttrs struct {
	xml.XsdGoPkgHasAttr_Space

	xml.XsdGoPkgHasAttr_Lang

}

//	Common attributes to check for system capabilities
//	a comma-separated list of language codes, as per [RFC3066]
type TLanguageCodesType xsdt.String

//	Since TLanguageCodesType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodesType) String () string { return xsdt.String(me).String() }

//	Since TLanguageCodesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodesType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TLanguageCodesType's alias type xsdt.String.
func (me TLanguageCodesType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_SystemLanguage_TLanguageCodesType_ struct {
	SystemLanguage TLanguageCodesType `xml:"http://www.w3.org/2000/svg systemLanguage,attr"`

}

//	feature list specification
type TFeatureListType xsdt.String

//	This convenience method just performs a simple type conversion to TFeatureListType's alias type xsdt.String.
func (me TFeatureListType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TFeatureListType is just a simple String type, this merely returns the current string value.
func (me TFeatureListType) String () string { return xsdt.String(me).String() }

//	Since TFeatureListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFeatureListType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_RequiredFeatures_TFeatureListType_ struct {
	RequiredFeatures TFeatureListType `xml:"http://www.w3.org/2000/svg requiredFeatures,attr"`

}

//	extension list specification
type TExtensionListType xsdt.String

//	Since TExtensionListType is just a simple String type, this merely returns the current string value.
func (me TExtensionListType) String () string { return xsdt.String(me).String() }

//	Since TExtensionListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtensionListType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TExtensionListType's alias type xsdt.String.
func (me TExtensionListType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_RequiredExtensions_TExtensionListType_ struct {
	RequiredExtensions TExtensionListType `xml:"http://www.w3.org/2000/svg requiredExtensions,attr"`

}

type XsdGoPkgHasAtts_TestAttrs struct {
	XsdGoPkgHasAttr_RequiredExtensions_TExtensionListType_

	XsdGoPkgHasAttr_SystemLanguage_TLanguageCodesType_

	XsdGoPkgHasAttr_RequiredFeatures_TFeatureListType_

}

//	For most uses of URI referencing: standard XLink attributes other than xlink:href
type XsdGoPkgHasAtts_XlinkRefAttrs struct {
	xlink.XsdGoPkgHasAttr_Type

	xlink.XsdGoPkgHasAttr_Show

	xlink.XsdGoPkgHasAttr_Actuate

	xlink.XsdGoPkgHasAttr_Title

	xlink.XsdGoPkgHasAttr_Role

	xlink.XsdGoPkgHasAttr_Arcrole

}

//	script expression
type TScriptType xsdt.String

//	This convenience method just performs a simple type conversion to TScriptType's alias type xsdt.String.
func (me TScriptType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TScriptType is just a simple String type, this merely sets the current value from the specified string.
func (me *TScriptType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TScriptType is just a simple String type, this merely returns the current string value.
func (me TScriptType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Onmousemove_TScriptType_ struct {
	Onmousemove TScriptType `xml:"http://www.w3.org/2000/svg onmousemove,attr"`

}

type XsdGoPkgHasAttr_Onload_TScriptType_ struct {
	Onload TScriptType `xml:"http://www.w3.org/2000/svg onload,attr"`

}

type XsdGoPkgHasAttr_Onmouseup_TScriptType_ struct {
	Onmouseup TScriptType `xml:"http://www.w3.org/2000/svg onmouseup,attr"`

}

type XsdGoPkgHasAttr_Onfocusin_TScriptType_ struct {
	Onfocusin TScriptType `xml:"http://www.w3.org/2000/svg onfocusin,attr"`

}

type XsdGoPkgHasAttr_Onactivate_TScriptType_ struct {
	Onactivate TScriptType `xml:"http://www.w3.org/2000/svg onactivate,attr"`

}

type XsdGoPkgHasAttr_Onmousedown_TScriptType_ struct {
	Onmousedown TScriptType `xml:"http://www.w3.org/2000/svg onmousedown,attr"`

}

type XsdGoPkgHasAttr_Onmouseout_TScriptType_ struct {
	Onmouseout TScriptType `xml:"http://www.w3.org/2000/svg onmouseout,attr"`

}

type XsdGoPkgHasAttr_Onfocusout_TScriptType_ struct {
	Onfocusout TScriptType `xml:"http://www.w3.org/2000/svg onfocusout,attr"`

}

type XsdGoPkgHasAttr_Onmouseover_TScriptType_ struct {
	Onmouseover TScriptType `xml:"http://www.w3.org/2000/svg onmouseover,attr"`

}

type XsdGoPkgHasAttr_Onclick_TScriptType_ struct {
	Onclick TScriptType `xml:"http://www.w3.org/2000/svg onclick,attr"`

}

type XsdGoPkgHasAtts_GraphicsElementEvents struct {
	XsdGoPkgHasAttr_Onmousedown_TScriptType_

	XsdGoPkgHasAttr_Onmouseout_TScriptType_

	XsdGoPkgHasAttr_Onfocusout_TScriptType_

	XsdGoPkgHasAttr_Onmouseover_TScriptType_

	XsdGoPkgHasAttr_Onclick_TScriptType_

	XsdGoPkgHasAttr_Onmousemove_TScriptType_

	XsdGoPkgHasAttr_Onload_TScriptType_

	XsdGoPkgHasAttr_Onmouseup_TScriptType_

	XsdGoPkgHasAttr_Onfocusin_TScriptType_

	XsdGoPkgHasAttr_Onactivate_TScriptType_

}

type XsdGoPkgHasAttr_Onresize_TScriptType_ struct {
	Onresize TScriptType `xml:"http://www.w3.org/2000/svg onresize,attr"`

}

type XsdGoPkgHasAttr_Onunload_TScriptType_ struct {
	Onunload TScriptType `xml:"http://www.w3.org/2000/svg onunload,attr"`

}

type XsdGoPkgHasAttr_Onscroll_TScriptType_ struct {
	Onscroll TScriptType `xml:"http://www.w3.org/2000/svg onscroll,attr"`

}

type XsdGoPkgHasAttr_Onerror_TScriptType_ struct {
	Onerror TScriptType `xml:"http://www.w3.org/2000/svg onerror,attr"`

}

type XsdGoPkgHasAttr_Onzoom_TScriptType_ struct {
	Onzoom TScriptType `xml:"http://www.w3.org/2000/svg onzoom,attr"`

}

type XsdGoPkgHasAttr_Onabort_TScriptType_ struct {
	Onabort TScriptType `xml:"http://www.w3.org/2000/svg onabort,attr"`

}

type XsdGoPkgHasAtts_DocumentEvents struct {
	XsdGoPkgHasAttr_Onunload_TScriptType_

	XsdGoPkgHasAttr_Onscroll_TScriptType_

	XsdGoPkgHasAttr_Onerror_TScriptType_

	XsdGoPkgHasAttr_Onzoom_TScriptType_

	XsdGoPkgHasAttr_Onabort_TScriptType_

	XsdGoPkgHasAttr_Onresize_TScriptType_

}

type XsdGoPkgHasAttr_Onbegin_TScriptType_ struct {
	Onbegin TScriptType `xml:"http://www.w3.org/2000/svg onbegin,attr"`

}

type XsdGoPkgHasAttr_Onend_TScriptType_ struct {
	Onend TScriptType `xml:"http://www.w3.org/2000/svg onend,attr"`

}

type XsdGoPkgHasAttr_Onrepeat_TScriptType_ struct {
	Onrepeat TScriptType `xml:"http://www.w3.org/2000/svg onrepeat,attr"`

}

type XsdGoPkgHasAtts_AnimationEvents struct {
	XsdGoPkgHasAttr_Onend_TScriptType_

	XsdGoPkgHasAttr_Onrepeat_TScriptType_

	XsdGoPkgHasAttr_Onbegin_TScriptType_

}

//	The following presentation attributes have to do with specifying color.
type TxsdPresentationAttributesColorColorInterpolation xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "inherit".
func (me TxsdPresentationAttributesColorColorInterpolation) IsInherit () bool { return me == "inherit" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorInterpolation's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorInterpolation) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "auto".
func (me TxsdPresentationAttributesColorColorInterpolation) IsAuto () bool { return me == "auto" }

//	Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorInterpolation) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorInterpolation) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "linearRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsLinearRGB () bool { return me == "linearRGB" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "sRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsSrgb () bool { return me == "sRGB" }

type XsdGoPkgHasAttr_ColorInterpolation_TxsdPresentationAttributesColorColorInterpolation_ struct {
	ColorInterpolation TxsdPresentationAttributesColorColorInterpolation `xml:"http://www.w3.org/2000/svg color-interpolation,attr"`

}

type TxsdPresentationAttributesColorColorRendering xsdt.String

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorRendering) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeQuality".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeQuality () bool { return me == "optimizeQuality" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "inherit".
func (me TxsdPresentationAttributesColorColorRendering) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "auto".
func (me TxsdPresentationAttributesColorColorRendering) IsAuto () bool { return me == "auto" }

//	Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorRendering) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorRendering) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeSpeed () bool { return me == "optimizeSpeed" }

type XsdGoPkgHasAttr_ColorRendering_TxsdPresentationAttributesColorColorRendering_ struct {
	ColorRendering TxsdPresentationAttributesColorColorRendering `xml:"http://www.w3.org/2000/svg color-rendering,attr"`

}

//	a CSS2 Color
//	Color as defined in CSS2 and XSL 1.0 plus additional recognised color keyword names (the 'X11 colors')
type TColorType xsdt.String

//	Since TColorType is just a simple String type, this merely returns the current string value.
func (me TColorType) String () string { return xsdt.String(me).String() }

//	Since TColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TColorType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TColorType's alias type xsdt.String.
func (me TColorType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Color_TColorType_ struct {
	Color TColorType `xml:"http://www.w3.org/2000/svg color,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesColor struct {
	XsdGoPkgHasAttr_ColorRendering_TxsdPresentationAttributesColorColorRendering_

	XsdGoPkgHasAttr_Color_TColorType_

	XsdGoPkgHasAttr_ColorInterpolation_TxsdPresentationAttributesColorColorInterpolation_

}

//	The following presentation attributes apply to container elements
//	accumulate | new [ <x> <y> <width> <height> ] | inherit
type TEnableBackgroundValueType xsdt.String

//	Since TEnableBackgroundValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEnableBackgroundValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TEnableBackgroundValueType's alias type xsdt.String.
func (me TEnableBackgroundValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TEnableBackgroundValueType is just a simple String type, this merely returns the current string value.
func (me TEnableBackgroundValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_EnableBackground_TEnableBackgroundValueType_ struct {
	EnableBackground TEnableBackgroundValueType `xml:"http://www.w3.org/2000/svg enable-background,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesContainers struct {
	XsdGoPkgHasAttr_EnableBackground_TEnableBackgroundValueType_

}

//	The following presentation attributes apply to 'feFlood' elements
//	An SVG color value (sRGB plus optional ICC)
type TSVGColorType xsdt.String

//	This convenience method just performs a simple type conversion to TSVGColorType's alias type xsdt.String.
func (me TSVGColorType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TSVGColorType is just a simple String type, this merely returns the current string value.
func (me TSVGColorType) String () string { return xsdt.String(me).String() }

//	Since TSVGColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSVGColorType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_FloodColor_TSVGColorType_ struct {
	FloodColor TSVGColorType `xml:"http://www.w3.org/2000/svg flood-color,attr"`

}

//	opacity value (e.g., <number>)
//	<alphavalue> | inherit
type TOpacityValueType xsdt.String

//	Since TOpacityValueType is just a simple String type, this merely returns the current string value.
func (me TOpacityValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TOpacityValueType's alias type xsdt.String.
func (me TOpacityValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TOpacityValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TOpacityValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_FloodOpacity_TOpacityValueType_ struct {
	FloodOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg flood-opacity,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesFeFlood struct {
	XsdGoPkgHasAttr_FloodOpacity_TOpacityValueType_

	XsdGoPkgHasAttr_FloodColor_TSVGColorType_

}

//	The following presentation attributes apply to filter primitives
type XsdGoPkgHasAttr_ColorInterpolationFilters_TxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters_ struct {
	ColorInterpolationFilters TxsdPresentationAttributesColorColorInterpolation `xml:"http://www.w3.org/2000/svg color-interpolation-filters,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesFilterPrimitives struct {
	XsdGoPkgHasAttr_ColorInterpolationFilters_TxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters_

}

//	The following presentation attributes apply to filling and stroking operations
type XsdGoPkgHasAttr_StrokeOpacity_TOpacityValueType_ struct {
	StrokeOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg stroke-opacity,attr"`

}

type XsdGoPkgHasAttr_FillOpacity_TOpacityValueType_ struct {
	FillOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg fill-opacity,attr"`

}

//	'stroke-dasharray' property/attribute value (e.g., 'none', list of <number>s)
type TStrokeDashArrayValueType xsdt.String

//	Since TStrokeDashArrayValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashArrayValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TStrokeDashArrayValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashArrayValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TStrokeDashArrayValueType's alias type xsdt.String.
func (me TStrokeDashArrayValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_StrokeDasharray_TStrokeDashArrayValueType_ struct {
	StrokeDasharray TStrokeDashArrayValueType `xml:"http://www.w3.org/2000/svg stroke-dasharray,attr"`

}

//	'stroke-miterlimit' property/attribute value (e.g., <number>)
type TStrokeMiterLimitValueType xsdt.String

//	Since TStrokeMiterLimitValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeMiterLimitValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TStrokeMiterLimitValueType's alias type xsdt.String.
func (me TStrokeMiterLimitValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TStrokeMiterLimitValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeMiterLimitValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_StrokeMiterlimit_TStrokeMiterLimitValueType_ struct {
	StrokeMiterlimit TStrokeMiterLimitValueType `xml:"http://www.w3.org/2000/svg stroke-miterlimit,attr"`

}

//	'clip-rule' or fill-rule property/attribute value
type TClipFillRuleType xsdt.String

//	Returns true if the value of this enumerated TClipFillRuleType is "evenodd".
func (me TClipFillRuleType) IsEvenodd () bool { return me == "evenodd" }

//	Since TClipFillRuleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipFillRuleType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TClipFillRuleType's alias type xsdt.String.
func (me TClipFillRuleType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TClipFillRuleType is just a simple String type, this merely returns the current string value.
func (me TClipFillRuleType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TClipFillRuleType is "nonzero".
func (me TClipFillRuleType) IsNonzero () bool { return me == "nonzero" }

//	Returns true if the value of this enumerated TClipFillRuleType is "inherit".
func (me TClipFillRuleType) IsInherit () bool { return me == "inherit" }

type XsdGoPkgHasAttr_FillRule_TClipFillRuleType_ struct {
	FillRule TClipFillRuleType `xml:"http://www.w3.org/2000/svg fill-rule,attr"`

}

//	'stroke-width' property/attribute value (e.g., <length>)
type TStrokeWidthValueType xsdt.String

//	Since TStrokeWidthValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeWidthValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TStrokeWidthValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeWidthValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TStrokeWidthValueType's alias type xsdt.String.
func (me TStrokeWidthValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_StrokeWidth_TStrokeWidthValueType_ struct {
	StrokeWidth TStrokeWidthValueType `xml:"http://www.w3.org/2000/svg stroke-width,attr"`

}

//	a 'fill' or 'stroke' property/attribute value
type TPaintType xsdt.String

//	Since TPaintType is just a simple String type, this merely returns the current string value.
func (me TPaintType) String () string { return xsdt.String(me).String() }

//	Since TPaintType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPaintType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TPaintType's alias type xsdt.String.
func (me TPaintType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Stroke_TPaintType_ struct {
	Stroke TPaintType `xml:"http://www.w3.org/2000/svg stroke,attr"`

}

type TxsdPresentationAttributesFillStrokeStrokeLinejoin xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsRound () bool { return me == "round" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinejoin's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinejoin) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "bevel".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsBevel () bool { return me == "bevel" }

//	Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "miter".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsMiter () bool { return me == "miter" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsInherit () bool { return me == "inherit" }

type XsdGoPkgHasAttr_StrokeLinejoin_TxsdPresentationAttributesFillStrokeStrokeLinejoin_ struct {
	StrokeLinejoin TxsdPresentationAttributesFillStrokeStrokeLinejoin `xml:"http://www.w3.org/2000/svg stroke-linejoin,attr"`

}

type TxsdPresentationAttributesFillStrokeStrokeLinecap xsdt.String

//	Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinecap) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsRound () bool { return me == "round" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "square".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsSquare () bool { return me == "square" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "butt".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsButt () bool { return me == "butt" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinecap's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_StrokeLinecap_TxsdPresentationAttributesFillStrokeStrokeLinecap_ struct {
	StrokeLinecap TxsdPresentationAttributesFillStrokeStrokeLinecap `xml:"http://www.w3.org/2000/svg stroke-linecap,attr"`

}

type XsdGoPkgHasAttr_Fill_TPaintType_ struct {
	Fill TPaintType `xml:"http://www.w3.org/2000/svg fill,attr"`

}

//	'stroke-dashoffset' property/attribute value (e.g., 'none', >length>)
type TStrokeDashOffsetValueType xsdt.String

//	Since TStrokeDashOffsetValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashOffsetValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TStrokeDashOffsetValueType's alias type xsdt.String.
func (me TStrokeDashOffsetValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TStrokeDashOffsetValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashOffsetValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_StrokeDashoffset_TStrokeDashOffsetValueType_ struct {
	StrokeDashoffset TStrokeDashOffsetValueType `xml:"http://www.w3.org/2000/svg stroke-dashoffset,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesFillStroke struct {
	XsdGoPkgHasAttr_StrokeDasharray_TStrokeDashArrayValueType_

	XsdGoPkgHasAttr_StrokeMiterlimit_TStrokeMiterLimitValueType_

	XsdGoPkgHasAttr_FillRule_TClipFillRuleType_

	XsdGoPkgHasAttr_StrokeWidth_TStrokeWidthValueType_

	XsdGoPkgHasAttr_Stroke_TPaintType_

	XsdGoPkgHasAttr_StrokeLinejoin_TxsdPresentationAttributesFillStrokeStrokeLinejoin_

	XsdGoPkgHasAttr_StrokeLinecap_TxsdPresentationAttributesFillStrokeStrokeLinecap_

	XsdGoPkgHasAttr_Fill_TPaintType_

	XsdGoPkgHasAttr_StrokeDashoffset_TStrokeDashOffsetValueType_

	XsdGoPkgHasAttr_StrokeOpacity_TOpacityValueType_

	XsdGoPkgHasAttr_FillOpacity_TOpacityValueType_

}

//	The following presentation attributes have to do with selecting a font to use
//	[[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit
//	'font-family' property/attribute value (i.e., list of fonts)
type TFontFamilyValueType xsdt.String

//	Since TFontFamilyValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontFamilyValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TFontFamilyValueType is just a simple String type, this merely returns the current string value.
func (me TFontFamilyValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TFontFamilyValueType's alias type xsdt.String.
func (me TFontFamilyValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_FontFamily_TFontFamilyValueType_ struct {
	FontFamily TFontFamilyValueType `xml:"http://www.w3.org/2000/svg font-family,attr"`

}

type TxsdPresentationAttributesFontSpecificationFontStretch xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraExpanded () bool { return me == "extra-expanded" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "narrower".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNarrower () bool { return me == "narrower" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsCondensed () bool { return me == "condensed" }

//	Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStretch) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraExpanded () bool { return me == "ultra-expanded" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraCondensed () bool { return me == "ultra-condensed" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiCondensed () bool { return me == "semi-condensed" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStretch's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExpanded () bool { return me == "expanded" }

//	Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiExpanded () bool { return me == "semi-expanded" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraCondensed () bool { return me == "extra-condensed" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "wider".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsWider () bool { return me == "wider" }

type XsdGoPkgHasAttr_FontStretch_TxsdPresentationAttributesFontSpecificationFontStretch_ struct {
	FontStretch TxsdPresentationAttributesFontSpecificationFontStretch `xml:"http://www.w3.org/2000/svg font-stretch,attr"`

}

//	'font-size' property/attribute value
//	<absolute-size> | <relative-size> | <length> | <percentage> | inherit
type TFontSizeValueType xsdt.String

//	This convenience method just performs a simple type conversion to TFontSizeValueType's alias type xsdt.String.
func (me TFontSizeValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TFontSizeValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TFontSizeValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_FontSize_TFontSizeValueType_ struct {
	FontSize TFontSizeValueType `xml:"http://www.w3.org/2000/svg font-size,attr"`

}

type TxsdPresentationAttributesFontSpecificationFontVariant xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsInherit () bool { return me == "inherit" }

//	Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontVariant's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsNormal () bool { return me == "normal" }

//	Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontVariant) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "small-caps".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsSmallCaps () bool { return me == "small-caps" }

type XsdGoPkgHasAttr_FontVariant_TxsdPresentationAttributesFontSpecificationFontVariant_ struct {
	FontVariant TxsdPresentationAttributesFontSpecificationFontVariant `xml:"http://www.w3.org/2000/svg font-variant,attr"`

}

type TxsdPresentationAttributesFontSpecificationFontWeight xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bold".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBold () bool { return me == "bold" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontWeight's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bolder".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBolder () bool { return me == "bolder" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "200".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is200 () bool { return me == "200" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "800".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is800 () bool { return me == "800" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "400".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is400 () bool { return me == "400" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "lighter".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsLighter () bool { return me == "lighter" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "500".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is500 () bool { return me == "500" }

//	Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontWeight) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "300".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is300 () bool { return me == "300" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "700".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is700 () bool { return me == "700" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "600".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is600 () bool { return me == "600" }

//	Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "900".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is900 () bool { return me == "900" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "100".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is100 () bool { return me == "100" }

type XsdGoPkgHasAttr_FontWeight_TxsdPresentationAttributesFontSpecificationFontWeight_ struct {
	FontWeight TxsdPresentationAttributesFontSpecificationFontWeight `xml:"http://www.w3.org/2000/svg font-weight,attr"`

}

type TxsdPresentationAttributesFontSpecificationFontStyle xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "italic".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsItalic () bool { return me == "italic" }

//	Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStyle) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "oblique".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsOblique () bool { return me == "oblique" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStyle's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_FontStyle_TxsdPresentationAttributesFontSpecificationFontStyle_ struct {
	FontStyle TxsdPresentationAttributesFontSpecificationFontStyle `xml:"http://www.w3.org/2000/svg font-style,attr"`

}

//	'font-size-adjust' property/attribute value
//	<number> | none | inherit
type TFontSizeAdjustValueType xsdt.String

//	Since TFontSizeAdjustValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeAdjustValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TFontSizeAdjustValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeAdjustValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TFontSizeAdjustValueType's alias type xsdt.String.
func (me TFontSizeAdjustValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_FontSizeAdjust_TFontSizeAdjustValueType_ struct {
	FontSizeAdjust TFontSizeAdjustValueType `xml:"http://www.w3.org/2000/svg font-size-adjust,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesFontSpecification struct {
	XsdGoPkgHasAttr_FontFamily_TFontFamilyValueType_

	XsdGoPkgHasAttr_FontStretch_TxsdPresentationAttributesFontSpecificationFontStretch_

	XsdGoPkgHasAttr_FontSize_TFontSizeValueType_

	XsdGoPkgHasAttr_FontVariant_TxsdPresentationAttributesFontSpecificationFontVariant_

	XsdGoPkgHasAttr_FontWeight_TxsdPresentationAttributesFontSpecificationFontWeight_

	XsdGoPkgHasAttr_FontStyle_TxsdPresentationAttributesFontSpecificationFontStyle_

	XsdGoPkgHasAttr_FontSizeAdjust_TFontSizeAdjustValueType_

}

//	The following presentation attributes apply to gradient 'stop' elements
type XsdGoPkgHasAttr_StopOpacity_TOpacityValueType_ struct {
	StopOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg stop-opacity,attr"`

}

type XsdGoPkgHasAttr_StopColor_TSVGColorType_ struct {
	StopColor TSVGColorType `xml:"http://www.w3.org/2000/svg stop-color,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesGradients struct {
	XsdGoPkgHasAttr_StopOpacity_TOpacityValueType_

	XsdGoPkgHasAttr_StopColor_TSVGColorType_

}

//	The following presentation attributes apply to graphics elements
type TxsdPresentationAttributesGraphicsVisibility xsdt.String

//	Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsVisibility) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "hidden".
func (me TxsdPresentationAttributesGraphicsVisibility) IsHidden () bool { return me == "hidden" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsVisibility's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsVisibility) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "inherit".
func (me TxsdPresentationAttributesGraphicsVisibility) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "visible".
func (me TxsdPresentationAttributesGraphicsVisibility) IsVisible () bool { return me == "visible" }

//	Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsVisibility) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Visibility_TxsdPresentationAttributesGraphicsVisibility_ struct {
	Visibility TxsdPresentationAttributesGraphicsVisibility `xml:"http://www.w3.org/2000/svg visibility,attr"`

}

type TxsdPresentationAttributesGraphicsPointerEvents xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFill () bool { return me == "visibleFill" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFill () bool { return me == "fill" }

//	Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsPointerEvents) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visible".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisible () bool { return me == "visible" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "stroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsStroke () bool { return me == "stroke" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleStroke () bool { return me == "visibleStroke" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visiblePainted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisiblePainted () bool { return me == "visiblePainted" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "painted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsPainted () bool { return me == "painted" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "all".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsAll () bool { return me == "all" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fillstroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFillstroke () bool { return me == "fillstroke" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsPointerEvents's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsPointerEvents) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsPointerEvents) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "inherit".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFillStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFillStroke () bool { return me == "visibleFillStroke" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "none".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsNone () bool { return me == "none" }

type XsdGoPkgHasAttr_PointerEvents_TxsdPresentationAttributesGraphicsPointerEvents_ struct {
	PointerEvents TxsdPresentationAttributesGraphicsPointerEvents `xml:"http://www.w3.org/2000/svg pointer-events,attr"`

}

type XsdGoPkgHasAttr_Opacity_TOpacityValueType_ struct {
	Opacity TOpacityValueType `xml:"http://www.w3.org/2000/svg opacity,attr"`

}

//	'mask' property/attribute value (e.g., 'none', %URI;)
//	<uri> | none | inherit
type TMaskValueType xsdt.String

//	This convenience method just performs a simple type conversion to TMaskValueType's alias type xsdt.String.
func (me TMaskValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TMaskValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMaskValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TMaskValueType is just a simple String type, this merely returns the current string value.
func (me TMaskValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Mask_TMaskValueType_ struct {
	Mask TMaskValueType `xml:"http://www.w3.org/2000/svg mask,attr"`

}

//	Value is an optional comma-separated list orf uri references followed by one token from an enumerated list.
//	[ [<uri> ,]* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize| text | wait | help ] ] | inherit
type TCursorValueType xsdt.String

//	Since TCursorValueType is just a simple String type, this merely returns the current string value.
func (me TCursorValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TCursorValueType's alias type xsdt.String.
func (me TCursorValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TCursorValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCursorValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Cursor_TCursorValueType_ struct {
	Cursor TCursorValueType `xml:"http://www.w3.org/2000/svg cursor,attr"`

}

//	<uri> | none | inherit
type TClipPathValueType xsdt.String

//	Since TClipPathValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipPathValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TClipPathValueType's alias type xsdt.String.
func (me TClipPathValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TClipPathValueType is just a simple String type, this merely returns the current string value.
func (me TClipPathValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_ClipPath_TClipPathValueType_ struct {
	ClipPath TClipPathValueType `xml:"http://www.w3.org/2000/svg clip-path,attr"`

}

type TxsdPresentationAttributesGraphicsTextRendering xsdt.String

//	Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsTextRendering) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsGeometricPrecision () bool { return me == "geometricPrecision" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeSpeed () bool { return me == "optimizeSpeed" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeLegibility".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeLegibility () bool { return me == "optimizeLegibility" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "auto".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsAuto () bool { return me == "auto" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsTextRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsTextRendering) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsTextRendering) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_TextRendering_TxsdPresentationAttributesGraphicsTextRendering_ struct {
	TextRendering TxsdPresentationAttributesGraphicsTextRendering `xml:"http://www.w3.org/2000/svg text-rendering,attr"`

}

type XsdGoPkgHasAttr_ClipRule_TClipFillRuleType_ struct {
	ClipRule TClipFillRuleType `xml:"http://www.w3.org/2000/svg clip-rule,attr"`

}

type XsdGoPkgHasAttr_ImageRendering_TxsdPresentationAttributesGraphicsImageRendering_ struct {
	ImageRendering TxsdPresentationAttributesColorColorRendering `xml:"http://www.w3.org/2000/svg image-rendering,attr"`

}

//	<uri> | none | inherit
type TFilterValueType xsdt.String

//	Since TFilterValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFilterValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TFilterValueType is just a simple String type, this merely returns the current string value.
func (me TFilterValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TFilterValueType's alias type xsdt.String.
func (me TFilterValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Filter_TFilterValueType_ struct {
	Filter TFilterValueType `xml:"http://www.w3.org/2000/svg filter,attr"`

}

type TxsdPresentationAttributesGraphicsDisplay xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRow () bool { return me == "table-row" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumn () bool { return me == "table-column" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-caption".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCaption () bool { return me == "table-caption" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "compact".
func (me TxsdPresentationAttributesGraphicsDisplay) IsCompact () bool { return me == "compact" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline-table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInlineTable () bool { return me == "inline-table" }

//	Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsDisplay) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-footer-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableFooterGroup () bool { return me == "table-footer-group" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "marker".
func (me TxsdPresentationAttributesGraphicsDisplay) IsMarker () bool { return me == "marker" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRowGroup () bool { return me == "table-row-group" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-header-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableHeaderGroup () bool { return me == "table-header-group" }

//	Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsDisplay) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsDisplay's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsDisplay) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInline () bool { return me == "inline" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "list-item".
func (me TxsdPresentationAttributesGraphicsDisplay) IsListItem () bool { return me == "list-item" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumnGroup () bool { return me == "table-column-group" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-cell".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCell () bool { return me == "table-cell" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "run-in".
func (me TxsdPresentationAttributesGraphicsDisplay) IsRunIn () bool { return me == "run-in" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "none".
func (me TxsdPresentationAttributesGraphicsDisplay) IsNone () bool { return me == "none" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inherit".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTable () bool { return me == "table" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "block".
func (me TxsdPresentationAttributesGraphicsDisplay) IsBlock () bool { return me == "block" }

type XsdGoPkgHasAttr_Display_TxsdPresentationAttributesGraphicsDisplay_ struct {
	Display TxsdPresentationAttributesGraphicsDisplay `xml:"http://www.w3.org/2000/svg display,attr"`

}

type TxsdPresentationAttributesGraphicsShapeRendering xsdt.String

//	Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsShapeRendering) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsGeometricPrecision () bool { return me == "geometricPrecision" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "auto".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsAuto () bool { return me == "auto" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsOptimizeSpeed () bool { return me == "optimizeSpeed" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsShapeRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsShapeRendering) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsShapeRendering) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "crispEdges".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsCrispEdges () bool { return me == "crispEdges" }

type XsdGoPkgHasAttr_ShapeRendering_TxsdPresentationAttributesGraphicsShapeRendering_ struct {
	ShapeRendering TxsdPresentationAttributesGraphicsShapeRendering `xml:"http://www.w3.org/2000/svg shape-rendering,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesGraphics struct {
	XsdGoPkgHasAttr_ImageRendering_TxsdPresentationAttributesGraphicsImageRendering_

	XsdGoPkgHasAttr_Filter_TFilterValueType_

	XsdGoPkgHasAttr_Display_TxsdPresentationAttributesGraphicsDisplay_

	XsdGoPkgHasAttr_ShapeRendering_TxsdPresentationAttributesGraphicsShapeRendering_

	XsdGoPkgHasAttr_Visibility_TxsdPresentationAttributesGraphicsVisibility_

	XsdGoPkgHasAttr_PointerEvents_TxsdPresentationAttributesGraphicsPointerEvents_

	XsdGoPkgHasAttr_Opacity_TOpacityValueType_

	XsdGoPkgHasAttr_Mask_TMaskValueType_

	XsdGoPkgHasAttr_Cursor_TCursorValueType_

	XsdGoPkgHasAttr_ClipPath_TClipPathValueType_

	XsdGoPkgHasAttr_TextRendering_TxsdPresentationAttributesGraphicsTextRendering_

	XsdGoPkgHasAttr_ClipRule_TClipFillRuleType_

}

//	The following presentation attributes apply to 'image' elements
type XsdGoPkgHasAttr_ColorProfile_XsdtString_ struct {
	ColorProfile xsdt.String `xml:"http://www.w3.org/2000/svg color-profile,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesImages struct {
	XsdGoPkgHasAttr_ColorProfile_XsdtString_

}

//	The following presentation attributes apply to 'feDiffuseLighting' and 'feSpecularLighting' elements
type XsdGoPkgHasAttr_LightingColor_TSVGColorType_ struct {
	LightingColor TSVGColorType `xml:"http://www.w3.org/2000/svg lighting-color,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesLightingEffects struct {
	XsdGoPkgHasAttr_LightingColor_TSVGColorType_

}

//	The following presentation attributes apply to marker operations
//	'marker' property/attribute value (e.g., 'none', %URI;)
type TMarkerValueType xsdt.String

//	This convenience method just performs a simple type conversion to TMarkerValueType's alias type xsdt.String.
func (me TMarkerValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TMarkerValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMarkerValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TMarkerValueType is just a simple String type, this merely returns the current string value.
func (me TMarkerValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_MarkerEnd_TMarkerValueType_ struct {
	MarkerEnd TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-end,attr"`

}

type XsdGoPkgHasAttr_MarkerStart_TMarkerValueType_ struct {
	MarkerStart TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-start,attr"`

}

type XsdGoPkgHasAttr_MarkerMid_TMarkerValueType_ struct {
	MarkerMid TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-mid,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesMarkers struct {
	XsdGoPkgHasAttr_MarkerEnd_TMarkerValueType_

	XsdGoPkgHasAttr_MarkerStart_TMarkerValueType_

	XsdGoPkgHasAttr_MarkerMid_TMarkerValueType_

}

//	The following presentation attributes apply to text content elements
type TxsdPresentationAttributesTextContentElementsTextAnchor xsdt.String

//	Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsTextAnchor) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "start".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsStart () bool { return me == "start" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsTextAnchor's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "middle".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsMiddle () bool { return me == "middle" }

//	Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "inherit".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "end".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsEnd () bool { return me == "end" }

type XsdGoPkgHasAttr_TextAnchor_TxsdPresentationAttributesTextContentElementsTextAnchor_ struct {
	TextAnchor TxsdPresentationAttributesTextContentElementsTextAnchor `xml:"http://www.w3.org/2000/svg text-anchor,attr"`

}

//	'letter-spacing' or 'word-spacing' property/attribute value (e.g., normal | <length>)
type TSpacingValueType xsdt.String

//	Since TSpacingValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSpacingValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TSpacingValueType is just a simple String type, this merely returns the current string value.
func (me TSpacingValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSpacingValueType's alias type xsdt.String.
func (me TSpacingValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_WordSpacing_TSpacingValueType_ struct {
	WordSpacing TSpacingValueType `xml:"http://www.w3.org/2000/svg word-spacing,attr"`

}

//	The actual definition is
//	baseline | sub | super | <percentage> | <length> | inherit
//	not sure that union can do this
type TBaselineShiftValueType xsdt.String

//	Since TBaselineShiftValueType is just a simple String type, this merely returns the current string value.
func (me TBaselineShiftValueType) String () string { return xsdt.String(me).String() }

//	Since TBaselineShiftValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TBaselineShiftValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TBaselineShiftValueType's alias type xsdt.String.
func (me TBaselineShiftValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_BaselineShift_TBaselineShiftValueType_ struct {
	BaselineShift TBaselineShiftValueType `xml:"http://www.w3.org/2000/svg baseline-shift,attr"`

}

//	'text-decoration' property/attribute value (e.g., 'none', 'underline')
type TextDecorationValueType xsdt.String

//	This convenience method just performs a simple type conversion to TextDecorationValueType's alias type xsdt.String.
func (me TextDecorationValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TextDecorationValueType is just a simple String type, this merely returns the current string value.
func (me TextDecorationValueType) String () string { return xsdt.String(me).String() }

//	Since TextDecorationValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TextDecorationValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_TextDecoration_TextDecorationValueType_ struct {
	TextDecoration TextDecorationValueType `xml:"http://www.w3.org/2000/svg text-decoration,attr"`

}

type TxsdPresentationAttributesTextContentElementsUnicodeBidi xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "normal".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsNormal () bool { return me == "normal" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsUnicodeBidi's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsUnicodeBidi) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "bidi-override".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsBidiOverride () bool { return me == "bidi-override" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "embed".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsEmbed () bool { return me == "embed" }

//	Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "inherit".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsInherit () bool { return me == "inherit" }

type XsdGoPkgHasAttr_UnicodeBidi_TxsdPresentationAttributesTextContentElementsUnicodeBidi_ struct {
	UnicodeBidi TxsdPresentationAttributesTextContentElementsUnicodeBidi `xml:"http://www.w3.org/2000/svg unicode-bidi,attr"`

}

//	'glyph-orientation-horizontal' property/attribute value (e.g., <angle>)
//	<angle> | inherit
type TGlyphOrientationHorizontalValueType xsdt.String

//	Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationHorizontalValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TGlyphOrientationHorizontalValueType's alias type xsdt.String.
func (me TGlyphOrientationHorizontalValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationHorizontalValueType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_GlyphOrientationHorizontal_TGlyphOrientationHorizontalValueType_ struct {
	GlyphOrientationHorizontal TGlyphOrientationHorizontalValueType `xml:"http://www.w3.org/2000/svg glyph-orientation-horizontal,attr"`

}

type TxsdPresentationAttributesTextContentElementsAlignmentBaseline xsdt.String

//	Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBeforeEdge () bool { return me == "text-before-edge" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextAfterEdge () bool { return me == "text-after-edge" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "middle".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMiddle () bool { return me == "middle" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTop () bool { return me == "top" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextTop () bool { return me == "text-top" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBottom () bool { return me == "text-bottom" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsHanging () bool { return me == "hanging" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMathematical () bool { return me == "mathematical" }

//	Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsAlignmentBaseline) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsAfterEdge () bool { return me == "after-edge" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBottom () bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "baseline".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBaseline () bool { return me == "baseline" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBeforeEdge () bool { return me == "before-edge" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsLower () bool { return me == "lower" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsAlignmentBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsIdeographic () bool { return me == "ideographic" }

type XsdGoPkgHasAttr_AlignmentBaseline_TxsdPresentationAttributesTextContentElementsAlignmentBaseline_ struct {
	AlignmentBaseline TxsdPresentationAttributesTextContentElementsAlignmentBaseline `xml:"http://www.w3.org/2000/svg alignment-baseline,attr"`

}

type TxsdPresentationAttributesTextContentElementsDominantBaseline xsdt.String

//	Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDominantBaseline) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsIdeographic () bool { return me == "ideographic" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsHanging () bool { return me == "hanging" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "no-change".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsNoChange () bool { return me == "no-change" }

//	Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsMathematical () bool { return me == "mathematical" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "reset".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsReset () bool { return me == "reset" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "autosense-script".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAutosenseScript () bool { return me == "autosense-script" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDominantBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "auto".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAuto () bool { return me == "auto" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsLower () bool { return me == "lower" }

type XsdGoPkgHasAttr_DominantBaseline_TxsdPresentationAttributesTextContentElementsDominantBaseline_ struct {
	DominantBaseline TxsdPresentationAttributesTextContentElementsDominantBaseline `xml:"http://www.w3.org/2000/svg dominant-baseline,attr"`

}

type TxsdPresentationAttributesTextContentElementsDirection xsdt.String

//	Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDirection) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "ltr".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsLtr () bool { return me == "ltr" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsInherit () bool { return me == "inherit" }

//	Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDirection) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "rtl".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsRtl () bool { return me == "rtl" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDirection's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDirection) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Direction_TxsdPresentationAttributesTextContentElementsDirection_ struct {
	Direction TxsdPresentationAttributesTextContentElementsDirection `xml:"http://www.w3.org/2000/svg direction,attr"`

}

//	'glyph-orientation-vertical' property/attribute value (e.g., 'auto', <angle>)
//	auto | <angle> | inherit
type TGlyphOrientationVerticalValueType xsdt.String

//	Since TGlyphOrientationVerticalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationVerticalValueType) String () string { return xsdt.String(me).String() }

//	Since TGlyphOrientationVerticalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationVerticalValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TGlyphOrientationVerticalValueType's alias type xsdt.String.
func (me TGlyphOrientationVerticalValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_GlyphOrientationVertical_TGlyphOrientationVerticalValueType_ struct {
	GlyphOrientationVertical TGlyphOrientationVerticalValueType `xml:"http://www.w3.org/2000/svg glyph-orientation-vertical,attr"`

}

type XsdGoPkgHasAttr_LetterSpacing_TSpacingValueType_ struct {
	LetterSpacing TSpacingValueType `xml:"http://www.w3.org/2000/svg letter-spacing,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesTextContentElements struct {
	XsdGoPkgHasAttr_LetterSpacing_TSpacingValueType_

	XsdGoPkgHasAttr_TextAnchor_TxsdPresentationAttributesTextContentElementsTextAnchor_

	XsdGoPkgHasAttr_WordSpacing_TSpacingValueType_

	XsdGoPkgHasAttr_BaselineShift_TBaselineShiftValueType_

	XsdGoPkgHasAttr_TextDecoration_TextDecorationValueType_

	XsdGoPkgHasAttr_UnicodeBidi_TxsdPresentationAttributesTextContentElementsUnicodeBidi_

	XsdGoPkgHasAttr_GlyphOrientationHorizontal_TGlyphOrientationHorizontalValueType_

	XsdGoPkgHasAttr_AlignmentBaseline_TxsdPresentationAttributesTextContentElementsAlignmentBaseline_

	XsdGoPkgHasAttr_DominantBaseline_TxsdPresentationAttributesTextContentElementsDominantBaseline_

	XsdGoPkgHasAttr_Direction_TxsdPresentationAttributesTextContentElementsDirection_

	XsdGoPkgHasAttr_GlyphOrientationVertical_TGlyphOrientationVerticalValueType_

}

//	The following presentation attributes apply to 'text' elements
type TxsdPresentationAttributesTextElementsWritingMode xsdt.String

//	Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextElementsWritingMode) String () string { return xsdt.String(me).String() }

//	Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextElementsWritingMode) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLr () bool { return me == "lr" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRlTb () bool { return me == "rl-tb" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "inherit".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsInherit () bool { return me == "inherit" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb-rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTbRl () bool { return me == "tb-rl" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRl () bool { return me == "rl" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLrTb () bool { return me == "lr-tb" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextElementsWritingMode's alias type xsdt.String.
func (me TxsdPresentationAttributesTextElementsWritingMode) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTb () bool { return me == "tb" }

type XsdGoPkgHasAttr_WritingMode_TxsdPresentationAttributesTextElementsWritingMode_ struct {
	WritingMode TxsdPresentationAttributesTextElementsWritingMode `xml:"http://www.w3.org/2000/svg writing-mode,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesTextElements struct {
	XsdGoPkgHasAttr_WritingMode_TxsdPresentationAttributesTextElementsWritingMode_

}

//	The following presentation attributes apply to elements that establish viewports
//	<shape> | auto | inherit
type TClipValueType xsdt.String

//	Since TClipValueType is just a simple String type, this merely returns the current string value.
func (me TClipValueType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TClipValueType's alias type xsdt.String.
func (me TClipValueType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TClipValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipValueType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Clip_TClipValueType_ struct {
	Clip TClipValueType `xml:"http://www.w3.org/2000/svg clip,attr"`

}

type TxsdPresentationAttributesViewportsOverflow xsdt.String

//	Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "inherit".
func (me TxsdPresentationAttributesViewportsOverflow) IsInherit () bool { return me == "inherit" }

//	Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesViewportsOverflow) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "scroll".
func (me TxsdPresentationAttributesViewportsOverflow) IsScroll () bool { return me == "scroll" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "auto".
func (me TxsdPresentationAttributesViewportsOverflow) IsAuto () bool { return me == "auto" }

//	Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesViewportsOverflow) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "visible".
func (me TxsdPresentationAttributesViewportsOverflow) IsVisible () bool { return me == "visible" }

//	Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "hidden".
func (me TxsdPresentationAttributesViewportsOverflow) IsHidden () bool { return me == "hidden" }

//	This convenience method just performs a simple type conversion to TxsdPresentationAttributesViewportsOverflow's alias type xsdt.String.
func (me TxsdPresentationAttributesViewportsOverflow) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Overflow_TxsdPresentationAttributesViewportsOverflow_ struct {
	Overflow TxsdPresentationAttributesViewportsOverflow `xml:"http://www.w3.org/2000/svg overflow,attr"`

}

type XsdGoPkgHasAtts_PresentationAttributesViewports struct {
	XsdGoPkgHasAttr_Clip_TClipValueType_

	XsdGoPkgHasAttr_Overflow_TxsdPresentationAttributesViewportsOverflow_

}

//	The following represents the complete list of presentation attributes
type XsdGoPkgHasAtts_PresentationAttributesAll struct {
	XsdGoPkgHasAtts_PresentationAttributesFeFlood

	XsdGoPkgHasAtts_PresentationAttributesTextElements

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAtts_PresentationAttributesLightingEffects

	XsdGoPkgHasAtts_PresentationAttributesFilterPrimitives

	XsdGoPkgHasAtts_PresentationAttributesMarkers

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasAtts_PresentationAttributesImages

	XsdGoPkgHasAtts_PresentationAttributesViewports

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAtts_PresentationAttributesGradients

	XsdGoPkgHasAtts_PresentationAttributesContainers

}

//	a <co-ordinate>
//	a coordinate, which is a number optionally followed immediately by a unit identifier. Perhaps it is possible to represent this as a union by declaring unit idenifiers as a type?
type TCoordinateType xsdt.String

//	Since TCoordinateType is just a simple String type, this merely returns the current string value.
func (me TCoordinateType) String () string { return xsdt.String(me).String() }

//	Since TCoordinateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinateType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TCoordinateType's alias type xsdt.String.
func (me TCoordinateType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Y_TCoordinateType_ struct {
	Y TCoordinateType `xml:"http://www.w3.org/2000/svg y,attr"`

}

type XsdGoPkgHasAttr_Result_XsdtString_ struct {
	Result xsdt.String `xml:"http://www.w3.org/2000/svg result,attr"`

}

//	a <length>
type TLengthType xsdt.String

//	This convenience method just performs a simple type conversion to TLengthType's alias type xsdt.String.
func (me TLengthType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TLengthType is just a simple String type, this merely returns the current string value.
func (me TLengthType) String () string { return xsdt.String(me).String() }

//	Since TLengthType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Width_TLengthType_ struct {
	Width TLengthType `xml:"http://www.w3.org/2000/svg width,attr"`

}

type XsdGoPkgHasAttr_X_TCoordinateType_ struct {
	X TCoordinateType `xml:"http://www.w3.org/2000/svg x,attr"`

}

type XsdGoPkgHasAttr_Height_TLengthType_ struct {
	Height TLengthType `xml:"http://www.w3.org/2000/svg height,attr"`

}

type XsdGoPkgHasAtts_FilterPrimitiveAttributes struct {
	XsdGoPkgHasAttr_Result_XsdtString_

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasAttr_Y_TCoordinateType_

}

type XsdGoPkgHasAttr_In_XsdtString_ struct {
	In xsdt.String `xml:"http://www.w3.org/2000/svg in,attr"`

}

type XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn struct {
	XsdGoPkgHasAtts_FilterPrimitiveAttributes

	XsdGoPkgHasAttr_In_XsdtString_

}

type XsdGoPkgHasAttr_Slope_XsdtDouble_ struct {
	Slope xsdt.Double `xml:"http://www.w3.org/2000/svg slope,attr"`

}

type XsdGoPkgHasAttr_Intercept_XsdtDouble_ struct {
	Intercept xsdt.Double `xml:"http://www.w3.org/2000/svg intercept,attr"`

}

type XsdGoPkgHasAttr_Offset_XsdtDouble_ struct {
	Offset xsdt.Double `xml:"http://www.w3.org/2000/svg offset,attr"`

}

type TxsdComponentTransferFunctionAttributesType xsdt.String

//	Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "linear".
func (me TxsdComponentTransferFunctionAttributesType) IsLinear () bool { return me == "linear" }

//	Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely returns the current string value.
func (me TxsdComponentTransferFunctionAttributesType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "discrete".
func (me TxsdComponentTransferFunctionAttributesType) IsDiscrete () bool { return me == "discrete" }

//	This convenience method just performs a simple type conversion to TxsdComponentTransferFunctionAttributesType's alias type xsdt.String.
func (me TxsdComponentTransferFunctionAttributesType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "gamma".
func (me TxsdComponentTransferFunctionAttributesType) IsGamma () bool { return me == "gamma" }

//	Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "table".
func (me TxsdComponentTransferFunctionAttributesType) IsTable () bool { return me == "table" }

//	Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "identity".
func (me TxsdComponentTransferFunctionAttributesType) IsIdentity () bool { return me == "identity" }

//	Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdComponentTransferFunctionAttributesType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Type_TxsdComponentTransferFunctionAttributesType_ struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type XsdGoPkgHasAttr_Exponent_XsdtDouble_ struct {
	Exponent xsdt.Double `xml:"http://www.w3.org/2000/svg exponent,attr"`

}

type XsdGoPkgHasAttr_Amplitude_XsdtDouble_ struct {
	Amplitude xsdt.Double `xml:"http://www.w3.org/2000/svg amplitude,attr"`

}

type XsdGoPkgHasAttr_TableValues_XsdtString_ struct {
	TableValues xsdt.String `xml:"http://www.w3.org/2000/svg tableValues,attr"`

}

type XsdGoPkgHasAtts_ComponentTransferFunctionAttributes struct {
	XsdGoPkgHasAttr_Slope_XsdtDouble_

	XsdGoPkgHasAttr_Intercept_XsdtDouble_

	XsdGoPkgHasAttr_Offset_XsdtDouble_

	XsdGoPkgHasAttr_Type_TxsdComponentTransferFunctionAttributesType_

	XsdGoPkgHasAttr_Exponent_XsdtDouble_

	XsdGoPkgHasAttr_Amplitude_XsdtDouble_

	XsdGoPkgHasAttr_TableValues_XsdtString_

}

type XsdGoPkgHasAtts_AnimElementAttrs struct {
	XsdGoPkgHasAtts_XlinkRefAttrs

	xlink.XsdGoPkgHasAttr_Href

}

type XsdGoPkgHasAttr_AttributeType_XsdtString_ struct {
	AttributeType xsdt.String `xml:"http://www.w3.org/2000/svg attributeType,attr"`

}

type XsdGoPkgHasAttr_AttributeName_XsdtString_ struct {
	AttributeName xsdt.String `xml:"http://www.w3.org/2000/svg attributeName,attr"`

}

type XsdGoPkgHasAtts_AnimAttributeAttrs struct {
	XsdGoPkgHasAttr_AttributeType_XsdtString_

	XsdGoPkgHasAttr_AttributeName_XsdtString_

}

type XsdGoPkgHasAtts_AnimTargetAttrs struct {
	XsdGoPkgHasAtts_AnimElementAttrs

	XsdGoPkgHasAtts_AnimAttributeAttrs

}

type XsdGoPkgHasAttr_Dur_XsdtString_ struct {
	Dur xsdt.String `xml:"http://www.w3.org/2000/svg dur,attr"`

}

type XsdGoPkgHasAttr_RepeatCount_XsdtString_ struct {
	RepeatCount xsdt.String `xml:"http://www.w3.org/2000/svg repeatCount,attr"`

}

type XsdGoPkgHasAttr_Max_XsdtString_ struct {
	Max xsdt.String `xml:"http://www.w3.org/2000/svg max,attr"`

}

type XsdGoPkgHasAttr_Min_XsdtString_ struct {
	Min xsdt.String `xml:"http://www.w3.org/2000/svg min,attr"`

}

type TxsdAnimTimingAttrsRestart xsdt.String

//	Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsRestart) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsRestart's alias type xsdt.String.
func (me TxsdAnimTimingAttrsRestart) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "whenNotActive".
func (me TxsdAnimTimingAttrsRestart) IsWhenNotActive () bool { return me == "whenNotActive" }

//	Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "never".
func (me TxsdAnimTimingAttrsRestart) IsNever () bool { return me == "never" }

//	Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsRestart) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "always".
func (me TxsdAnimTimingAttrsRestart) IsAlways () bool { return me == "always" }

type XsdGoPkgHasAttr_Restart_TxsdAnimTimingAttrsRestart_Always struct {
	Restart TxsdAnimTimingAttrsRestart `xml:"http://www.w3.org/2000/svg restart,attr"`

}

//	Returns the default value for Restart -- "always"
func (me XsdGoPkgHasAttr_Restart_TxsdAnimTimingAttrsRestart_Always) RestartDefault () TxsdAnimTimingAttrsRestart { return TxsdAnimTimingAttrsRestart("always") }

type XsdGoPkgHasAttr_End_XsdtString_ struct {
	End xsdt.String `xml:"http://www.w3.org/2000/svg end,attr"`

}

type XsdGoPkgHasAttr_Begin_XsdtString_ struct {
	Begin xsdt.String `xml:"http://www.w3.org/2000/svg begin,attr"`

}

type XsdGoPkgHasAttr_RepeatDur_XsdtString_ struct {
	RepeatDur xsdt.String `xml:"http://www.w3.org/2000/svg repeatDur,attr"`

}

type TxsdAnimTimingAttrsFill xsdt.String

//	Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "freeze".
func (me TxsdAnimTimingAttrsFill) IsFreeze () bool { return me == "freeze" }

//	Since TxsdAnimTimingAttrsFill is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsFill) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "remove".
func (me TxsdAnimTimingAttrsFill) IsRemove () bool { return me == "remove" }

//	Since TxsdAnimTimingAttrsFill is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsFill) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsFill's alias type xsdt.String.
func (me TxsdAnimTimingAttrsFill) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Fill_TxsdAnimTimingAttrsFill_Remove struct {
	Fill TxsdAnimTimingAttrsFill `xml:"http://www.w3.org/2000/svg fill,attr"`

}

//	Returns the default value for Fill -- "remove"
func (me XsdGoPkgHasAttr_Fill_TxsdAnimTimingAttrsFill_Remove) FillDefault () TxsdAnimTimingAttrsFill { return TxsdAnimTimingAttrsFill("remove") }

type XsdGoPkgHasAtts_AnimTimingAttrs struct {
	XsdGoPkgHasAttr_Begin_XsdtString_

	XsdGoPkgHasAttr_RepeatDur_XsdtString_

	XsdGoPkgHasAttr_Fill_TxsdAnimTimingAttrsFill_Remove

	XsdGoPkgHasAttr_Dur_XsdtString_

	XsdGoPkgHasAttr_RepeatCount_XsdtString_

	XsdGoPkgHasAttr_Max_XsdtString_

	XsdGoPkgHasAttr_Min_XsdtString_

	XsdGoPkgHasAttr_Restart_TxsdAnimTimingAttrsRestart_Always

	XsdGoPkgHasAttr_End_XsdtString_

}

type XsdGoPkgHasAttr_To_XsdtString_ struct {
	To xsdt.String `xml:"http://www.w3.org/2000/svg to,attr"`

}

type TxsdAnimValueAttrsCalcMode xsdt.String

//	Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "discrete".
func (me TxsdAnimValueAttrsCalcMode) IsDiscrete () bool { return me == "discrete" }

//	Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "spline".
func (me TxsdAnimValueAttrsCalcMode) IsSpline () bool { return me == "spline" }

//	Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely returns the current string value.
func (me TxsdAnimValueAttrsCalcMode) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnimValueAttrsCalcMode's alias type xsdt.String.
func (me TxsdAnimValueAttrsCalcMode) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "linear".
func (me TxsdAnimValueAttrsCalcMode) IsLinear () bool { return me == "linear" }

//	Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimValueAttrsCalcMode) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "paced".
func (me TxsdAnimValueAttrsCalcMode) IsPaced () bool { return me == "paced" }

type XsdGoPkgHasAttr_CalcMode_TxsdAnimValueAttrsCalcMode_Linear struct {
	CalcMode TxsdAnimValueAttrsCalcMode `xml:"http://www.w3.org/2000/svg calcMode,attr"`

}

//	Returns the default value for CalcMode -- "linear"
func (me XsdGoPkgHasAttr_CalcMode_TxsdAnimValueAttrsCalcMode_Linear) CalcModeDefault () TxsdAnimValueAttrsCalcMode { return TxsdAnimValueAttrsCalcMode("linear") }

type XsdGoPkgHasAttr_Values_XsdtString_ struct {
	Values xsdt.String `xml:"http://www.w3.org/2000/svg values,attr"`

}

type XsdGoPkgHasAttr_KeySplines_XsdtString_ struct {
	KeySplines xsdt.String `xml:"http://www.w3.org/2000/svg keySplines,attr"`

}

type XsdGoPkgHasAttr_By_XsdtString_ struct {
	By xsdt.String `xml:"http://www.w3.org/2000/svg by,attr"`

}

type XsdGoPkgHasAttr_From_XsdtString_ struct {
	From xsdt.String `xml:"http://www.w3.org/2000/svg from,attr"`

}

type XsdGoPkgHasAttr_KeyTimes_XsdtString_ struct {
	KeyTimes xsdt.String `xml:"http://www.w3.org/2000/svg keyTimes,attr"`

}

type XsdGoPkgHasAtts_AnimValueAttrs struct {
	XsdGoPkgHasAttr_From_XsdtString_

	XsdGoPkgHasAttr_KeyTimes_XsdtString_

	XsdGoPkgHasAttr_To_XsdtString_

	XsdGoPkgHasAttr_CalcMode_TxsdAnimValueAttrsCalcMode_Linear

	XsdGoPkgHasAttr_Values_XsdtString_

	XsdGoPkgHasAttr_KeySplines_XsdtString_

	XsdGoPkgHasAttr_By_XsdtString_

}

type TxsdAnimAdditionAttrsAccumulate xsdt.String

//	Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "sum".
func (me TxsdAnimAdditionAttrsAccumulate) IsSum () bool { return me == "sum" }

//	Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAccumulate) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAccumulate) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAccumulate's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAccumulate) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "none".
func (me TxsdAnimAdditionAttrsAccumulate) IsNone () bool { return me == "none" }

type XsdGoPkgHasAttr_Accumulate_TxsdAnimAdditionAttrsAccumulate_None struct {
	Accumulate TxsdAnimAdditionAttrsAccumulate `xml:"http://www.w3.org/2000/svg accumulate,attr"`

}

//	Returns the default value for Accumulate -- "none"
func (me XsdGoPkgHasAttr_Accumulate_TxsdAnimAdditionAttrsAccumulate_None) AccumulateDefault () TxsdAnimAdditionAttrsAccumulate { return TxsdAnimAdditionAttrsAccumulate("none") }

type TxsdAnimAdditionAttrsAdditive xsdt.String

//	Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "replace".
func (me TxsdAnimAdditionAttrsAdditive) IsReplace () bool { return me == "replace" }

//	Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "sum".
func (me TxsdAnimAdditionAttrsAdditive) IsSum () bool { return me == "sum" }

//	Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAdditive) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAdditive) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAdditive's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAdditive) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Additive_TxsdAnimAdditionAttrsAdditive_Replace struct {
	Additive TxsdAnimAdditionAttrsAdditive `xml:"http://www.w3.org/2000/svg additive,attr"`

}

//	Returns the default value for Additive -- "replace"
func (me XsdGoPkgHasAttr_Additive_TxsdAnimAdditionAttrsAdditive_Replace) AdditiveDefault () TxsdAnimAdditionAttrsAdditive { return TxsdAnimAdditionAttrsAdditive("replace") }

type XsdGoPkgHasAtts_AnimAdditionAttrs struct {
	XsdGoPkgHasAttr_Accumulate_TxsdAnimAdditionAttrsAccumulate_None

	XsdGoPkgHasAttr_Additive_TxsdAnimAdditionAttrsAdditive_Replace

}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`

}

//	comma-separated list of media descriptors.
type TMediaDescType xsdt.String

//	Since TMediaDescType is just a simple String type, this merely returns the current string value.
func (me TMediaDescType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TMediaDescType's alias type xsdt.String.
func (me TMediaDescType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TMediaDescType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMediaDescType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Media_TMediaDescType_ struct {
	Media TMediaDescType `xml:"http://www.w3.org/2000/svg media,attr"`

}

type XsdGoPkgHasAttr_Title_XsdtString_ struct {
	Title xsdt.String `xml:"http://www.w3.org/2000/svg title,attr"`

}

//	media type, as per [RFC2045]
//	media type, as per [RFC2045]
type TContentTypeType xsdt.String

//	This convenience method just performs a simple type conversion to TContentTypeType's alias type xsdt.String.
func (me TContentTypeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TContentTypeType is just a simple String type, this merely returns the current string value.
func (me TContentTypeType) String () string { return xsdt.String(me).String() }

//	Since TContentTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContentTypeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Type_TContentTypeType_ struct {
	Type TContentTypeType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type TstyleType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Media_TMediaDescType_

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Type_TContentTypeType_

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_Style struct {
	Styles []*TstyleType `xml:"http://www.w3.org/2000/svg style"`

}

type XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_ struct {
	ExternalResourcesRequired xsdt.Boolean `xml:"http://www.w3.org/2000/svg externalResourcesRequired,attr"`

}

//	A bit simpler than the DTD, but see commented-out alternative
type XsdGoPkgHasAttr_Content_XsdtString_StructuredText struct {
	Content xsdt.String `xml:"http://www.w3.org/2000/svg content,attr"`

}

//	Returns the fixed value for Content -- "structured text"
func (me XsdGoPkgHasAttr_Content_XsdtString_StructuredText) ContentFixed () xsdt.String { return xsdt.String("structured text") }

//	style sheet data
type TStyleSheetType xsdt.String

//	Since TStyleSheetType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStyleSheetType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TStyleSheetType is just a simple String type, this merely returns the current string value.
func (me TStyleSheetType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TStyleSheetType's alias type xsdt.String.
func (me TStyleSheetType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Style_TStyleSheetType_ struct {
	Style TStyleSheetType `xml:"http://www.w3.org/2000/svg style,attr"`

}

//	Space-separated list of classes
type TClassListType xsdt.String

//	TClassListType defines a String containing a whitespace-separated list of xsdt.String values. This Values() method creates and returns a slice of all elements in that list.
func (me TClassListType) Values () (list []xsdt.String) { var svals = xsdt.ListValues(string(me)); list = make([]xsdt.String, len(svals)); for i, s := range svals { list[i] = xsdt.String(s) }; return }

//	Since TClassListType is just a simple String type, this merely returns the current string value.
func (me TClassListType) String () string { return xsdt.String(me).String() }

//	Since TClassListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClassListType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TClassListType's alias type xsdt.String.
func (me TClassListType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Class_TClassListType_ struct {
	Class TClassListType `xml:"http://www.w3.org/2000/svg class,attr"`

}

type TdescType struct {
	XsdGoPkgHasAttr_Content_XsdtString_StructuredText

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElem_descalldescTitleMetadataschema_Desc_TdescType_ struct {
	Desc *TdescType `xml:"http://www.w3.org/2000/svg desc"`

}

type TmetadataType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElem_metadataalldescTitleMetadataschema_Metadata_TmetadataType_ struct {
	Metadata *TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`

}

type TtitleType struct {
	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Content_XsdtString_StructuredText

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_LangSpaceAttrs

}

type XsdGoPkgHasElem_titlealldescTitleMetadataschema_Title_TtitleType_ struct {
	Title *TtitleType `xml:"http://www.w3.org/2000/svg title"`

}

type XsdGoPkgHasGroup_DescTitleMetadata struct {
	XsdGoPkgHasElem_descalldescTitleMetadataschema_Desc_TdescType_

	XsdGoPkgHasElem_metadataalldescTitleMetadataschema_Metadata_TmetadataType_

	XsdGoPkgHasElem_titlealldescTitleMetadataschema_Title_TtitleType_

}

type TsetType struct {
	XsdGoPkgHasAtts_AnimationEvents

	XsdGoPkgHasAttr_To_XsdtString_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_AnimTimingAttrs

	XsdGoPkgHasAtts_AnimTargetAttrs

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_Set struct {
	Sets []*TsetType `xml:"http://www.w3.org/2000/svg set"`

}

type XsdGoPkgHasAttr_Radius_TLengthType_ struct {
	Radius TLengthType `xml:"http://www.w3.org/2000/svg radius,attr"`

}

type TanimateType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_AnimationEvents

	XsdGoPkgHasAtts_AnimValueAttrs

	XsdGoPkgHasAtts_AnimTargetAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_AnimAdditionAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_AnimTimingAttrs

}

type XsdGoPkgHasElems_Animate struct {
	Animates []*TanimateType `xml:"http://www.w3.org/2000/svg animate"`

}

type TxsdFeMorphologyTypeOperator xsdt.String

//	Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeMorphologyTypeOperator) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdFeMorphologyTypeOperator's alias type xsdt.String.
func (me TxsdFeMorphologyTypeOperator) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "dilate".
func (me TxsdFeMorphologyTypeOperator) IsDilate () bool { return me == "dilate" }

//	Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeMorphologyTypeOperator) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "erode".
func (me TxsdFeMorphologyTypeOperator) IsErode () bool { return me == "erode" }

type XsdGoPkgHasAttr_Operator_TxsdFeMorphologyTypeOperator_Erode struct {
	Operator TxsdFeMorphologyTypeOperator `xml:"http://www.w3.org/2000/svg operator,attr"`

}

//	Returns the default value for Operator -- "erode"
func (me XsdGoPkgHasAttr_Operator_TxsdFeMorphologyTypeOperator_Erode) OperatorDefault () TxsdFeMorphologyTypeOperator { return TxsdFeMorphologyTypeOperator("erode") }

type TfeMorphologyType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttr_Operator_TxsdFeMorphologyTypeOperator_Erode

	XsdGoPkgHasAttr_Radius_TLengthType_

}

type XsdGoPkgHasElems_FeMorphology struct {
	FeMorphologies []*TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`

}

type TxsdFeTurbulenceTypeStitchTiles xsdt.String

//	Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "noStitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsNoStitch () bool { return me == "noStitch" }

//	Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "stitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsStitch () bool { return me == "stitch" }

//	Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeStitchTiles) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeStitchTiles's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeStitchTiles) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeStitchTiles) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_StitchTiles_TxsdFeTurbulenceTypeStitchTiles_NoStitch struct {
	StitchTiles TxsdFeTurbulenceTypeStitchTiles `xml:"http://www.w3.org/2000/svg stitchTiles,attr"`

}

//	Returns the default value for StitchTiles -- "noStitch"
func (me XsdGoPkgHasAttr_StitchTiles_TxsdFeTurbulenceTypeStitchTiles_NoStitch) StitchTilesDefault () TxsdFeTurbulenceTypeStitchTiles { return TxsdFeTurbulenceTypeStitchTiles("noStitch") }

type XsdGoPkgHasAttr_BaseFrequency_XsdtString_ struct {
	BaseFrequency xsdt.String `xml:"http://www.w3.org/2000/svg baseFrequency,attr"`

}

type XsdGoPkgHasAttr_NumOctaves_XsdtInteger_ struct {
	NumOctaves xsdt.Integer `xml:"http://www.w3.org/2000/svg numOctaves,attr"`

}

type TxsdFeTurbulenceTypeType xsdt.String

//	Since TxsdFeTurbulenceTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "fractalNoise".
func (me TxsdFeTurbulenceTypeType) IsFractalNoise () bool { return me == "fractalNoise" }

//	Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "turbulence".
func (me TxsdFeTurbulenceTypeType) IsTurbulence () bool { return me == "turbulence" }

//	This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeType's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdFeTurbulenceTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Type_TxsdFeTurbulenceTypeType_Turbulence struct {
	Type TxsdFeTurbulenceTypeType `xml:"http://www.w3.org/2000/svg type,attr"`

}

//	Returns the default value for Type -- "turbulence"
func (me XsdGoPkgHasAttr_Type_TxsdFeTurbulenceTypeType_Turbulence) TypeDefault () TxsdFeTurbulenceTypeType { return TxsdFeTurbulenceTypeType("turbulence") }

type XsdGoPkgHasAttr_Seed_XsdtDouble_ struct {
	Seed xsdt.Double `xml:"http://www.w3.org/2000/svg seed,attr"`

}

type TfeTurbulenceType struct {
	XsdGoPkgHasAttr_BaseFrequency_XsdtString_

	XsdGoPkgHasAttr_NumOctaves_XsdtInteger_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Type_TxsdFeTurbulenceTypeType_Turbulence

	XsdGoPkgHasAttr_Seed_XsdtDouble_

	XsdGoPkgHasAtts_FilterPrimitiveAttributes

	XsdGoPkgHasAttr_StitchTiles_TxsdFeTurbulenceTypeStitchTiles_NoStitch

}

type XsdGoPkgHasElems_FeTurbulence struct {
	FeTurbulences []*TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`

}

type XsdGoPkgHasAttr_FilterRes_XsdtString_ struct {
	FilterRes xsdt.String `xml:"http://www.w3.org/2000/svg filterRes,attr"`

}

type TfeMergeNodeType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_In_XsdtString_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElems_FeMergeNode struct {
	FeMergeNodes []*TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`

}

type TfeMergeType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_FeMergeNode

	XsdGoPkgHasAtts_FilterPrimitiveAttributes

}

type XsdGoPkgHasElems_FeMerge struct {
	FeMerges []*TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`

}

type TxsdAnimateTransformTypeType xsdt.String

//	Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "scale".
func (me TxsdAnimateTransformTypeType) IsScale () bool { return me == "scale" }

//	Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewY".
func (me TxsdAnimateTransformTypeType) IsSkewY () bool { return me == "skewY" }

//	Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "translate".
func (me TxsdAnimateTransformTypeType) IsTranslate () bool { return me == "translate" }

//	Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewX".
func (me TxsdAnimateTransformTypeType) IsSkewX () bool { return me == "skewX" }

//	Since TxsdAnimateTransformTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdAnimateTransformTypeType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnimateTransformTypeType's alias type xsdt.String.
func (me TxsdAnimateTransformTypeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "rotate".
func (me TxsdAnimateTransformTypeType) IsRotate () bool { return me == "rotate" }

//	Since TxsdAnimateTransformTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimateTransformTypeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Type_TxsdAnimateTransformTypeType_Translate struct {
	Type TxsdAnimateTransformTypeType `xml:"http://www.w3.org/2000/svg type,attr"`

}

//	Returns the default value for Type -- "translate"
func (me XsdGoPkgHasAttr_Type_TxsdAnimateTransformTypeType_Translate) TypeDefault () TxsdAnimateTransformTypeType { return TxsdAnimateTransformTypeType("translate") }

type TanimateTransformType struct {
	XsdGoPkgHasAtts_AnimTargetAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_AnimAdditionAttrs

	XsdGoPkgHasAtts_AnimTimingAttrs

	XsdGoPkgHasAtts_AnimValueAttrs

	XsdGoPkgHasAtts_AnimationEvents

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Type_TxsdAnimateTransformTypeType_Translate

}

type XsdGoPkgHasElems_AnimateTransform struct {
	AnimateTransforms []*TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`

}

//	Yes, of course this was generated by a program!
//	list of transforms
type TransformListType xsdt.String

//	This convenience method just performs a simple type conversion to TransformListType's alias type xsdt.String.
func (me TransformListType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TransformListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TransformListType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TransformListType is just a simple String type, this merely returns the current string value.
func (me TransformListType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Transform_TransformListType_ struct {
	Transform TransformListType `xml:"http://www.w3.org/2000/svg transform,attr"`

}

type TfeImageType struct {
	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_FilterPrimitiveAttributes

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_PresentationAttributesAll

}

type XsdGoPkgHasElems_FeImage struct {
	FeImages []*TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`

}

type TxsdFeColorMatrixTypeType xsdt.String

//	This convenience method just performs a simple type conversion to TxsdFeColorMatrixTypeType's alias type xsdt.String.
func (me TxsdFeColorMatrixTypeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "luminanceToAlpha".
func (me TxsdFeColorMatrixTypeType) IsLuminanceToAlpha () bool { return me == "luminanceToAlpha" }

//	Since TxsdFeColorMatrixTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeColorMatrixTypeType) String () string { return xsdt.String(me).String() }

//	Since TxsdFeColorMatrixTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeColorMatrixTypeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "matrix".
func (me TxsdFeColorMatrixTypeType) IsMatrix () bool { return me == "matrix" }

//	Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "saturate".
func (me TxsdFeColorMatrixTypeType) IsSaturate () bool { return me == "saturate" }

//	Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "hueRotate".
func (me TxsdFeColorMatrixTypeType) IsHueRotate () bool { return me == "hueRotate" }

type XsdGoPkgHasAttr_Type_TxsdFeColorMatrixTypeType_Matrix struct {
	Type TxsdFeColorMatrixTypeType `xml:"http://www.w3.org/2000/svg type,attr"`

}

//	Returns the default value for Type -- "matrix"
func (me XsdGoPkgHasAttr_Type_TxsdFeColorMatrixTypeType_Matrix) TypeDefault () TxsdFeColorMatrixTypeType { return TxsdFeColorMatrixTypeType("matrix") }

type TfeColorMatrixType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Values_XsdtString_

	XsdGoPkgHasAttr_Type_TxsdFeColorMatrixTypeType_Matrix

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

}

type XsdGoPkgHasElems_FeColorMatrix struct {
	FeColorMatrixs []*TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`

}

type TanimateColorType struct {
	XsdGoPkgHasAtts_AnimTargetAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_AnimValueAttrs

	XsdGoPkgHasAtts_AnimAdditionAttrs

	XsdGoPkgHasAtts_AnimationEvents

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_AnimTimingAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

}

type XsdGoPkgHasElems_AnimateColor struct {
	AnimateColors []*TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`

}

type XsdGoPkgHasAttr_SpecularExponent_XsdtDouble_ struct {
	SpecularExponent xsdt.Double `xml:"http://www.w3.org/2000/svg specularExponent,attr"`

}

type XsdGoPkgHasAttr_SpecularConstant_XsdtDouble_ struct {
	SpecularConstant xsdt.Double `xml:"http://www.w3.org/2000/svg specularConstant,attr"`

}

type XsdGoPkgHasAttr_Elevation_XsdtDouble_ struct {
	Elevation xsdt.Double `xml:"http://www.w3.org/2000/svg elevation,attr"`

}

type XsdGoPkgHasAttr_Azimuth_XsdtDouble_ struct {
	Azimuth xsdt.Double `xml:"http://www.w3.org/2000/svg azimuth,attr"`

}

type TfeDistantLightType struct {
	XsdGoPkgHasAttr_Elevation_XsdtDouble_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Azimuth_XsdtDouble_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElem_FeDistantLight struct {
	FeDistantLight *TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`

}

type XsdGoPkgHasAttr_SurfaceScale_XsdtDouble_ struct {
	SurfaceScale xsdt.Double `xml:"http://www.w3.org/2000/svg surfaceScale,attr"`

}

type XsdGoPkgHasAttr_X_XsdtDouble_ struct {
	X xsdt.Double `xml:"http://www.w3.org/2000/svg x,attr"`

}

type XsdGoPkgHasAttr_Y_XsdtDouble_ struct {
	Y xsdt.Double `xml:"http://www.w3.org/2000/svg y,attr"`

}

type XsdGoPkgHasAttr_Z_XsdtDouble_ struct {
	Z xsdt.Double `xml:"http://www.w3.org/2000/svg z,attr"`

}

type TfePointLightType struct {
	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Z_XsdtDouble_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_X_XsdtDouble_

	XsdGoPkgHasAttr_Y_XsdtDouble_

}

type XsdGoPkgHasElem_FePointLight struct {
	FePointLight *TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`

}

type XsdGoPkgHasAttr_PointsAtX_XsdtDouble_ struct {
	PointsAtX xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtX,attr"`

}

type XsdGoPkgHasAttr_PointsAtZ_XsdtDouble_ struct {
	PointsAtZ xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtZ,attr"`

}

type XsdGoPkgHasAttr_PointsAtY_XsdtDouble_ struct {
	PointsAtY xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtY,attr"`

}

type XsdGoPkgHasAttr_LimitingConeAngle_XsdtDouble_ struct {
	LimitingConeAngle xsdt.Double `xml:"http://www.w3.org/2000/svg limitingConeAngle,attr"`

}

type TfeSpotLightType struct {
	XsdGoPkgHasAttr_LimitingConeAngle_XsdtDouble_

	XsdGoPkgHasAttr_SpecularExponent_XsdtDouble_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_PointsAtX_XsdtDouble_

	XsdGoPkgHasAttr_Z_XsdtDouble_

	XsdGoPkgHasAttr_PointsAtZ_XsdtDouble_

	XsdGoPkgHasAttr_Y_XsdtDouble_

	XsdGoPkgHasAttr_PointsAtY_XsdtDouble_

	XsdGoPkgHasAttr_X_XsdtDouble_

}

type XsdGoPkgHasElem_FeSpotLight struct {
	FeSpotLight *TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`

}

type TfeSpecularLightingType struct {
	XsdGoPkgHasAtts_PresentationAttributesLightingEffects

	XsdGoPkgHasAttr_SpecularExponent_XsdtDouble_

	XsdGoPkgHasAttr_SpecularConstant_XsdtDouble_

	XsdGoPkgHasElem_FeDistantLight

	XsdGoPkgHasAttr_SurfaceScale_XsdtDouble_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElem_FePointLight

	XsdGoPkgHasElem_FeSpotLight

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_AnimateColor

}

type XsdGoPkgHasElems_FeSpecularLighting struct {
	FeSpecularLightings []*TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`

}

type XsdGoPkgHasAttr_K4_XsdtDouble_ struct {
	K4 xsdt.Double `xml:"http://www.w3.org/2000/svg k4,attr"`

}

type XsdGoPkgHasAttr_K2_XsdtDouble_ struct {
	K2 xsdt.Double `xml:"http://www.w3.org/2000/svg k2,attr"`

}

type TxsdFeCompositeTypeOperator xsdt.String

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "arithmetic".
func (me TxsdFeCompositeTypeOperator) IsArithmetic () bool { return me == "arithmetic" }

//	This convenience method just performs a simple type conversion to TxsdFeCompositeTypeOperator's alias type xsdt.String.
func (me TxsdFeCompositeTypeOperator) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "in".
func (me TxsdFeCompositeTypeOperator) IsIn () bool { return me == "in" }

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "xor".
func (me TxsdFeCompositeTypeOperator) IsXor () bool { return me == "xor" }

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "atop".
func (me TxsdFeCompositeTypeOperator) IsAtop () bool { return me == "atop" }

//	Since TxsdFeCompositeTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeCompositeTypeOperator) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "over".
func (me TxsdFeCompositeTypeOperator) IsOver () bool { return me == "over" }

//	Since TxsdFeCompositeTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeCompositeTypeOperator) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "out".
func (me TxsdFeCompositeTypeOperator) IsOut () bool { return me == "out" }

type XsdGoPkgHasAttr_Operator_TxsdFeCompositeTypeOperator_Over struct {
	Operator TxsdFeCompositeTypeOperator `xml:"http://www.w3.org/2000/svg operator,attr"`

}

//	Returns the default value for Operator -- "over"
func (me XsdGoPkgHasAttr_Operator_TxsdFeCompositeTypeOperator_Over) OperatorDefault () TxsdFeCompositeTypeOperator { return TxsdFeCompositeTypeOperator("over") }

type XsdGoPkgHasAttr_In2_XsdtString_ struct {
	In2 xsdt.String `xml:"http://www.w3.org/2000/svg in2,attr"`

}

type XsdGoPkgHasAttr_K3_XsdtDouble_ struct {
	K3 xsdt.Double `xml:"http://www.w3.org/2000/svg k3,attr"`

}

type XsdGoPkgHasAttr_K1_XsdtDouble_ struct {
	K1 xsdt.Double `xml:"http://www.w3.org/2000/svg k1,attr"`

}

type TfeCompositeType struct {
	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_K4_XsdtDouble_

	XsdGoPkgHasAttr_K2_XsdtDouble_

	XsdGoPkgHasAttr_Operator_TxsdFeCompositeTypeOperator_Over

	XsdGoPkgHasAttr_In2_XsdtString_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_K3_XsdtDouble_

	XsdGoPkgHasAttr_K1_XsdtDouble_

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElems_FeComposite struct {
	FeComposites []*TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`

}

type TfeFloodType struct {
	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesFeFlood

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_FeFlood struct {
	FeFloods []*TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`

}

type XsdGoPkgHasAttr_DiffuseConstant_XsdtDouble_ struct {
	DiffuseConstant xsdt.Double `xml:"http://www.w3.org/2000/svg diffuseConstant,attr"`

}

type TfeDiffuseLightingType struct {
	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_PresentationAttributesLightingEffects

	XsdGoPkgHasElem_FeSpotLight

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_DiffuseConstant_XsdtDouble_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElem_FePointLight

	XsdGoPkgHasElem_FeDistantLight

	XsdGoPkgHasAttr_SurfaceScale_XsdtDouble_

}

type XsdGoPkgHasElems_FeDiffuseLighting struct {
	FeDiffuseLightings []*TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`

}

type TxsdFeDisplacementMapTypeXChannelSelector xsdt.String

//	Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "B".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsB () bool { return me == "B" }

//	Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "G".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsG () bool { return me == "G" }

//	Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely returns the current string value.
func (me TxsdFeDisplacementMapTypeXChannelSelector) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "R".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsR () bool { return me == "R" }

//	Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeDisplacementMapTypeXChannelSelector) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "A".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsA () bool { return me == "A" }

//	This convenience method just performs a simple type conversion to TxsdFeDisplacementMapTypeXChannelSelector's alias type xsdt.String.
func (me TxsdFeDisplacementMapTypeXChannelSelector) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_XChannelSelector_TxsdFeDisplacementMapTypeXChannelSelector_A struct {
	XChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"http://www.w3.org/2000/svg xChannelSelector,attr"`

}

//	Returns the default value for XChannelSelector -- "A"
func (me XsdGoPkgHasAttr_XChannelSelector_TxsdFeDisplacementMapTypeXChannelSelector_A) XChannelSelectorDefault () TxsdFeDisplacementMapTypeXChannelSelector { return TxsdFeDisplacementMapTypeXChannelSelector("A") }

type XsdGoPkgHasAttr_Scale_XsdtDouble_ struct {
	Scale xsdt.Double `xml:"http://www.w3.org/2000/svg scale,attr"`

}

type XsdGoPkgHasAttr_YChannelSelector_TxsdFeDisplacementMapTypeYChannelSelector_A struct {
	YChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"http://www.w3.org/2000/svg yChannelSelector,attr"`

}

//	Returns the default value for YChannelSelector -- "A"
func (me XsdGoPkgHasAttr_YChannelSelector_TxsdFeDisplacementMapTypeYChannelSelector_A) YChannelSelectorDefault () TxsdFeDisplacementMapTypeXChannelSelector { return TxsdFeDisplacementMapTypeXChannelSelector("A") }

type TfeDisplacementMapType struct {
	XsdGoPkgHasAttr_XChannelSelector_TxsdFeDisplacementMapTypeXChannelSelector_A

	XsdGoPkgHasAttr_In2_XsdtString_

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Scale_XsdtDouble_

	XsdGoPkgHasAttr_YChannelSelector_TxsdFeDisplacementMapTypeYChannelSelector_A

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_FeDisplacementMap struct {
	FeDisplacementMaps []*TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`

}

type XsdGoPkgHasAttr_PreserveAlpha_XsdtBoolean_ struct {
	PreserveAlpha xsdt.Boolean `xml:"http://www.w3.org/2000/svg preserveAlpha,attr"`

}

type XsdGoPkgHasAttr_KernelUnitLength_XsdtString_ struct {
	KernelUnitLength xsdt.String `xml:"http://www.w3.org/2000/svg kernelUnitLength,attr"`

}

type XsdGoPkgHasAttr_KernelMatrix_XsdtString_ struct {
	KernelMatrix xsdt.String `xml:"http://www.w3.org/2000/svg kernelMatrix,attr"`

}

type TxsdFeConvolveMatrixTypeEdgeMode xsdt.String

//	Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeConvolveMatrixTypeEdgeMode) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "none".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsNone () bool { return me == "none" }

//	Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "wrap".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsWrap () bool { return me == "wrap" }

//	This convenience method just performs a simple type conversion to TxsdFeConvolveMatrixTypeEdgeMode's alias type xsdt.String.
func (me TxsdFeConvolveMatrixTypeEdgeMode) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeConvolveMatrixTypeEdgeMode) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "duplicate".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsDuplicate () bool { return me == "duplicate" }

type XsdGoPkgHasAttr_EdgeMode_TxsdFeConvolveMatrixTypeEdgeMode_Duplicate struct {
	EdgeMode TxsdFeConvolveMatrixTypeEdgeMode `xml:"http://www.w3.org/2000/svg edgeMode,attr"`

}

//	Returns the default value for EdgeMode -- "duplicate"
func (me XsdGoPkgHasAttr_EdgeMode_TxsdFeConvolveMatrixTypeEdgeMode_Duplicate) EdgeModeDefault () TxsdFeConvolveMatrixTypeEdgeMode { return TxsdFeConvolveMatrixTypeEdgeMode("duplicate") }

type XsdGoPkgHasAttr_Divisor_XsdtDouble_ struct {
	Divisor xsdt.Double `xml:"http://www.w3.org/2000/svg divisor,attr"`

}

type XsdGoPkgHasAttr_TargetX_XsdtInteger_ struct {
	TargetX xsdt.Integer `xml:"http://www.w3.org/2000/svg targetX,attr"`

}

type XsdGoPkgHasAttr_Order_XsdtString_ struct {
	Order xsdt.String `xml:"http://www.w3.org/2000/svg order,attr"`

}

type XsdGoPkgHasAttr_TargetY_XsdtInteger_ struct {
	TargetY xsdt.Integer `xml:"http://www.w3.org/2000/svg targetY,attr"`

}

type XsdGoPkgHasAttr_Bias_XsdtDouble_ struct {
	Bias xsdt.Double `xml:"http://www.w3.org/2000/svg bias,attr"`

}

type TfeConvolveMatrixType struct {
	XsdGoPkgHasAttr_Bias_XsdtDouble_

	XsdGoPkgHasAttr_PreserveAlpha_XsdtBoolean_

	XsdGoPkgHasAttr_KernelUnitLength_XsdtString_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_KernelMatrix_XsdtString_

	XsdGoPkgHasAttr_EdgeMode_TxsdFeConvolveMatrixTypeEdgeMode_Duplicate

	XsdGoPkgHasAttr_Divisor_XsdtDouble_

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttr_TargetX_XsdtInteger_

	XsdGoPkgHasAttr_Order_XsdtString_

	XsdGoPkgHasAttr_TargetY_XsdtInteger_

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElems_FeConvolveMatrix struct {
	FeConvolveMatrixs []*TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`

}

type TfeTileType struct {
	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElems_FeTile struct {
	FeTiles []*TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`

}

type TxsdFeBlendTypeMode xsdt.String

//	Since TxsdFeBlendTypeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeBlendTypeMode) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFeBlendTypeMode is "darken".
func (me TxsdFeBlendTypeMode) IsDarken () bool { return me == "darken" }

//	Returns true if the value of this enumerated TxsdFeBlendTypeMode is "lighten".
func (me TxsdFeBlendTypeMode) IsLighten () bool { return me == "lighten" }

//	Returns true if the value of this enumerated TxsdFeBlendTypeMode is "screen".
func (me TxsdFeBlendTypeMode) IsScreen () bool { return me == "screen" }

//	This convenience method just performs a simple type conversion to TxsdFeBlendTypeMode's alias type xsdt.String.
func (me TxsdFeBlendTypeMode) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdFeBlendTypeMode is "multiply".
func (me TxsdFeBlendTypeMode) IsMultiply () bool { return me == "multiply" }

//	Since TxsdFeBlendTypeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeBlendTypeMode) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFeBlendTypeMode is "normal".
func (me TxsdFeBlendTypeMode) IsNormal () bool { return me == "normal" }

type XsdGoPkgHasAttr_Mode_TxsdFeBlendTypeMode_Normal struct {
	Mode TxsdFeBlendTypeMode `xml:"http://www.w3.org/2000/svg mode,attr"`

}

//	Returns the default value for Mode -- "normal"
func (me XsdGoPkgHasAttr_Mode_TxsdFeBlendTypeMode_Normal) ModeDefault () TxsdFeBlendTypeMode { return TxsdFeBlendTypeMode("normal") }

type TfeBlendType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_In2_XsdtString_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Mode_TxsdFeBlendTypeMode_Normal

}

type XsdGoPkgHasElems_FeBlend struct {
	FeBlends []*TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`

}

type XsdGoPkgHasAttr_StdDeviation_XsdtString_ struct {
	StdDeviation xsdt.String `xml:"http://www.w3.org/2000/svg stdDeviation,attr"`

}

type TfeGaussianBlurType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_StdDeviation_XsdtString_

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_FeGaussianBlur struct {
	FeGaussianBlurs []*TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`

}

type TxsdFilterTypePrimitiveUnits xsdt.String

//	Returns true if the value of this enumerated TxsdFilterTypePrimitiveUnits is "objectBoundingBox".
func (me TxsdFilterTypePrimitiveUnits) IsObjectBoundingBox () bool { return me == "objectBoundingBox" }

//	Since TxsdFilterTypePrimitiveUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFilterTypePrimitiveUnits) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdFilterTypePrimitiveUnits is just a simple String type, this merely returns the current string value.
func (me TxsdFilterTypePrimitiveUnits) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdFilterTypePrimitiveUnits is "userSpaceOnUse".
func (me TxsdFilterTypePrimitiveUnits) IsUserSpaceOnUse () bool { return me == "userSpaceOnUse" }

//	This convenience method just performs a simple type conversion to TxsdFilterTypePrimitiveUnits's alias type xsdt.String.
func (me TxsdFilterTypePrimitiveUnits) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdFilterTypePrimitiveUnits is "userSpace".
func (me TxsdFilterTypePrimitiveUnits) IsUserSpace () bool { return me == "userSpace" }

type XsdGoPkgHasAttr_PrimitiveUnits_TxsdFilterTypePrimitiveUnits_ struct {
	PrimitiveUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg primitiveUnits,attr"`

}

type XsdGoPkgHasAttr_FilterUnits_TxsdFilterTypeFilterUnits_ struct {
	FilterUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg filterUnits,attr"`

}

type XsdGoPkgHasAttr_Dy_TLengthType_ struct {
	Dy TLengthType `xml:"http://www.w3.org/2000/svg dy,attr"`

}

type XsdGoPkgHasAttr_Dx_TLengthType_ struct {
	Dx TLengthType `xml:"http://www.w3.org/2000/svg dx,attr"`

}

type TfeOffsetType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Dy_TLengthType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Dx_TLengthType_

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasElems_Set

}

type XsdGoPkgHasElems_FeOffset struct {
	FeOffsets []*TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`

}

type XsdGoPkgHasAttr_Type_TxsdFeFuncRTypeType_ struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type TfeFuncRType struct {
	XsdGoPkgHasAtts_ComponentTransferFunctionAttributes

	XsdGoPkgHasAttr_Type_TxsdFeFuncRTypeType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Set

}

type XsdGoPkgHasElem_FeFuncR struct {
	FeFuncR *TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`

}

type XsdGoPkgHasAttr_Type_TxsdFeFuncGTypeType_ struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type TfeFuncGType struct {
	XsdGoPkgHasAtts_ComponentTransferFunctionAttributes

	XsdGoPkgHasAttr_Type_TxsdFeFuncGTypeType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

}

type XsdGoPkgHasElem_FeFuncG struct {
	FeFuncG *TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`

}

type XsdGoPkgHasAttr_Type_TxsdFeFuncATypeType_ struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type TfeFuncAType struct {
	XsdGoPkgHasAtts_ComponentTransferFunctionAttributes

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_Type_TxsdFeFuncATypeType_

}

type XsdGoPkgHasElem_FeFuncA struct {
	FeFuncA *TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`

}

type XsdGoPkgHasAttr_Type_TxsdFeFuncBTypeType_ struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`

}

type TfeFuncBType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Type_TxsdFeFuncBTypeType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_ComponentTransferFunctionAttributes

}

type XsdGoPkgHasElem_FeFuncB struct {
	FeFuncB *TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`

}

type TfeComponentTransferType struct {
	XsdGoPkgHasElem_FeFuncG

	XsdGoPkgHasElem_FeFuncA

	XsdGoPkgHasElem_FeFuncB

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_FilterPrimitiveAttributesWithIn

	XsdGoPkgHasElem_FeFuncR

}

type XsdGoPkgHasElems_FeComponentTransfer struct {
	FeComponentTransfers []*TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`

}

type TfilterType struct {
	XsdGoPkgHasElems_FeFlood

	XsdGoPkgHasElems_FeDiffuseLighting

	XsdGoPkgHasElems_FeDisplacementMap

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_FeConvolveMatrix

	XsdGoPkgHasElems_FeTile

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_FeBlend

	XsdGoPkgHasElems_FeGaussianBlur

	XsdGoPkgHasAttr_PrimitiveUnits_TxsdFilterTypePrimitiveUnits_

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAttr_FilterUnits_TxsdFilterTypeFilterUnits_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasElems_FeOffset

	XsdGoPkgHasElems_FeComponentTransfer

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasElems_FeMorphology

	XsdGoPkgHasElems_FeTurbulence

	XsdGoPkgHasAttr_FilterRes_XsdtString_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasElems_FeMerge

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasElems_FeImage

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_FeColorMatrix

	XsdGoPkgHasElems_FeSpecularLighting

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasElems_FeComposite

}

type XsdGoPkgHasElems_Filter struct {
	Filters []*TfilterType `xml:"http://www.w3.org/2000/svg filter"`

}

type TscriptType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_XlinkRefAttrs

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Type_TContentTypeType_

}

type XsdGoPkgHasElems_Script struct {
	Scripts []*TscriptType `xml:"http://www.w3.org/2000/svg script"`

}

type XsdGoPkgHasAttr_GradientUnits_TxsdLinearGradientTypeGradientUnits_ struct {
	GradientUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg gradientUnits,attr"`

}

type XsdGoPkgHasAttr_X2_TCoordinateType_ struct {
	X2 TCoordinateType `xml:"http://www.w3.org/2000/svg x2,attr"`

}

type XsdGoPkgHasAttr_Y2_TCoordinateType_ struct {
	Y2 TCoordinateType `xml:"http://www.w3.org/2000/svg y2,attr"`

}

type XsdGoPkgHasAttr_GradientTransform_TransformListType_ struct {
	GradientTransform TransformListType `xml:"http://www.w3.org/2000/svg gradientTransform,attr"`

}

type TxsdLinearGradientTypeSpreadMethod xsdt.String

//	Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "pad".
func (me TxsdLinearGradientTypeSpreadMethod) IsPad () bool { return me == "pad" }

//	Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "reflect".
func (me TxsdLinearGradientTypeSpreadMethod) IsReflect () bool { return me == "reflect" }

//	Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLinearGradientTypeSpreadMethod) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdLinearGradientTypeSpreadMethod's alias type xsdt.String.
func (me TxsdLinearGradientTypeSpreadMethod) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely returns the current string value.
func (me TxsdLinearGradientTypeSpreadMethod) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "repeat".
func (me TxsdLinearGradientTypeSpreadMethod) IsRepeat () bool { return me == "repeat" }

type XsdGoPkgHasAttr_SpreadMethod_TxsdLinearGradientTypeSpreadMethod_Pad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"http://www.w3.org/2000/svg spreadMethod,attr"`

}

//	Returns the default value for SpreadMethod -- "pad"
func (me XsdGoPkgHasAttr_SpreadMethod_TxsdLinearGradientTypeSpreadMethod_Pad) SpreadMethodDefault () TxsdLinearGradientTypeSpreadMethod { return TxsdLinearGradientTypeSpreadMethod("pad") }

type XsdGoPkgHasAttr_Offset_TLengthType_ struct {
	Offset TLengthType `xml:"http://www.w3.org/2000/svg offset,attr"`

}

type TstopType struct {
	XsdGoPkgHasAttr_Offset_TLengthType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_PresentationAttributesGradients

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Set

}

type XsdGoPkgHasElems_Stop struct {
	Stops []*TstopType `xml:"http://www.w3.org/2000/svg stop"`

}

type XsdGoPkgHasAttr_X1_TCoordinateType_ struct {
	X1 TCoordinateType `xml:"http://www.w3.org/2000/svg x1,attr"`

}

type XsdGoPkgHasAttr_Y1_TCoordinateType_ struct {
	Y1 TCoordinateType `xml:"http://www.w3.org/2000/svg y1,attr"`

}

type TlinearGradientType struct {
	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_AnimateTransform

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_SpreadMethod_TxsdLinearGradientTypeSpreadMethod_Pad

	XsdGoPkgHasElems_Stop

	XsdGoPkgHasAttr_X1_TCoordinateType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Y1_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_GradientUnits_TxsdLinearGradientTypeGradientUnits_

	XsdGoPkgHasAttr_X2_TCoordinateType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Y2_TCoordinateType_

	XsdGoPkgHasAttr_GradientTransform_TransformListType_

	XsdGoPkgHasAtts_XlinkRefAttrs

}

type XsdGoPkgHasElems_LinearGradient struct {
	LinearGradients []*TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`

}

type XsdGoPkgHasElems_Desc struct {
	Descs []*TdescType `xml:"http://www.w3.org/2000/svg desc"`

}

type XsdGoPkgHasAttr_R_TLengthType_ struct {
	R TLengthType `xml:"http://www.w3.org/2000/svg r,attr"`

}

type XsdGoPkgHasAttr_Cx_TCoordinateType_ struct {
	Cx TCoordinateType `xml:"http://www.w3.org/2000/svg cx,attr"`

}

type XsdGoPkgHasAttr_Origin_XsdtString_ struct {
	Origin xsdt.String `xml:"http://www.w3.org/2000/svg origin,attr"`

}

type XsdGoPkgHasAttr_Rotate_XsdtString_ struct {
	Rotate xsdt.String `xml:"http://www.w3.org/2000/svg rotate,attr"`

}

type XsdGoPkgHasAttr_KeyPoints_XsdtString_ struct {
	KeyPoints xsdt.String `xml:"http://www.w3.org/2000/svg keyPoints,attr"`

}

type TmpathType struct {
	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_XlinkRefAttrs

	xlink.XsdGoPkgHasAttr_Href

}

type XsdGoPkgHasElem_Mpath struct {
	Mpath *TmpathType `xml:"http://www.w3.org/2000/svg mpath"`

}

type XsdGoPkgHasAttr_Path_XsdtString_ struct {
	Path xsdt.String `xml:"http://www.w3.org/2000/svg path,attr"`

}

type TanimateMotionType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_KeyPoints_XsdtString_

	XsdGoPkgHasElem_Mpath

	XsdGoPkgHasAttr_Path_XsdtString_

	XsdGoPkgHasAttr_Origin_XsdtString_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_AnimElementAttrs

	XsdGoPkgHasAtts_AnimAdditionAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_AnimationEvents

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_AnimValueAttrs

	XsdGoPkgHasAttr_Rotate_XsdtString_

	XsdGoPkgHasAtts_AnimTimingAttrs

}

type XsdGoPkgHasElems_AnimateMotion struct {
	AnimateMotions []*TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`

}

type XsdGoPkgHasAttr_Cy_TCoordinateType_ struct {
	Cy TCoordinateType `xml:"http://www.w3.org/2000/svg cy,attr"`

}

type TcircleType struct {
	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAttr_Cy_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_R_TLengthType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_Cx_TCoordinateType_

}

type XsdGoPkgHasElems_Circle struct {
	Circles []*TcircleType `xml:"http://www.w3.org/2000/svg circle"`

}

type XsdGoPkgHasAttr_MarkerWidth_TLengthType_ struct {
	MarkerWidth TLengthType `xml:"http://www.w3.org/2000/svg markerWidth,attr"`

}

type XsdGoPkgHasAttr_Local_XsdtString_ struct {
	Local xsdt.String `xml:"http://www.w3.org/2000/svg local,attr"`

}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.w3.org/2000/svg name,attr"`

}

type TxsdColorProfileTypeRenderingIntent xsdt.String

//	Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "perceptual".
func (me TxsdColorProfileTypeRenderingIntent) IsPerceptual () bool { return me == "perceptual" }

//	Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "saturation".
func (me TxsdColorProfileTypeRenderingIntent) IsSaturation () bool { return me == "saturation" }

//	Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely returns the current string value.
func (me TxsdColorProfileTypeRenderingIntent) String () string { return xsdt.String(me).String() }

//	Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdColorProfileTypeRenderingIntent) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "relative-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsRelativeColorimetric () bool { return me == "relative-colorimetric" }

//	Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "auto".
func (me TxsdColorProfileTypeRenderingIntent) IsAuto () bool { return me == "auto" }

//	This convenience method just performs a simple type conversion to TxsdColorProfileTypeRenderingIntent's alias type xsdt.String.
func (me TxsdColorProfileTypeRenderingIntent) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "absolute-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsAbsoluteColorimetric () bool { return me == "absolute-colorimetric" }

type XsdGoPkgHasAttr_RenderingIntent_TxsdColorProfileTypeRenderingIntent_Auto struct {
	RenderingIntent TxsdColorProfileTypeRenderingIntent `xml:"http://www.w3.org/2000/svg rendering-intent,attr"`

}

//	Returns the default value for RenderingIntent -- "auto"
func (me XsdGoPkgHasAttr_RenderingIntent_TxsdColorProfileTypeRenderingIntent_Auto) RenderingIntentDefault () TxsdColorProfileTypeRenderingIntent { return TxsdColorProfileTypeRenderingIntent("auto") }

type TcolorProfileType struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_RenderingIntent_TxsdColorProfileTypeRenderingIntent_Auto

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Local_XsdtString_

	XsdGoPkgHasGroup_DescTitleMetadata

}

type XsdGoPkgHasElems_ColorProfile struct {
	ColorProfiles []*TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`

}

//	'viewBox' attribute specification
type TViewBoxSpecType xsdt.String

//	This convenience method just performs a simple type conversion to TViewBoxSpecType's alias type xsdt.String.
func (me TViewBoxSpecType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TViewBoxSpecType is just a simple String type, this merely returns the current string value.
func (me TViewBoxSpecType) String () string { return xsdt.String(me).String() }

//	Since TViewBoxSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TViewBoxSpecType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_ struct {
	ViewBox TViewBoxSpecType `xml:"http://www.w3.org/2000/svg viewBox,attr"`

}

type TimageType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_AnimateMotion

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAtts_PresentationAttributesViewports

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasGroup_DescTitleMetadata

}

type XsdGoPkgHasElems_Image struct {
	Images []*TimageType `xml:"http://www.w3.org/2000/svg image"`

}

type XsdGoPkgHasAttr_PatternUnits_TxsdPatternTypePatternUnits_ struct {
	PatternUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg patternUnits,attr"`

}

//	a list of points
type TPointsType xsdt.String

//	Since TPointsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPointsType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TPointsType is just a simple String type, this merely returns the current string value.
func (me TPointsType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPointsType's alias type xsdt.String.
func (me TPointsType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Points_TPointsType_ struct {
	Points TPointsType `xml:"http://www.w3.org/2000/svg points,attr"`

}

type TpolygonType struct {
	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesMarkers

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Points_TPointsType_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasElems_AnimateTransform

}

type XsdGoPkgHasElems_Polygon struct {
	Polygons []*TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`

}

type XsdGoPkgHasAttr_Ry_TLengthType_ struct {
	Ry TLengthType `xml:"http://www.w3.org/2000/svg ry,attr"`

}

type XsdGoPkgHasAttr_Rx_TLengthType_ struct {
	Rx TLengthType `xml:"http://www.w3.org/2000/svg rx,attr"`

}

type TrectType struct {
	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Ry_TLengthType_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAttr_Rx_TLengthType_

	XsdGoPkgHasAtts_LangSpaceAttrs

}

type XsdGoPkgHasElems_Rect struct {
	Rects []*TrectType `xml:"http://www.w3.org/2000/svg rect"`

}

//	a list of <length>s
type TLengthsType xsdt.String

//	Since TLengthsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthsType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TLengthsType's alias type xsdt.String.
func (me TLengthsType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TLengthsType is just a simple String type, this merely returns the current string value.
func (me TLengthsType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Dy_TLengthsType_ struct {
	Dy TLengthsType `xml:"http://www.w3.org/2000/svg dy,attr"`

}

type XsdGoPkgHasAttr_Dx_TLengthsType_ struct {
	Dx TLengthsType `xml:"http://www.w3.org/2000/svg dx,attr"`

}

type XsdGoPkgHasAttr_GlyphRef_XsdtString_ struct {
	GlyphRef xsdt.String `xml:"http://www.w3.org/2000/svg glyphRef,attr"`

}

type XsdGoPkgHasAttr_Format_XsdtString_ struct {
	Format xsdt.String `xml:"http://www.w3.org/2000/svg format,attr"`

}

//	a space separated list of CoordinateType. Punt to 'string' for now
type TCoordinatesType xsdt.String

//	This convenience method just performs a simple type conversion to TCoordinatesType's alias type xsdt.String.
func (me TCoordinatesType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TCoordinatesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinatesType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TCoordinatesType is just a simple String type, this merely returns the current string value.
func (me TCoordinatesType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Y_TCoordinatesType_ struct {
	Y TCoordinatesType `xml:"http://www.w3.org/2000/svg y,attr"`

}

type XsdGoPkgHasAttr_X_TCoordinatesType_ struct {
	X TCoordinatesType `xml:"http://www.w3.org/2000/svg x,attr"`

}

type TaltGlyphType struct {
	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Dy_TLengthsType_

	XsdGoPkgHasAttr_Dx_TLengthsType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAttr_Rotate_XsdtString_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_GlyphRef_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_Y_TCoordinatesType_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_X_TCoordinatesType_

}

type XsdGoPkgHasElems_AltGlyph struct {
	AltGlyphs []*TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`

}

type XsdGoPkgHasElems_Metadata struct {
	Metadatas []*TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`

}

//	'preserveAspectRatio' attribute specification
type TPreserveAspectRatioSpecType xsdt.String

//	This convenience method just performs a simple type conversion to TPreserveAspectRatioSpecType's alias type xsdt.String.
func (me TPreserveAspectRatioSpecType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TPreserveAspectRatioSpecType is just a simple String type, this merely returns the current string value.
func (me TPreserveAspectRatioSpecType) String () string { return xsdt.String(me).String() }

//	Since TPreserveAspectRatioSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPreserveAspectRatioSpecType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet struct {
	PreserveAspectRatio TPreserveAspectRatioSpecType `xml:"http://www.w3.org/2000/svg preserveAspectRatio,attr"`

}

//	Returns the default value for PreserveAspectRatio -- "xMidYMid meet"
func (me XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet) PreserveAspectRatioDefault () TPreserveAspectRatioSpecType { return TPreserveAspectRatioSpecType("xMidYMid meet") }

type XsdGoPkgHasAttr_ViewTarget_XsdtString_ struct {
	ViewTarget xsdt.String `xml:"http://www.w3.org/2000/svg viewTarget,attr"`

}

type TxsdViewTypeZoomAndPan xsdt.String

//	Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "disable".
func (me TxsdViewTypeZoomAndPan) IsDisable () bool { return me == "disable" }

//	Since TxsdViewTypeZoomAndPan is just a simple String type, this merely returns the current string value.
func (me TxsdViewTypeZoomAndPan) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "zoom".
func (me TxsdViewTypeZoomAndPan) IsZoom () bool { return me == "zoom" }

//	Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "magnify".
func (me TxsdViewTypeZoomAndPan) IsMagnify () bool { return me == "magnify" }

//	This convenience method just performs a simple type conversion to TxsdViewTypeZoomAndPan's alias type xsdt.String.
func (me TxsdViewTypeZoomAndPan) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdViewTypeZoomAndPan is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdViewTypeZoomAndPan) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_ZoomAndPan_TxsdViewTypeZoomAndPan_Magnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"http://www.w3.org/2000/svg zoomAndPan,attr"`

}

//	Returns the default value for ZoomAndPan -- "magnify"
func (me XsdGoPkgHasAttr_ZoomAndPan_TxsdViewTypeZoomAndPan_Magnify) ZoomAndPanDefault () TxsdViewTypeZoomAndPan { return TxsdViewTypeZoomAndPan("magnify") }

type TviewType struct {
	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_

	XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet

	XsdGoPkgHasAttr_ViewTarget_XsdtString_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_ZoomAndPan_TxsdViewTypeZoomAndPan_Magnify

}

type XsdGoPkgHasElems_View struct {
	Views []*TviewType `xml:"http://www.w3.org/2000/svg view"`

}

type TuseType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAtts_LangSpaceAttrs

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Height_TLengthType_

}

type XsdGoPkgHasElems_Use struct {
	Uses []*TuseType `xml:"http://www.w3.org/2000/svg use"`

}

type XsdGoPkgHasAttr_Target_XsdtNmtoken_ struct {
	Target xsdt.Nmtoken `xml:"http://www.w3.org/2000/svg target,attr"`

}

type TpolylineType struct {
	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Points_TPointsType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_PresentationAttributesMarkers

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

}

type XsdGoPkgHasElems_Polyline struct {
	Polylines []*TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`

}

type TellipseType struct {
	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Rx_TLengthType_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Cy_TCoordinateType_

	XsdGoPkgHasAttr_Cx_TCoordinateType_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Ry_TLengthType_

	XsdGoPkgHasElems_AnimateTransform

}

type XsdGoPkgHasElems_Ellipse struct {
	Ellipses []*TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`

}

type XsdGoPkgHasAttr_ClipPathUnits_TxsdClipPathTypeClipPathUnits_ struct {
	ClipPathUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg clipPathUnits,attr"`

}

type TlineType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_Y1_TCoordinateType_

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAttr_X1_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_X2_TCoordinateType_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_PresentationAttributesMarkers

	XsdGoPkgHasAttr_Y2_TCoordinateType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_GraphicsElementEvents

}

type XsdGoPkgHasElems_Line struct {
	Lines []*TlineType `xml:"http://www.w3.org/2000/svg line"`

}

type XsdGoPkgHasAttr_PathLength_XsdtDouble_ struct {
	PathLength xsdt.Double `xml:"http://www.w3.org/2000/svg pathLength,attr"`

}

//	a path data specification
//	Yes, of course this was generated by a program!
type TPathDataType xsdt.String

//	Since TPathDataType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPathDataType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TPathDataType's alias type xsdt.String.
func (me TPathDataType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TPathDataType is just a simple String type, this merely returns the current string value.
func (me TPathDataType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_D_TPathDataType_ struct {
	D TPathDataType `xml:"http://www.w3.org/2000/svg d,attr"`

}

type TpathType struct {
	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAttr_PathLength_XsdtDouble_

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_D_TPathDataType_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_PresentationAttributesMarkers

	XsdGoPkgHasElems_AnimateColor

}

type XsdGoPkgHasElems_Path struct {
	Paths []*TpathType `xml:"http://www.w3.org/2000/svg path"`

}

type TclipPathType struct {
	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasAttr_ClipPathUnits_TxsdClipPathTypeClipPathUnits_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Line

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_Path

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasAtts_PresentationAttributesTextElements

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_AnimateMotion

}

type XsdGoPkgHasElems_ClipPath struct {
	ClipPaths []*TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`

}

type XsdGoPkgHasAttr_UnitsPerEm_XsdtDouble_ struct {
	UnitsPerEm xsdt.Double `xml:"http://www.w3.org/2000/svg units-per-em,attr"`

}

type XsdGoPkgHasAttr_Panose1_XsdtString_ struct {
	Panose1 xsdt.String `xml:"http://www.w3.org/2000/svg panose-1,attr"`

}

type XsdGoPkgHasAttr_UnderlineThickness_XsdtDouble_ struct {
	UnderlineThickness xsdt.Double `xml:"http://www.w3.org/2000/svg underline-thickness,attr"`

}

type XsdGoPkgHasAttr_FontVariant_XsdtString_ struct {
	FontVariant xsdt.String `xml:"http://www.w3.org/2000/svg font-variant,attr"`

}

type XsdGoPkgHasAttr_Bbox_XsdtString_ struct {
	Bbox xsdt.String `xml:"http://www.w3.org/2000/svg bbox,attr"`

}

type XsdGoPkgHasAttr_Mathline_XsdtDouble_ struct {
	Mathline xsdt.Double `xml:"http://www.w3.org/2000/svg mathline,attr"`

}

type XsdGoPkgHasAttr_Ideographic_XsdtDouble_ struct {
	Ideographic xsdt.Double `xml:"http://www.w3.org/2000/svg ideographic,attr"`

}

type XsdGoPkgHasAttr_StrikethroughPosition_XsdtDouble_ struct {
	StrikethroughPosition xsdt.Double `xml:"http://www.w3.org/2000/svg strikethrough-position,attr"`

}

type XsdGoPkgHasAttr_AccentHeight_XsdtDouble_ struct {
	AccentHeight xsdt.Double `xml:"http://www.w3.org/2000/svg accent-height,attr"`

}

type XsdGoPkgHasAttr_FontWeight_XsdtString_ struct {
	FontWeight xsdt.String `xml:"http://www.w3.org/2000/svg font-weight,attr"`

}

type XsdGoPkgHasAttr_UnderlinePosition_XsdtDouble_ struct {
	UnderlinePosition xsdt.Double `xml:"http://www.w3.org/2000/svg underline-position,attr"`

}

type TfontFaceNameType struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_FontFaceName struct {
	FontFaceNames []*TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`

}

type XsdGoPkgHasAttr_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.w3.org/2000/svg string,attr"`

}

type TfontFaceFormatType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_String_XsdtString_

}

type XsdGoPkgHasElem_FontFaceFormat struct {
	FontFaceFormat *TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`

}

type TfontFaceUriType struct {
	XsdGoPkgHasElem_FontFaceFormat

	XsdGoPkgHasAtts_XlinkRefAttrs

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_FontFaceUri struct {
	FontFaceUris []*TfontFaceUriType `xml:"http://www.w3.org/2000/svg font-face-uri"`

}

type TfontFaceSrcType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_FontFaceUri

	XsdGoPkgHasElems_FontFaceName

}

type XsdGoPkgHasElem_FontFaceSrc struct {
	FontFaceSrc *TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`

}

type XsdGoPkgHasAttr_Ascent_XsdtDouble_ struct {
	Ascent xsdt.Double `xml:"http://www.w3.org/2000/svg ascent,attr"`

}

type XsdGoPkgHasAttr_CapHeight_XsdtDouble_ struct {
	CapHeight xsdt.Double `xml:"http://www.w3.org/2000/svg cap-height,attr"`

}

type XsdGoPkgHasAttr_OverlineThickness_XsdtDouble_ struct {
	OverlineThickness xsdt.Double `xml:"http://www.w3.org/2000/svg overline-thickness,attr"`

}

type XsdGoPkgHasAttr_StrikethroughThickness_XsdtDouble_ struct {
	StrikethroughThickness xsdt.Double `xml:"http://www.w3.org/2000/svg strikethrough-thickness,attr"`

}

type TdefinitionSrcType struct {
	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasAtts_StdAttrs

	xlink.XsdGoPkgHasAttr_Href

}

type XsdGoPkgHasElem_DefinitionSrc struct {
	DefinitionSrc *TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`

}

type XsdGoPkgHasAttr_Topline_XsdtDouble_ struct {
	Topline xsdt.Double `xml:"http://www.w3.org/2000/svg topline,attr"`

}

type XsdGoPkgHasAttr_OverlinePosition_XsdtDouble_ struct {
	OverlinePosition xsdt.Double `xml:"http://www.w3.org/2000/svg overline-position,attr"`

}

type XsdGoPkgHasAttr_Baseline_XsdtDouble_ struct {
	Baseline xsdt.Double `xml:"http://www.w3.org/2000/svg baseline,attr"`

}

type XsdGoPkgHasAttr_FontStyle_XsdtString_ struct {
	FontStyle xsdt.String `xml:"http://www.w3.org/2000/svg font-style,attr"`

}

type XsdGoPkgHasAttr_Descent_XsdtDouble_ struct {
	Descent xsdt.Double `xml:"http://www.w3.org/2000/svg descent,attr"`

}

type XsdGoPkgHasAttr_UnicodeRange_XsdtString_ struct {
	UnicodeRange xsdt.String `xml:"http://www.w3.org/2000/svg unicode-range,attr"`

}

type XsdGoPkgHasAttr_FontStretch_XsdtString_ struct {
	FontStretch xsdt.String `xml:"http://www.w3.org/2000/svg font-stretch,attr"`

}

type XsdGoPkgHasAttr_XHeight_XsdtDouble_ struct {
	XHeight xsdt.Double `xml:"http://www.w3.org/2000/svg x-height,attr"`

}

type XsdGoPkgHasAttr_Centerline_XsdtDouble_ struct {
	Centerline xsdt.Double `xml:"http://www.w3.org/2000/svg centerline,attr"`

}

type XsdGoPkgHasAttr_Widths_XsdtString_ struct {
	Widths xsdt.String `xml:"http://www.w3.org/2000/svg widths,attr"`

}

type XsdGoPkgHasAttr_Hanging_XsdtDouble_ struct {
	Hanging xsdt.Double `xml:"http://www.w3.org/2000/svg hanging,attr"`

}

type XsdGoPkgHasAttr_Stemv_XsdtDouble_ struct {
	Stemv xsdt.Double `xml:"http://www.w3.org/2000/svg stemv,attr"`

}

type XsdGoPkgHasAttr_Stemh_XsdtDouble_ struct {
	Stemh xsdt.Double `xml:"http://www.w3.org/2000/svg stemh,attr"`

}

type TfontFaceType struct {
	XsdGoPkgHasAttr_UnicodeRange_XsdtString_

	XsdGoPkgHasAttr_FontStretch_XsdtString_

	XsdGoPkgHasAttr_FontFamily_TFontFamilyValueType_

	XsdGoPkgHasAttr_Slope_XsdtDouble_

	XsdGoPkgHasAttr_XHeight_XsdtDouble_

	XsdGoPkgHasAttr_Centerline_XsdtDouble_

	XsdGoPkgHasAttr_Widths_XsdtString_

	XsdGoPkgHasAttr_Hanging_XsdtDouble_

	XsdGoPkgHasAttr_Stemv_XsdtDouble_

	XsdGoPkgHasAttr_Stemh_XsdtDouble_

	XsdGoPkgHasAttr_UnitsPerEm_XsdtDouble_

	XsdGoPkgHasAttr_Panose1_XsdtString_

	XsdGoPkgHasAttr_UnderlineThickness_XsdtDouble_

	XsdGoPkgHasAttr_FontVariant_XsdtString_

	XsdGoPkgHasAttr_Bbox_XsdtString_

	XsdGoPkgHasAttr_Mathline_XsdtDouble_

	XsdGoPkgHasAttr_Ideographic_XsdtDouble_

	XsdGoPkgHasAttr_StrikethroughPosition_XsdtDouble_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_AccentHeight_XsdtDouble_

	XsdGoPkgHasAttr_FontWeight_XsdtString_

	XsdGoPkgHasAttr_UnderlinePosition_XsdtDouble_

	XsdGoPkgHasElem_FontFaceSrc

	XsdGoPkgHasAttr_Ascent_XsdtDouble_

	XsdGoPkgHasAttr_CapHeight_XsdtDouble_

	XsdGoPkgHasAttr_OverlineThickness_XsdtDouble_

	XsdGoPkgHasAttr_StrikethroughThickness_XsdtDouble_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElem_DefinitionSrc

	XsdGoPkgHasAttr_Topline_XsdtDouble_

	XsdGoPkgHasAttr_OverlinePosition_XsdtDouble_

	XsdGoPkgHasAttr_FontSize_TFontSizeValueType_

	XsdGoPkgHasAttr_Baseline_XsdtDouble_

	XsdGoPkgHasAttr_FontStyle_XsdtString_

	XsdGoPkgHasAttr_Descent_XsdtDouble_

}

type XsdGoPkgHasElems_FontFace struct {
	FontFaces []*TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`

}

type XsdGoPkgHasElems_Title struct {
	Titles []*TtitleType `xml:"http://www.w3.org/2000/svg title"`

}

type TglyphRefType struct {
	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Dy_TLengthsType_

	XsdGoPkgHasAttr_X_TCoordinatesType_

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasAttr_GlyphRef_XsdtString_

	XsdGoPkgHasAttr_Dx_TLengthsType_

	XsdGoPkgHasAtts_XlinkRefAttrs

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_Y_TCoordinatesType_

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_GlyphRef struct {
	GlyphRefs []*TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`

}

type TaltGlyphItemType struct {
	XsdGoPkgHasElems_GlyphRef

	XsdGoPkgHasAtts_StdAttrs

}

type XsdGoPkgHasElems_AltGlyphItem struct {
	AltGlyphItems []*TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`

}

type TaltGlyphDefType struct {
	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AltGlyphItem

	XsdGoPkgHasElems_GlyphRef

}

type XsdGoPkgHasElems_AltGlyphDef struct {
	AltGlyphDefs []*TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`

}

type TcursorType struct {
	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasGroup_DescTitleMetadata

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasAttr_X_TCoordinateType_

}

type XsdGoPkgHasElems_Cursor struct {
	Cursors []*TcursorType `xml:"http://www.w3.org/2000/svg cursor"`

}

type XsdGoPkgHasElem_FontFace struct {
	FontFace *TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`

}

type XsdGoPkgHasAttr_HorizAdvX_XsdtDouble_ struct {
	HorizAdvX xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-adv-x,attr"`

}

type TforeignObjectType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Content_XsdtString_StructuredText

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAtts_PresentationAttributesAll

}

type XsdGoPkgHasElems_ForeignObject struct {
	ForeignObjects []*TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`

}

type TswitchType struct {
	XsdGoPkgHasElems_Line

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Path

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_ForeignObject

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Image

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

}

type XsdGoPkgHasElems_Switch struct {
	Switchs []*TswitchType `xml:"http://www.w3.org/2000/svg switch"`

}

type XsdGoPkgHasAttr_SpreadMethod_TxsdRadialGradientTypeSpreadMethod_Pad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"http://www.w3.org/2000/svg spreadMethod,attr"`

}

//	Returns the default value for SpreadMethod -- "pad"
func (me XsdGoPkgHasAttr_SpreadMethod_TxsdRadialGradientTypeSpreadMethod_Pad) SpreadMethodDefault () TxsdLinearGradientTypeSpreadMethod { return TxsdLinearGradientTypeSpreadMethod("pad") }

type XsdGoPkgHasAttr_GradientUnits_TxsdRadialGradientTypeGradientUnits_ struct {
	GradientUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg gradientUnits,attr"`

}

type XsdGoPkgHasAttr_Fy_TCoordinateType_ struct {
	Fy TCoordinateType `xml:"http://www.w3.org/2000/svg fy,attr"`

}

type XsdGoPkgHasAttr_Fx_TCoordinateType_ struct {
	Fx TCoordinateType `xml:"http://www.w3.org/2000/svg fx,attr"`

}

type TradialGradientType struct {
	XsdGoPkgHasAttr_GradientUnits_TxsdRadialGradientTypeGradientUnits_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_Fy_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAttr_R_TLengthType_

	XsdGoPkgHasAttr_Cx_TCoordinateType_

	XsdGoPkgHasAttr_Cy_TCoordinateType_

	XsdGoPkgHasAttr_Fx_TCoordinateType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_GradientTransform_TransformListType_

	XsdGoPkgHasAttr_SpreadMethod_TxsdRadialGradientTypeSpreadMethod_Pad

	XsdGoPkgHasElems_Stop

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_XlinkRefAttrs

}

type XsdGoPkgHasElems_RadialGradient struct {
	RadialGradients []*TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`

}

type TgType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_View

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_ClipPath

}

type XsdGoPkgHasElems_G struct {
	Gs []*TgType `xml:"http://www.w3.org/2000/svg g"`

}

type XsdGoPkgHasAttr_VertAdvY_XsdtDouble_ struct {
	VertAdvY xsdt.Double `xml:"http://www.w3.org/2000/svg vert-adv-y,attr"`

}

type TmissingGlyphType struct {
	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Line

	XsdGoPkgHasAttr_HorizAdvX_XsdtDouble_

	XsdGoPkgHasAttr_D_TPathDataType_

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Script

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_View

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasAttr_VertAdvY_XsdtDouble_

}

type XsdGoPkgHasElem_MissingGlyph struct {
	MissingGlyph *TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`

}

type XsdGoPkgHasAttr_HorizOriginX_XsdtDouble_ struct {
	HorizOriginX xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-origin-x,attr"`

}

type XsdGoPkgHasAttr_HorizOriginY_XsdtDouble_ struct {
	HorizOriginY xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-origin-y,attr"`

}

type XsdGoPkgHasAttr_U2_XsdtString_ struct {
	U2 xsdt.String `xml:"http://www.w3.org/2000/svg u2,attr"`

}

type XsdGoPkgHasAttr_K_XsdtDouble_ struct {
	K xsdt.Double `xml:"http://www.w3.org/2000/svg k,attr"`

}

type XsdGoPkgHasAttr_U1_XsdtString_ struct {
	U1 xsdt.String `xml:"http://www.w3.org/2000/svg u1,attr"`

}

type XsdGoPkgHasAttr_G2_XsdtString_ struct {
	G2 xsdt.String `xml:"http://www.w3.org/2000/svg g2,attr"`

}

type XsdGoPkgHasAttr_G1_XsdtString_ struct {
	G1 xsdt.String `xml:"http://www.w3.org/2000/svg g1,attr"`

}

type ThkernType struct {
	XsdGoPkgHasAttr_G1_XsdtString_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_U2_XsdtString_

	XsdGoPkgHasAttr_K_XsdtDouble_

	XsdGoPkgHasAttr_U1_XsdtString_

	XsdGoPkgHasAttr_G2_XsdtString_

}

type XsdGoPkgHasElems_Hkern struct {
	Hkerns []*ThkernType `xml:"http://www.w3.org/2000/svg hkern"`

}

type XsdGoPkgHasAttr_Unicode_XsdtString_ struct {
	Unicode xsdt.String `xml:"http://www.w3.org/2000/svg unicode,attr"`

}

type XsdGoPkgHasAttr_Arabic_XsdtString_ struct {
	Arabic xsdt.String `xml:"http://www.w3.org/2000/svg arabic,attr"`

}

type XsdGoPkgHasAttr_VertTextOrient_XsdtString_ struct {
	VertTextOrient xsdt.String `xml:"http://www.w3.org/2000/svg vert-text-orient,attr"`

}

type XsdGoPkgHasAttr_GlyphName_XsdtString_ struct {
	GlyphName xsdt.String `xml:"http://www.w3.org/2000/svg glyph-name,attr"`

}

type XsdGoPkgHasAttr_Han_XsdtString_ struct {
	Han xsdt.String `xml:"http://www.w3.org/2000/svg han,attr"`

}

type TglyphType struct {
	XsdGoPkgHasElems_Rect

	XsdGoPkgHasAttr_Arabic_XsdtString_

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasAttr_D_TPathDataType_

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasAttr_VertTextOrient_XsdtString_

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_View

	XsdGoPkgHasElems_Use

	XsdGoPkgHasAttr_VertAdvY_XsdtDouble_

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasAttr_GlyphName_XsdtString_

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasAttr_HorizAdvX_XsdtDouble_

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Script

	XsdGoPkgHasAttr_Han_XsdtString_

	XsdGoPkgHasAttr_Unicode_XsdtString_

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_AnimateColor

}

type XsdGoPkgHasElems_Glyph struct {
	Glyphs []*TglyphType `xml:"http://www.w3.org/2000/svg glyph"`

}

type TvkernType struct {
	XsdGoPkgHasAttr_U2_XsdtString_

	XsdGoPkgHasAttr_G2_XsdtString_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_U1_XsdtString_

	XsdGoPkgHasAttr_G1_XsdtString_

	XsdGoPkgHasAttr_K_XsdtDouble_

}

type XsdGoPkgHasElems_Vkern struct {
	Vkerns []*TvkernType `xml:"http://www.w3.org/2000/svg vkern"`

}

type XsdGoPkgHasAttr_VertOriginY_XsdtDouble_ struct {
	VertOriginY xsdt.Double `xml:"http://www.w3.org/2000/svg vert-origin-y,attr"`

}

type XsdGoPkgHasAttr_VertOriginX_XsdtDouble_ struct {
	VertOriginX xsdt.Double `xml:"http://www.w3.org/2000/svg vert-origin-x,attr"`

}

type TfontType struct {
	XsdGoPkgHasElems_Glyph

	XsdGoPkgHasGroup_DescTitleMetadata

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Vkern

	XsdGoPkgHasAttr_VertAdvY_XsdtDouble_

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_VertOriginY_XsdtDouble_

	XsdGoPkgHasAttr_VertOriginX_XsdtDouble_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElem_FontFace

	XsdGoPkgHasAttr_HorizAdvX_XsdtDouble_

	XsdGoPkgHasElem_MissingGlyph

	XsdGoPkgHasAttr_HorizOriginX_XsdtDouble_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_HorizOriginY_XsdtDouble_

	XsdGoPkgHasElems_Hkern

}

type XsdGoPkgHasElems_Font struct {
	Fonts []*TfontType `xml:"http://www.w3.org/2000/svg font"`

}

type TsymbolType struct {
	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_View

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Path

	XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_

}

type XsdGoPkgHasElems_Symbol struct {
	Symbols []*TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`

}

type TdefsType struct {
	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Text

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_View

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_G

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Image

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasAtts_GraphicsElementEvents

}

type XsdGoPkgHasElems_Defs struct {
	Defses []*TdefsType `xml:"http://www.w3.org/2000/svg defs"`

}

type TaType struct {
	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_Polyline

	xlink.XsdGoPkgHasAttr_Arcrole

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAtts_TestAttrs

	xlink.XsdGoPkgHasAttr_Role

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Desc

	xlink.XsdGoPkgHasAttr_Actuate

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_View

	XsdGoPkgHasElems_Use

	xlink.XsdGoPkgHasAttr_Title

	XsdGoPkgHasAttr_Target_XsdtNmtoken_

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_Image

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_A

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasCdata

	xlink.XsdGoPkgHasAttr_Show

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_Line

	xlink.XsdGoPkgHasAttr_Type

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasAtts_LangSpaceAttrs

}

type XsdGoPkgHasElems_A struct {
	As []*TaType `xml:"http://www.w3.org/2000/svg a"`

}

type XsdGoPkgHasAttr_TextLength_TLengthType_ struct {
	TextLength TLengthType `xml:"http://www.w3.org/2000/svg textLength,attr"`

}

type TxsdTrefTypeLengthAdjust xsdt.String

//	This convenience method just performs a simple type conversion to TxsdTrefTypeLengthAdjust's alias type xsdt.String.
func (me TxsdTrefTypeLengthAdjust) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdTrefTypeLengthAdjust is just a simple String type, this merely returns the current string value.
func (me TxsdTrefTypeLengthAdjust) String () string { return xsdt.String(me).String() }

//	Since TxsdTrefTypeLengthAdjust is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTrefTypeLengthAdjust) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTrefTypeLengthAdjust is "spacing".
func (me TxsdTrefTypeLengthAdjust) IsSpacing () bool { return me == "spacing" }

//	Returns true if the value of this enumerated TxsdTrefTypeLengthAdjust is "spacingAndGlyphs".
func (me TxsdTrefTypeLengthAdjust) IsSpacingAndGlyphs () bool { return me == "spacingAndGlyphs" }

type XsdGoPkgHasAttr_LengthAdjust_TxsdTrefTypeLengthAdjust_ struct {
	LengthAdjust TxsdTrefTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`

}

type TtrefType struct {
	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Y_TCoordinatesType_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_LengthAdjust_TxsdTrefTypeLengthAdjust_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_TextLength_TLengthType_

	XsdGoPkgHasAttr_Dx_TLengthsType_

	XsdGoPkgHasElems_Set

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasAttr_Dy_TLengthsType_

	XsdGoPkgHasAttr_X_TCoordinatesType_

	XsdGoPkgHasAttr_Rotate_XsdtString_

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

}

type XsdGoPkgHasElems_Tref struct {
	Trefs []*TtrefType `xml:"http://www.w3.org/2000/svg tref"`

}

type TxsdTextPathTypeSpacing xsdt.String

//	Since TxsdTextPathTypeSpacing is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeSpacing) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTextPathTypeSpacing's alias type xsdt.String.
func (me TxsdTextPathTypeSpacing) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "auto".
func (me TxsdTextPathTypeSpacing) IsAuto () bool { return me == "auto" }

//	Since TxsdTextPathTypeSpacing is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeSpacing) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "exact".
func (me TxsdTextPathTypeSpacing) IsExact () bool { return me == "exact" }

type XsdGoPkgHasAttr_Spacing_TxsdTextPathTypeSpacing_ struct {
	Spacing TxsdTextPathTypeSpacing `xml:"http://www.w3.org/2000/svg spacing,attr"`

}

type XsdGoPkgHasAttr_StartOffset_XsdtString_ struct {
	StartOffset xsdt.String `xml:"http://www.w3.org/2000/svg startOffset,attr"`

}

type TxsdTextPathTypeMethod xsdt.String

//	Returns true if the value of this enumerated TxsdTextPathTypeMethod is "align".
func (me TxsdTextPathTypeMethod) IsAlign () bool { return me == "align" }

//	This convenience method just performs a simple type conversion to TxsdTextPathTypeMethod's alias type xsdt.String.
func (me TxsdTextPathTypeMethod) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdTextPathTypeMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeMethod) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdTextPathTypeMethod is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeMethod) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdTextPathTypeMethod is "stretch".
func (me TxsdTextPathTypeMethod) IsStretch () bool { return me == "stretch" }

type XsdGoPkgHasAttr_Method_TxsdTextPathTypeMethod_ struct {
	Method TxsdTextPathTypeMethod `xml:"http://www.w3.org/2000/svg method,attr"`

}

type XsdGoPkgHasAttr_LengthAdjust_TxsdTextPathTypeLengthAdjust_ struct {
	LengthAdjust TxsdTrefTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`

}

type XsdGoPkgHasAttr_LengthAdjust_TxsdTspanTypeLengthAdjust_ struct {
	LengthAdjust TxsdTrefTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`

}

type TtspanType struct {
	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_AltGlyph

	XsdGoPkgHasAttr_LengthAdjust_TxsdTspanTypeLengthAdjust_

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_Dx_TLengthsType_

	XsdGoPkgHasAttr_X_TCoordinatesType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Y_TCoordinatesType_

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasAttr_Dy_TLengthsType_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_A

	XsdGoPkgHasAttr_TextLength_TLengthType_

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Tref

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAttr_Rotate_XsdtString_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasElems_Tspan

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasAtts_PresentationAttributesColor

}

type XsdGoPkgHasElems_Tspan struct {
	Tspans []*TtspanType `xml:"http://www.w3.org/2000/svg tspan"`

}

type TtextPathType struct {
	XsdGoPkgHasElems_Tspan

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_AltGlyph

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_TextLength_TLengthType_

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasElems_Tref

	XsdGoPkgHasAttr_Spacing_TxsdTextPathTypeSpacing_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_StartOffset_XsdtString_

	XsdGoPkgHasAttr_Method_TxsdTextPathTypeMethod_

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_LengthAdjust_TxsdTextPathTypeLengthAdjust_

	XsdGoPkgHasCdata

}

type XsdGoPkgHasElems_TextPath struct {
	TextPaths []*TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`

}

type XsdGoPkgHasAttr_LengthAdjust_TxsdTextTypeLengthAdjust_ struct {
	LengthAdjust TxsdTrefTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`

}

type TtextType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAtts_PresentationAttributesFontSpecification

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasAtts_PresentationAttributesColor

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAtts_PresentationAttributesTextElements

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasAttr_TextLength_TLengthType_

	XsdGoPkgHasElems_TextPath

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Tref

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Tspan

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasAttr_LengthAdjust_TxsdTextTypeLengthAdjust_

	XsdGoPkgHasAtts_PresentationAttributesTextContentElements

	XsdGoPkgHasAtts_PresentationAttributesFillStroke

	XsdGoPkgHasElems_AltGlyph

	XsdGoPkgHasAtts_PresentationAttributesGraphics

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_X_TCoordinateType_

}

type XsdGoPkgHasElems_Text struct {
	Texts []*TtextType `xml:"http://www.w3.org/2000/svg text"`

}

type XsdGoPkgHasAttr_MaskUnits_TxsdMaskTypeMaskUnits_ struct {
	MaskUnits TxsdFilterTypePrimitiveUnits `xml:"http://www.w3.org/2000/svg maskUnits,attr"`

}

type TmaskType struct {
	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAttr_MaskUnits_TxsdMaskTypeMaskUnits_

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasAttr_Transform_TransformListType_

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_Script

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Font

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_View

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Defs

}

type XsdGoPkgHasElems_Mask struct {
	Masks []*TmaskType `xml:"http://www.w3.org/2000/svg mask"`

}

type XsdGoPkgHasAttr_PatternTransform_TransformListType_ struct {
	PatternTransform TransformListType `xml:"http://www.w3.org/2000/svg patternTransform,attr"`

}

type TpatternType struct {
	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Text

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasAttr_PatternUnits_TxsdPatternTypePatternUnits_

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_Mask

	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasAttr_PatternTransform_TransformListType_

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasElems_Font

	XsdGoPkgHasAtts_XlinkRefAttrs

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_View

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Style

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Use

}

type XsdGoPkgHasElems_Pattern struct {
	Patterns []*TpatternType `xml:"http://www.w3.org/2000/svg pattern"`

}

type XsdGoPkgHasAttr_Orient_XsdtString_ struct {
	Orient xsdt.String `xml:"http://www.w3.org/2000/svg orient,attr"`

}

type TxsdMarkerTypeMarkerUnits xsdt.String

//	Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpaceOnUse".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpaceOnUse () bool { return me == "userSpaceOnUse" }

//	Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpace".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpace () bool { return me == "userSpace" }

//	Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely returns the current string value.
func (me TxsdMarkerTypeMarkerUnits) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMarkerTypeMarkerUnits's alias type xsdt.String.
func (me TxsdMarkerTypeMarkerUnits) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "strokeWidth".
func (me TxsdMarkerTypeMarkerUnits) IsStrokeWidth () bool { return me == "strokeWidth" }

//	Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMarkerTypeMarkerUnits) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_MarkerUnits_TxsdMarkerTypeMarkerUnits_ struct {
	MarkerUnits TxsdMarkerTypeMarkerUnits `xml:"http://www.w3.org/2000/svg markerUnits,attr"`

}

type XsdGoPkgHasAttr_RefX_TCoordinateType_ struct {
	RefX TCoordinateType `xml:"http://www.w3.org/2000/svg refX,attr"`

}

type XsdGoPkgHasAttr_RefY_TCoordinateType_ struct {
	RefY TCoordinateType `xml:"http://www.w3.org/2000/svg refY,attr"`

}

type XsdGoPkgHasAttr_MarkerHeight_TLengthType_ struct {
	MarkerHeight TLengthType `xml:"http://www.w3.org/2000/svg markerHeight,attr"`

}

type TmarkerType struct {
	XsdGoPkgHasElems_G

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasAttr_MarkerWidth_TLengthType_

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_View

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasAttr_Orient_XsdtString_

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasAttr_MarkerUnits_TxsdMarkerTypeMarkerUnits_

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Line

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasAttr_RefX_TCoordinateType_

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasAttr_RefY_TCoordinateType_

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasAttr_MarkerHeight_TLengthType_

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Use

	XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasElems_Script

}

type XsdGoPkgHasElems_Marker struct {
	Markers []*TmarkerType `xml:"http://www.w3.org/2000/svg marker"`

}

type XsdGoPkgHasAttr_ContentScriptType_TContentTypeType_TextEcmascript struct {
	ContentScriptType TContentTypeType `xml:"http://www.w3.org/2000/svg contentScriptType,attr"`

}

//	Returns the default value for ContentScriptType -- "text/ecmascript"
func (me XsdGoPkgHasAttr_ContentScriptType_TContentTypeType_TextEcmascript) ContentScriptTypeDefault () TContentTypeType { return TContentTypeType("text/ecmascript") }

type XsdGoPkgHasAttr_ZoomAndPan_TxsdSvgTypeZoomAndPan_Magnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"http://www.w3.org/2000/svg zoomAndPan,attr"`

}

//	Returns the default value for ZoomAndPan -- "magnify"
func (me XsdGoPkgHasAttr_ZoomAndPan_TxsdSvgTypeZoomAndPan_Magnify) ZoomAndPanDefault () TxsdViewTypeZoomAndPan { return TxsdViewTypeZoomAndPan("magnify") }

type XsdGoPkgHasAttr_ContentStyleType_TContentTypeType_TextCss struct {
	ContentStyleType TContentTypeType `xml:"http://www.w3.org/2000/svg contentStyleType,attr"`

}

//	Returns the default value for ContentStyleType -- "text/css"
func (me XsdGoPkgHasAttr_ContentStyleType_TContentTypeType_TextCss) ContentStyleTypeDefault () TContentTypeType { return TContentTypeType("text/css") }

type TsvgType struct {
	XsdGoPkgHasAtts_DocumentEvents

	XsdGoPkgHasElems_Use

	XsdGoPkgHasElems_AltGlyphDef

	XsdGoPkgHasElems_Switch

	XsdGoPkgHasElems_ColorProfile

	XsdGoPkgHasAttr_Style_TStyleSheetType_

	XsdGoPkgHasElems_Path

	XsdGoPkgHasElems_Svg

	XsdGoPkgHasAtts_PresentationAttributesAll

	XsdGoPkgHasElems_Cursor

	XsdGoPkgHasElems_AnimateTransform

	XsdGoPkgHasAttr_Height_TLengthType_

	XsdGoPkgHasElems_Desc

	XsdGoPkgHasElems_Line

	XsdGoPkgHasElems_View

	XsdGoPkgHasAttr_Class_TClassListType_

	XsdGoPkgHasElems_A

	XsdGoPkgHasElems_Style

	XsdGoPkgHasElems_Filter

	XsdGoPkgHasAtts_LangSpaceAttrs

	XsdGoPkgHasAttr_ExternalResourcesRequired_XsdtBoolean_

	XsdGoPkgHasElems_Script

	XsdGoPkgHasElems_Marker

	XsdGoPkgHasAttr_Y_TCoordinateType_

	XsdGoPkgHasElems_FontFace

	XsdGoPkgHasElems_Polyline

	XsdGoPkgHasAtts_GraphicsElementEvents

	XsdGoPkgHasElems_Pattern

	XsdGoPkgHasAttr_Width_TLengthType_

	XsdGoPkgHasAttr_PreserveAspectRatio_TPreserveAspectRatioSpecType_XMidYMidMeet

	XsdGoPkgHasElems_AnimateMotion

	XsdGoPkgHasElems_Metadata

	XsdGoPkgHasAtts_TestAttrs

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Defs

	XsdGoPkgHasElems_RadialGradient

	XsdGoPkgHasElems_AnimateColor

	XsdGoPkgHasAttr_ContentScriptType_TContentTypeType_TextEcmascript

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_ZoomAndPan_TxsdSvgTypeZoomAndPan_Magnify

	XsdGoPkgHasElems_Set

	XsdGoPkgHasElems_Mask

	XsdGoPkgHasElems_Rect

	XsdGoPkgHasElems_Circle

	XsdGoPkgHasAttr_ViewBox_TViewBoxSpecType_

	XsdGoPkgHasElems_Animate

	XsdGoPkgHasElems_LinearGradient

	XsdGoPkgHasAttr_ContentStyleType_TContentTypeType_TextCss

	XsdGoPkgHasElems_Text

	XsdGoPkgHasElems_Font

	XsdGoPkgHasElems_Ellipse

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Polygon

	XsdGoPkgHasAttr_X_TCoordinateType_

	XsdGoPkgHasAtts_StdAttrs

	XsdGoPkgHasElems_ClipPath

	XsdGoPkgHasElems_G

}

type XsdGoPkgHasElems_Svg struct {
	Svgs []*TsvgType `xml:"http://www.w3.org/2000/svg svg"`

}

type XsdGoPkgHasElem_Svg struct {
	Svg *TsvgType `xml:"http://www.w3.org/2000/svg svg"`

}

type XsdGoPkgHasElem_G struct {
	G *TgType `xml:"http://www.w3.org/2000/svg g"`

}

type XsdGoPkgHasElem_Defs struct {
	Defs *TdefsType `xml:"http://www.w3.org/2000/svg defs"`

}

type XsdGoPkgHasElem_Symbol struct {
	Symbol *TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`

}

type XsdGoPkgHasElem_Use struct {
	Use *TuseType `xml:"http://www.w3.org/2000/svg use"`

}

type XsdGoPkgHasElem_Image struct {
	Image *TimageType `xml:"http://www.w3.org/2000/svg image"`

}

type XsdGoPkgHasElem_Switch struct {
	Switch *TswitchType `xml:"http://www.w3.org/2000/svg switch"`

}

type XsdGoPkgHasElem_Style struct {
	Style *TstyleType `xml:"http://www.w3.org/2000/svg style"`

}

type XsdGoPkgHasElem_Path struct {
	Path *TpathType `xml:"http://www.w3.org/2000/svg path"`

}

type XsdGoPkgHasElem_Rect struct {
	Rect *TrectType `xml:"http://www.w3.org/2000/svg rect"`

}

type XsdGoPkgHasElem_Circle struct {
	Circle *TcircleType `xml:"http://www.w3.org/2000/svg circle"`

}

type XsdGoPkgHasElem_Ellipse struct {
	Ellipse *TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`

}

type XsdGoPkgHasElem_Line struct {
	Line *TlineType `xml:"http://www.w3.org/2000/svg line"`

}

type XsdGoPkgHasElem_Polyline struct {
	Polyline *TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`

}

type XsdGoPkgHasElem_Polygon struct {
	Polygon *TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`

}

type XsdGoPkgHasElem_Text struct {
	Text *TtextType `xml:"http://www.w3.org/2000/svg text"`

}

type XsdGoPkgHasElem_Tspan struct {
	Tspan *TtspanType `xml:"http://www.w3.org/2000/svg tspan"`

}

type XsdGoPkgHasElem_Tref struct {
	Tref *TtrefType `xml:"http://www.w3.org/2000/svg tref"`

}

type XsdGoPkgHasElem_TextPath struct {
	TextPath *TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`

}

type XsdGoPkgHasElem_AltGlyph struct {
	AltGlyph *TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`

}

type XsdGoPkgHasElem_AltGlyphDef struct {
	AltGlyphDef *TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`

}

type XsdGoPkgHasElem_AltGlyphItem struct {
	AltGlyphItem *TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`

}

type XsdGoPkgHasElem_GlyphRef struct {
	GlyphRef *TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`

}

type XsdGoPkgHasElem_Marker struct {
	Marker *TmarkerType `xml:"http://www.w3.org/2000/svg marker"`

}

type XsdGoPkgHasElem_ColorProfile struct {
	ColorProfile *TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`

}

type XsdGoPkgHasElem_LinearGradient struct {
	LinearGradient *TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`

}

type XsdGoPkgHasElem_RadialGradient struct {
	RadialGradient *TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`

}

type XsdGoPkgHasElem_Stop struct {
	Stop *TstopType `xml:"http://www.w3.org/2000/svg stop"`

}

type XsdGoPkgHasElem_Pattern struct {
	Pattern *TpatternType `xml:"http://www.w3.org/2000/svg pattern"`

}

type XsdGoPkgHasElem_ClipPath struct {
	ClipPath *TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`

}

type XsdGoPkgHasElem_Mask struct {
	Mask *TmaskType `xml:"http://www.w3.org/2000/svg mask"`

}

type XsdGoPkgHasElem_Filter struct {
	Filter *TfilterType `xml:"http://www.w3.org/2000/svg filter"`

}

type XsdGoPkgHasElems_FeDistantLight struct {
	FeDistantLights []*TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`

}

type XsdGoPkgHasElems_FePointLight struct {
	FePointLights []*TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`

}

type XsdGoPkgHasElems_FeSpotLight struct {
	FeSpotLights []*TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`

}

type XsdGoPkgHasElem_FeBlend struct {
	FeBlend *TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`

}

type XsdGoPkgHasElem_FeColorMatrix struct {
	FeColorMatrix *TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`

}

type XsdGoPkgHasElem_FeComponentTransfer struct {
	FeComponentTransfer *TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`

}

type XsdGoPkgHasElems_FeFuncR struct {
	FeFuncRs []*TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`

}

type XsdGoPkgHasElems_FeFuncG struct {
	FeFuncGs []*TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`

}

type XsdGoPkgHasElems_FeFuncB struct {
	FeFuncBs []*TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`

}

type XsdGoPkgHasElems_FeFuncA struct {
	FeFuncAs []*TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`

}

type XsdGoPkgHasElem_FeComposite struct {
	FeComposite *TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`

}

type XsdGoPkgHasElem_FeConvolveMatrix struct {
	FeConvolveMatrix *TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`

}

type XsdGoPkgHasElem_FeDiffuseLighting struct {
	FeDiffuseLighting *TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`

}

type XsdGoPkgHasElem_FeDisplacementMap struct {
	FeDisplacementMap *TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`

}

type XsdGoPkgHasElem_FeFlood struct {
	FeFlood *TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`

}

type XsdGoPkgHasElem_FeGaussianBlur struct {
	FeGaussianBlur *TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`

}

type XsdGoPkgHasElem_FeImage struct {
	FeImage *TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`

}

type XsdGoPkgHasElem_FeMerge struct {
	FeMerge *TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`

}

type XsdGoPkgHasElem_FeMergeNode struct {
	FeMergeNode *TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`

}

type XsdGoPkgHasElem_FeMorphology struct {
	FeMorphology *TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`

}

type XsdGoPkgHasElem_FeOffset struct {
	FeOffset *TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`

}

type XsdGoPkgHasElem_FeSpecularLighting struct {
	FeSpecularLighting *TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`

}

type XsdGoPkgHasElem_FeTile struct {
	FeTile *TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`

}

type XsdGoPkgHasElem_FeTurbulence struct {
	FeTurbulence *TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`

}

type XsdGoPkgHasElem_Cursor struct {
	Cursor *TcursorType `xml:"http://www.w3.org/2000/svg cursor"`

}

type XsdGoPkgHasElem_A struct {
	A *TaType `xml:"http://www.w3.org/2000/svg a"`

}

type XsdGoPkgHasElem_View struct {
	View *TviewType `xml:"http://www.w3.org/2000/svg view"`

}

type XsdGoPkgHasElem_Script struct {
	Script *TscriptType `xml:"http://www.w3.org/2000/svg script"`

}

type XsdGoPkgHasElem_Animate struct {
	Animate *TanimateType `xml:"http://www.w3.org/2000/svg animate"`

}

type XsdGoPkgHasElem_Set struct {
	Set *TsetType `xml:"http://www.w3.org/2000/svg set"`

}

type XsdGoPkgHasElem_AnimateMotion struct {
	AnimateMotion *TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`

}

type XsdGoPkgHasElems_Mpath struct {
	Mpaths []*TmpathType `xml:"http://www.w3.org/2000/svg mpath"`

}

type XsdGoPkgHasElem_AnimateColor struct {
	AnimateColor *TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`

}

type XsdGoPkgHasElem_AnimateTransform struct {
	AnimateTransform *TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`

}

type XsdGoPkgHasElem_Font struct {
	Font *TfontType `xml:"http://www.w3.org/2000/svg font"`

}

type XsdGoPkgHasElem_Glyph struct {
	Glyph *TglyphType `xml:"http://www.w3.org/2000/svg glyph"`

}

type XsdGoPkgHasElems_MissingGlyph struct {
	MissingGlyphs []*TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`

}

type XsdGoPkgHasElem_Hkern struct {
	Hkern *ThkernType `xml:"http://www.w3.org/2000/svg hkern"`

}

type XsdGoPkgHasElem_Vkern struct {
	Vkern *TvkernType `xml:"http://www.w3.org/2000/svg vkern"`

}

type XsdGoPkgHasElems_FontFaceSrc struct {
	FontFaceSrcs []*TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`

}

type XsdGoPkgHasElem_FontFaceUri struct {
	FontFaceUri *TfontFaceUriType `xml:"http://www.w3.org/2000/svg font-face-uri"`

}

type XsdGoPkgHasElems_FontFaceFormat struct {
	FontFaceFormats []*TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`

}

type XsdGoPkgHasElem_FontFaceName struct {
	FontFaceName *TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`

}

type XsdGoPkgHasElems_DefinitionSrc struct {
	DefinitionSrcs []*TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`

}

type XsdGoPkgHasElem_ForeignObject struct {
	ForeignObject *TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`

}
