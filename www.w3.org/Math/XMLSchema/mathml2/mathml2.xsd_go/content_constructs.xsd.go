//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/content/constructs.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This is an XML Schema module for the basic constructs of content MathML.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAtts_ApplyAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type TxsdIntervalAttlistClosure xsdt.String

//	Since TxsdIntervalAttlistClosure is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIntervalAttlistClosure) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdIntervalAttlistClosure is just a simple String type, this merely returns the current string value.
func (me TxsdIntervalAttlistClosure) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdIntervalAttlistClosure's alias type xsdt.String
func (me TxsdIntervalAttlistClosure) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "closed".
func (me TxsdIntervalAttlistClosure) IsClosed () bool { return me == "closed" }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "open".
func (me TxsdIntervalAttlistClosure) IsOpen () bool { return me == "open" }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "open-closed".
func (me TxsdIntervalAttlistClosure) IsOpenClosed () bool { return me == "open-closed" }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "closed-open".
func (me TxsdIntervalAttlistClosure) IsClosedOpen () bool { return me == "closed-open" }

type XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed struct {
	Closure TxsdIntervalAttlistClosure `xml:"http://www.w3.org/1998/Math/MathML closure,attr"`
}

//	Returns the Default value for Closure -- "closed"
func (me *XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed) ClosureDefault () TxsdIntervalAttlistClosure { return TxsdIntervalAttlistClosure("closed") }

type XsdGoPkgHasAtts_IntervalAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed
}

type XsdGoPkgHasAtts_InverseAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_ConditionAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

}

type XsdGoPkgHasAttr_Scope_XsdtString_ struct {
	Scope xsdt.String `xml:"http://www.w3.org/1998/Math/MathML scope,attr"`
}

type XsdGoPkgHasAttr_Nargs_XsdtNonNegativeInteger_ struct {
	Nargs xsdt.NonNegativeInteger `xml:"http://www.w3.org/1998/Math/MathML nargs,attr"`
}

type TxsdDeclareAttlistOccurrence xsdt.String

//	Since TxsdDeclareAttlistOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDeclareAttlistOccurrence) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdDeclareAttlistOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdDeclareAttlistOccurrence) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdDeclareAttlistOccurrence's alias type xsdt.String
func (me TxsdDeclareAttlistOccurrence) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "prefix".
func (me TxsdDeclareAttlistOccurrence) IsPrefix () bool { return me == "prefix" }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "infix".
func (me TxsdDeclareAttlistOccurrence) IsInfix () bool { return me == "infix" }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "function-model".
func (me TxsdDeclareAttlistOccurrence) IsFunctionModel () bool { return me == "function-model" }

type XsdGoPkgHasAttr_Occurrence_TxsdDeclareAttlistOccurrence_ struct {
	Occurrence TxsdDeclareAttlistOccurrence `xml:"http://www.w3.org/1998/Math/MathML occurrence,attr"`
}

type XsdGoPkgHasAtts_DeclareAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAttr_Scope_XsdtString_
	XsdGoPkgHasAttr_Nargs_XsdtNonNegativeInteger_
	XsdGoPkgHasAttr_Occurrence_TxsdDeclareAttlistOccurrence_
}

type XsdGoPkgHasAtts_LambdaAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_PiecewiseAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_BvarAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_DegreeAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type TapplyType struct {
	XsdGoPkgHasGroup_ApplyContent

	XsdGoPkgHasAtts_ApplyAttlist

}

type TintervalType struct {
	XsdGoPkgHasGroup_ContentExprClass

	XsdGoPkgHasAtts_IntervalAttlist

}

type TinverseType struct {
	XsdGoPkgHasAtts_InverseAttlist

}

type TconditionType struct {
	XsdGoPkgHasGroup_ConditionContent

	XsdGoPkgHasAtts_ConditionAttlist

}

type TdeclareType struct {
	XsdGoPkgHasGroup_DeclareContent

	XsdGoPkgHasAtts_DeclareAttlist

}

type TlambdaType struct {
	XsdGoPkgHasGroup_LambdaContent

	XsdGoPkgHasAtts_LambdaAttlist

}

type TotherwiseType struct {
	XsdGoPkgHasGroup_OtherwiseContent

	XsdGoPkgHasAtts_CommonAttrib

}

type TpieceType struct {
	XsdGoPkgHasGroup_PieceContent

}

type TpiecewiseType struct {
	XsdGoPkgHasGroup_PiecewiseContent

	XsdGoPkgHasAtts_PiecewiseAttlist

}

type TbvarType struct {
	XsdGoPkgHasGroup_BvarContent

	XsdGoPkgHasAtts_BvarAttlist

}

type TdegreeType struct {
	XsdGoPkgHasGroup_DegreeContent

	XsdGoPkgHasAtts_DegreeAttlist

}

type XsdGoPkgHasElem_Apply struct {
	Apply *TapplyType `xml:"http://www.w3.org/1998/Math/MathML apply"`
}

type XsdGoPkgHasElems_Apply struct {
	Applies []*TapplyType `xml:"http://www.w3.org/1998/Math/MathML apply"`
}

type XsdGoPkgHasElems_Interval struct {
	Intervals []*TintervalType `xml:"http://www.w3.org/1998/Math/MathML interval"`
}

type XsdGoPkgHasElem_Interval struct {
	Interval *TintervalType `xml:"http://www.w3.org/1998/Math/MathML interval"`
}

type XsdGoPkgHasElems_Inverse struct {
	Inverses []*TinverseType `xml:"http://www.w3.org/1998/Math/MathML inverse"`
}

type XsdGoPkgHasElem_Inverse struct {
	Inverse *TinverseType `xml:"http://www.w3.org/1998/Math/MathML inverse"`
}

type XsdGoPkgHasElem_Condition struct {
	Condition *TconditionType `xml:"http://www.w3.org/1998/Math/MathML condition"`
}

type XsdGoPkgHasElems_Condition struct {
	Conditions []*TconditionType `xml:"http://www.w3.org/1998/Math/MathML condition"`
}

type XsdGoPkgHasElems_Declare struct {
	Declares []*TdeclareType `xml:"http://www.w3.org/1998/Math/MathML declare"`
}

type XsdGoPkgHasElem_Declare struct {
	Declare *TdeclareType `xml:"http://www.w3.org/1998/Math/MathML declare"`
}

type XsdGoPkgHasElem_Lambda struct {
	Lambda *TlambdaType `xml:"http://www.w3.org/1998/Math/MathML lambda"`
}

type XsdGoPkgHasElems_Lambda struct {
	Lambdas []*TlambdaType `xml:"http://www.w3.org/1998/Math/MathML lambda"`
}

type XsdGoPkgHasElem_Otherwise struct {
	Otherwise *TotherwiseType `xml:"http://www.w3.org/1998/Math/MathML otherwise"`
}

type XsdGoPkgHasElems_Otherwise struct {
	Otherwises []*TotherwiseType `xml:"http://www.w3.org/1998/Math/MathML otherwise"`
}

type XsdGoPkgHasElems_Piece struct {
	Pieces []*TpieceType `xml:"http://www.w3.org/1998/Math/MathML piece"`
}

type XsdGoPkgHasElem_Piece struct {
	Piece *TpieceType `xml:"http://www.w3.org/1998/Math/MathML piece"`
}

type XsdGoPkgHasElems_Piecewise struct {
	Piecewises []*TpiecewiseType `xml:"http://www.w3.org/1998/Math/MathML piecewise"`
}

type XsdGoPkgHasElem_Piecewise struct {
	Piecewise *TpiecewiseType `xml:"http://www.w3.org/1998/Math/MathML piecewise"`
}

type XsdGoPkgHasElems_Bvar struct {
	Bvars []*TbvarType `xml:"http://www.w3.org/1998/Math/MathML bvar"`
}

type XsdGoPkgHasElem_Bvar struct {
	Bvar *TbvarType `xml:"http://www.w3.org/1998/Math/MathML bvar"`
}

type XsdGoPkgHasElems_Degree struct {
	Degrees []*TdegreeType `xml:"http://www.w3.org/1998/Math/MathML degree"`
}

type XsdGoPkgHasElem_Degree struct {
	Degree *TdegreeType `xml:"http://www.w3.org/1998/Math/MathML degree"`
}

type XsdGoPkgHasGroup_ApplyContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_ConditionContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_DeclareContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_LambdaContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_OtherwiseContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_PieceContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_PiecewiseContent struct {
	XsdGoPkgHasElems_Piece

	XsdGoPkgHasElem_Otherwise

}

type XsdGoPkgHasGroup_BvarContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_DegreeContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

type XsdGoPkgHasGroup_ContentConstructsClass struct {
	XsdGoPkgHasElem_Apply

	XsdGoPkgHasElem_Interval

	XsdGoPkgHasElem_Inverse

	XsdGoPkgHasElem_Condition

	XsdGoPkgHasElem_Declare

	XsdGoPkgHasElem_Lambda

	XsdGoPkgHasElem_Piecewise

	XsdGoPkgHasElem_Bvar

	XsdGoPkgHasElem_Degree

}
