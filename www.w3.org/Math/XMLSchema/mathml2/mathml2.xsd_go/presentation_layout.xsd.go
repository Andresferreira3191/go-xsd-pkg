//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/presentation/layout.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This is the XML schema module for the layout elements of the
//	presentation part of MathML.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TmpaddedSpace xsdt.String

//	Since TmpaddedSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TmpaddedSpace) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TmpaddedSpace is just a simple String type, this merely returns the current string value.
func (me TmpaddedSpace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TmpaddedSpace's alias type xsdt.String
func (me TmpaddedSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TmpaddedWidthSpace xsdt.String

//	Since TmpaddedWidthSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TmpaddedWidthSpace) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TmpaddedWidthSpace is just a simple String type, this merely returns the current string value.
func (me TmpaddedWidthSpace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TmpaddedWidthSpace's alias type xsdt.String
func (me TmpaddedWidthSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAtts_MrowAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Bevelled_XsdtBoolean_ struct {
	Bevelled xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML bevelled,attr"`
}

type XsdGoPkgHasAttr_Denomalign_Tcentering_Center struct {
	Denomalign Tcentering `xml:"http://www.w3.org/1998/Math/MathML denomalign,attr"`
}

//	Returns the Default value for Denomalign -- "center"
func (me *XsdGoPkgHasAttr_Denomalign_Tcentering_Center) DenomalignDefault () Tcentering { return Tcentering("center") }

type XsdGoPkgHasAttr_Numalign_Tcentering_Center struct {
	Numalign Tcentering `xml:"http://www.w3.org/1998/Math/MathML numalign,attr"`
}

//	Returns the Default value for Numalign -- "center"
func (me *XsdGoPkgHasAttr_Numalign_Tcentering_Center) NumalignDefault () Tcentering { return Tcentering("center") }

type TxsdMfracAttlistLinethickness xsdt.String

//	Since TxsdMfracAttlistLinethickness is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMfracAttlistLinethickness) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdMfracAttlistLinethickness is just a simple String type, this merely returns the current string value.
func (me TxsdMfracAttlistLinethickness) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMfracAttlistLinethickness's alias type xsdt.String
func (me TxsdMfracAttlistLinethickness) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdMfracAttlistLinethickness is an XSD union type of several types. This is a simple type conversion to TlengthWithOptionalUnit, but keep in mind the actual value may or may not be a valid TlengthWithOptionalUnit value.
func (me TxsdMfracAttlistLinethickness) ToTlengthWithOptionalUnit () TlengthWithOptionalUnit { return TlengthWithOptionalUnit(me) }

//	TxsdMfracAttlistLinethickness is an XSD union type of several types. This is a simple type conversion to Tthickness, but keep in mind the actual value may or may not be a valid Tthickness value.
func (me TxsdMfracAttlistLinethickness) ToTthickness () Tthickness { return Tthickness(me) }

type XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1 struct {
	Linethickness TxsdMfracAttlistLinethickness `xml:"http://www.w3.org/1998/Math/MathML linethickness,attr"`
}

//	Returns the Default value for Linethickness -- "1"
func (me *XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1) LinethicknessDefault () TxsdMfracAttlistLinethickness { return TxsdMfracAttlistLinethickness("1") }

type XsdGoPkgHasAtts_MfracAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Bevelled_XsdtBoolean_
	XsdGoPkgHasAttr_Denomalign_Tcentering_Center
	XsdGoPkgHasAttr_Numalign_Tcentering_Center
	XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1
}

type XsdGoPkgHasAtts_MsqrtAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_MrootAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Width_TmpaddedWidthSpace_ struct {
	Width TmpaddedWidthSpace `xml:"http://www.w3.org/1998/Math/MathML width,attr"`
}

type XsdGoPkgHasAttr_Lspace_TmpaddedSpace_ struct {
	Lspace TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML lspace,attr"`
}

type XsdGoPkgHasAttr_Height_TmpaddedSpace_ struct {
	Height TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML height,attr"`
}

type XsdGoPkgHasAttr_Depth_TmpaddedSpace_ struct {
	Depth TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML depth,attr"`
}

type XsdGoPkgHasAtts_MpaddedAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Width_TmpaddedWidthSpace_
	XsdGoPkgHasAttr_Lspace_TmpaddedSpace_
	XsdGoPkgHasAttr_Height_TmpaddedSpace_
	XsdGoPkgHasAttr_Depth_TmpaddedSpace_
}

type XsdGoPkgHasAtts_MphantomAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Open_XsdtString_ struct {
	Open xsdt.String `xml:"http://www.w3.org/1998/Math/MathML open,attr"`
}

//	Returns the Default value for Open -- "("
func (me *XsdGoPkgHasAttr_Open_XsdtString_) OpenDefault () xsdt.String { return xsdt.String("(") }

type XsdGoPkgHasAttr_Close_XsdtString_ struct {
	Close xsdt.String `xml:"http://www.w3.org/1998/Math/MathML close,attr"`
}

//	Returns the Default value for Close -- ")"
func (me *XsdGoPkgHasAttr_Close_XsdtString_) CloseDefault () xsdt.String { return xsdt.String(")") }

type XsdGoPkgHasAttr_Separators_XsdtString_ struct {
	Separators xsdt.String `xml:"http://www.w3.org/1998/Math/MathML separators,attr"`
}

//	Returns the Default value for Separators -- ","
func (me *XsdGoPkgHasAttr_Separators_XsdtString_) SeparatorsDefault () xsdt.String { return xsdt.String(",") }

type XsdGoPkgHasAtts_MfencedAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Open_XsdtString_
	XsdGoPkgHasAttr_Close_XsdtString_
	XsdGoPkgHasAttr_Separators_XsdtString_
}

type TxsdMencloseAttlistNotation xsdt.String

//	Since TxsdMencloseAttlistNotation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMencloseAttlistNotation) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdMencloseAttlistNotation is just a simple String type, this merely returns the current string value.
func (me TxsdMencloseAttlistNotation) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMencloseAttlistNotation's alias type xsdt.String
func (me TxsdMencloseAttlistNotation) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "actuarial".
func (me TxsdMencloseAttlistNotation) IsActuarial () bool { return me == "actuarial" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "longdiv".
func (me TxsdMencloseAttlistNotation) IsLongdiv () bool { return me == "longdiv" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "radical".
func (me TxsdMencloseAttlistNotation) IsRadical () bool { return me == "radical" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "box".
func (me TxsdMencloseAttlistNotation) IsBox () bool { return me == "box" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "roundedbox".
func (me TxsdMencloseAttlistNotation) IsRoundedbox () bool { return me == "roundedbox" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "circle".
func (me TxsdMencloseAttlistNotation) IsCircle () bool { return me == "circle" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "left".
func (me TxsdMencloseAttlistNotation) IsLeft () bool { return me == "left" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "right".
func (me TxsdMencloseAttlistNotation) IsRight () bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "top".
func (me TxsdMencloseAttlistNotation) IsTop () bool { return me == "top" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "bottom".
func (me TxsdMencloseAttlistNotation) IsBottom () bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "updiagonalstrike".
func (me TxsdMencloseAttlistNotation) IsUpdiagonalstrike () bool { return me == "updiagonalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "downdiagonalstrike".
func (me TxsdMencloseAttlistNotation) IsDowndiagonalstrike () bool { return me == "downdiagonalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "verticalstrike".
func (me TxsdMencloseAttlistNotation) IsVerticalstrike () bool { return me == "verticalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "horizontalstrike".
func (me TxsdMencloseAttlistNotation) IsHorizontalstrike () bool { return me == "horizontalstrike" }

type XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv struct {
	Notation TxsdMencloseAttlistNotation `xml:"http://www.w3.org/1998/Math/MathML notation,attr"`
}

//	Returns the Default value for Notation -- "longdiv"
func (me *XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv) NotationDefault () TxsdMencloseAttlistNotation { return TxsdMencloseAttlistNotation("longdiv") }

type XsdGoPkgHasAtts_MencloseAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv
}

type TmrowType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MrowAttlist

}

type TmfracType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MfracAttlist

}

type TmsqrtType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MsqrtAttlist

}

type TmrootType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MrootAttlist

}

type TmpaddedType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MpaddedAttlist

}

type TmphantomType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MphantomAttlist

}

type TmfencedType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MfencedAttlist

}

type TmencloseType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MencloseAttlist

}

type XsdGoPkgHasElems_Mrow struct {
	Mrows []*TmrowType `xml:"http://www.w3.org/1998/Math/MathML mrow"`
}

type XsdGoPkgHasElem_Mrow struct {
	Mrow *TmrowType `xml:"http://www.w3.org/1998/Math/MathML mrow"`
}

type XsdGoPkgHasElem_Mfrac struct {
	Mfrac *TmfracType `xml:"http://www.w3.org/1998/Math/MathML mfrac"`
}

type XsdGoPkgHasElems_Mfrac struct {
	Mfracs []*TmfracType `xml:"http://www.w3.org/1998/Math/MathML mfrac"`
}

type XsdGoPkgHasElems_Msqrt struct {
	Msqrts []*TmsqrtType `xml:"http://www.w3.org/1998/Math/MathML msqrt"`
}

type XsdGoPkgHasElem_Msqrt struct {
	Msqrt *TmsqrtType `xml:"http://www.w3.org/1998/Math/MathML msqrt"`
}

type XsdGoPkgHasElem_Mroot struct {
	Mroot *TmrootType `xml:"http://www.w3.org/1998/Math/MathML mroot"`
}

type XsdGoPkgHasElems_Mroot struct {
	Mroots []*TmrootType `xml:"http://www.w3.org/1998/Math/MathML mroot"`
}

type XsdGoPkgHasElem_Mpadded struct {
	Mpadded *TmpaddedType `xml:"http://www.w3.org/1998/Math/MathML mpadded"`
}

type XsdGoPkgHasElems_Mpadded struct {
	Mpaddeds []*TmpaddedType `xml:"http://www.w3.org/1998/Math/MathML mpadded"`
}

type XsdGoPkgHasElems_Mphantom struct {
	Mphantoms []*TmphantomType `xml:"http://www.w3.org/1998/Math/MathML mphantom"`
}

type XsdGoPkgHasElem_Mphantom struct {
	Mphantom *TmphantomType `xml:"http://www.w3.org/1998/Math/MathML mphantom"`
}

type XsdGoPkgHasElems_Mfenced struct {
	Mfenceds []*TmfencedType `xml:"http://www.w3.org/1998/Math/MathML mfenced"`
}

type XsdGoPkgHasElem_Mfenced struct {
	Mfenced *TmfencedType `xml:"http://www.w3.org/1998/Math/MathML mfenced"`
}

type XsdGoPkgHasElem_Menclose struct {
	Menclose *TmencloseType `xml:"http://www.w3.org/1998/Math/MathML menclose"`
}

type XsdGoPkgHasElems_Menclose struct {
	Mencloses []*TmencloseType `xml:"http://www.w3.org/1998/Math/MathML menclose"`
}

type XsdGoPkgHasGroup_PresentationLayoutClass struct {
	XsdGoPkgHasElem_Mrow

	XsdGoPkgHasElem_Mfrac

	XsdGoPkgHasElem_Msqrt

	XsdGoPkgHasElem_Mroot

	XsdGoPkgHasElem_Mpadded

	XsdGoPkgHasElem_Mphantom

	XsdGoPkgHasElem_Mfenced

	XsdGoPkgHasElem_Menclose

}
