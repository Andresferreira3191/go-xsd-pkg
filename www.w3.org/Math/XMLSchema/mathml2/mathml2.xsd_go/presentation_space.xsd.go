//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/presentation/space.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This is the XML Schema module for the MathML "mspace" element.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TxsdMspaceAttlistWidth xsdt.String

//	Since TxsdMspaceAttlistWidth is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMspaceAttlistWidth) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdMspaceAttlistWidth is just a simple String type, this merely returns the current string value.
func (me TxsdMspaceAttlistWidth) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMspaceAttlistWidth's alias type xsdt.String
func (me TxsdMspaceAttlistWidth) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdMspaceAttlistWidth is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdMspaceAttlistWidth) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdMspaceAttlistWidth is an XSD union type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdMspaceAttlistWidth) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

type XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em struct {
	Width TxsdMspaceAttlistWidth `xml:"http://www.w3.org/1998/Math/MathML width,attr"`
}

//	Returns the Default value for Width -- "0em"
func (me *XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em) WidthDefault () TxsdMspaceAttlistWidth { return TxsdMspaceAttlistWidth("0em") }

type XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex struct {
	Height TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML height,attr"`
}

//	Returns the Default value for Height -- "0ex"
func (me *XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex) HeightDefault () TlengthWithUnit { return TlengthWithUnit("0ex") }

type XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex struct {
	Depth TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML depth,attr"`
}

//	Returns the Default value for Depth -- "0ex"
func (me *XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex) DepthDefault () TlengthWithUnit { return TlengthWithUnit("0ex") }

type TxsdMspaceAttlistLinebreak xsdt.String

//	Since TxsdMspaceAttlistLinebreak is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMspaceAttlistLinebreak) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdMspaceAttlistLinebreak is just a simple String type, this merely returns the current string value.
func (me TxsdMspaceAttlistLinebreak) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMspaceAttlistLinebreak's alias type xsdt.String
func (me TxsdMspaceAttlistLinebreak) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "auto".
func (me TxsdMspaceAttlistLinebreak) IsAuto () bool { return me == "auto" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "newline".
func (me TxsdMspaceAttlistLinebreak) IsNewline () bool { return me == "newline" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "indentingnewline".
func (me TxsdMspaceAttlistLinebreak) IsIndentingnewline () bool { return me == "indentingnewline" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "nobreak".
func (me TxsdMspaceAttlistLinebreak) IsNobreak () bool { return me == "nobreak" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "goodbreak".
func (me TxsdMspaceAttlistLinebreak) IsGoodbreak () bool { return me == "goodbreak" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "badbreak".
func (me TxsdMspaceAttlistLinebreak) IsBadbreak () bool { return me == "badbreak" }

type XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto struct {
	Linebreak TxsdMspaceAttlistLinebreak `xml:"http://www.w3.org/1998/Math/MathML linebreak,attr"`
}

//	Returns the Default value for Linebreak -- "auto"
func (me *XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto) LinebreakDefault () TxsdMspaceAttlistLinebreak { return TxsdMspaceAttlistLinebreak("auto") }

type XsdGoPkgHasAtts_MspaceAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em
	XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex
	XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex
	XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto
}

type TmspaceType struct {
	XsdGoPkgHasAtts_MspaceAttlist

}

type XsdGoPkgHasElems_Mspace struct {
	Mspaces []*TmspaceType `xml:"http://www.w3.org/1998/Math/MathML mspace"`
}

type XsdGoPkgHasElem_Mspace struct {
	Mspace *TmspaceType `xml:"http://www.w3.org/1998/Math/MathML mspace"`
}
