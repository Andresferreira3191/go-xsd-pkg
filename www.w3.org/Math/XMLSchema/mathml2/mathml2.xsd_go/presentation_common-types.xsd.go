//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/presentation/common-types.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This is an XML Schema module containing some type definitions for MathML.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TsimpleSize xsdt.String

//	Since TsimpleSize is just a simple String type, this merely sets the current value from the specified string.
func (me *TsimpleSize) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TsimpleSize is just a simple String type, this merely returns the current string value.
func (me TsimpleSize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TsimpleSize's alias type xsdt.String
func (me TsimpleSize) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TsimpleSize is "small".
func (me TsimpleSize) IsSmall () bool { return me == "small" }

//	Returns true if the value of this enumerated TsimpleSize is "normal".
func (me TsimpleSize) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TsimpleSize is "big".
func (me TsimpleSize) IsBig () bool { return me == "big" }

type Tcentering xsdt.String

//	Since Tcentering is just a simple String type, this merely sets the current value from the specified string.
func (me *Tcentering) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since Tcentering is just a simple String type, this merely returns the current string value.
func (me Tcentering) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to Tcentering's alias type xsdt.String
func (me Tcentering) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated Tcentering is "left".
func (me Tcentering) IsLeft () bool { return me == "left" }

//	Returns true if the value of this enumerated Tcentering is "center".
func (me Tcentering) IsCenter () bool { return me == "center" }

//	Returns true if the value of this enumerated Tcentering is "right".
func (me Tcentering) IsRight () bool { return me == "right" }

type TnamedSpace xsdt.String

//	Since TnamedSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TnamedSpace) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TnamedSpace is just a simple String type, this merely returns the current string value.
func (me TnamedSpace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TnamedSpace's alias type xsdt.String
func (me TnamedSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TnamedSpace is "veryverythinmathspace".
func (me TnamedSpace) IsVeryverythinmathspace () bool { return me == "veryverythinmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "verythinmathspace".
func (me TnamedSpace) IsVerythinmathspace () bool { return me == "verythinmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "thinmathspace".
func (me TnamedSpace) IsThinmathspace () bool { return me == "thinmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "mediummathspace".
func (me TnamedSpace) IsMediummathspace () bool { return me == "mediummathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "thickmathspace".
func (me TnamedSpace) IsThickmathspace () bool { return me == "thickmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "verythickmathspace".
func (me TnamedSpace) IsVerythickmathspace () bool { return me == "verythickmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "veryverythickmathspace".
func (me TnamedSpace) IsVeryverythickmathspace () bool { return me == "veryverythickmathspace" }

type Tthickness xsdt.String

//	Since Tthickness is just a simple String type, this merely sets the current value from the specified string.
func (me *Tthickness) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since Tthickness is just a simple String type, this merely returns the current string value.
func (me Tthickness) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to Tthickness's alias type xsdt.String
func (me Tthickness) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated Tthickness is "thin".
func (me Tthickness) IsThin () bool { return me == "thin" }

//	Returns true if the value of this enumerated Tthickness is "medium".
func (me Tthickness) IsMedium () bool { return me == "medium" }

//	Returns true if the value of this enumerated Tthickness is "thick".
func (me Tthickness) IsThick () bool { return me == "thick" }

type TlengthWithUnit xsdt.String

//	Since TlengthWithUnit is just a simple String type, this merely sets the current value from the specified string.
func (me *TlengthWithUnit) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TlengthWithUnit is just a simple String type, this merely returns the current string value.
func (me TlengthWithUnit) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TlengthWithUnit's alias type xsdt.String
func (me TlengthWithUnit) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TlengthWithOptionalUnit xsdt.String

//	Since TlengthWithOptionalUnit is just a simple String type, this merely sets the current value from the specified string.
func (me *TlengthWithOptionalUnit) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TlengthWithOptionalUnit is just a simple String type, this merely returns the current string value.
func (me TlengthWithOptionalUnit) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TlengthWithOptionalUnit's alias type xsdt.String
func (me TlengthWithOptionalUnit) ToXsdtString () xsdt.String { return xsdt.String(me) }

type Tinfinity xsdt.String

//	Since Tinfinity is just a simple String type, this merely sets the current value from the specified string.
func (me *Tinfinity) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since Tinfinity is just a simple String type, this merely returns the current string value.
func (me Tinfinity) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to Tinfinity's alias type xsdt.String
func (me Tinfinity) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated Tinfinity is "infinity".
func (me Tinfinity) IsInfinity () bool { return me == "infinity" }

type TrgbColor xsdt.String

//	Since TrgbColor is just a simple String type, this merely sets the current value from the specified string.
func (me *TrgbColor) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TrgbColor is just a simple String type, this merely returns the current string value.
func (me TrgbColor) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TrgbColor's alias type xsdt.String
func (me TrgbColor) ToXsdtString () xsdt.String { return xsdt.String(me) }
