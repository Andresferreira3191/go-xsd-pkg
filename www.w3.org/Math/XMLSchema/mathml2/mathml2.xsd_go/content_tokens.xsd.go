//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/content/tokens.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This is the XML schema module for the token elements of the
//	content part of MathML.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TxsdCnAttlistBase xsdt.PositiveInteger

//	Since TxsdCnAttlistBase is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdCnAttlistBase) SetFromString (s string) { (*xsdt.PositiveInteger)(me).SetFromString(s) }

//	Returns a string representation of this TxsdCnAttlistBase's current non-string scalar value.
func (me TxsdCnAttlistBase) String () string { return xsdt.PositiveInteger(me).String() }

//	This convenience method just performs a simple type conversion to TxsdCnAttlistBase's alias type xsdt.PositiveInteger
func (me TxsdCnAttlistBase) ToXsdtPositiveInteger () xsdt.PositiveInteger { return xsdt.PositiveInteger(me) }

type XsdGoPkgHasAttr_Base_TxsdCnAttlistBase_ struct {
	Base TxsdCnAttlistBase `xml:"http://www.w3.org/1998/Math/MathML base,attr"`
}

type TxsdCnAttlistType xsdt.Nmtoken

//	Since TxsdCnAttlistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCnAttlistType) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdCnAttlistType is just a simple String type, this merely returns the current string value.
func (me TxsdCnAttlistType) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdCnAttlistType's alias type xsdt.Nmtoken
func (me TxsdCnAttlistType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "e-notation".
func (me TxsdCnAttlistType) IsENotation () bool { return me == "e-notation" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "integer".
func (me TxsdCnAttlistType) IsInteger () bool { return me == "integer" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "rational".
func (me TxsdCnAttlistType) IsRational () bool { return me == "rational" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "real".
func (me TxsdCnAttlistType) IsReal () bool { return me == "real" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "complex-cartesian".
func (me TxsdCnAttlistType) IsComplexCartesian () bool { return me == "complex-cartesian" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "complex-polar".
func (me TxsdCnAttlistType) IsComplexPolar () bool { return me == "complex-polar" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "constant".
func (me TxsdCnAttlistType) IsConstant () bool { return me == "constant" }

type XsdGoPkgHasAttr_Type_TxsdCnAttlistType_ struct {
	Type TxsdCnAttlistType `xml:"http://www.w3.org/1998/Math/MathML type,attr"`
}

type XsdGoPkgHasAtts_CnAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Base_TxsdCnAttlistBase_
	XsdGoPkgHasAttr_Type_TxsdCnAttlistType_
}

type XsdGoPkgHasAtts_CiAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_CsymbolAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

type TsepType struct {
}

type TcnType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_CnContent

	XsdGoPkgHasAtts_CnAttlist

}

type TciType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_ContentTokenContent

	XsdGoPkgHasAtts_CiAttlist

}

type TcsymbolType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_ContentTokenContent

	XsdGoPkgHasAtts_CsymbolAttlist

}

type XsdGoPkgHasElems_Sep struct {
	Seps []*TsepType `xml:"http://www.w3.org/1998/Math/MathML sep"`

}

type XsdGoPkgHasElem_Sep struct {
	Sep *TsepType `xml:"http://www.w3.org/1998/Math/MathML sep"`

}

type XsdGoPkgHasElems_Cn struct {
	Cns []*TcnType `xml:"http://www.w3.org/1998/Math/MathML cn"`

}

type XsdGoPkgHasElem_Cn struct {
	Cn *TcnType `xml:"http://www.w3.org/1998/Math/MathML cn"`

}

type XsdGoPkgHasElems_Ci struct {
	Cis []*TciType `xml:"http://www.w3.org/1998/Math/MathML ci"`

}

type XsdGoPkgHasElem_Ci struct {
	Ci *TciType `xml:"http://www.w3.org/1998/Math/MathML ci"`

}

type XsdGoPkgHasElem_Csymbol struct {
	Csymbol *TcsymbolType `xml:"http://www.w3.org/1998/Math/MathML csymbol"`

}

type XsdGoPkgHasElems_Csymbol struct {
	Csymbols []*TcsymbolType `xml:"http://www.w3.org/1998/Math/MathML csymbol"`

}

type XsdGoPkgHasGroup_ContentTokenContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

type XsdGoPkgHasGroup_CnContent struct {
	XsdGoPkgHasElem_Sep

	XsdGoPkgHasGroup_PresentationExprClass

}

type XsdGoPkgHasGroup_ContentTokensClass struct {
	XsdGoPkgHasElem_Cn

	XsdGoPkgHasElem_Ci

	XsdGoPkgHasElem_Csymbol

}
