//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/mathml2.xsd
package go_Mathml2

//	This is an XML Schema for MathML.
//	Author: St√©phane Dalmas, INRIA.


import (
	xlink "github.com/metaleap/go-xsd-pkg/www.w3.org/Math/XMLSchema/mathml2/common/xlink-href.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://www.w3.org/1998/Math/MathML type,attr"`

}

type XsdGoPkgHasAttr_Width_XsdtString_ struct {
	Width xsdt.String `xml:"http://www.w3.org/1998/Math/MathML width,attr"`

}

type XsdGoPkgHasAttr_Baseline_XsdtString_ struct {
	Baseline xsdt.String `xml:"http://www.w3.org/1998/Math/MathML baseline,attr"`

}

type TxsdBrowserInterfaceAttribOverflow xsdt.String

//	Returns true if the value of this enumerated TxsdBrowserInterfaceAttribOverflow is "truncate".
func (me TxsdBrowserInterfaceAttribOverflow) IsTruncate () bool { return me == "truncate" }

//	Returns true if the value of this enumerated TxsdBrowserInterfaceAttribOverflow is "scale".
func (me TxsdBrowserInterfaceAttribOverflow) IsScale () bool { return me == "scale" }

//	Returns true if the value of this enumerated TxsdBrowserInterfaceAttribOverflow is "elide".
func (me TxsdBrowserInterfaceAttribOverflow) IsElide () bool { return me == "elide" }

//	This convenience method just performs a simple type conversion to TxsdBrowserInterfaceAttribOverflow's alias type xsdt.String.
func (me TxsdBrowserInterfaceAttribOverflow) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdBrowserInterfaceAttribOverflow is just a simple String type, this merely returns the current string value.
func (me TxsdBrowserInterfaceAttribOverflow) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdBrowserInterfaceAttribOverflow is "scroll".
func (me TxsdBrowserInterfaceAttribOverflow) IsScroll () bool { return me == "scroll" }

//	Since TxsdBrowserInterfaceAttribOverflow is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBrowserInterfaceAttribOverflow) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Overflow_TxsdBrowserInterfaceAttribOverflow_Scroll struct {
	Overflow TxsdBrowserInterfaceAttribOverflow `xml:"http://www.w3.org/1998/Math/MathML overflow,attr"`

}

//	Returns the default value for Overflow -- "scroll"
func (me XsdGoPkgHasAttr_Overflow_TxsdBrowserInterfaceAttribOverflow_Scroll) OverflowDefault () TxsdBrowserInterfaceAttribOverflow { return TxsdBrowserInterfaceAttribOverflow("scroll") }

type XsdGoPkgHasAttr_Alttext_XsdtString_ struct {
	Alttext xsdt.String `xml:"http://www.w3.org/1998/Math/MathML alttext,attr"`

}

type XsdGoPkgHasAttr_Altimg_XsdtAnyURI_ struct {
	Altimg xsdt.AnyURI `xml:"http://www.w3.org/1998/Math/MathML altimg,attr"`

}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.w3.org/1998/Math/MathML name,attr"`

}

type XsdGoPkgHasAttr_Height_XsdtString_ struct {
	Height xsdt.String `xml:"http://www.w3.org/1998/Math/MathML height,attr"`

}

type XsdGoPkgHasAtts_BrowserInterfaceAttrib struct {
	XsdGoPkgHasAttr_Height_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Baseline_XsdtString_

	XsdGoPkgHasAttr_Overflow_TxsdBrowserInterfaceAttribOverflow_Scroll

	XsdGoPkgHasAttr_Alttext_XsdtString_

	XsdGoPkgHasAttr_Altimg_XsdtAnyURI_

	XsdGoPkgHasAttr_Name_XsdtString_

}

type TxsdMathAttlistDisplay xsdt.String

//	Returns true if the value of this enumerated TxsdMathAttlistDisplay is "block".
func (me TxsdMathAttlistDisplay) IsBlock () bool { return me == "block" }

//	This convenience method just performs a simple type conversion to TxsdMathAttlistDisplay's alias type xsdt.String.
func (me TxsdMathAttlistDisplay) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdMathAttlistDisplay is just a simple String type, this merely returns the current string value.
func (me TxsdMathAttlistDisplay) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdMathAttlistDisplay is "inline".
func (me TxsdMathAttlistDisplay) IsInline () bool { return me == "inline" }

//	Since TxsdMathAttlistDisplay is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMathAttlistDisplay) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Display_TxsdMathAttlistDisplay_Inline struct {
	Display TxsdMathAttlistDisplay `xml:"http://www.w3.org/1998/Math/MathML display,attr"`

}

//	Returns the default value for Display -- "inline"
func (me XsdGoPkgHasAttr_Display_TxsdMathAttlistDisplay_Inline) DisplayDefault () TxsdMathAttlistDisplay { return TxsdMathAttlistDisplay("inline") }

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.w3.org/1998/Math/MathML id,attr"`

}

type XsdGoPkgHasAttr_Class_XsdtNmtokens_ struct {
	Class xsdt.Nmtokens `xml:"http://www.w3.org/1998/Math/MathML class,attr"`

}

type XsdGoPkgHasAttr_Xref_XsdtIdref_ struct {
	Xref xsdt.Idref `xml:"http://www.w3.org/1998/Math/MathML xref,attr"`

}

type XsdGoPkgHasAttr_Style_XsdtString_ struct {
	Style xsdt.String `xml:"http://www.w3.org/1998/Math/MathML style,attr"`

}

type XsdGoPkgHasAtts_CommonAttrib struct {
	xlink.XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Xref_XsdtIdref_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Class_XsdtNmtokens_

}

type XsdGoPkgHasAttr_Macros_XsdtString_ struct {
	Macros xsdt.String `xml:"http://www.w3.org/1998/Math/MathML macros,attr"`

}

type XsdGoPkgHasAtts_MathAttlist struct {
	XsdGoPkgHasAttr_Display_TxsdMathAttlistDisplay_Inline

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Macros_XsdtString_

	XsdGoPkgHasAtts_BrowserInterfaceAttrib

}

type XsdGoPkgHasAttr_Mathcolor_XsdtString_ struct {
	Mathcolor xsdt.String `xml:"http://www.w3.org/1998/Math/MathML mathcolor,attr"`

}

type TxsdTokenStyleAttribMathvariant xsdt.String

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold".
func (me TxsdTokenStyleAttribMathvariant) IsBold () bool { return me == "bold" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif-bold-italic".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerifBoldItalic () bool { return me == "sans-serif-bold-italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "double-struck".
func (me TxsdTokenStyleAttribMathvariant) IsDoubleStruck () bool { return me == "double-struck" }

//	This convenience method just performs a simple type conversion to TxsdTokenStyleAttribMathvariant's alias type xsdt.String.
func (me TxsdTokenStyleAttribMathvariant) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdTokenStyleAttribMathvariant is just a simple String type, this merely returns the current string value.
func (me TxsdTokenStyleAttribMathvariant) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-sans-serif".
func (me TxsdTokenStyleAttribMathvariant) IsBoldSansSerif () bool { return me == "bold-sans-serif" }

//	Since TxsdTokenStyleAttribMathvariant is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTokenStyleAttribMathvariant) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "italic".
func (me TxsdTokenStyleAttribMathvariant) IsItalic () bool { return me == "italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "fraktur".
func (me TxsdTokenStyleAttribMathvariant) IsFraktur () bool { return me == "fraktur" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-fraktur".
func (me TxsdTokenStyleAttribMathvariant) IsBoldFraktur () bool { return me == "bold-fraktur" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "normal".
func (me TxsdTokenStyleAttribMathvariant) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "script".
func (me TxsdTokenStyleAttribMathvariant) IsScript () bool { return me == "script" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-script".
func (me TxsdTokenStyleAttribMathvariant) IsBoldScript () bool { return me == "bold-script" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif-italic".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerifItalic () bool { return me == "sans-serif-italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerif () bool { return me == "sans-serif" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "monospace".
func (me TxsdTokenStyleAttribMathvariant) IsMonospace () bool { return me == "monospace" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-italic".
func (me TxsdTokenStyleAttribMathvariant) IsBoldItalic () bool { return me == "bold-italic" }

type XsdGoPkgHasAttr_Mathvariant_TxsdTokenStyleAttribMathvariant_ struct {
	Mathvariant TxsdTokenStyleAttribMathvariant `xml:"http://www.w3.org/1998/Math/MathML mathvariant,attr"`

}

type TlengthWithUnit xsdt.String

//	Since TlengthWithUnit is just a simple String type, this merely sets the current value from the specified string.
func (me *TlengthWithUnit) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TlengthWithUnit is just a simple String type, this merely returns the current string value.
func (me TlengthWithUnit) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TlengthWithUnit's alias type xsdt.String.
func (me TlengthWithUnit) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TsimpleSize xsdt.String

//	Returns true if the value of this enumerated TsimpleSize is "small".
func (me TsimpleSize) IsSmall () bool { return me == "small" }

//	Returns true if the value of this enumerated TsimpleSize is "big".
func (me TsimpleSize) IsBig () bool { return me == "big" }

//	Since TsimpleSize is just a simple String type, this merely returns the current string value.
func (me TsimpleSize) String () string { return xsdt.String(me).String() }

//	Since TsimpleSize is just a simple String type, this merely sets the current value from the specified string.
func (me *TsimpleSize) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TsimpleSize is "normal".
func (me TsimpleSize) IsNormal () bool { return me == "normal" }

//	This convenience method just performs a simple type conversion to TsimpleSize's alias type xsdt.String.
func (me TsimpleSize) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TxsdTokenStyleAttribMathsize xsdt.String

//	Since TxsdTokenStyleAttribMathsize is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTokenStyleAttribMathsize) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TxsdTokenStyleAttribMathsize is an XSD union-type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdTokenStyleAttribMathsize) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdTokenStyleAttribMathsize is an XSD union-type of several types. This is a simple type conversion to TsimpleSize, but keep in mind the actual value may or may not be a valid TsimpleSize value.
func (me TxsdTokenStyleAttribMathsize) ToTsimpleSize () TsimpleSize { return TsimpleSize(me) }

//	Since TxsdTokenStyleAttribMathsize is just a simple String type, this merely returns the current string value.
func (me TxsdTokenStyleAttribMathsize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTokenStyleAttribMathsize's alias type xsdt.String.
func (me TxsdTokenStyleAttribMathsize) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Mathsize_TxsdTokenStyleAttribMathsize_ struct {
	Mathsize TxsdTokenStyleAttribMathsize `xml:"http://www.w3.org/1998/Math/MathML mathsize,attr"`

}

type XsdGoPkgHasAttr_Mathbackground_XsdtString_ struct {
	Mathbackground xsdt.String `xml:"http://www.w3.org/1998/Math/MathML mathbackground,attr"`

}

type XsdGoPkgHasAtts_TokenStyleAttrib struct {
	XsdGoPkgHasAttr_Mathvariant_TxsdTokenStyleAttribMathvariant_

	XsdGoPkgHasAttr_Mathsize_TxsdTokenStyleAttribMathsize_

	XsdGoPkgHasAttr_Mathbackground_XsdtString_

	XsdGoPkgHasAttr_Mathcolor_XsdtString_

}

type TnamedSpace xsdt.String

//	This convenience method just performs a simple type conversion to TnamedSpace's alias type xsdt.String.
func (me TnamedSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TnamedSpace is "verythickmathspace".
func (me TnamedSpace) IsVerythickmathspace () bool { return me == "verythickmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "veryverythickmathspace".
func (me TnamedSpace) IsVeryverythickmathspace () bool { return me == "veryverythickmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "thickmathspace".
func (me TnamedSpace) IsThickmathspace () bool { return me == "thickmathspace" }

//	Since TnamedSpace is just a simple String type, this merely returns the current string value.
func (me TnamedSpace) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TnamedSpace is "thinmathspace".
func (me TnamedSpace) IsThinmathspace () bool { return me == "thinmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "verythinmathspace".
func (me TnamedSpace) IsVerythinmathspace () bool { return me == "verythinmathspace" }

//	Returns true if the value of this enumerated TnamedSpace is "veryverythinmathspace".
func (me TnamedSpace) IsVeryverythinmathspace () bool { return me == "veryverythinmathspace" }

//	Since TnamedSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TnamedSpace) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TnamedSpace is "mediummathspace".
func (me TnamedSpace) IsMediummathspace () bool { return me == "mediummathspace" }

type TxsdOperatorAttribRspace xsdt.String

//	TxsdOperatorAttribRspace is an XSD union-type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribRspace) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribRspace is an XSD union-type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribRspace) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

//	Since TxsdOperatorAttribRspace is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribRspace) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribRspace is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribRspace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribRspace's alias type xsdt.String.
func (me TxsdOperatorAttribRspace) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Rspace_TxsdOperatorAttribRspace_ struct {
	Rspace TxsdOperatorAttribRspace `xml:"http://www.w3.org/1998/Math/MathML rspace,attr"`

}

type XsdGoPkgHasAttr_Movablelimits_XsdtBoolean_ struct {
	Movablelimits xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML movablelimits,attr"`

}

type XsdGoPkgHasAttr_Separator_XsdtBoolean_ struct {
	Separator xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML separator,attr"`

}

type XsdGoPkgHasAttr_Largeop_XsdtBoolean_ struct {
	Largeop xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML largeop,attr"`

}

type XsdGoPkgHasAttr_Fence_XsdtBoolean_ struct {
	Fence xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML fence,attr"`

}

type XsdGoPkgHasAttr_Symmetric_XsdtBoolean_ struct {
	Symmetric xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML symmetric,attr"`

}

type XsdGoPkgHasAttr_Lspace_TxsdOperatorAttribLspace_ struct {
	Lspace TxsdOperatorAttribRspace `xml:"http://www.w3.org/1998/Math/MathML lspace,attr"`

}

type XsdGoPkgHasAttr_Minsize_TxsdOperatorAttribMinsize_ struct {
	Minsize TxsdOperatorAttribRspace `xml:"http://www.w3.org/1998/Math/MathML minsize,attr"`

}

type Tinfinity xsdt.String

//	Since Tinfinity is just a simple String type, this merely returns the current string value.
func (me Tinfinity) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated Tinfinity is "infinity".
func (me Tinfinity) IsInfinity () bool { return me == "infinity" }

//	Since Tinfinity is just a simple String type, this merely sets the current value from the specified string.
func (me *Tinfinity) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tinfinity's alias type xsdt.String.
func (me Tinfinity) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TxsdOperatorAttribMaxsize xsdt.String

//	TxsdOperatorAttribMaxsize is an XSD union-type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribMaxsize) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribMaxsize is an XSD union-type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribMaxsize) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

//	TxsdOperatorAttribMaxsize is an XSD union-type of several types. This is a simple type conversion to Tinfinity, but keep in mind the actual value may or may not be a valid Tinfinity value.
func (me TxsdOperatorAttribMaxsize) ToTinfinity () Tinfinity { return Tinfinity(me) }

//	Since TxsdOperatorAttribMaxsize is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribMaxsize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribMaxsize's alias type xsdt.String.
func (me TxsdOperatorAttribMaxsize) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdOperatorAttribMaxsize is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribMaxsize) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TxsdOperatorAttribMaxsize is an XSD union-type of several types. This is a simple type conversion to XsdtFloat, but keep in mind the actual value may or may not be a valid XsdtFloat value.
func (me TxsdOperatorAttribMaxsize) ToXsdtFloat () xsdt.Float { var x = new(xsdt.Float); x.SetFromString(me.String()); return *x }

type XsdGoPkgHasAttr_Maxsize_TxsdOperatorAttribMaxsize_ struct {
	Maxsize TxsdOperatorAttribMaxsize `xml:"http://www.w3.org/1998/Math/MathML maxsize,attr"`

}

type XsdGoPkgHasAttr_Accent_XsdtBoolean_ struct {
	Accent xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML accent,attr"`

}

type XsdGoPkgHasAttr_Stretchy_XsdtBoolean_ struct {
	Stretchy xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML stretchy,attr"`

}

type TxsdOperatorAttribForm xsdt.String

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "prefix".
func (me TxsdOperatorAttribForm) IsPrefix () bool { return me == "prefix" }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribForm's alias type xsdt.String.
func (me TxsdOperatorAttribForm) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "infix".
func (me TxsdOperatorAttribForm) IsInfix () bool { return me == "infix" }

//	Since TxsdOperatorAttribForm is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribForm) String () string { return xsdt.String(me).String() }

//	Since TxsdOperatorAttribForm is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribForm) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "postfix".
func (me TxsdOperatorAttribForm) IsPostfix () bool { return me == "postfix" }

type XsdGoPkgHasAttr_Form_TxsdOperatorAttribForm_ struct {
	Form TxsdOperatorAttribForm `xml:"http://www.w3.org/1998/Math/MathML form,attr"`

}

type XsdGoPkgHasAtts_OperatorAttrib struct {
	XsdGoPkgHasAttr_Largeop_XsdtBoolean_

	XsdGoPkgHasAttr_Fence_XsdtBoolean_

	XsdGoPkgHasAttr_Symmetric_XsdtBoolean_

	XsdGoPkgHasAttr_Lspace_TxsdOperatorAttribLspace_

	XsdGoPkgHasAttr_Minsize_TxsdOperatorAttribMinsize_

	XsdGoPkgHasAttr_Maxsize_TxsdOperatorAttribMaxsize_

	XsdGoPkgHasAttr_Accent_XsdtBoolean_

	XsdGoPkgHasAttr_Stretchy_XsdtBoolean_

	XsdGoPkgHasAttr_Form_TxsdOperatorAttribForm_

	XsdGoPkgHasAttr_Rspace_TxsdOperatorAttribRspace_

	XsdGoPkgHasAttr_Movablelimits_XsdtBoolean_

	XsdGoPkgHasAttr_Separator_XsdtBoolean_

}

type XsdGoPkgHasAttr_Alt_XsdtString_ struct {
	Alt xsdt.String `xml:"http://www.w3.org/1998/Math/MathML alt,attr"`

}

type XsdGoPkgHasAttr_Fontfamily_XsdtString_ struct {
	Fontfamily xsdt.String `xml:"http://www.w3.org/1998/Math/MathML fontfamily,attr"`

}

type XsdGoPkgHasAttr_Index_XsdtPositiveInteger_ struct {
	Index xsdt.PositiveInteger `xml:"http://www.w3.org/1998/Math/MathML index,attr"`

}

type XsdGoPkgHasAtts_MglyphAttlist struct {
	XsdGoPkgHasAttr_Index_XsdtPositiveInteger_

	XsdGoPkgHasAttr_Alt_XsdtString_

	XsdGoPkgHasAttr_Fontfamily_XsdtString_

}

type XsdGoPkgHasAtts_MiAttlist struct {
	XsdGoPkgHasAtts_TokenStyleAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_MoAttlist struct {
	XsdGoPkgHasAtts_OperatorAttrib

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_TokenStyleAttrib

}

type XsdGoPkgHasAttr_Rquote_XsdtString_ struct {
	Rquote xsdt.String `xml:"http://www.w3.org/1998/Math/MathML rquote,attr"`

}

//	Returns the default value for Rquote -- "\""
func (me XsdGoPkgHasAttr_Rquote_XsdtString_) RquoteDefault () xsdt.String { return xsdt.String("\"") }

type XsdGoPkgHasAttr_Lquote_XsdtString_ struct {
	Lquote xsdt.String `xml:"http://www.w3.org/1998/Math/MathML lquote,attr"`

}

//	Returns the default value for Lquote -- "\""
func (me XsdGoPkgHasAttr_Lquote_XsdtString_) LquoteDefault () xsdt.String { return xsdt.String("\"") }

type XsdGoPkgHasAtts_MsAttlist struct {
	XsdGoPkgHasAttr_Rquote_XsdtString_

	XsdGoPkgHasAttr_Lquote_XsdtString_

	XsdGoPkgHasAtts_TokenStyleAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Subscriptshift_TlengthWithUnit_ struct {
	Subscriptshift TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML subscriptshift,attr"`

}

type XsdGoPkgHasAtts_MsubAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Subscriptshift_TlengthWithUnit_

}

type XsdGoPkgHasAttr_Superscriptshift_TlengthWithUnit_ struct {
	Superscriptshift TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML superscriptshift,attr"`

}

type XsdGoPkgHasAtts_MsupAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Superscriptshift_TlengthWithUnit_

}

type XsdGoPkgHasAtts_MsubsupAttlist struct {
	XsdGoPkgHasAttr_Subscriptshift_TlengthWithUnit_

	XsdGoPkgHasAttr_Superscriptshift_TlengthWithUnit_

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Accentunder_XsdtBoolean_ struct {
	Accentunder xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML accentunder,attr"`

}

type XsdGoPkgHasAtts_MunderAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Accentunder_XsdtBoolean_

}

type XsdGoPkgHasAtts_MoverAttlist struct {
	XsdGoPkgHasAttr_Accent_XsdtBoolean_

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_MunderoverAttlist struct {
	XsdGoPkgHasAttr_Accentunder_XsdtBoolean_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Accent_XsdtBoolean_

}

type XsdGoPkgHasAtts_MmultiscriptsAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em struct {
	Width TxsdOperatorAttribRspace `xml:"http://www.w3.org/1998/Math/MathML width,attr"`

}

//	Returns the default value for Width -- "0em"
func (me XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em) WidthDefault () TxsdOperatorAttribRspace { return TxsdOperatorAttribRspace("0em") }

type XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex struct {
	Height TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML height,attr"`

}

//	Returns the default value for Height -- "0ex"
func (me XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex) HeightDefault () TlengthWithUnit { return TlengthWithUnit("0ex") }

type XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex struct {
	Depth TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML depth,attr"`

}

//	Returns the default value for Depth -- "0ex"
func (me XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex) DepthDefault () TlengthWithUnit { return TlengthWithUnit("0ex") }

type TxsdMspaceAttlistLinebreak xsdt.String

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "nobreak".
func (me TxsdMspaceAttlistLinebreak) IsNobreak () bool { return me == "nobreak" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "auto".
func (me TxsdMspaceAttlistLinebreak) IsAuto () bool { return me == "auto" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "badbreak".
func (me TxsdMspaceAttlistLinebreak) IsBadbreak () bool { return me == "badbreak" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "indentingnewline".
func (me TxsdMspaceAttlistLinebreak) IsIndentingnewline () bool { return me == "indentingnewline" }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "newline".
func (me TxsdMspaceAttlistLinebreak) IsNewline () bool { return me == "newline" }

//	This convenience method just performs a simple type conversion to TxsdMspaceAttlistLinebreak's alias type xsdt.String.
func (me TxsdMspaceAttlistLinebreak) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TxsdMspaceAttlistLinebreak is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMspaceAttlistLinebreak) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdMspaceAttlistLinebreak is just a simple String type, this merely returns the current string value.
func (me TxsdMspaceAttlistLinebreak) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdMspaceAttlistLinebreak is "goodbreak".
func (me TxsdMspaceAttlistLinebreak) IsGoodbreak () bool { return me == "goodbreak" }

type XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto struct {
	Linebreak TxsdMspaceAttlistLinebreak `xml:"http://www.w3.org/1998/Math/MathML linebreak,attr"`

}

//	Returns the default value for Linebreak -- "auto"
func (me XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto) LinebreakDefault () TxsdMspaceAttlistLinebreak { return TxsdMspaceAttlistLinebreak("auto") }

type XsdGoPkgHasAtts_MspaceAttlist struct {
	XsdGoPkgHasAttr_Height_TlengthWithUnit_0Ex

	XsdGoPkgHasAttr_Depth_TlengthWithUnit_0Ex

	XsdGoPkgHasAttr_Linebreak_TxsdMspaceAttlistLinebreak_Auto

	XsdGoPkgHasAttr_Width_TxsdMspaceAttlistWidth_0Em

	XsdGoPkgHasAtts_CommonAttrib

}

type TlengthWithOptionalUnit xsdt.String

//	Since TlengthWithOptionalUnit is just a simple String type, this merely sets the current value from the specified string.
func (me *TlengthWithOptionalUnit) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TlengthWithOptionalUnit is just a simple String type, this merely returns the current string value.
func (me TlengthWithOptionalUnit) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TlengthWithOptionalUnit's alias type xsdt.String.
func (me TlengthWithOptionalUnit) ToXsdtString () xsdt.String { return xsdt.String(me) }

type Tthickness xsdt.String

//	This convenience method just performs a simple type conversion to Tthickness's alias type xsdt.String.
func (me Tthickness) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated Tthickness is "thin".
func (me Tthickness) IsThin () bool { return me == "thin" }

//	Since Tthickness is just a simple String type, this merely sets the current value from the specified string.
func (me *Tthickness) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated Tthickness is "thick".
func (me Tthickness) IsThick () bool { return me == "thick" }

//	Returns true if the value of this enumerated Tthickness is "medium".
func (me Tthickness) IsMedium () bool { return me == "medium" }

//	Since Tthickness is just a simple String type, this merely returns the current string value.
func (me Tthickness) String () string { return xsdt.String(me).String() }

type TxsdMfracAttlistLinethickness xsdt.String

//	Since TxsdMfracAttlistLinethickness is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMfracAttlistLinethickness) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TxsdMfracAttlistLinethickness is an XSD union-type of several types. This is a simple type conversion to TlengthWithOptionalUnit, but keep in mind the actual value may or may not be a valid TlengthWithOptionalUnit value.
func (me TxsdMfracAttlistLinethickness) ToTlengthWithOptionalUnit () TlengthWithOptionalUnit { return TlengthWithOptionalUnit(me) }

//	This convenience method just performs a simple type conversion to TxsdMfracAttlistLinethickness's alias type xsdt.String.
func (me TxsdMfracAttlistLinethickness) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdMfracAttlistLinethickness is an XSD union-type of several types. This is a simple type conversion to Tthickness, but keep in mind the actual value may or may not be a valid Tthickness value.
func (me TxsdMfracAttlistLinethickness) ToTthickness () Tthickness { return Tthickness(me) }

//	Since TxsdMfracAttlistLinethickness is just a simple String type, this merely returns the current string value.
func (me TxsdMfracAttlistLinethickness) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1 struct {
	Linethickness TxsdMfracAttlistLinethickness `xml:"http://www.w3.org/1998/Math/MathML linethickness,attr"`

}

//	Returns the default value for Linethickness -- "1"
func (me XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1) LinethicknessDefault () TxsdMfracAttlistLinethickness { return TxsdMfracAttlistLinethickness("1") }

type XsdGoPkgHasAttr_Bevelled_XsdtBoolean_ struct {
	Bevelled xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML bevelled,attr"`

}

type Tcentering xsdt.String

//	Since Tcentering is just a simple String type, this merely returns the current string value.
func (me Tcentering) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to Tcentering's alias type xsdt.String.
func (me Tcentering) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated Tcentering is "left".
func (me Tcentering) IsLeft () bool { return me == "left" }

//	Returns true if the value of this enumerated Tcentering is "right".
func (me Tcentering) IsRight () bool { return me == "right" }

//	Since Tcentering is just a simple String type, this merely sets the current value from the specified string.
func (me *Tcentering) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated Tcentering is "center".
func (me Tcentering) IsCenter () bool { return me == "center" }

type XsdGoPkgHasAttr_Denomalign_Tcentering_Center struct {
	Denomalign Tcentering `xml:"http://www.w3.org/1998/Math/MathML denomalign,attr"`

}

//	Returns the default value for Denomalign -- "center"
func (me XsdGoPkgHasAttr_Denomalign_Tcentering_Center) DenomalignDefault () Tcentering { return Tcentering("center") }

type XsdGoPkgHasAttr_Numalign_Tcentering_Center struct {
	Numalign Tcentering `xml:"http://www.w3.org/1998/Math/MathML numalign,attr"`

}

//	Returns the default value for Numalign -- "center"
func (me XsdGoPkgHasAttr_Numalign_Tcentering_Center) NumalignDefault () Tcentering { return Tcentering("center") }

type XsdGoPkgHasAtts_MfracAttlist struct {
	XsdGoPkgHasAttr_Denomalign_Tcentering_Center

	XsdGoPkgHasAttr_Numalign_Tcentering_Center

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Linethickness_TxsdMfracAttlistLinethickness_1

	XsdGoPkgHasAttr_Bevelled_XsdtBoolean_

}

type TmpaddedWidthSpace xsdt.String

//	This convenience method just performs a simple type conversion to TmpaddedWidthSpace's alias type xsdt.String.
func (me TmpaddedWidthSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TmpaddedWidthSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TmpaddedWidthSpace) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TmpaddedWidthSpace is just a simple String type, this merely returns the current string value.
func (me TmpaddedWidthSpace) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Width_TmpaddedWidthSpace_ struct {
	Width TmpaddedWidthSpace `xml:"http://www.w3.org/1998/Math/MathML width,attr"`

}

type TmpaddedSpace xsdt.String

//	Since TmpaddedSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TmpaddedSpace) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TmpaddedSpace is just a simple String type, this merely returns the current string value.
func (me TmpaddedSpace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TmpaddedSpace's alias type xsdt.String.
func (me TmpaddedSpace) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Height_TmpaddedSpace_ struct {
	Height TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML height,attr"`

}

type XsdGoPkgHasAttr_Lspace_TmpaddedSpace_ struct {
	Lspace TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML lspace,attr"`

}

type XsdGoPkgHasAttr_Depth_TmpaddedSpace_ struct {
	Depth TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML depth,attr"`

}

type XsdGoPkgHasAtts_MpaddedAttlist struct {
	XsdGoPkgHasAttr_Height_TmpaddedSpace_

	XsdGoPkgHasAttr_Lspace_TmpaddedSpace_

	XsdGoPkgHasAttr_Depth_TmpaddedSpace_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Width_TmpaddedWidthSpace_

}

type XsdGoPkgHasAttr_Open_XsdtString_ struct {
	Open xsdt.String `xml:"http://www.w3.org/1998/Math/MathML open,attr"`

}

//	Returns the default value for Open -- "("
func (me XsdGoPkgHasAttr_Open_XsdtString_) OpenDefault () xsdt.String { return xsdt.String("(") }

type XsdGoPkgHasAttr_Separators_XsdtString_ struct {
	Separators xsdt.String `xml:"http://www.w3.org/1998/Math/MathML separators,attr"`

}

//	Returns the default value for Separators -- ","
func (me XsdGoPkgHasAttr_Separators_XsdtString_) SeparatorsDefault () xsdt.String { return xsdt.String(",") }

type XsdGoPkgHasAttr_Close_XsdtString_ struct {
	Close xsdt.String `xml:"http://www.w3.org/1998/Math/MathML close,attr"`

}

//	Returns the default value for Close -- ")"
func (me XsdGoPkgHasAttr_Close_XsdtString_) CloseDefault () xsdt.String { return xsdt.String(")") }

type XsdGoPkgHasAtts_MfencedAttlist struct {
	XsdGoPkgHasAttr_Close_XsdtString_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Open_XsdtString_

	XsdGoPkgHasAttr_Separators_XsdtString_

}

type TxsdMencloseAttlistNotation xsdt.String

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "actuarial".
func (me TxsdMencloseAttlistNotation) IsActuarial () bool { return me == "actuarial" }

//	Since TxsdMencloseAttlistNotation is just a simple String type, this merely returns the current string value.
func (me TxsdMencloseAttlistNotation) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "horizontalstrike".
func (me TxsdMencloseAttlistNotation) IsHorizontalstrike () bool { return me == "horizontalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "verticalstrike".
func (me TxsdMencloseAttlistNotation) IsVerticalstrike () bool { return me == "verticalstrike" }

//	This convenience method just performs a simple type conversion to TxsdMencloseAttlistNotation's alias type xsdt.String.
func (me TxsdMencloseAttlistNotation) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "updiagonalstrike".
func (me TxsdMencloseAttlistNotation) IsUpdiagonalstrike () bool { return me == "updiagonalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "roundedbox".
func (me TxsdMencloseAttlistNotation) IsRoundedbox () bool { return me == "roundedbox" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "box".
func (me TxsdMencloseAttlistNotation) IsBox () bool { return me == "box" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "downdiagonalstrike".
func (me TxsdMencloseAttlistNotation) IsDowndiagonalstrike () bool { return me == "downdiagonalstrike" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "circle".
func (me TxsdMencloseAttlistNotation) IsCircle () bool { return me == "circle" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "left".
func (me TxsdMencloseAttlistNotation) IsLeft () bool { return me == "left" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "radical".
func (me TxsdMencloseAttlistNotation) IsRadical () bool { return me == "radical" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "bottom".
func (me TxsdMencloseAttlistNotation) IsBottom () bool { return me == "bottom" }

//	Since TxsdMencloseAttlistNotation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMencloseAttlistNotation) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "right".
func (me TxsdMencloseAttlistNotation) IsRight () bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "longdiv".
func (me TxsdMencloseAttlistNotation) IsLongdiv () bool { return me == "longdiv" }

//	Returns true if the value of this enumerated TxsdMencloseAttlistNotation is "top".
func (me TxsdMencloseAttlistNotation) IsTop () bool { return me == "top" }

type XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv struct {
	Notation TxsdMencloseAttlistNotation `xml:"http://www.w3.org/1998/Math/MathML notation,attr"`

}

//	Returns the default value for Notation -- "longdiv"
func (me XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv) NotationDefault () TxsdMencloseAttlistNotation { return TxsdMencloseAttlistNotation("longdiv") }

type XsdGoPkgHasAtts_MencloseAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Notation_TxsdMencloseAttlistNotation_Longdiv

}

type XsdGoPkgHasAttr_Groupalign_XsdtString_ struct {
	Groupalign xsdt.String `xml:"http://www.w3.org/1998/Math/MathML groupalign,attr"`

}

type XsdGoPkgHasAttr_Rowalign_TxsdTableAlignmentAttribRowalign_Baseline struct {
	Rowalign TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML rowalign,attr"`

}

//	Returns the default value for Rowalign -- "baseline"
func (me XsdGoPkgHasAttr_Rowalign_TxsdTableAlignmentAttribRowalign_Baseline) RowalignDefault () TmpaddedSpace { return TmpaddedSpace("baseline") }

type XsdGoPkgHasAttr_Columnalign_TxsdTableAlignmentAttribColumnalign_Center struct {
	Columnalign TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML columnalign,attr"`

}

//	Returns the default value for Columnalign -- "center"
func (me XsdGoPkgHasAttr_Columnalign_TxsdTableAlignmentAttribColumnalign_Center) ColumnalignDefault () TmpaddedSpace { return TmpaddedSpace("center") }

type XsdGoPkgHasAtts_TableAlignmentAttrib struct {
	XsdGoPkgHasAttr_Groupalign_XsdtString_

	XsdGoPkgHasAttr_Rowalign_TxsdTableAlignmentAttribRowalign_Baseline

	XsdGoPkgHasAttr_Columnalign_TxsdTableAlignmentAttribColumnalign_Center

}

type XsdGoPkgHasAtts_MtrAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_TableAlignmentAttrib

}

type XsdGoPkgHasAttr_Columnspan_XsdtPositiveInteger_1 struct {
	Columnspan xsdt.PositiveInteger `xml:"http://www.w3.org/1998/Math/MathML columnspan,attr"`

}

//	Returns the default value for Columnspan -- 1
func (me XsdGoPkgHasAttr_Columnspan_XsdtPositiveInteger_1) ColumnspanDefault () xsdt.PositiveInteger { return xsdt.PositiveInteger(1) }

type XsdGoPkgHasAttr_Rowspan_XsdtPositiveInteger_1 struct {
	Rowspan xsdt.PositiveInteger `xml:"http://www.w3.org/1998/Math/MathML rowspan,attr"`

}

//	Returns the default value for Rowspan -- 1
func (me XsdGoPkgHasAttr_Rowspan_XsdtPositiveInteger_1) RowspanDefault () xsdt.PositiveInteger { return xsdt.PositiveInteger(1) }

type XsdGoPkgHasAtts_MtdAttlist struct {
	XsdGoPkgHasAttr_Columnspan_XsdtPositiveInteger_1

	XsdGoPkgHasAttr_Rowspan_XsdtPositiveInteger_1

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_TableAlignmentAttrib

}

type XsdGoPkgHasAttr_Rowspacing_XsdtString_10Ex struct {
	Rowspacing xsdt.String `xml:"http://www.w3.org/1998/Math/MathML rowspacing,attr"`

}

//	Returns the default value for Rowspacing -- "1.0ex"
func (me XsdGoPkgHasAttr_Rowspacing_XsdtString_10Ex) RowspacingDefault () xsdt.String { return xsdt.String("1.0ex") }

type XsdGoPkgHasAttr_Width_XsdtString_Auto struct {
	Width xsdt.String `xml:"http://www.w3.org/1998/Math/MathML width,attr"`

}

//	Returns the default value for Width -- "auto"
func (me XsdGoPkgHasAttr_Width_XsdtString_Auto) WidthDefault () xsdt.String { return xsdt.String("auto") }

type XsdGoPkgHasAttr_Minlabelspacing_TlengthWithUnit_08Em struct {
	Minlabelspacing TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML minlabelspacing,attr"`

}

//	Returns the default value for Minlabelspacing -- "0.8em"
func (me XsdGoPkgHasAttr_Minlabelspacing_TlengthWithUnit_08Em) MinlabelspacingDefault () TlengthWithUnit { return TlengthWithUnit("0.8em") }

type XsdGoPkgHasAttr_Rowlines_XsdtString_None struct {
	Rowlines xsdt.String `xml:"http://www.w3.org/1998/Math/MathML rowlines,attr"`

}

//	Returns the default value for Rowlines -- "none"
func (me XsdGoPkgHasAttr_Rowlines_XsdtString_None) RowlinesDefault () xsdt.String { return xsdt.String("none") }

type XsdGoPkgHasAttr_Framespacing_XsdtString_04Em05Ex struct {
	Framespacing xsdt.String `xml:"http://www.w3.org/1998/Math/MathML framespacing,attr"`

}

//	Returns the default value for Framespacing -- "0.4em 0.5ex"
func (me XsdGoPkgHasAttr_Framespacing_XsdtString_04Em05Ex) FramespacingDefault () xsdt.String { return xsdt.String("0.4em 0.5ex") }

type XsdGoPkgHasAttr_Align_XsdtString_Axis struct {
	Align xsdt.String `xml:"http://www.w3.org/1998/Math/MathML align,attr"`

}

//	Returns the default value for Align -- "axis"
func (me XsdGoPkgHasAttr_Align_XsdtString_Axis) AlignDefault () xsdt.String { return xsdt.String("axis") }

type XsdGoPkgHasAttr_Alignmentscope_TxsdMtableAttlistAlignmentscope_True struct {
	Alignmentscope TmpaddedSpace `xml:"http://www.w3.org/1998/Math/MathML alignmentscope,attr"`

}

//	Returns the default value for Alignmentscope -- "true"
func (me XsdGoPkgHasAttr_Alignmentscope_TxsdMtableAttlistAlignmentscope_True) AlignmentscopeDefault () TmpaddedSpace { return TmpaddedSpace("true") }

type XsdGoPkgHasAttr_Displaystyle_XsdtBoolean_False struct {
	Displaystyle xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML displaystyle,attr"`

}

//	Returns the default value for Displaystyle -- false
func (me XsdGoPkgHasAttr_Displaystyle_XsdtBoolean_False) DisplaystyleDefault () xsdt.Boolean { return xsdt.Boolean(false) }

type TxsdMtableAttlistSide xsdt.String

//	Returns true if the value of this enumerated TxsdMtableAttlistSide is "rightoverlap".
func (me TxsdMtableAttlistSide) IsRightoverlap () bool { return me == "rightoverlap" }

//	Since TxsdMtableAttlistSide is just a simple String type, this merely returns the current string value.
func (me TxsdMtableAttlistSide) String () string { return xsdt.String(me).String() }

//	Since TxsdMtableAttlistSide is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMtableAttlistSide) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdMtableAttlistSide's alias type xsdt.String.
func (me TxsdMtableAttlistSide) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMtableAttlistSide is "right".
func (me TxsdMtableAttlistSide) IsRight () bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdMtableAttlistSide is "left".
func (me TxsdMtableAttlistSide) IsLeft () bool { return me == "left" }

//	Returns true if the value of this enumerated TxsdMtableAttlistSide is "leftoverlap".
func (me TxsdMtableAttlistSide) IsLeftoverlap () bool { return me == "leftoverlap" }

type XsdGoPkgHasAttr_Side_TxsdMtableAttlistSide_Right struct {
	Side TxsdMtableAttlistSide `xml:"http://www.w3.org/1998/Math/MathML side,attr"`

}

//	Returns the default value for Side -- "right"
func (me XsdGoPkgHasAttr_Side_TxsdMtableAttlistSide_Right) SideDefault () TxsdMtableAttlistSide { return TxsdMtableAttlistSide("right") }

type XsdGoPkgHasAttr_Columnlines_XsdtString_None struct {
	Columnlines xsdt.String `xml:"http://www.w3.org/1998/Math/MathML columnlines,attr"`

}

//	Returns the default value for Columnlines -- "none"
func (me XsdGoPkgHasAttr_Columnlines_XsdtString_None) ColumnlinesDefault () xsdt.String { return xsdt.String("none") }

type XsdGoPkgHasAttr_Columnspacing_XsdtString_08Em struct {
	Columnspacing xsdt.String `xml:"http://www.w3.org/1998/Math/MathML columnspacing,attr"`

}

//	Returns the default value for Columnspacing -- "0.8em"
func (me XsdGoPkgHasAttr_Columnspacing_XsdtString_08Em) ColumnspacingDefault () xsdt.String { return xsdt.String("0.8em") }

type XsdGoPkgHasAttr_Equalcolumns_XsdtBoolean_False struct {
	Equalcolumns xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML equalcolumns,attr"`

}

//	Returns the default value for Equalcolumns -- false
func (me XsdGoPkgHasAttr_Equalcolumns_XsdtBoolean_False) EqualcolumnsDefault () xsdt.Boolean { return xsdt.Boolean(false) }

type XsdGoPkgHasAttr_Columnwidth_XsdtString_Auto struct {
	Columnwidth xsdt.String `xml:"http://www.w3.org/1998/Math/MathML columnwidth,attr"`

}

//	Returns the default value for Columnwidth -- "auto"
func (me XsdGoPkgHasAttr_Columnwidth_XsdtString_Auto) ColumnwidthDefault () xsdt.String { return xsdt.String("auto") }

type TxsdMtableAttlistFrame xsdt.String

//	Returns true if the value of this enumerated TxsdMtableAttlistFrame is "none".
func (me TxsdMtableAttlistFrame) IsNone () bool { return me == "none" }

//	Returns true if the value of this enumerated TxsdMtableAttlistFrame is "dashed".
func (me TxsdMtableAttlistFrame) IsDashed () bool { return me == "dashed" }

//	Since TxsdMtableAttlistFrame is just a simple String type, this merely returns the current string value.
func (me TxsdMtableAttlistFrame) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdMtableAttlistFrame is "solid".
func (me TxsdMtableAttlistFrame) IsSolid () bool { return me == "solid" }

//	Since TxsdMtableAttlistFrame is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMtableAttlistFrame) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdMtableAttlistFrame's alias type xsdt.String.
func (me TxsdMtableAttlistFrame) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Frame_TxsdMtableAttlistFrame_None struct {
	Frame TxsdMtableAttlistFrame `xml:"http://www.w3.org/1998/Math/MathML frame,attr"`

}

//	Returns the default value for Frame -- "none"
func (me XsdGoPkgHasAttr_Frame_TxsdMtableAttlistFrame_None) FrameDefault () TxsdMtableAttlistFrame { return TxsdMtableAttlistFrame("none") }

type XsdGoPkgHasAttr_Equalrows_XsdtBoolean_False struct {
	Equalrows xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML equalrows,attr"`

}

//	Returns the default value for Equalrows -- false
func (me XsdGoPkgHasAttr_Equalrows_XsdtBoolean_False) EqualrowsDefault () xsdt.Boolean { return xsdt.Boolean(false) }

type XsdGoPkgHasAtts_MtableAttlist struct {
	XsdGoPkgHasAttr_Equalcolumns_XsdtBoolean_False

	XsdGoPkgHasAttr_Columnwidth_XsdtString_Auto

	XsdGoPkgHasAttr_Frame_TxsdMtableAttlistFrame_None

	XsdGoPkgHasAttr_Equalrows_XsdtBoolean_False

	XsdGoPkgHasAttr_Rowspacing_XsdtString_10Ex

	XsdGoPkgHasAttr_Width_XsdtString_Auto

	XsdGoPkgHasAttr_Minlabelspacing_TlengthWithUnit_08Em

	XsdGoPkgHasAttr_Rowlines_XsdtString_None

	XsdGoPkgHasAttr_Framespacing_XsdtString_04Em05Ex

	XsdGoPkgHasAttr_Align_XsdtString_Axis

	XsdGoPkgHasAttr_Alignmentscope_TxsdMtableAttlistAlignmentscope_True

	XsdGoPkgHasAttr_Displaystyle_XsdtBoolean_False

	XsdGoPkgHasAttr_Side_TxsdMtableAttlistSide_Right

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_TableAlignmentAttrib

	XsdGoPkgHasAttr_Columnlines_XsdtString_None

	XsdGoPkgHasAttr_Columnspacing_XsdtString_08Em

}

type TxsdMaligngroupAttlistGroupalign xsdt.String

//	Returns true if the value of this enumerated TxsdMaligngroupAttlistGroupalign is "right".
func (me TxsdMaligngroupAttlistGroupalign) IsRight () bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdMaligngroupAttlistGroupalign is "left".
func (me TxsdMaligngroupAttlistGroupalign) IsLeft () bool { return me == "left" }

//	Since TxsdMaligngroupAttlistGroupalign is just a simple String type, this merely returns the current string value.
func (me TxsdMaligngroupAttlistGroupalign) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdMaligngroupAttlistGroupalign is "decimalpoint".
func (me TxsdMaligngroupAttlistGroupalign) IsDecimalpoint () bool { return me == "decimalpoint" }

//	This convenience method just performs a simple type conversion to TxsdMaligngroupAttlistGroupalign's alias type xsdt.String.
func (me TxsdMaligngroupAttlistGroupalign) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMaligngroupAttlistGroupalign is "center".
func (me TxsdMaligngroupAttlistGroupalign) IsCenter () bool { return me == "center" }

//	Since TxsdMaligngroupAttlistGroupalign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMaligngroupAttlistGroupalign) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Groupalign_TxsdMaligngroupAttlistGroupalign_ struct {
	Groupalign TxsdMaligngroupAttlistGroupalign `xml:"http://www.w3.org/1998/Math/MathML groupalign,attr"`

}

type XsdGoPkgHasAtts_MaligngroupAttlist struct {
	XsdGoPkgHasAttr_Groupalign_TxsdMaligngroupAttlistGroupalign_

	XsdGoPkgHasAtts_CommonAttrib

}

type TxsdMalignmarkAttlistEdge xsdt.String

//	Returns true if the value of this enumerated TxsdMalignmarkAttlistEdge is "right".
func (me TxsdMalignmarkAttlistEdge) IsRight () bool { return me == "right" }

//	This convenience method just performs a simple type conversion to TxsdMalignmarkAttlistEdge's alias type xsdt.String.
func (me TxsdMalignmarkAttlistEdge) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMalignmarkAttlistEdge is "left".
func (me TxsdMalignmarkAttlistEdge) IsLeft () bool { return me == "left" }

//	Since TxsdMalignmarkAttlistEdge is just a simple String type, this merely returns the current string value.
func (me TxsdMalignmarkAttlistEdge) String () string { return xsdt.String(me).String() }

//	Since TxsdMalignmarkAttlistEdge is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMalignmarkAttlistEdge) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Edge_TxsdMalignmarkAttlistEdge_Left struct {
	Edge TxsdMalignmarkAttlistEdge `xml:"http://www.w3.org/1998/Math/MathML edge,attr"`

}

//	Returns the default value for Edge -- "left"
func (me XsdGoPkgHasAttr_Edge_TxsdMalignmarkAttlistEdge_Left) EdgeDefault () TxsdMalignmarkAttlistEdge { return TxsdMalignmarkAttlistEdge("left") }

type XsdGoPkgHasAtts_MalignmarkAttlist struct {
	XsdGoPkgHasAttr_Edge_TxsdMalignmarkAttlistEdge_Left

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAttr_Color_XsdtString_ struct {
	Color xsdt.String `xml:"http://www.w3.org/1998/Math/MathML color,attr"`

}

type XsdGoPkgHasAttr_Verythinmathspace_TlengthWithUnit_0111111Em struct {
	Verythinmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML verythinmathspace,attr"`

}

//	Returns the default value for Verythinmathspace -- "0.111111em"
func (me XsdGoPkgHasAttr_Verythinmathspace_TlengthWithUnit_0111111Em) VerythinmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.111111em") }

type XsdGoPkgHasAttr_Mediummathspace_TlengthWithUnit_0222222Em struct {
	Mediummathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML mediummathspace,attr"`

}

//	Returns the default value for Mediummathspace -- "0.222222em"
func (me XsdGoPkgHasAttr_Mediummathspace_TlengthWithUnit_0222222Em) MediummathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.222222em") }

type XsdGoPkgHasAttr_Background_XsdtString_Transparent struct {
	Background xsdt.String `xml:"http://www.w3.org/1998/Math/MathML background,attr"`

}

//	Returns the default value for Background -- "transparent"
func (me XsdGoPkgHasAttr_Background_XsdtString_Transparent) BackgroundDefault () xsdt.String { return xsdt.String("transparent") }

type XsdGoPkgHasAttr_Thinmathspace_TlengthWithUnit_0166667Em struct {
	Thinmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML thinmathspace,attr"`

}

//	Returns the default value for Thinmathspace -- "0.166667em"
func (me XsdGoPkgHasAttr_Thinmathspace_TlengthWithUnit_0166667Em) ThinmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.166667em") }

type XsdGoPkgHasAttr_Scriptlevel_XsdtInteger_ struct {
	Scriptlevel xsdt.Integer `xml:"http://www.w3.org/1998/Math/MathML scriptlevel,attr"`

}

type XsdGoPkgHasAttr_Thickmathspace_TlengthWithUnit_0277778Em struct {
	Thickmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML thickmathspace,attr"`

}

//	Returns the default value for Thickmathspace -- "0.277778em"
func (me XsdGoPkgHasAttr_Thickmathspace_TlengthWithUnit_0277778Em) ThickmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.277778em") }

type XsdGoPkgHasAttr_Veryverythinmathspace_TlengthWithUnit_00555556Em struct {
	Veryverythinmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML veryverythinmathspace,attr"`

}

//	Returns the default value for Veryverythinmathspace -- "0.0555556em"
func (me XsdGoPkgHasAttr_Veryverythinmathspace_TlengthWithUnit_00555556Em) VeryverythinmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.0555556em") }

type XsdGoPkgHasAttr_Linethickness_TxsdMstyleAttlistLinethickness_1 struct {
	Linethickness TxsdMfracAttlistLinethickness `xml:"http://www.w3.org/1998/Math/MathML linethickness,attr"`

}

//	Returns the default value for Linethickness -- "1"
func (me XsdGoPkgHasAttr_Linethickness_TxsdMstyleAttlistLinethickness_1) LinethicknessDefault () TxsdMfracAttlistLinethickness { return TxsdMfracAttlistLinethickness("1") }

type XsdGoPkgHasAttr_Displaystyle_XsdtBoolean_ struct {
	Displaystyle xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML displaystyle,attr"`

}

type XsdGoPkgHasAttr_Veryverythickmathspace_TlengthWithUnit_0388889Em struct {
	Veryverythickmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML veryverythickmathspace,attr"`

}

//	Returns the default value for Veryverythickmathspace -- "0.388889em"
func (me XsdGoPkgHasAttr_Veryverythickmathspace_TlengthWithUnit_0388889Em) VeryverythickmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.388889em") }

type XsdGoPkgHasAttr_Scriptminsize_TlengthWithUnit_8Pt struct {
	Scriptminsize TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML scriptminsize,attr"`

}

//	Returns the default value for Scriptminsize -- "8pt"
func (me XsdGoPkgHasAttr_Scriptminsize_TlengthWithUnit_8Pt) ScriptminsizeDefault () TlengthWithUnit { return TlengthWithUnit("8pt") }

type XsdGoPkgHasAttr_Verythickmathspace_TlengthWithUnit_0333333Em struct {
	Verythickmathspace TlengthWithUnit `xml:"http://www.w3.org/1998/Math/MathML verythickmathspace,attr"`

}

//	Returns the default value for Verythickmathspace -- "0.333333em"
func (me XsdGoPkgHasAttr_Verythickmathspace_TlengthWithUnit_0333333Em) VerythickmathspaceDefault () TlengthWithUnit { return TlengthWithUnit("0.333333em") }

type XsdGoPkgHasAttr_Scriptsizemultiplier_XsdtDecimal_071 struct {
	Scriptsizemultiplier xsdt.Decimal `xml:"http://www.w3.org/1998/Math/MathML scriptsizemultiplier,attr"`

}

//	Returns the default value for Scriptsizemultiplier -- "0.71"
func (me XsdGoPkgHasAttr_Scriptsizemultiplier_XsdtDecimal_071) ScriptsizemultiplierDefault () xsdt.Decimal { return xsdt.Decimal("0.71") }

type XsdGoPkgHasAtts_MstyleAttlist struct {
	XsdGoPkgHasAtts_OperatorAttrib

	XsdGoPkgHasAttr_Linethickness_TxsdMstyleAttlistLinethickness_1

	XsdGoPkgHasAttr_Displaystyle_XsdtBoolean_

	XsdGoPkgHasAttr_Veryverythickmathspace_TlengthWithUnit_0388889Em

	XsdGoPkgHasAttr_Scriptminsize_TlengthWithUnit_8Pt

	XsdGoPkgHasAttr_Verythickmathspace_TlengthWithUnit_0333333Em

	XsdGoPkgHasAttr_Scriptsizemultiplier_XsdtDecimal_071

	XsdGoPkgHasAttr_Color_XsdtString_

	XsdGoPkgHasAtts_TokenStyleAttrib

	XsdGoPkgHasAttr_Verythinmathspace_TlengthWithUnit_0111111Em

	XsdGoPkgHasAttr_Mediummathspace_TlengthWithUnit_0222222Em

	XsdGoPkgHasAttr_Background_XsdtString_Transparent

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Thinmathspace_TlengthWithUnit_0166667Em

	XsdGoPkgHasAttr_Scriptlevel_XsdtInteger_

	XsdGoPkgHasAttr_Thickmathspace_TlengthWithUnit_0277778Em

	XsdGoPkgHasAttr_Veryverythinmathspace_TlengthWithUnit_00555556Em

}

type XsdGoPkgHasAttr_Selection_XsdtPositiveInteger_1 struct {
	Selection xsdt.PositiveInteger `xml:"http://www.w3.org/1998/Math/MathML selection,attr"`

}

//	Returns the default value for Selection -- 1
func (me XsdGoPkgHasAttr_Selection_XsdtPositiveInteger_1) SelectionDefault () xsdt.PositiveInteger { return xsdt.PositiveInteger(1) }

type XsdGoPkgHasAttr_Actiontype_XsdtString_ struct {
	Actiontype xsdt.String `xml:"http://www.w3.org/1998/Math/MathML actiontype,attr"`

}

type XsdGoPkgHasAtts_MactionAttlist struct {
	XsdGoPkgHasAttr_Actiontype_XsdtString_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Selection_XsdtPositiveInteger_1

}

type XsdGoPkgHasAttr_Encoding_XsdtString_ struct {
	Encoding xsdt.String `xml:"http://www.w3.org/1998/Math/MathML encoding,attr"`

}

type XsdGoPkgHasAttr_DefinitionURL_XsdtAnyURI_ struct {
	DefinitionURL xsdt.AnyURI `xml:"http://www.w3.org/1998/Math/MathML definitionURL,attr"`

}

type XsdGoPkgHasAtts_DefinitionAttrib struct {
	XsdGoPkgHasAttr_DefinitionURL_XsdtAnyURI_

	XsdGoPkgHasAttr_Encoding_XsdtString_

}

type TxsdCnAttlistBase xsdt.PositiveInteger

//	Returns a string representation of this TxsdCnAttlistBase's current non-string scalar value.
func (me TxsdCnAttlistBase) String () string { return xsdt.PositiveInteger(me).String() }

//	Since TxsdCnAttlistBase is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdCnAttlistBase) SetFromString (s string)  { (*xsdt.PositiveInteger)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdCnAttlistBase's alias type xsdt.PositiveInteger.
func (me TxsdCnAttlistBase) ToXsdtPositiveInteger () xsdt.PositiveInteger { return xsdt.PositiveInteger(me) }

type XsdGoPkgHasAttr_Base_TxsdCnAttlistBase_ struct {
	Base TxsdCnAttlistBase `xml:"http://www.w3.org/1998/Math/MathML base,attr"`

}

type TxsdCnAttlistType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdCnAttlistType's alias type xsdt.Nmtoken.
func (me TxsdCnAttlistType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "constant".
func (me TxsdCnAttlistType) IsConstant () bool { return me == "constant" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "real".
func (me TxsdCnAttlistType) IsReal () bool { return me == "real" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "e-notation".
func (me TxsdCnAttlistType) IsENotation () bool { return me == "e-notation" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "complex-cartesian".
func (me TxsdCnAttlistType) IsComplexCartesian () bool { return me == "complex-cartesian" }

//	Since TxsdCnAttlistType is just a simple String type, this merely returns the current string value.
func (me TxsdCnAttlistType) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "integer".
func (me TxsdCnAttlistType) IsInteger () bool { return me == "integer" }

//	Since TxsdCnAttlistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCnAttlistType) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "complex-polar".
func (me TxsdCnAttlistType) IsComplexPolar () bool { return me == "complex-polar" }

//	Returns true if the value of this enumerated TxsdCnAttlistType is "rational".
func (me TxsdCnAttlistType) IsRational () bool { return me == "rational" }

type XsdGoPkgHasAttr_Type_TxsdCnAttlistType_ struct {
	Type TxsdCnAttlistType `xml:"http://www.w3.org/1998/Math/MathML type,attr"`

}

type XsdGoPkgHasAtts_CnAttlist struct {
	XsdGoPkgHasAttr_Base_TxsdCnAttlistBase_

	XsdGoPkgHasAttr_Type_TxsdCnAttlistType_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_DefinitionAttrib

}

type XsdGoPkgHasAtts_CiAttlist struct {
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_DefinitionAttrib

}

type XsdGoPkgHasAtts_CsymbolAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_DefinitionAttrib

}

type TxsdIntervalAttlistClosure xsdt.String

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "closed-open".
func (me TxsdIntervalAttlistClosure) IsClosedOpen () bool { return me == "closed-open" }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "open".
func (me TxsdIntervalAttlistClosure) IsOpen () bool { return me == "open" }

//	Since TxsdIntervalAttlistClosure is just a simple String type, this merely returns the current string value.
func (me TxsdIntervalAttlistClosure) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "closed".
func (me TxsdIntervalAttlistClosure) IsClosed () bool { return me == "closed" }

//	This convenience method just performs a simple type conversion to TxsdIntervalAttlistClosure's alias type xsdt.String.
func (me TxsdIntervalAttlistClosure) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdIntervalAttlistClosure is "open-closed".
func (me TxsdIntervalAttlistClosure) IsOpenClosed () bool { return me == "open-closed" }

//	Since TxsdIntervalAttlistClosure is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIntervalAttlistClosure) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed struct {
	Closure TxsdIntervalAttlistClosure `xml:"http://www.w3.org/1998/Math/MathML closure,attr"`

}

//	Returns the default value for Closure -- "closed"
func (me XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed) ClosureDefault () TxsdIntervalAttlistClosure { return TxsdIntervalAttlistClosure("closed") }

type XsdGoPkgHasAtts_IntervalAttlist struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAttr_Closure_TxsdIntervalAttlistClosure_Closed

}

type XsdGoPkgHasAtts_ConditionAttlist struct {
	XsdGoPkgHasAtts_DefinitionAttrib

}

type XsdGoPkgHasAttr_Nargs_XsdtNonNegativeInteger_ struct {
	Nargs xsdt.NonNegativeInteger `xml:"http://www.w3.org/1998/Math/MathML nargs,attr"`

}

type XsdGoPkgHasAttr_Scope_XsdtString_ struct {
	Scope xsdt.String `xml:"http://www.w3.org/1998/Math/MathML scope,attr"`

}

type TxsdDeclareAttlistOccurrence xsdt.String

//	This convenience method just performs a simple type conversion to TxsdDeclareAttlistOccurrence's alias type xsdt.String.
func (me TxsdDeclareAttlistOccurrence) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "function-model".
func (me TxsdDeclareAttlistOccurrence) IsFunctionModel () bool { return me == "function-model" }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "infix".
func (me TxsdDeclareAttlistOccurrence) IsInfix () bool { return me == "infix" }

//	Since TxsdDeclareAttlistOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdDeclareAttlistOccurrence) String () string { return xsdt.String(me).String() }

//	Since TxsdDeclareAttlistOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDeclareAttlistOccurrence) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdDeclareAttlistOccurrence is "prefix".
func (me TxsdDeclareAttlistOccurrence) IsPrefix () bool { return me == "prefix" }

type XsdGoPkgHasAttr_Occurrence_TxsdDeclareAttlistOccurrence_ struct {
	Occurrence TxsdDeclareAttlistOccurrence `xml:"http://www.w3.org/1998/Math/MathML occurrence,attr"`

}

type XsdGoPkgHasAtts_DeclareAttlist struct {
	XsdGoPkgHasAttr_Nargs_XsdtNonNegativeInteger_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAttr_Scope_XsdtString_

	XsdGoPkgHasAttr_Occurrence_TxsdDeclareAttlistOccurrence_

}

type XsdGoPkgHasAtts_AnnotationAttlist struct {
	XsdGoPkgHasAttr_Encoding_XsdtString_

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_SemanticsAttlist struct {
	XsdGoPkgHasAttr_Encoding_XsdtString_

	XsdGoPkgHasAttr_DefinitionURL_XsdtAnyURI_

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasAtts_SetAttlist struct {
	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAtts_CommonAttrib

}

type TxsdListAttlistOrder xsdt.String

//	Returns true if the value of this enumerated TxsdListAttlistOrder is "numeric".
func (me TxsdListAttlistOrder) IsNumeric () bool { return me == "numeric" }

//	Returns true if the value of this enumerated TxsdListAttlistOrder is "lexicographic".
func (me TxsdListAttlistOrder) IsLexicographic () bool { return me == "lexicographic" }

//	Since TxsdListAttlistOrder is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdListAttlistOrder) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdListAttlistOrder is just a simple String type, this merely returns the current string value.
func (me TxsdListAttlistOrder) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdListAttlistOrder's alias type xsdt.String.
func (me TxsdListAttlistOrder) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Order_TxsdListAttlistOrder_ struct {
	Order TxsdListAttlistOrder `xml:"http://www.w3.org/1998/Math/MathML order,attr"`

}

type XsdGoPkgHasAtts_ListAttlist struct {
	XsdGoPkgHasAttr_Order_TxsdListAttlistOrder_

	XsdGoPkgHasAtts_CommonAttrib

}

type XsdGoPkgHasGroup_PresentationExprClass struct {
	XsdGoPkgHasGroup_ContExprClass

	XsdGoPkgHasGroup_PresExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationExprClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationExprClass instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationExprClass instance.
func (me *XsdGoPkgHasGroup_PresentationExprClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationExprClass; fn != nil { fn(me) }
 }

type TmsubType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MsubAttlist

}

//	If the WalkHandlers.TmsubType function is not nil (ie. was set by outside code), calls it with this TmsubType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmsubType instance.
func (me *TmsubType) Walk ()  { 
	if fn := WalkHandlers.TmsubType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Msub struct {
	Msub *TmsubType `xml:"http://www.w3.org/1998/Math/MathML msub"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Msub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msub instance.
func (me *XsdGoPkgHasElem_Msub) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Msub; fn != nil { fn(me) }
	me.Msub.Walk()
 }

type TmoverType struct {
	XsdGoPkgHasAtts_MoverAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmoverType function is not nil (ie. was set by outside code), calls it with this TmoverType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmoverType instance.
func (me *TmoverType) Walk ()  { 
	if fn := WalkHandlers.TmoverType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mover struct {
	Mover *TmoverType `xml:"http://www.w3.org/1998/Math/MathML mover"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mover instance.
func (me *XsdGoPkgHasElem_Mover) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mover; fn != nil { fn(me) }
	me.Mover.Walk()
 }

type TmunderoverType struct {
	XsdGoPkgHasAtts_MunderoverAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmunderoverType function is not nil (ie. was set by outside code), calls it with this TmunderoverType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmunderoverType instance.
func (me *TmunderoverType) Walk ()  { 
	if fn := WalkHandlers.TmunderoverType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Munderover struct {
	Munderover *TmunderoverType `xml:"http://www.w3.org/1998/Math/MathML munderover"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Munderover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Munderover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Munderover instance.
func (me *XsdGoPkgHasElem_Munderover) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Munderover; fn != nil { fn(me) }
	me.Munderover.Walk()
 }

type TmunderType struct {
	XsdGoPkgHasAtts_MunderAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmunderType function is not nil (ie. was set by outside code), calls it with this TmunderType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmunderType instance.
func (me *TmunderType) Walk ()  { 
	if fn := WalkHandlers.TmunderType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Munder struct {
	Munder *TmunderType `xml:"http://www.w3.org/1998/Math/MathML munder"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Munder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Munder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Munder instance.
func (me *XsdGoPkgHasElem_Munder) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Munder; fn != nil { fn(me) }
	me.Munder.Walk()
 }

type TmprescriptsType struct {
}

//	If the WalkHandlers.TmprescriptsType function is not nil (ie. was set by outside code), calls it with this TmprescriptsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TmprescriptsType instance.
func (me *TmprescriptsType) Walk ()  { 
	if fn := WalkHandlers.TmprescriptsType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Mprescripts struct {
	Mprescripts *TmprescriptsType `xml:"http://www.w3.org/1998/Math/MathML mprescripts"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mprescripts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mprescripts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mprescripts instance.
func (me *XsdGoPkgHasElem_Mprescripts) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mprescripts; fn != nil { fn(me) }
	me.Mprescripts.Walk()
 }

type TnoneType struct {
}

//	If the WalkHandlers.TnoneType function is not nil (ie. was set by outside code), calls it with this TnoneType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TnoneType instance.
func (me *TnoneType) Walk ()  { 
	if fn := WalkHandlers.TnoneType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_None struct {
	None *TnoneType `xml:"http://www.w3.org/1998/Math/MathML none"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_None instance.
func (me *XsdGoPkgHasElem_None) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_None; fn != nil { fn(me) }
	me.None.Walk()
 }

type XsdGoPkgHasGroup_PresentationExprOrNoneClass struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasElem_None

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationExprOrNoneClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationExprOrNoneClass instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationExprOrNoneClass instance.
func (me *XsdGoPkgHasGroup_PresentationExprOrNoneClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationExprOrNoneClass; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
	me.XsdGoPkgHasElem_None.Walk()
 }

type XsdGoPkgHasGroup_MmultiscriptsContent struct {
	XsdGoPkgHasElem_Mprescripts

	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasGroup_PresentationExprOrNoneClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MmultiscriptsContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MmultiscriptsContent instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MmultiscriptsContent instance.
func (me *XsdGoPkgHasGroup_MmultiscriptsContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MmultiscriptsContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
	me.XsdGoPkgHasGroup_PresentationExprOrNoneClass.Walk()
	me.XsdGoPkgHasElem_Mprescripts.Walk()
 }

type TmmultiscriptsType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_MmultiscriptsContent

}

//	If the WalkHandlers.TmmultiscriptsType function is not nil (ie. was set by outside code), calls it with this TmmultiscriptsType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmmultiscriptsType instance.
func (me *TmmultiscriptsType) Walk ()  { 
	if fn := WalkHandlers.TmmultiscriptsType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MmultiscriptsContent.Walk()
 }

type XsdGoPkgHasElem_Mmultiscripts struct {
	Mmultiscripts *TmmultiscriptsType `xml:"http://www.w3.org/1998/Math/MathML mmultiscripts"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mmultiscripts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mmultiscripts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mmultiscripts instance.
func (me *XsdGoPkgHasElem_Mmultiscripts) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mmultiscripts; fn != nil { fn(me) }
	me.Mmultiscripts.Walk()
 }

type TmsubsupType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MsubsupAttlist

}

//	If the WalkHandlers.TmsubsupType function is not nil (ie. was set by outside code), calls it with this TmsubsupType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmsubsupType instance.
func (me *TmsubsupType) Walk ()  { 
	if fn := WalkHandlers.TmsubsupType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Msubsup struct {
	Msubsup *TmsubsupType `xml:"http://www.w3.org/1998/Math/MathML msubsup"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Msubsup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msubsup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msubsup instance.
func (me *XsdGoPkgHasElem_Msubsup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Msubsup; fn != nil { fn(me) }
	me.Msubsup.Walk()
 }

type TmsupType struct {
	XsdGoPkgHasAtts_MsupAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmsupType function is not nil (ie. was set by outside code), calls it with this TmsupType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmsupType instance.
func (me *TmsupType) Walk ()  { 
	if fn := WalkHandlers.TmsupType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Msup struct {
	Msup *TmsupType `xml:"http://www.w3.org/1998/Math/MathML msup"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Msup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msup instance.
func (me *XsdGoPkgHasElem_Msup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Msup; fn != nil { fn(me) }
	me.Msup.Walk()
 }

type XsdGoPkgHasGroup_PresentationScriptClass struct {
	XsdGoPkgHasElem_Msup

	XsdGoPkgHasElem_Msub

	XsdGoPkgHasElem_Mover

	XsdGoPkgHasElem_Munderover

	XsdGoPkgHasElem_Munder

	XsdGoPkgHasElem_Mmultiscripts

	XsdGoPkgHasElem_Msubsup

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationScriptClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationScriptClass instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationScriptClass instance.
func (me *XsdGoPkgHasGroup_PresentationScriptClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationScriptClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Msup.Walk()
	me.XsdGoPkgHasElem_Msub.Walk()
	me.XsdGoPkgHasElem_Mover.Walk()
	me.XsdGoPkgHasElem_Munderover.Walk()
	me.XsdGoPkgHasElem_Munder.Walk()
	me.XsdGoPkgHasElem_Mmultiscripts.Walk()
	me.XsdGoPkgHasElem_Msubsup.Walk()
 }

type XsdGoPkgHasGroup_MtdContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MtdContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MtdContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MtdContent instance.
func (me *XsdGoPkgHasGroup_MtdContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MtdContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TmtdType struct {
	XsdGoPkgHasAtts_MtdAttlist

	XsdGoPkgHasGroup_MtdContent

}

//	If the WalkHandlers.TmtdType function is not nil (ie. was set by outside code), calls it with this TmtdType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmtdType instance.
func (me *TmtdType) Walk ()  { 
	if fn := WalkHandlers.TmtdType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MtdContent.Walk()
 }

type XsdGoPkgHasElem_Mtd struct {
	Mtd *TmtdType `xml:"http://www.w3.org/1998/Math/MathML mtd"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mtd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mtd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mtd instance.
func (me *XsdGoPkgHasElem_Mtd) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mtd; fn != nil { fn(me) }
	me.Mtd.Walk()
 }

type XsdGoPkgHasGroup_MtrContent struct {
	XsdGoPkgHasElem_Mtd

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MtrContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MtrContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MtrContent instance.
func (me *XsdGoPkgHasGroup_MtrContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MtrContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mtd.Walk()
 }

type TmtrType struct {
	XsdGoPkgHasAtts_MtrAttlist

	XsdGoPkgHasGroup_MtrContent

}

//	If the WalkHandlers.TmtrType function is not nil (ie. was set by outside code), calls it with this TmtrType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmtrType instance.
func (me *TmtrType) Walk ()  { 
	if fn := WalkHandlers.TmtrType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MtrContent.Walk()
 }

type XsdGoPkgHasElem_Mtr struct {
	Mtr *TmtrType `xml:"http://www.w3.org/1998/Math/MathML mtr"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mtr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mtr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mtr instance.
func (me *XsdGoPkgHasElem_Mtr) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mtr; fn != nil { fn(me) }
	me.Mtr.Walk()
 }

type XsdGoPkgHasGroup_MlabeledtrContent struct {
	XsdGoPkgHasElem_Mtd

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MlabeledtrContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MlabeledtrContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MlabeledtrContent instance.
func (me *XsdGoPkgHasGroup_MlabeledtrContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MlabeledtrContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mtd.Walk()
 }

type TmlabeledtrType struct {
	XsdGoPkgHasAtts_MtrAttlist

	XsdGoPkgHasGroup_MlabeledtrContent

}

//	If the WalkHandlers.TmlabeledtrType function is not nil (ie. was set by outside code), calls it with this TmlabeledtrType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmlabeledtrType instance.
func (me *TmlabeledtrType) Walk ()  { 
	if fn := WalkHandlers.TmlabeledtrType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MlabeledtrContent.Walk()
 }

type XsdGoPkgHasElem_Mlabeledtr struct {
	Mlabeledtr *TmlabeledtrType `xml:"http://www.w3.org/1998/Math/MathML mlabeledtr"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mlabeledtr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mlabeledtr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mlabeledtr instance.
func (me *XsdGoPkgHasElem_Mlabeledtr) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mlabeledtr; fn != nil { fn(me) }
	me.Mlabeledtr.Walk()
 }

type XsdGoPkgHasGroup_MtableContent struct {
	XsdGoPkgHasElem_Mtr

	XsdGoPkgHasElem_Mlabeledtr

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MtableContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MtableContent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MtableContent instance.
func (me *XsdGoPkgHasGroup_MtableContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MtableContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mtr.Walk()
	me.XsdGoPkgHasElem_Mlabeledtr.Walk()
 }

type TmtableType struct {
	XsdGoPkgHasGroup_MtableContent

	XsdGoPkgHasAtts_MtableAttlist

}

//	If the WalkHandlers.TmtableType function is not nil (ie. was set by outside code), calls it with this TmtableType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmtableType instance.
func (me *TmtableType) Walk ()  { 
	if fn := WalkHandlers.TmtableType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MtableContent.Walk()
 }

type XsdGoPkgHasElem_Mtable struct {
	Mtable *TmtableType `xml:"http://www.w3.org/1998/Math/MathML mtable"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mtable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mtable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mtable instance.
func (me *XsdGoPkgHasElem_Mtable) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mtable; fn != nil { fn(me) }
	me.Mtable.Walk()
 }

type TmaligngroupType struct {
	XsdGoPkgHasAtts_MaligngroupAttlist

}

//	If the WalkHandlers.TmaligngroupType function is not nil (ie. was set by outside code), calls it with this TmaligngroupType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmaligngroupType instance.
func (me *TmaligngroupType) Walk ()  { 
	if fn := WalkHandlers.TmaligngroupType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Maligngroup struct {
	Maligngroup *TmaligngroupType `xml:"http://www.w3.org/1998/Math/MathML maligngroup"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Maligngroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Maligngroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Maligngroup instance.
func (me *XsdGoPkgHasElem_Maligngroup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Maligngroup; fn != nil { fn(me) }
	me.Maligngroup.Walk()
 }

type TmalignmarkType struct {
	XsdGoPkgHasAtts_MalignmarkAttlist

}

//	If the WalkHandlers.TmalignmarkType function is not nil (ie. was set by outside code), calls it with this TmalignmarkType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmalignmarkType instance.
func (me *TmalignmarkType) Walk ()  { 
	if fn := WalkHandlers.TmalignmarkType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Malignmark struct {
	Malignmark *TmalignmarkType `xml:"http://www.w3.org/1998/Math/MathML malignmark"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Malignmark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Malignmark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Malignmark instance.
func (me *XsdGoPkgHasElem_Malignmark) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Malignmark; fn != nil { fn(me) }
	me.Malignmark.Walk()
 }

type XsdGoPkgHasGroup_PresentationTableClass struct {
	XsdGoPkgHasElem_Mtable

	XsdGoPkgHasElem_Maligngroup

	XsdGoPkgHasElem_Malignmark

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationTableClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationTableClass instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationTableClass instance.
func (me *XsdGoPkgHasGroup_PresentationTableClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationTableClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Maligngroup.Walk()
	me.XsdGoPkgHasElem_Malignmark.Walk()
	me.XsdGoPkgHasElem_Mtable.Walk()
 }

type XsdGoPkgHasGroup_MstyleContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MstyleContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MstyleContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MstyleContent instance.
func (me *XsdGoPkgHasGroup_MstyleContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MstyleContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TmstyleType struct {
	XsdGoPkgHasAtts_MstyleAttlist

	XsdGoPkgHasGroup_MstyleContent

}

//	If the WalkHandlers.TmstyleType function is not nil (ie. was set by outside code), calls it with this TmstyleType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmstyleType instance.
func (me *TmstyleType) Walk ()  { 
	if fn := WalkHandlers.TmstyleType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MstyleContent.Walk()
 }

type XsdGoPkgHasElem_Mstyle struct {
	Mstyle *TmstyleType `xml:"http://www.w3.org/1998/Math/MathML mstyle"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mstyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mstyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mstyle instance.
func (me *XsdGoPkgHasElem_Mstyle) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mstyle; fn != nil { fn(me) }
	me.Mstyle.Walk()
 }

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`

}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasCdata; fn != nil { fn(me) }
 }

type TmglyphType struct {
	XsdGoPkgHasAtts_MglyphAttlist

}

//	If the WalkHandlers.TmglyphType function is not nil (ie. was set by outside code), calls it with this TmglyphType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmglyphType instance.
func (me *TmglyphType) Walk ()  { 
	if fn := WalkHandlers.TmglyphType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Mglyph struct {
	Mglyph *TmglyphType `xml:"http://www.w3.org/1998/Math/MathML mglyph"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mglyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mglyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mglyph instance.
func (me *XsdGoPkgHasElem_Mglyph) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mglyph; fn != nil { fn(me) }
	me.Mglyph.Walk()
 }

type XsdGoPkgHasGroup_GlyphAlignmarkClass struct {
	XsdGoPkgHasElem_Malignmark

	XsdGoPkgHasElem_Mglyph

}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlyphAlignmarkClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlyphAlignmarkClass instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlyphAlignmarkClass instance.
func (me *XsdGoPkgHasGroup_GlyphAlignmarkClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlyphAlignmarkClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mglyph.Walk()
	me.XsdGoPkgHasElem_Malignmark.Walk()
 }

type TmnType struct {
	XsdGoPkgHasAtts_MiAttlist

	XsdGoPkgHasGroup_GlyphAlignmarkClass

	XsdGoPkgHasCdata

}

//	If the WalkHandlers.TmnType function is not nil (ie. was set by outside code), calls it with this TmnType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TmnType instance.
func (me *TmnType) Walk ()  { 
	if fn := WalkHandlers.TmnType; fn != nil { fn(me) }
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasGroup_GlyphAlignmarkClass.Walk()
 }

type XsdGoPkgHasElem_Mn struct {
	Mn *TmnType `xml:"http://www.w3.org/1998/Math/MathML mn"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mn instance.
func (me *XsdGoPkgHasElem_Mn) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mn; fn != nil { fn(me) }
	me.Mn.Walk()
 }

type TmtextType struct {
	XsdGoPkgHasAtts_MiAttlist

	XsdGoPkgHasGroup_GlyphAlignmarkClass

	XsdGoPkgHasCdata

}

//	If the WalkHandlers.TmtextType function is not nil (ie. was set by outside code), calls it with this TmtextType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TmtextType instance.
func (me *TmtextType) Walk ()  { 
	if fn := WalkHandlers.TmtextType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_GlyphAlignmarkClass.Walk()
	me.XsdGoPkgHasCdata.Walk()
 }

type XsdGoPkgHasElem_Mtext struct {
	Mtext *TmtextType `xml:"http://www.w3.org/1998/Math/MathML mtext"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mtext instance.
func (me *XsdGoPkgHasElem_Mtext) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mtext; fn != nil { fn(me) }
	me.Mtext.Walk()
 }

type TmiType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_MiAttlist

	XsdGoPkgHasGroup_GlyphAlignmarkClass

}

//	If the WalkHandlers.TmiType function is not nil (ie. was set by outside code), calls it with this TmiType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TmiType instance.
func (me *TmiType) Walk ()  { 
	if fn := WalkHandlers.TmiType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_GlyphAlignmarkClass.Walk()
	me.XsdGoPkgHasCdata.Walk()
 }

type XsdGoPkgHasElem_Mi struct {
	Mi *TmiType `xml:"http://www.w3.org/1998/Math/MathML mi"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mi instance.
func (me *XsdGoPkgHasElem_Mi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mi; fn != nil { fn(me) }
	me.Mi.Walk()
 }

type TmsType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_GlyphAlignmarkClass

	XsdGoPkgHasAtts_MsAttlist

}

//	If the WalkHandlers.TmsType function is not nil (ie. was set by outside code), calls it with this TmsType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TmsType instance.
func (me *TmsType) Walk ()  { 
	if fn := WalkHandlers.TmsType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_GlyphAlignmarkClass.Walk()
	me.XsdGoPkgHasCdata.Walk()
 }

type XsdGoPkgHasElem_Ms struct {
	Ms *TmsType `xml:"http://www.w3.org/1998/Math/MathML ms"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Ms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ms instance.
func (me *XsdGoPkgHasElem_Ms) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Ms; fn != nil { fn(me) }
	me.Ms.Walk()
 }

type TmoType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_GlyphAlignmarkClass

	XsdGoPkgHasAtts_MoAttlist

}

//	If the WalkHandlers.TmoType function is not nil (ie. was set by outside code), calls it with this TmoType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TmoType instance.
func (me *TmoType) Walk ()  { 
	if fn := WalkHandlers.TmoType; fn != nil { fn(me) }
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasGroup_GlyphAlignmarkClass.Walk()
 }

type XsdGoPkgHasElem_Mo struct {
	Mo *TmoType `xml:"http://www.w3.org/1998/Math/MathML mo"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mo instance.
func (me *XsdGoPkgHasElem_Mo) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mo; fn != nil { fn(me) }
	me.Mo.Walk()
 }

type XsdGoPkgHasGroup_PresentationTokenClass struct {
	XsdGoPkgHasElem_Mo

	XsdGoPkgHasElem_Mn

	XsdGoPkgHasElem_Mtext

	XsdGoPkgHasElem_Mi

	XsdGoPkgHasElem_Ms

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationTokenClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationTokenClass instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationTokenClass instance.
func (me *XsdGoPkgHasGroup_PresentationTokenClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationTokenClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mtext.Walk()
	me.XsdGoPkgHasElem_Mi.Walk()
	me.XsdGoPkgHasElem_Ms.Walk()
	me.XsdGoPkgHasElem_Mo.Walk()
	me.XsdGoPkgHasElem_Mn.Walk()
 }

type XsdGoPkgHasGroup_MactionContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MactionContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MactionContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MactionContent instance.
func (me *XsdGoPkgHasGroup_MactionContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MactionContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TmactionType struct {
	XsdGoPkgHasAtts_MactionAttlist

	XsdGoPkgHasGroup_MactionContent

}

//	If the WalkHandlers.TmactionType function is not nil (ie. was set by outside code), calls it with this TmactionType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmactionType instance.
func (me *TmactionType) Walk ()  { 
	if fn := WalkHandlers.TmactionType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MactionContent.Walk()
 }

type XsdGoPkgHasElem_Maction struct {
	Maction *TmactionType `xml:"http://www.w3.org/1998/Math/MathML maction"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Maction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Maction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Maction instance.
func (me *XsdGoPkgHasElem_Maction) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Maction; fn != nil { fn(me) }
	me.Maction.Walk()
 }

type TmspaceType struct {
	XsdGoPkgHasAtts_MspaceAttlist

}

//	If the WalkHandlers.TmspaceType function is not nil (ie. was set by outside code), calls it with this TmspaceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmspaceType instance.
func (me *TmspaceType) Walk ()  { 
	if fn := WalkHandlers.TmspaceType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Mspace struct {
	Mspace *TmspaceType `xml:"http://www.w3.org/1998/Math/MathML mspace"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mspace function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mspace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mspace instance.
func (me *XsdGoPkgHasElem_Mspace) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mspace; fn != nil { fn(me) }
	me.Mspace.Walk()
 }

type XsdGoPkgHasGroup_MerrorContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MerrorContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MerrorContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MerrorContent instance.
func (me *XsdGoPkgHasGroup_MerrorContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MerrorContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TmerrorType struct {
	XsdGoPkgHasGroup_MerrorContent

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TmerrorType function is not nil (ie. was set by outside code), calls it with this TmerrorType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmerrorType instance.
func (me *TmerrorType) Walk ()  { 
	if fn := WalkHandlers.TmerrorType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MerrorContent.Walk()
 }

type XsdGoPkgHasElem_Merror struct {
	Merror *TmerrorType `xml:"http://www.w3.org/1998/Math/MathML merror"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Merror function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Merror instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Merror instance.
func (me *XsdGoPkgHasElem_Merror) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Merror; fn != nil { fn(me) }
	me.Merror.Walk()
 }

type TmrootType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TmrootType function is not nil (ie. was set by outside code), calls it with this TmrootType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmrootType instance.
func (me *TmrootType) Walk ()  { 
	if fn := WalkHandlers.TmrootType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mroot struct {
	Mroot *TmrootType `xml:"http://www.w3.org/1998/Math/MathML mroot"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mroot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mroot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mroot instance.
func (me *XsdGoPkgHasElem_Mroot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mroot; fn != nil { fn(me) }
	me.Mroot.Walk()
 }

type TmrowType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TmrowType function is not nil (ie. was set by outside code), calls it with this TmrowType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmrowType instance.
func (me *TmrowType) Walk ()  { 
	if fn := WalkHandlers.TmrowType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mrow struct {
	Mrow *TmrowType `xml:"http://www.w3.org/1998/Math/MathML mrow"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mrow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mrow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mrow instance.
func (me *XsdGoPkgHasElem_Mrow) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mrow; fn != nil { fn(me) }
	me.Mrow.Walk()
 }

type TmphantomType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmphantomType function is not nil (ie. was set by outside code), calls it with this TmphantomType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmphantomType instance.
func (me *TmphantomType) Walk ()  { 
	if fn := WalkHandlers.TmphantomType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mphantom struct {
	Mphantom *TmphantomType `xml:"http://www.w3.org/1998/Math/MathML mphantom"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mphantom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mphantom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mphantom instance.
func (me *XsdGoPkgHasElem_Mphantom) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mphantom; fn != nil { fn(me) }
	me.Mphantom.Walk()
 }

type TmfracType struct {
	XsdGoPkgHasAtts_MfracAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmfracType function is not nil (ie. was set by outside code), calls it with this TmfracType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmfracType instance.
func (me *TmfracType) Walk ()  { 
	if fn := WalkHandlers.TmfracType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mfrac struct {
	Mfrac *TmfracType `xml:"http://www.w3.org/1998/Math/MathML mfrac"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mfrac function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mfrac instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mfrac instance.
func (me *XsdGoPkgHasElem_Mfrac) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mfrac; fn != nil { fn(me) }
	me.Mfrac.Walk()
 }

type TmpaddedType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MpaddedAttlist

}

//	If the WalkHandlers.TmpaddedType function is not nil (ie. was set by outside code), calls it with this TmpaddedType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmpaddedType instance.
func (me *TmpaddedType) Walk ()  { 
	if fn := WalkHandlers.TmpaddedType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mpadded struct {
	Mpadded *TmpaddedType `xml:"http://www.w3.org/1998/Math/MathML mpadded"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mpadded function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mpadded instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mpadded instance.
func (me *XsdGoPkgHasElem_Mpadded) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mpadded; fn != nil { fn(me) }
	me.Mpadded.Walk()
 }

type TmfencedType struct {
	XsdGoPkgHasGroup_PresentationExprClass

	XsdGoPkgHasAtts_MfencedAttlist

}

//	If the WalkHandlers.TmfencedType function is not nil (ie. was set by outside code), calls it with this TmfencedType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmfencedType instance.
func (me *TmfencedType) Walk ()  { 
	if fn := WalkHandlers.TmfencedType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Mfenced struct {
	Mfenced *TmfencedType `xml:"http://www.w3.org/1998/Math/MathML mfenced"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mfenced function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mfenced instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mfenced instance.
func (me *XsdGoPkgHasElem_Mfenced) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mfenced; fn != nil { fn(me) }
	me.Mfenced.Walk()
 }

type TmencloseType struct {
	XsdGoPkgHasAtts_MencloseAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmencloseType function is not nil (ie. was set by outside code), calls it with this TmencloseType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmencloseType instance.
func (me *TmencloseType) Walk ()  { 
	if fn := WalkHandlers.TmencloseType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Menclose struct {
	Menclose *TmencloseType `xml:"http://www.w3.org/1998/Math/MathML menclose"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Menclose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Menclose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Menclose instance.
func (me *XsdGoPkgHasElem_Menclose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Menclose; fn != nil { fn(me) }
	me.Menclose.Walk()
 }

type TmsqrtType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.TmsqrtType function is not nil (ie. was set by outside code), calls it with this TmsqrtType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmsqrtType instance.
func (me *TmsqrtType) Walk ()  { 
	if fn := WalkHandlers.TmsqrtType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type XsdGoPkgHasElem_Msqrt struct {
	Msqrt *TmsqrtType `xml:"http://www.w3.org/1998/Math/MathML msqrt"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Msqrt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msqrt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msqrt instance.
func (me *XsdGoPkgHasElem_Msqrt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Msqrt; fn != nil { fn(me) }
	me.Msqrt.Walk()
 }

type XsdGoPkgHasGroup_PresentationLayoutClass struct {
	XsdGoPkgHasElem_Mrow

	XsdGoPkgHasElem_Mphantom

	XsdGoPkgHasElem_Mfrac

	XsdGoPkgHasElem_Mpadded

	XsdGoPkgHasElem_Mfenced

	XsdGoPkgHasElem_Menclose

	XsdGoPkgHasElem_Msqrt

	XsdGoPkgHasElem_Mroot

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresentationLayoutClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresentationLayoutClass instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresentationLayoutClass instance.
func (me *XsdGoPkgHasGroup_PresentationLayoutClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresentationLayoutClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Mphantom.Walk()
	me.XsdGoPkgHasElem_Mfrac.Walk()
	me.XsdGoPkgHasElem_Mpadded.Walk()
	me.XsdGoPkgHasElem_Mfenced.Walk()
	me.XsdGoPkgHasElem_Menclose.Walk()
	me.XsdGoPkgHasElem_Msqrt.Walk()
	me.XsdGoPkgHasElem_Mroot.Walk()
	me.XsdGoPkgHasElem_Mrow.Walk()
 }

type XsdGoPkgHasGroup_PresExprClass struct {
	XsdGoPkgHasElem_Merror

	XsdGoPkgHasGroup_PresentationLayoutClass

	XsdGoPkgHasGroup_PresentationScriptClass

	XsdGoPkgHasGroup_PresentationTableClass

	XsdGoPkgHasElem_Mstyle

	XsdGoPkgHasGroup_PresentationTokenClass

	XsdGoPkgHasElem_Maction

	XsdGoPkgHasElem_Mspace

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PresExprClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PresExprClass instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PresExprClass instance.
func (me *XsdGoPkgHasGroup_PresExprClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PresExprClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Maction.Walk()
	me.XsdGoPkgHasElem_Mspace.Walk()
	me.XsdGoPkgHasElem_Merror.Walk()
	me.XsdGoPkgHasGroup_PresentationLayoutClass.Walk()
	me.XsdGoPkgHasGroup_PresentationScriptClass.Walk()
	me.XsdGoPkgHasGroup_PresentationTableClass.Walk()
	me.XsdGoPkgHasElem_Mstyle.Walk()
	me.XsdGoPkgHasGroup_PresentationTokenClass.Walk()
 }

type XsdGoPkgHasGroup_ContentExprClass struct {
	XsdGoPkgHasGroup_ContExprClass

	XsdGoPkgHasGroup_PresExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentExprClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentExprClass instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentExprClass instance.
func (me *XsdGoPkgHasGroup_ContentExprClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentExprClass; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresExprClass.Walk()
 }

type TannotationType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AnnotationAttlist

}

//	If the WalkHandlers.TannotationType function is not nil (ie. was set by outside code), calls it with this TannotationType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TannotationType instance.
func (me *TannotationType) Walk ()  { 
	if fn := WalkHandlers.TannotationType; fn != nil { fn(me) }
	me.XsdGoPkgHasCdata.Walk()
 }

type XsdGoPkgHasElem_Annotation struct {
	Annotation *TannotationType `xml:"http://www.w3.org/1998/Math/MathML annotation"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Annotation instance.
func (me *XsdGoPkgHasElem_Annotation) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Annotation; fn != nil { fn(me) }
	me.Annotation.Walk()
 }

type XsdGoPkgHasGroup_AnnotationXmlContent struct {
}

//	If the WalkHandlers.XsdGoPkgHasGroup_AnnotationXmlContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_AnnotationXmlContent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_AnnotationXmlContent instance.
func (me *XsdGoPkgHasGroup_AnnotationXmlContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_AnnotationXmlContent; fn != nil { fn(me) }
 }

type TannotationXmlType struct {
	XsdGoPkgHasAtts_AnnotationAttlist

	XsdGoPkgHasGroup_AnnotationXmlContent

}

//	If the WalkHandlers.TannotationXmlType function is not nil (ie. was set by outside code), calls it with this TannotationXmlType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TannotationXmlType instance.
func (me *TannotationXmlType) Walk ()  { 
	if fn := WalkHandlers.TannotationXmlType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_AnnotationXmlContent.Walk()
 }

type XsdGoPkgHasElem_AnnotationXml struct {
	AnnotationXml *TannotationXmlType `xml:"http://www.w3.org/1998/Math/MathML annotation-xml"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AnnotationXml function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnnotationXml instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnnotationXml instance.
func (me *XsdGoPkgHasElem_AnnotationXml) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AnnotationXml; fn != nil { fn(me) }
	me.AnnotationXml.Walk()
 }

type XsdGoPkgHasGroup_AnnotationClass struct {
	XsdGoPkgHasElem_AnnotationXml

	XsdGoPkgHasElem_Annotation

}

//	If the WalkHandlers.XsdGoPkgHasGroup_AnnotationClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_AnnotationClass instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_AnnotationClass instance.
func (me *XsdGoPkgHasGroup_AnnotationClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_AnnotationClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Annotation.Walk()
	me.XsdGoPkgHasElem_AnnotationXml.Walk()
 }

type XsdGoPkgHasGroup_SemanticsContent struct {
	XsdGoPkgHasGroup_ContentExprClass

	XsdGoPkgHasGroup_AnnotationClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_SemanticsContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_SemanticsContent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_SemanticsContent instance.
func (me *XsdGoPkgHasGroup_SemanticsContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_SemanticsContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
	me.XsdGoPkgHasGroup_AnnotationClass.Walk()
 }

type TsemanticsType struct {
	XsdGoPkgHasGroup_SemanticsContent

	XsdGoPkgHasAtts_SemanticsAttlist

}

//	If the WalkHandlers.TsemanticsType function is not nil (ie. was set by outside code), calls it with this TsemanticsType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TsemanticsType instance.
func (me *TsemanticsType) Walk ()  { 
	if fn := WalkHandlers.TsemanticsType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_SemanticsContent.Walk()
 }

type XsdGoPkgHasElem_Semantics struct {
	Semantics *TsemanticsType `xml:"http://www.w3.org/1998/Math/MathML semantics"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Semantics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Semantics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Semantics instance.
func (me *XsdGoPkgHasElem_Semantics) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Semantics; fn != nil { fn(me) }
	me.Semantics.Walk()
 }

type TdivergenceType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TdivergenceType function is not nil (ie. was set by outside code), calls it with this TdivergenceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TdivergenceType instance.
func (me *TdivergenceType) Walk ()  { 
	if fn := WalkHandlers.TdivergenceType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Divergence struct {
	Divergence *TdivergenceType `xml:"http://www.w3.org/1998/Math/MathML divergence"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Divergence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Divergence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Divergence instance.
func (me *XsdGoPkgHasElem_Divergence) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Divergence; fn != nil { fn(me) }
	me.Divergence.Walk()
 }

type TlaplacianType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TlaplacianType function is not nil (ie. was set by outside code), calls it with this TlaplacianType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TlaplacianType instance.
func (me *TlaplacianType) Walk ()  { 
	if fn := WalkHandlers.TlaplacianType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Laplacian struct {
	Laplacian *TlaplacianType `xml:"http://www.w3.org/1998/Math/MathML laplacian"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Laplacian function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Laplacian instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Laplacian instance.
func (me *XsdGoPkgHasElem_Laplacian) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Laplacian; fn != nil { fn(me) }
	me.Laplacian.Walk()
 }

type TgradType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TgradType function is not nil (ie. was set by outside code), calls it with this TgradType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TgradType instance.
func (me *TgradType) Walk ()  { 
	if fn := WalkHandlers.TgradType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Grad struct {
	Grad *TgradType `xml:"http://www.w3.org/1998/Math/MathML grad"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Grad function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Grad instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Grad instance.
func (me *XsdGoPkgHasElem_Grad) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Grad; fn != nil { fn(me) }
	me.Grad.Walk()
 }

type TcurlType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TcurlType function is not nil (ie. was set by outside code), calls it with this TcurlType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcurlType instance.
func (me *TcurlType) Walk ()  { 
	if fn := WalkHandlers.TcurlType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Curl struct {
	Curl *TcurlType `xml:"http://www.w3.org/1998/Math/MathML curl"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Curl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Curl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Curl instance.
func (me *XsdGoPkgHasElem_Curl) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Curl; fn != nil { fn(me) }
	me.Curl.Walk()
 }

type XsdGoPkgHasGroup_ContentVectorCalculusClass struct {
	XsdGoPkgHasElem_Grad

	XsdGoPkgHasElem_Curl

	XsdGoPkgHasElem_Divergence

	XsdGoPkgHasElem_Laplacian

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentVectorCalculusClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentVectorCalculusClass instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentVectorCalculusClass instance.
func (me *XsdGoPkgHasGroup_ContentVectorCalculusClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentVectorCalculusClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Divergence.Walk()
	me.XsdGoPkgHasElem_Laplacian.Walk()
	me.XsdGoPkgHasElem_Grad.Walk()
	me.XsdGoPkgHasElem_Curl.Walk()
 }

type TElementaryFunctionsType struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

//	If the WalkHandlers.TElementaryFunctionsType function is not nil (ie. was set by outside code), calls it with this TElementaryFunctionsType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TElementaryFunctionsType instance.
func (me *TElementaryFunctionsType) Walk ()  { 
	if fn := WalkHandlers.TElementaryFunctionsType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_And struct {
	And *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML and"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_And function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_And instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_And instance.
func (me *XsdGoPkgHasElem_And) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_And; fn != nil { fn(me) }
	me.And.Walk()
 }

type TLogicType struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

//	If the WalkHandlers.TLogicType function is not nil (ie. was set by outside code), calls it with this TLogicType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TLogicType instance.
func (me *TLogicType) Walk ()  { 
	if fn := WalkHandlers.TLogicType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Not struct {
	Not *TLogicType `xml:"http://www.w3.org/1998/Math/MathML not"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Not function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Not instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Not instance.
func (me *XsdGoPkgHasElem_Not) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Not; fn != nil { fn(me) }
	me.Not.Walk()
 }

type XsdGoPkgHasElem_Or struct {
	Or *TLogicType `xml:"http://www.w3.org/1998/Math/MathML or"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Or function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Or instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Or instance.
func (me *XsdGoPkgHasElem_Or) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Or; fn != nil { fn(me) }
	me.Or.Walk()
 }

type XsdGoPkgHasElem_Implies struct {
	Implies *TLogicType `xml:"http://www.w3.org/1998/Math/MathML implies"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Implies function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Implies instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Implies instance.
func (me *XsdGoPkgHasElem_Implies) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Implies; fn != nil { fn(me) }
	me.Implies.Walk()
 }

type XsdGoPkgHasElem_Exists struct {
	Exists *TLogicType `xml:"http://www.w3.org/1998/Math/MathML exists"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Exists function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Exists instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Exists instance.
func (me *XsdGoPkgHasElem_Exists) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Exists; fn != nil { fn(me) }
	me.Exists.Walk()
 }

type XsdGoPkgHasElem_Xor struct {
	Xor *TLogicType `xml:"http://www.w3.org/1998/Math/MathML xor"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Xor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xor instance.
func (me *XsdGoPkgHasElem_Xor) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Xor; fn != nil { fn(me) }
	me.Xor.Walk()
 }

type XsdGoPkgHasElem_Forall struct {
	Forall *TLogicType `xml:"http://www.w3.org/1998/Math/MathML forall"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Forall function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Forall instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Forall instance.
func (me *XsdGoPkgHasElem_Forall) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Forall; fn != nil { fn(me) }
	me.Forall.Walk()
 }

type XsdGoPkgHasGroup_ContentLogicClass struct {
	XsdGoPkgHasElem_Or

	XsdGoPkgHasElem_Implies

	XsdGoPkgHasElem_Exists

	XsdGoPkgHasElem_Xor

	XsdGoPkgHasElem_Forall

	XsdGoPkgHasElem_And

	XsdGoPkgHasElem_Not

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentLogicClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentLogicClass instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentLogicClass instance.
func (me *XsdGoPkgHasGroup_ContentLogicClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentLogicClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_And.Walk()
	me.XsdGoPkgHasElem_Not.Walk()
	me.XsdGoPkgHasElem_Or.Walk()
	me.XsdGoPkgHasElem_Implies.Walk()
	me.XsdGoPkgHasElem_Exists.Walk()
	me.XsdGoPkgHasElem_Xor.Walk()
	me.XsdGoPkgHasElem_Forall.Walk()
 }

type TConstantType struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_DefinitionAttrib

}

//	If the WalkHandlers.TConstantType function is not nil (ie. was set by outside code), calls it with this TConstantType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TConstantType instance.
func (me *TConstantType) Walk ()  { 
	if fn := WalkHandlers.TConstantType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Complexes struct {
	Complexes *TConstantType `xml:"http://www.w3.org/1998/Math/MathML complexes"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Complexes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Complexes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Complexes instance.
func (me *XsdGoPkgHasElem_Complexes) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Complexes; fn != nil { fn(me) }
	me.Complexes.Walk()
 }

type XsdGoPkgHasElem_Primes struct {
	Primes *TConstantType `xml:"http://www.w3.org/1998/Math/MathML primes"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Primes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Primes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Primes instance.
func (me *XsdGoPkgHasElem_Primes) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Primes; fn != nil { fn(me) }
	me.Primes.Walk()
 }

type XsdGoPkgHasElem_False struct {
	False *TConstantType `xml:"http://www.w3.org/1998/Math/MathML false"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_False instance.
func (me *XsdGoPkgHasElem_False) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_False; fn != nil { fn(me) }
	me.False.Walk()
 }

type XsdGoPkgHasElem_Eulergamma struct {
	Eulergamma *TConstantType `xml:"http://www.w3.org/1998/Math/MathML eulergamma"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Eulergamma function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Eulergamma instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Eulergamma instance.
func (me *XsdGoPkgHasElem_Eulergamma) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Eulergamma; fn != nil { fn(me) }
	me.Eulergamma.Walk()
 }

type XsdGoPkgHasElem_Emptyset struct {
	Emptyset *TConstantType `xml:"http://www.w3.org/1998/Math/MathML emptyset"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Emptyset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Emptyset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Emptyset instance.
func (me *XsdGoPkgHasElem_Emptyset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Emptyset; fn != nil { fn(me) }
	me.Emptyset.Walk()
 }

type XsdGoPkgHasElem_True struct {
	True *TConstantType `xml:"http://www.w3.org/1998/Math/MathML true"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_True instance.
func (me *XsdGoPkgHasElem_True) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_True; fn != nil { fn(me) }
	me.True.Walk()
 }

type XsdGoPkgHasElem_Infinity struct {
	Infinity *TConstantType `xml:"http://www.w3.org/1998/Math/MathML infinity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Infinity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Infinity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Infinity instance.
func (me *XsdGoPkgHasElem_Infinity) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Infinity; fn != nil { fn(me) }
	me.Infinity.Walk()
 }

type XsdGoPkgHasElem_Pi struct {
	Pi *TConstantType `xml:"http://www.w3.org/1998/Math/MathML pi"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Pi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pi instance.
func (me *XsdGoPkgHasElem_Pi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Pi; fn != nil { fn(me) }
	me.Pi.Walk()
 }

type XsdGoPkgHasElem_Exponentiale struct {
	Exponentiale *TConstantType `xml:"http://www.w3.org/1998/Math/MathML exponentiale"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Exponentiale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Exponentiale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Exponentiale instance.
func (me *XsdGoPkgHasElem_Exponentiale) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Exponentiale; fn != nil { fn(me) }
	me.Exponentiale.Walk()
 }

type XsdGoPkgHasElem_Imaginaryi struct {
	Imaginaryi *TConstantType `xml:"http://www.w3.org/1998/Math/MathML imaginaryi"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Imaginaryi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imaginaryi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imaginaryi instance.
func (me *XsdGoPkgHasElem_Imaginaryi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Imaginaryi; fn != nil { fn(me) }
	me.Imaginaryi.Walk()
 }

type XsdGoPkgHasElem_Reals struct {
	Reals *TConstantType `xml:"http://www.w3.org/1998/Math/MathML reals"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Reals function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reals instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reals instance.
func (me *XsdGoPkgHasElem_Reals) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Reals; fn != nil { fn(me) }
	me.Reals.Walk()
 }

type XsdGoPkgHasElem_Integers struct {
	Integers *TConstantType `xml:"http://www.w3.org/1998/Math/MathML integers"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Integers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Integers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Integers instance.
func (me *XsdGoPkgHasElem_Integers) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Integers; fn != nil { fn(me) }
	me.Integers.Walk()
 }

type XsdGoPkgHasElem_Rationals struct {
	Rationals *TConstantType `xml:"http://www.w3.org/1998/Math/MathML rationals"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Rationals function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rationals instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rationals instance.
func (me *XsdGoPkgHasElem_Rationals) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Rationals; fn != nil { fn(me) }
	me.Rationals.Walk()
 }

type XsdGoPkgHasElem_Notanumber struct {
	Notanumber *TConstantType `xml:"http://www.w3.org/1998/Math/MathML notanumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Notanumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Notanumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Notanumber instance.
func (me *XsdGoPkgHasElem_Notanumber) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Notanumber; fn != nil { fn(me) }
	me.Notanumber.Walk()
 }

type XsdGoPkgHasElem_Naturalnumbers struct {
	Naturalnumbers *TConstantType `xml:"http://www.w3.org/1998/Math/MathML naturalnumbers"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Naturalnumbers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Naturalnumbers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Naturalnumbers instance.
func (me *XsdGoPkgHasElem_Naturalnumbers) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Naturalnumbers; fn != nil { fn(me) }
	me.Naturalnumbers.Walk()
 }

type XsdGoPkgHasGroup_ContentConstantsClass struct {
	XsdGoPkgHasElem_Rationals

	XsdGoPkgHasElem_Notanumber

	XsdGoPkgHasElem_Naturalnumbers

	XsdGoPkgHasElem_Complexes

	XsdGoPkgHasElem_Primes

	XsdGoPkgHasElem_False

	XsdGoPkgHasElem_Eulergamma

	XsdGoPkgHasElem_Emptyset

	XsdGoPkgHasElem_True

	XsdGoPkgHasElem_Infinity

	XsdGoPkgHasElem_Pi

	XsdGoPkgHasElem_Exponentiale

	XsdGoPkgHasElem_Imaginaryi

	XsdGoPkgHasElem_Reals

	XsdGoPkgHasElem_Integers

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentConstantsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentConstantsClass instance as the single argument. Then calls the Walk() method on 15/15 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentConstantsClass instance.
func (me *XsdGoPkgHasGroup_ContentConstantsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentConstantsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Imaginaryi.Walk()
	me.XsdGoPkgHasElem_Reals.Walk()
	me.XsdGoPkgHasElem_Integers.Walk()
	me.XsdGoPkgHasElem_Rationals.Walk()
	me.XsdGoPkgHasElem_Notanumber.Walk()
	me.XsdGoPkgHasElem_Naturalnumbers.Walk()
	me.XsdGoPkgHasElem_Complexes.Walk()
	me.XsdGoPkgHasElem_Primes.Walk()
	me.XsdGoPkgHasElem_False.Walk()
	me.XsdGoPkgHasElem_Eulergamma.Walk()
	me.XsdGoPkgHasElem_Emptyset.Walk()
	me.XsdGoPkgHasElem_True.Walk()
	me.XsdGoPkgHasElem_Infinity.Walk()
	me.XsdGoPkgHasElem_Pi.Walk()
	me.XsdGoPkgHasElem_Exponentiale.Walk()
 }

type TArithType struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

//	If the WalkHandlers.TArithType function is not nil (ie. was set by outside code), calls it with this TArithType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TArithType instance.
func (me *TArithType) Walk ()  { 
	if fn := WalkHandlers.TArithType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Times struct {
	Times *TArithType `xml:"http://www.w3.org/1998/Math/MathML times"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Times function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Times instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Times instance.
func (me *XsdGoPkgHasElem_Times) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Times; fn != nil { fn(me) }
	me.Times.Walk()
 }

type XsdGoPkgHasElem_Factorial struct {
	Factorial *TArithType `xml:"http://www.w3.org/1998/Math/MathML factorial"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Factorial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Factorial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Factorial instance.
func (me *XsdGoPkgHasElem_Factorial) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Factorial; fn != nil { fn(me) }
	me.Factorial.Walk()
 }

type XsdGoPkgHasElem_Ceiling struct {
	Ceiling *TArithType `xml:"http://www.w3.org/1998/Math/MathML ceiling"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Ceiling function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ceiling instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ceiling instance.
func (me *XsdGoPkgHasElem_Ceiling) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Ceiling; fn != nil { fn(me) }
	me.Ceiling.Walk()
 }

type XsdGoPkgHasElem_Sum struct {
	Sum *TArithType `xml:"http://www.w3.org/1998/Math/MathML sum"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sum instance.
func (me *XsdGoPkgHasElem_Sum) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sum; fn != nil { fn(me) }
	me.Sum.Walk()
 }

type XsdGoPkgHasElem_Lcm struct {
	Lcm *TArithType `xml:"http://www.w3.org/1998/Math/MathML lcm"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Lcm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lcm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lcm instance.
func (me *XsdGoPkgHasElem_Lcm) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Lcm; fn != nil { fn(me) }
	me.Lcm.Walk()
 }

type XsdGoPkgHasElem_Min struct {
	Min *TArithType `xml:"http://www.w3.org/1998/Math/MathML min"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Min function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Min instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Min instance.
func (me *XsdGoPkgHasElem_Min) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Min; fn != nil { fn(me) }
	me.Min.Walk()
 }

type XsdGoPkgHasElem_Root struct {
	Root *TArithType `xml:"http://www.w3.org/1998/Math/MathML root"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Root function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Root instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Root instance.
func (me *XsdGoPkgHasElem_Root) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Root; fn != nil { fn(me) }
	me.Root.Walk()
 }

type XsdGoPkgHasElem_Abs struct {
	Abs *TArithType `xml:"http://www.w3.org/1998/Math/MathML abs"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Abs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abs instance.
func (me *XsdGoPkgHasElem_Abs) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Abs; fn != nil { fn(me) }
	me.Abs.Walk()
 }

type XsdGoPkgHasElem_Real struct {
	Real *TArithType `xml:"http://www.w3.org/1998/Math/MathML real"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Real function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Real instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Real instance.
func (me *XsdGoPkgHasElem_Real) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Real; fn != nil { fn(me) }
	me.Real.Walk()
 }

type XsdGoPkgHasElem_Imaginary struct {
	Imaginary *TArithType `xml:"http://www.w3.org/1998/Math/MathML imaginary"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Imaginary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imaginary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imaginary instance.
func (me *XsdGoPkgHasElem_Imaginary) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Imaginary; fn != nil { fn(me) }
	me.Imaginary.Walk()
 }

type XsdGoPkgHasElem_Minus struct {
	Minus *TArithType `xml:"http://www.w3.org/1998/Math/MathML minus"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Minus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Minus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Minus instance.
func (me *XsdGoPkgHasElem_Minus) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Minus; fn != nil { fn(me) }
	me.Minus.Walk()
 }

type XsdGoPkgHasElem_Max struct {
	Max *TArithType `xml:"http://www.w3.org/1998/Math/MathML max"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Max function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Max instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Max instance.
func (me *XsdGoPkgHasElem_Max) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Max; fn != nil { fn(me) }
	me.Max.Walk()
 }

type XsdGoPkgHasElem_Quotient struct {
	Quotient *TArithType `xml:"http://www.w3.org/1998/Math/MathML quotient"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Quotient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Quotient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Quotient instance.
func (me *XsdGoPkgHasElem_Quotient) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Quotient; fn != nil { fn(me) }
	me.Quotient.Walk()
 }

type XsdGoPkgHasElem_Plus struct {
	Plus *TArithType `xml:"http://www.w3.org/1998/Math/MathML plus"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Plus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Plus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Plus instance.
func (me *XsdGoPkgHasElem_Plus) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Plus; fn != nil { fn(me) }
	me.Plus.Walk()
 }

type XsdGoPkgHasElem_Power struct {
	Power *TArithType `xml:"http://www.w3.org/1998/Math/MathML power"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Power function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Power instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Power instance.
func (me *XsdGoPkgHasElem_Power) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Power; fn != nil { fn(me) }
	me.Power.Walk()
 }

type XsdGoPkgHasElem_Arg struct {
	Arg *TArithType `xml:"http://www.w3.org/1998/Math/MathML arg"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arg instance.
func (me *XsdGoPkgHasElem_Arg) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arg; fn != nil { fn(me) }
	me.Arg.Walk()
 }

type XsdGoPkgHasElem_Rem struct {
	Rem *TArithType `xml:"http://www.w3.org/1998/Math/MathML rem"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Rem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rem instance.
func (me *XsdGoPkgHasElem_Rem) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Rem; fn != nil { fn(me) }
	me.Rem.Walk()
 }

type XsdGoPkgHasElem_Gcd struct {
	Gcd *TArithType `xml:"http://www.w3.org/1998/Math/MathML gcd"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Gcd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Gcd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Gcd instance.
func (me *XsdGoPkgHasElem_Gcd) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Gcd; fn != nil { fn(me) }
	me.Gcd.Walk()
 }

type XsdGoPkgHasElem_Divide struct {
	Divide *TArithType `xml:"http://www.w3.org/1998/Math/MathML divide"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Divide function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Divide instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Divide instance.
func (me *XsdGoPkgHasElem_Divide) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Divide; fn != nil { fn(me) }
	me.Divide.Walk()
 }

type XsdGoPkgHasElem_Floor struct {
	Floor *TArithType `xml:"http://www.w3.org/1998/Math/MathML floor"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Floor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Floor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Floor instance.
func (me *XsdGoPkgHasElem_Floor) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Floor; fn != nil { fn(me) }
	me.Floor.Walk()
 }

type XsdGoPkgHasElem_Product struct {
	Product *TArithType `xml:"http://www.w3.org/1998/Math/MathML product"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Product function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Product instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Product instance.
func (me *XsdGoPkgHasElem_Product) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Product; fn != nil { fn(me) }
	me.Product.Walk()
 }

type XsdGoPkgHasElem_Conjugate struct {
	Conjugate *TArithType `xml:"http://www.w3.org/1998/Math/MathML conjugate"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Conjugate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Conjugate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Conjugate instance.
func (me *XsdGoPkgHasElem_Conjugate) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Conjugate; fn != nil { fn(me) }
	me.Conjugate.Walk()
 }

type XsdGoPkgHasGroup_ContentArithClass struct {
	XsdGoPkgHasElem_Gcd

	XsdGoPkgHasElem_Divide

	XsdGoPkgHasElem_Floor

	XsdGoPkgHasElem_Product

	XsdGoPkgHasElem_Conjugate

	XsdGoPkgHasElem_Times

	XsdGoPkgHasElem_Factorial

	XsdGoPkgHasElem_Ceiling

	XsdGoPkgHasElem_Sum

	XsdGoPkgHasElem_Lcm

	XsdGoPkgHasElem_Min

	XsdGoPkgHasElem_Root

	XsdGoPkgHasElem_Abs

	XsdGoPkgHasElem_Real

	XsdGoPkgHasElem_Imaginary

	XsdGoPkgHasElem_Minus

	XsdGoPkgHasElem_Max

	XsdGoPkgHasElem_Quotient

	XsdGoPkgHasElem_Plus

	XsdGoPkgHasElem_Power

	XsdGoPkgHasElem_Arg

	XsdGoPkgHasElem_Rem

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentArithClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentArithClass instance as the single argument. Then calls the Walk() method on 22/22 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentArithClass instance.
func (me *XsdGoPkgHasGroup_ContentArithClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentArithClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Arg.Walk()
	me.XsdGoPkgHasElem_Rem.Walk()
	me.XsdGoPkgHasElem_Gcd.Walk()
	me.XsdGoPkgHasElem_Divide.Walk()
	me.XsdGoPkgHasElem_Floor.Walk()
	me.XsdGoPkgHasElem_Product.Walk()
	me.XsdGoPkgHasElem_Conjugate.Walk()
	me.XsdGoPkgHasElem_Times.Walk()
	me.XsdGoPkgHasElem_Factorial.Walk()
	me.XsdGoPkgHasElem_Ceiling.Walk()
	me.XsdGoPkgHasElem_Sum.Walk()
	me.XsdGoPkgHasElem_Lcm.Walk()
	me.XsdGoPkgHasElem_Min.Walk()
	me.XsdGoPkgHasElem_Root.Walk()
	me.XsdGoPkgHasElem_Abs.Walk()
	me.XsdGoPkgHasElem_Real.Walk()
	me.XsdGoPkgHasElem_Imaginary.Walk()
	me.XsdGoPkgHasElem_Minus.Walk()
	me.XsdGoPkgHasElem_Max.Walk()
	me.XsdGoPkgHasElem_Quotient.Walk()
	me.XsdGoPkgHasElem_Plus.Walk()
	me.XsdGoPkgHasElem_Power.Walk()
 }

type XsdGoPkgHasElem_Sec struct {
	Sec *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sec"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sec instance.
func (me *XsdGoPkgHasElem_Sec) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sec; fn != nil { fn(me) }
	me.Sec.Walk()
 }

type XsdGoPkgHasElem_Sin struct {
	Sin *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sin"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sin instance.
func (me *XsdGoPkgHasElem_Sin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sin; fn != nil { fn(me) }
	me.Sin.Walk()
 }

type XsdGoPkgHasElem_Exp struct {
	Exp *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML exp"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Exp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Exp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Exp instance.
func (me *XsdGoPkgHasElem_Exp) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Exp; fn != nil { fn(me) }
	me.Exp.Walk()
 }

type XsdGoPkgHasElem_Cos struct {
	Cos *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cos"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Cos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cos instance.
func (me *XsdGoPkgHasElem_Cos) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Cos; fn != nil { fn(me) }
	me.Cos.Walk()
 }

type XsdGoPkgHasGroup_LogbaseContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_LogbaseContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_LogbaseContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_LogbaseContent instance.
func (me *XsdGoPkgHasGroup_LogbaseContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_LogbaseContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TlogbaseType struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasGroup_LogbaseContent

}

//	If the WalkHandlers.TlogbaseType function is not nil (ie. was set by outside code), calls it with this TlogbaseType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TlogbaseType instance.
func (me *TlogbaseType) Walk ()  { 
	if fn := WalkHandlers.TlogbaseType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_LogbaseContent.Walk()
 }

type XsdGoPkgHasElem_Logbase struct {
	Logbase *TlogbaseType `xml:"http://www.w3.org/1998/Math/MathML logbase"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Logbase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Logbase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Logbase instance.
func (me *XsdGoPkgHasElem_Logbase) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Logbase; fn != nil { fn(me) }
	me.Logbase.Walk()
 }

type XsdGoPkgHasElem_Arccosh struct {
	Arccosh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccosh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccosh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccosh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccosh instance.
func (me *XsdGoPkgHasElem_Arccosh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccosh; fn != nil { fn(me) }
	me.Arccosh.Walk()
 }

type XsdGoPkgHasElem_Tan struct {
	Tan *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML tan"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Tan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tan instance.
func (me *XsdGoPkgHasElem_Tan) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Tan; fn != nil { fn(me) }
	me.Tan.Walk()
 }

type XsdGoPkgHasElem_Arcsech struct {
	Arcsech *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsech"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arcsech function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arcsech instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arcsech instance.
func (me *XsdGoPkgHasElem_Arcsech) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arcsech; fn != nil { fn(me) }
	me.Arcsech.Walk()
 }

type XsdGoPkgHasElem_Arccos struct {
	Arccos *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccos"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccos instance.
func (me *XsdGoPkgHasElem_Arccos) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccos; fn != nil { fn(me) }
	me.Arccos.Walk()
 }

type XsdGoPkgHasElem_Arctanh struct {
	Arctanh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arctanh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arctanh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arctanh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arctanh instance.
func (me *XsdGoPkgHasElem_Arctanh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arctanh; fn != nil { fn(me) }
	me.Arctanh.Walk()
 }

type XsdGoPkgHasElem_Csc struct {
	Csc *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML csc"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Csc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Csc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Csc instance.
func (me *XsdGoPkgHasElem_Csc) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Csc; fn != nil { fn(me) }
	me.Csc.Walk()
 }

type XsdGoPkgHasElem_Arccsch struct {
	Arccsch *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccsch"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccsch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccsch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccsch instance.
func (me *XsdGoPkgHasElem_Arccsch) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccsch; fn != nil { fn(me) }
	me.Arccsch.Walk()
 }

type XsdGoPkgHasElem_Arccoth struct {
	Arccoth *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccoth"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccoth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccoth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccoth instance.
func (me *XsdGoPkgHasElem_Arccoth) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccoth; fn != nil { fn(me) }
	me.Arccoth.Walk()
 }

type XsdGoPkgHasElem_Tanh struct {
	Tanh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML tanh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Tanh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tanh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tanh instance.
func (me *XsdGoPkgHasElem_Tanh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Tanh; fn != nil { fn(me) }
	me.Tanh.Walk()
 }

type XsdGoPkgHasElem_Cosh struct {
	Cosh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cosh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Cosh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cosh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cosh instance.
func (me *XsdGoPkgHasElem_Cosh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Cosh; fn != nil { fn(me) }
	me.Cosh.Walk()
 }

type XsdGoPkgHasElem_Arcsinh struct {
	Arcsinh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsinh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arcsinh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arcsinh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arcsinh instance.
func (me *XsdGoPkgHasElem_Arcsinh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arcsinh; fn != nil { fn(me) }
	me.Arcsinh.Walk()
 }

type XsdGoPkgHasElem_Log struct {
	Log *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML log"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Log function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Log instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Log instance.
func (me *XsdGoPkgHasElem_Log) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Log; fn != nil { fn(me) }
	me.Log.Walk()
 }

type XsdGoPkgHasElem_Cot struct {
	Cot *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cot"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Cot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cot instance.
func (me *XsdGoPkgHasElem_Cot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Cot; fn != nil { fn(me) }
	me.Cot.Walk()
 }

type XsdGoPkgHasElem_Ln struct {
	Ln *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML ln"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Ln function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ln instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ln instance.
func (me *XsdGoPkgHasElem_Ln) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Ln; fn != nil { fn(me) }
	me.Ln.Walk()
 }

type XsdGoPkgHasElem_Arccot struct {
	Arccot *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccot"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccot instance.
func (me *XsdGoPkgHasElem_Arccot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccot; fn != nil { fn(me) }
	me.Arccot.Walk()
 }

type XsdGoPkgHasElem_Arctan struct {
	Arctan *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arctan"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arctan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arctan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arctan instance.
func (me *XsdGoPkgHasElem_Arctan) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arctan; fn != nil { fn(me) }
	me.Arctan.Walk()
 }

type XsdGoPkgHasElem_Arcsin struct {
	Arcsin *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsin"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arcsin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arcsin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arcsin instance.
func (me *XsdGoPkgHasElem_Arcsin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arcsin; fn != nil { fn(me) }
	me.Arcsin.Walk()
 }

type XsdGoPkgHasElem_Arccsc struct {
	Arccsc *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccsc"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arccsc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arccsc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arccsc instance.
func (me *XsdGoPkgHasElem_Arccsc) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arccsc; fn != nil { fn(me) }
	me.Arccsc.Walk()
 }

type XsdGoPkgHasElem_Arcsec struct {
	Arcsec *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsec"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Arcsec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arcsec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arcsec instance.
func (me *XsdGoPkgHasElem_Arcsec) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Arcsec; fn != nil { fn(me) }
	me.Arcsec.Walk()
 }

type XsdGoPkgHasElem_Sinh struct {
	Sinh *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sinh"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sinh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sinh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sinh instance.
func (me *XsdGoPkgHasElem_Sinh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sinh; fn != nil { fn(me) }
	me.Sinh.Walk()
 }

type XsdGoPkgHasElem_Csch struct {
	Csch *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML csch"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Csch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Csch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Csch instance.
func (me *XsdGoPkgHasElem_Csch) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Csch; fn != nil { fn(me) }
	me.Csch.Walk()
 }

type XsdGoPkgHasElem_Coth struct {
	Coth *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML coth"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Coth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Coth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Coth instance.
func (me *XsdGoPkgHasElem_Coth) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Coth; fn != nil { fn(me) }
	me.Coth.Walk()
 }

type XsdGoPkgHasElem_Sech struct {
	Sech *TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sech"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sech function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sech instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sech instance.
func (me *XsdGoPkgHasElem_Sech) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sech; fn != nil { fn(me) }
	me.Sech.Walk()
 }

type XsdGoPkgHasGroup_ContentElementaryFunctionsClass struct {
	XsdGoPkgHasElem_Cos

	XsdGoPkgHasElem_Logbase

	XsdGoPkgHasElem_Arccosh

	XsdGoPkgHasElem_Tan

	XsdGoPkgHasElem_Arcsech

	XsdGoPkgHasElem_Arccos

	XsdGoPkgHasElem_Arctanh

	XsdGoPkgHasElem_Csc

	XsdGoPkgHasElem_Arccsch

	XsdGoPkgHasElem_Arccoth

	XsdGoPkgHasElem_Tanh

	XsdGoPkgHasElem_Cosh

	XsdGoPkgHasElem_Arcsinh

	XsdGoPkgHasElem_Log

	XsdGoPkgHasElem_Cot

	XsdGoPkgHasElem_Ln

	XsdGoPkgHasElem_Arccot

	XsdGoPkgHasElem_Arctan

	XsdGoPkgHasElem_Arcsin

	XsdGoPkgHasElem_Arccsc

	XsdGoPkgHasElem_Arcsec

	XsdGoPkgHasElem_Sinh

	XsdGoPkgHasElem_Csch

	XsdGoPkgHasElem_Coth

	XsdGoPkgHasElem_Sech

	XsdGoPkgHasElem_Sec

	XsdGoPkgHasElem_Sin

	XsdGoPkgHasElem_Exp

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentElementaryFunctionsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentElementaryFunctionsClass instance as the single argument. Then calls the Walk() method on 28/28 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentElementaryFunctionsClass instance.
func (me *XsdGoPkgHasGroup_ContentElementaryFunctionsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentElementaryFunctionsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Cot.Walk()
	me.XsdGoPkgHasElem_Ln.Walk()
	me.XsdGoPkgHasElem_Arccot.Walk()
	me.XsdGoPkgHasElem_Arctan.Walk()
	me.XsdGoPkgHasElem_Arcsin.Walk()
	me.XsdGoPkgHasElem_Arccsc.Walk()
	me.XsdGoPkgHasElem_Arcsec.Walk()
	me.XsdGoPkgHasElem_Sinh.Walk()
	me.XsdGoPkgHasElem_Csch.Walk()
	me.XsdGoPkgHasElem_Coth.Walk()
	me.XsdGoPkgHasElem_Sech.Walk()
	me.XsdGoPkgHasElem_Sec.Walk()
	me.XsdGoPkgHasElem_Sin.Walk()
	me.XsdGoPkgHasElem_Exp.Walk()
	me.XsdGoPkgHasElem_Cos.Walk()
	me.XsdGoPkgHasElem_Logbase.Walk()
	me.XsdGoPkgHasElem_Arccosh.Walk()
	me.XsdGoPkgHasElem_Tan.Walk()
	me.XsdGoPkgHasElem_Arcsech.Walk()
	me.XsdGoPkgHasElem_Arccos.Walk()
	me.XsdGoPkgHasElem_Arctanh.Walk()
	me.XsdGoPkgHasElem_Csc.Walk()
	me.XsdGoPkgHasElem_Arccsch.Walk()
	me.XsdGoPkgHasElem_Arccoth.Walk()
	me.XsdGoPkgHasElem_Tanh.Walk()
	me.XsdGoPkgHasElem_Cosh.Walk()
	me.XsdGoPkgHasElem_Arcsinh.Walk()
	me.XsdGoPkgHasElem_Log.Walk()
 }

type TnotinType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TnotinType function is not nil (ie. was set by outside code), calls it with this TnotinType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TnotinType instance.
func (me *TnotinType) Walk ()  { 
	if fn := WalkHandlers.TnotinType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Notin struct {
	Notin *TnotinType `xml:"http://www.w3.org/1998/Math/MathML notin"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Notin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Notin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Notin instance.
func (me *XsdGoPkgHasElem_Notin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Notin; fn != nil { fn(me) }
	me.Notin.Walk()
 }

type XsdGoPkgHasGroup_ListContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ListContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ListContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ListContent instance.
func (me *XsdGoPkgHasGroup_ListContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ListContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TlistType struct {
	XsdGoPkgHasGroup_ListContent

	XsdGoPkgHasAtts_ListAttlist

}

//	If the WalkHandlers.TlistType function is not nil (ie. was set by outside code), calls it with this TlistType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TlistType instance.
func (me *TlistType) Walk ()  { 
	if fn := WalkHandlers.TlistType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ListContent.Walk()
 }

type XsdGoPkgHasElem_List struct {
	List *TlistType `xml:"http://www.w3.org/1998/Math/MathML list"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_List function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_List instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_List instance.
func (me *XsdGoPkgHasElem_List) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_List; fn != nil { fn(me) }
	me.List.Walk()
 }

type TcartesianproductType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TcartesianproductType function is not nil (ie. was set by outside code), calls it with this TcartesianproductType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcartesianproductType instance.
func (me *TcartesianproductType) Walk ()  { 
	if fn := WalkHandlers.TcartesianproductType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Cartesianproduct struct {
	Cartesianproduct *TcartesianproductType `xml:"http://www.w3.org/1998/Math/MathML cartesianproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Cartesianproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cartesianproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cartesianproduct instance.
func (me *XsdGoPkgHasElem_Cartesianproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Cartesianproduct; fn != nil { fn(me) }
	me.Cartesianproduct.Walk()
 }

type TnotprsubsetType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TnotprsubsetType function is not nil (ie. was set by outside code), calls it with this TnotprsubsetType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TnotprsubsetType instance.
func (me *TnotprsubsetType) Walk ()  { 
	if fn := WalkHandlers.TnotprsubsetType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Notprsubset struct {
	Notprsubset *TnotprsubsetType `xml:"http://www.w3.org/1998/Math/MathML notprsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Notprsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Notprsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Notprsubset instance.
func (me *XsdGoPkgHasElem_Notprsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Notprsubset; fn != nil { fn(me) }
	me.Notprsubset.Walk()
 }

type TintersectType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TintersectType function is not nil (ie. was set by outside code), calls it with this TintersectType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TintersectType instance.
func (me *TintersectType) Walk ()  { 
	if fn := WalkHandlers.TintersectType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Intersect struct {
	Intersect *TintersectType `xml:"http://www.w3.org/1998/Math/MathML intersect"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Intersect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Intersect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Intersect instance.
func (me *XsdGoPkgHasElem_Intersect) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Intersect; fn != nil { fn(me) }
	me.Intersect.Walk()
 }

type TnotsubsetType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TnotsubsetType function is not nil (ie. was set by outside code), calls it with this TnotsubsetType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TnotsubsetType instance.
func (me *TnotsubsetType) Walk ()  { 
	if fn := WalkHandlers.TnotsubsetType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Notsubset struct {
	Notsubset *TnotsubsetType `xml:"http://www.w3.org/1998/Math/MathML notsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Notsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Notsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Notsubset instance.
func (me *XsdGoPkgHasElem_Notsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Notsubset; fn != nil { fn(me) }
	me.Notsubset.Walk()
 }

type TsubsetType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TsubsetType function is not nil (ie. was set by outside code), calls it with this TsubsetType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TsubsetType instance.
func (me *TsubsetType) Walk ()  { 
	if fn := WalkHandlers.TsubsetType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Subset struct {
	Subset *TsubsetType `xml:"http://www.w3.org/1998/Math/MathML subset"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Subset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subset instance.
func (me *XsdGoPkgHasElem_Subset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Subset; fn != nil { fn(me) }
	me.Subset.Walk()
 }

type XsdGoPkgHasGroup_SetContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_SetContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_SetContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_SetContent instance.
func (me *XsdGoPkgHasGroup_SetContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_SetContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TsetType struct {
	XsdGoPkgHasGroup_SetContent

	XsdGoPkgHasAtts_SetAttlist

}

//	If the WalkHandlers.TsetType function is not nil (ie. was set by outside code), calls it with this TsetType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TsetType instance.
func (me *TsetType) Walk ()  { 
	if fn := WalkHandlers.TsetType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_SetContent.Walk()
 }

type XsdGoPkgHasElem_Set struct {
	Set *TsetType `xml:"http://www.w3.org/1998/Math/MathML set"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Set instance.
func (me *XsdGoPkgHasElem_Set) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Set; fn != nil { fn(me) }
	me.Set.Walk()
 }

type TinType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TinType function is not nil (ie. was set by outside code), calls it with this TinType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TinType instance.
func (me *TinType) Walk ()  { 
	if fn := WalkHandlers.TinType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_In struct {
	In *TinType `xml:"http://www.w3.org/1998/Math/MathML in"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_In function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_In instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_In instance.
func (me *XsdGoPkgHasElem_In) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_In; fn != nil { fn(me) }
	me.In.Walk()
 }

type TcardType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TcardType function is not nil (ie. was set by outside code), calls it with this TcardType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcardType instance.
func (me *TcardType) Walk ()  { 
	if fn := WalkHandlers.TcardType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Card struct {
	Card *TcardType `xml:"http://www.w3.org/1998/Math/MathML card"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Card function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Card instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Card instance.
func (me *XsdGoPkgHasElem_Card) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Card; fn != nil { fn(me) }
	me.Card.Walk()
 }

type TunionType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TunionType function is not nil (ie. was set by outside code), calls it with this TunionType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TunionType instance.
func (me *TunionType) Walk ()  { 
	if fn := WalkHandlers.TunionType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Union struct {
	Union *TunionType `xml:"http://www.w3.org/1998/Math/MathML union"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Union function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Union instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Union instance.
func (me *XsdGoPkgHasElem_Union) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Union; fn != nil { fn(me) }
	me.Union.Walk()
 }

type TsetdiffType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TsetdiffType function is not nil (ie. was set by outside code), calls it with this TsetdiffType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TsetdiffType instance.
func (me *TsetdiffType) Walk ()  { 
	if fn := WalkHandlers.TsetdiffType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Setdiff struct {
	Setdiff *TsetdiffType `xml:"http://www.w3.org/1998/Math/MathML setdiff"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Setdiff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Setdiff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Setdiff instance.
func (me *XsdGoPkgHasElem_Setdiff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Setdiff; fn != nil { fn(me) }
	me.Setdiff.Walk()
 }

type TprsubsetType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TprsubsetType function is not nil (ie. was set by outside code), calls it with this TprsubsetType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TprsubsetType instance.
func (me *TprsubsetType) Walk ()  { 
	if fn := WalkHandlers.TprsubsetType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Prsubset struct {
	Prsubset *TprsubsetType `xml:"http://www.w3.org/1998/Math/MathML prsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Prsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Prsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Prsubset instance.
func (me *XsdGoPkgHasElem_Prsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Prsubset; fn != nil { fn(me) }
	me.Prsubset.Walk()
 }

type XsdGoPkgHasGroup_ContentSetsClass struct {
	XsdGoPkgHasElem_Notprsubset

	XsdGoPkgHasElem_Intersect

	XsdGoPkgHasElem_Notsubset

	XsdGoPkgHasElem_Subset

	XsdGoPkgHasElem_Set

	XsdGoPkgHasElem_In

	XsdGoPkgHasElem_Card

	XsdGoPkgHasElem_Union

	XsdGoPkgHasElem_Setdiff

	XsdGoPkgHasElem_Prsubset

	XsdGoPkgHasElem_Notin

	XsdGoPkgHasElem_List

	XsdGoPkgHasElem_Cartesianproduct

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentSetsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentSetsClass instance as the single argument. Then calls the Walk() method on 13/13 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentSetsClass instance.
func (me *XsdGoPkgHasGroup_ContentSetsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentSetsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Setdiff.Walk()
	me.XsdGoPkgHasElem_Prsubset.Walk()
	me.XsdGoPkgHasElem_Notin.Walk()
	me.XsdGoPkgHasElem_List.Walk()
	me.XsdGoPkgHasElem_Cartesianproduct.Walk()
	me.XsdGoPkgHasElem_Notprsubset.Walk()
	me.XsdGoPkgHasElem_Intersect.Walk()
	me.XsdGoPkgHasElem_Notsubset.Walk()
	me.XsdGoPkgHasElem_Subset.Walk()
	me.XsdGoPkgHasElem_Set.Walk()
	me.XsdGoPkgHasElem_In.Walk()
	me.XsdGoPkgHasElem_Card.Walk()
	me.XsdGoPkgHasElem_Union.Walk()
 }

type TdiffType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TdiffType function is not nil (ie. was set by outside code), calls it with this TdiffType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TdiffType instance.
func (me *TdiffType) Walk ()  { 
	if fn := WalkHandlers.TdiffType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Diff struct {
	Diff *TdiffType `xml:"http://www.w3.org/1998/Math/MathML diff"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Diff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Diff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Diff instance.
func (me *XsdGoPkgHasElem_Diff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Diff; fn != nil { fn(me) }
	me.Diff.Walk()
 }

type TtendstoType struct {
	XsdGoPkgHasAtts_CiAttlist

}

//	If the WalkHandlers.TtendstoType function is not nil (ie. was set by outside code), calls it with this TtendstoType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TtendstoType instance.
func (me *TtendstoType) Walk ()  { 
	if fn := WalkHandlers.TtendstoType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Tendsto struct {
	Tendsto *TtendstoType `xml:"http://www.w3.org/1998/Math/MathML tendsto"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Tendsto function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tendsto instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tendsto instance.
func (me *XsdGoPkgHasElem_Tendsto) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Tendsto; fn != nil { fn(me) }
	me.Tendsto.Walk()
 }

type XsdGoPkgHasGroup_UplimitContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_UplimitContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_UplimitContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_UplimitContent instance.
func (me *XsdGoPkgHasGroup_UplimitContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_UplimitContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TuplimitType struct {
	XsdGoPkgHasGroup_UplimitContent

	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TuplimitType function is not nil (ie. was set by outside code), calls it with this TuplimitType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TuplimitType instance.
func (me *TuplimitType) Walk ()  { 
	if fn := WalkHandlers.TuplimitType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_UplimitContent.Walk()
 }

type XsdGoPkgHasElem_Uplimit struct {
	Uplimit *TuplimitType `xml:"http://www.w3.org/1998/Math/MathML uplimit"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Uplimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Uplimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Uplimit instance.
func (me *XsdGoPkgHasElem_Uplimit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Uplimit; fn != nil { fn(me) }
	me.Uplimit.Walk()
 }

type TlimitType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TlimitType function is not nil (ie. was set by outside code), calls it with this TlimitType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TlimitType instance.
func (me *TlimitType) Walk ()  { 
	if fn := WalkHandlers.TlimitType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Limit struct {
	Limit *TlimitType `xml:"http://www.w3.org/1998/Math/MathML limit"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Limit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Limit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Limit instance.
func (me *XsdGoPkgHasElem_Limit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Limit; fn != nil { fn(me) }
	me.Limit.Walk()
 }

type TintType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TintType function is not nil (ie. was set by outside code), calls it with this TintType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TintType instance.
func (me *TintType) Walk ()  { 
	if fn := WalkHandlers.TintType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Int struct {
	Int *TintType `xml:"http://www.w3.org/1998/Math/MathML int"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Int function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Int instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Int instance.
func (me *XsdGoPkgHasElem_Int) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Int; fn != nil { fn(me) }
	me.Int.Walk()
 }

type XsdGoPkgHasGroup_LowlimitContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_LowlimitContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_LowlimitContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_LowlimitContent instance.
func (me *XsdGoPkgHasGroup_LowlimitContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_LowlimitContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TlowlimitType struct {
	XsdGoPkgHasGroup_LowlimitContent

	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TlowlimitType function is not nil (ie. was set by outside code), calls it with this TlowlimitType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TlowlimitType instance.
func (me *TlowlimitType) Walk ()  { 
	if fn := WalkHandlers.TlowlimitType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_LowlimitContent.Walk()
 }

type XsdGoPkgHasElem_Lowlimit struct {
	Lowlimit *TlowlimitType `xml:"http://www.w3.org/1998/Math/MathML lowlimit"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Lowlimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lowlimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lowlimit instance.
func (me *XsdGoPkgHasElem_Lowlimit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Lowlimit; fn != nil { fn(me) }
	me.Lowlimit.Walk()
 }

type TpartialdiffType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TpartialdiffType function is not nil (ie. was set by outside code), calls it with this TpartialdiffType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TpartialdiffType instance.
func (me *TpartialdiffType) Walk ()  { 
	if fn := WalkHandlers.TpartialdiffType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Partialdiff struct {
	Partialdiff *TpartialdiffType `xml:"http://www.w3.org/1998/Math/MathML partialdiff"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Partialdiff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Partialdiff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Partialdiff instance.
func (me *XsdGoPkgHasElem_Partialdiff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Partialdiff; fn != nil { fn(me) }
	me.Partialdiff.Walk()
 }

type XsdGoPkgHasGroup_ContentCalculusClass struct {
	XsdGoPkgHasElem_Uplimit

	XsdGoPkgHasElem_Limit

	XsdGoPkgHasElem_Int

	XsdGoPkgHasElem_Lowlimit

	XsdGoPkgHasElem_Partialdiff

	XsdGoPkgHasElem_Diff

	XsdGoPkgHasElem_Tendsto

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentCalculusClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentCalculusClass instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentCalculusClass instance.
func (me *XsdGoPkgHasGroup_ContentCalculusClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentCalculusClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Diff.Walk()
	me.XsdGoPkgHasElem_Tendsto.Walk()
	me.XsdGoPkgHasElem_Uplimit.Walk()
	me.XsdGoPkgHasElem_Limit.Walk()
	me.XsdGoPkgHasElem_Int.Walk()
	me.XsdGoPkgHasElem_Lowlimit.Walk()
	me.XsdGoPkgHasElem_Partialdiff.Walk()
 }

type XsdGoPkgHasGroup_ContentTokenContent struct {
	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentTokenContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentTokenContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentTokenContent instance.
func (me *XsdGoPkgHasGroup_ContentTokenContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentTokenContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TciType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_ContentTokenContent

	XsdGoPkgHasAtts_CiAttlist

}

//	If the WalkHandlers.TciType function is not nil (ie. was set by outside code), calls it with this TciType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TciType instance.
func (me *TciType) Walk ()  { 
	if fn := WalkHandlers.TciType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentTokenContent.Walk()
	me.XsdGoPkgHasCdata.Walk()
 }

type XsdGoPkgHasElem_Ci struct {
	Ci *TciType `xml:"http://www.w3.org/1998/Math/MathML ci"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Ci function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ci instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ci instance.
func (me *XsdGoPkgHasElem_Ci) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Ci; fn != nil { fn(me) }
	me.Ci.Walk()
 }

type TcsymbolType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_ContentTokenContent

	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TcsymbolType function is not nil (ie. was set by outside code), calls it with this TcsymbolType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TcsymbolType instance.
func (me *TcsymbolType) Walk ()  { 
	if fn := WalkHandlers.TcsymbolType; fn != nil { fn(me) }
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasGroup_ContentTokenContent.Walk()
 }

type XsdGoPkgHasElem_Csymbol struct {
	Csymbol *TcsymbolType `xml:"http://www.w3.org/1998/Math/MathML csymbol"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Csymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Csymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Csymbol instance.
func (me *XsdGoPkgHasElem_Csymbol) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Csymbol; fn != nil { fn(me) }
	me.Csymbol.Walk()
 }

type TsepType struct {
}

//	If the WalkHandlers.TsepType function is not nil (ie. was set by outside code), calls it with this TsepType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TsepType instance.
func (me *TsepType) Walk ()  { 
	if fn := WalkHandlers.TsepType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Sep struct {
	Sep *TsepType `xml:"http://www.w3.org/1998/Math/MathML sep"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sep function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sep instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sep instance.
func (me *XsdGoPkgHasElem_Sep) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sep; fn != nil { fn(me) }
	me.Sep.Walk()
 }

type XsdGoPkgHasGroup_CnContent struct {
	XsdGoPkgHasElem_Sep

	XsdGoPkgHasGroup_PresentationExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_CnContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_CnContent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_CnContent instance.
func (me *XsdGoPkgHasGroup_CnContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_CnContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Sep.Walk()
	me.XsdGoPkgHasGroup_PresentationExprClass.Walk()
 }

type TcnType struct {
	XsdGoPkgHasAtts_CnAttlist

	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_CnContent

}

//	If the WalkHandlers.TcnType function is not nil (ie. was set by outside code), calls it with this TcnType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TcnType instance.
func (me *TcnType) Walk ()  { 
	if fn := WalkHandlers.TcnType; fn != nil { fn(me) }
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasGroup_CnContent.Walk()
 }

type XsdGoPkgHasElem_Cn struct {
	Cn *TcnType `xml:"http://www.w3.org/1998/Math/MathML cn"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Cn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cn instance.
func (me *XsdGoPkgHasElem_Cn) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Cn; fn != nil { fn(me) }
	me.Cn.Walk()
 }

type XsdGoPkgHasGroup_ContentTokensClass struct {
	XsdGoPkgHasElem_Csymbol

	XsdGoPkgHasElem_Cn

	XsdGoPkgHasElem_Ci

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentTokensClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentTokensClass instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentTokensClass instance.
func (me *XsdGoPkgHasGroup_ContentTokensClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentTokensClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Ci.Walk()
	me.XsdGoPkgHasElem_Csymbol.Walk()
	me.XsdGoPkgHasElem_Cn.Walk()
 }

type TmeanType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TmeanType function is not nil (ie. was set by outside code), calls it with this TmeanType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmeanType instance.
func (me *TmeanType) Walk ()  { 
	if fn := WalkHandlers.TmeanType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Mean struct {
	Mean *TmeanType `xml:"http://www.w3.org/1998/Math/MathML mean"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mean function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mean instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mean instance.
func (me *XsdGoPkgHasElem_Mean) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mean; fn != nil { fn(me) }
	me.Mean.Walk()
 }

type TmodeType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TmodeType function is not nil (ie. was set by outside code), calls it with this TmodeType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmodeType instance.
func (me *TmodeType) Walk ()  { 
	if fn := WalkHandlers.TmodeType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Mode struct {
	Mode *TmodeType `xml:"http://www.w3.org/1998/Math/MathML mode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Mode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mode instance.
func (me *XsdGoPkgHasElem_Mode) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Mode; fn != nil { fn(me) }
	me.Mode.Walk()
 }

type TsdevType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TsdevType function is not nil (ie. was set by outside code), calls it with this TsdevType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TsdevType instance.
func (me *TsdevType) Walk ()  { 
	if fn := WalkHandlers.TsdevType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Sdev struct {
	Sdev *TsdevType `xml:"http://www.w3.org/1998/Math/MathML sdev"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Sdev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sdev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sdev instance.
func (me *XsdGoPkgHasElem_Sdev) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Sdev; fn != nil { fn(me) }
	me.Sdev.Walk()
 }

type TvarianceType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TvarianceType function is not nil (ie. was set by outside code), calls it with this TvarianceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TvarianceType instance.
func (me *TvarianceType) Walk ()  { 
	if fn := WalkHandlers.TvarianceType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Variance struct {
	Variance *TvarianceType `xml:"http://www.w3.org/1998/Math/MathML variance"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Variance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Variance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Variance instance.
func (me *XsdGoPkgHasElem_Variance) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Variance; fn != nil { fn(me) }
	me.Variance.Walk()
 }

type TmomentType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TmomentType function is not nil (ie. was set by outside code), calls it with this TmomentType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmomentType instance.
func (me *TmomentType) Walk ()  { 
	if fn := WalkHandlers.TmomentType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Moment struct {
	Moment *TmomentType `xml:"http://www.w3.org/1998/Math/MathML moment"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Moment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Moment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Moment instance.
func (me *XsdGoPkgHasElem_Moment) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Moment; fn != nil { fn(me) }
	me.Moment.Walk()
 }

type XsdGoPkgHasGroup_MomentaboutContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MomentaboutContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MomentaboutContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MomentaboutContent instance.
func (me *XsdGoPkgHasGroup_MomentaboutContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MomentaboutContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TmomentaboutType struct {
	XsdGoPkgHasGroup_MomentaboutContent

	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TmomentaboutType function is not nil (ie. was set by outside code), calls it with this TmomentaboutType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmomentaboutType instance.
func (me *TmomentaboutType) Walk ()  { 
	if fn := WalkHandlers.TmomentaboutType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MomentaboutContent.Walk()
 }

type XsdGoPkgHasElem_Momentabout struct {
	Momentabout *TmomentaboutType `xml:"http://www.w3.org/1998/Math/MathML momentabout"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Momentabout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Momentabout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Momentabout instance.
func (me *XsdGoPkgHasElem_Momentabout) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Momentabout; fn != nil { fn(me) }
	me.Momentabout.Walk()
 }

type TmedianType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TmedianType function is not nil (ie. was set by outside code), calls it with this TmedianType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TmedianType instance.
func (me *TmedianType) Walk ()  { 
	if fn := WalkHandlers.TmedianType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Median struct {
	Median *TmedianType `xml:"http://www.w3.org/1998/Math/MathML median"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Median function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Median instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Median instance.
func (me *XsdGoPkgHasElem_Median) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Median; fn != nil { fn(me) }
	me.Median.Walk()
 }

type XsdGoPkgHasGroup_ContentStatisticsClass struct {
	XsdGoPkgHasElem_Mean

	XsdGoPkgHasElem_Mode

	XsdGoPkgHasElem_Sdev

	XsdGoPkgHasElem_Variance

	XsdGoPkgHasElem_Moment

	XsdGoPkgHasElem_Momentabout

	XsdGoPkgHasElem_Median

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentStatisticsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentStatisticsClass instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentStatisticsClass instance.
func (me *XsdGoPkgHasGroup_ContentStatisticsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentStatisticsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Sdev.Walk()
	me.XsdGoPkgHasElem_Variance.Walk()
	me.XsdGoPkgHasElem_Moment.Walk()
	me.XsdGoPkgHasElem_Momentabout.Walk()
	me.XsdGoPkgHasElem_Median.Walk()
	me.XsdGoPkgHasElem_Mean.Walk()
	me.XsdGoPkgHasElem_Mode.Walk()
 }

type XsdGoPkgHasGroup_DomainofapplicationContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_DomainofapplicationContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_DomainofapplicationContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_DomainofapplicationContent instance.
func (me *XsdGoPkgHasGroup_DomainofapplicationContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_DomainofapplicationContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TdomainofapplicationType struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasGroup_DomainofapplicationContent

	XsdGoPkgHasAtts_DefinitionAttrib

}

//	If the WalkHandlers.TdomainofapplicationType function is not nil (ie. was set by outside code), calls it with this TdomainofapplicationType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TdomainofapplicationType instance.
func (me *TdomainofapplicationType) Walk ()  { 
	if fn := WalkHandlers.TdomainofapplicationType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_DomainofapplicationContent.Walk()
 }

type XsdGoPkgHasElem_Domainofapplication struct {
	Domainofapplication *TdomainofapplicationType `xml:"http://www.w3.org/1998/Math/MathML domainofapplication"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Domainofapplication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Domainofapplication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Domainofapplication instance.
func (me *XsdGoPkgHasElem_Domainofapplication) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Domainofapplication; fn != nil { fn(me) }
	me.Domainofapplication.Walk()
 }

type TFunctionsType struct {
	XsdGoPkgHasAtts_DefinitionAttrib

	XsdGoPkgHasAtts_CommonAttrib

}

//	If the WalkHandlers.TFunctionsType function is not nil (ie. was set by outside code), calls it with this TFunctionsType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TFunctionsType instance.
func (me *TFunctionsType) Walk ()  { 
	if fn := WalkHandlers.TFunctionsType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Codomain struct {
	Codomain *TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML codomain"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Codomain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Codomain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Codomain instance.
func (me *XsdGoPkgHasElem_Codomain) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Codomain; fn != nil { fn(me) }
	me.Codomain.Walk()
 }

type XsdGoPkgHasElem_Ident struct {
	Ident *TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML ident"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Ident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ident instance.
func (me *XsdGoPkgHasElem_Ident) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Ident; fn != nil { fn(me) }
	me.Ident.Walk()
 }

type XsdGoPkgHasElem_Compose struct {
	Compose *TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML compose"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Compose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Compose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Compose instance.
func (me *XsdGoPkgHasElem_Compose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Compose; fn != nil { fn(me) }
	me.Compose.Walk()
 }

type XsdGoPkgHasElem_Image struct {
	Image *TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML image"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Image instance.
func (me *XsdGoPkgHasElem_Image) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Image; fn != nil { fn(me) }
	me.Image.Walk()
 }

type XsdGoPkgHasElem_Domain struct {
	Domain *TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML domain"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Domain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Domain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Domain instance.
func (me *XsdGoPkgHasElem_Domain) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Domain; fn != nil { fn(me) }
	me.Domain.Walk()
 }

type XsdGoPkgHasGroup_ContentFunctionsClass struct {
	XsdGoPkgHasElem_Domainofapplication

	XsdGoPkgHasElem_Codomain

	XsdGoPkgHasElem_Ident

	XsdGoPkgHasElem_Compose

	XsdGoPkgHasElem_Image

	XsdGoPkgHasElem_Domain

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentFunctionsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentFunctionsClass instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentFunctionsClass instance.
func (me *XsdGoPkgHasGroup_ContentFunctionsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentFunctionsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Domainofapplication.Walk()
	me.XsdGoPkgHasElem_Codomain.Walk()
	me.XsdGoPkgHasElem_Ident.Walk()
	me.XsdGoPkgHasElem_Compose.Walk()
	me.XsdGoPkgHasElem_Image.Walk()
	me.XsdGoPkgHasElem_Domain.Walk()
 }

type TRelationsType struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasAtts_DefinitionAttrib

}

//	If the WalkHandlers.TRelationsType function is not nil (ie. was set by outside code), calls it with this TRelationsType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TRelationsType instance.
func (me *TRelationsType) Walk ()  { 
	if fn := WalkHandlers.TRelationsType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Eq struct {
	Eq *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML eq"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Eq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Eq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Eq instance.
func (me *XsdGoPkgHasElem_Eq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Eq; fn != nil { fn(me) }
	me.Eq.Walk()
 }

type XsdGoPkgHasElem_Equivalent struct {
	Equivalent *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML equivalent"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Equivalent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Equivalent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Equivalent instance.
func (me *XsdGoPkgHasElem_Equivalent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Equivalent; fn != nil { fn(me) }
	me.Equivalent.Walk()
 }

type XsdGoPkgHasElem_Lt struct {
	Lt *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML lt"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Lt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lt instance.
func (me *XsdGoPkgHasElem_Lt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Lt; fn != nil { fn(me) }
	me.Lt.Walk()
 }

type XsdGoPkgHasElem_Gt struct {
	Gt *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML gt"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Gt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Gt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Gt instance.
func (me *XsdGoPkgHasElem_Gt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Gt; fn != nil { fn(me) }
	me.Gt.Walk()
 }

type XsdGoPkgHasElem_Approx struct {
	Approx *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML approx"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Approx function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Approx instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Approx instance.
func (me *XsdGoPkgHasElem_Approx) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Approx; fn != nil { fn(me) }
	me.Approx.Walk()
 }

type XsdGoPkgHasElem_Factorof struct {
	Factorof *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML factorof"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Factorof function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Factorof instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Factorof instance.
func (me *XsdGoPkgHasElem_Factorof) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Factorof; fn != nil { fn(me) }
	me.Factorof.Walk()
 }

type XsdGoPkgHasElem_Leq struct {
	Leq *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML leq"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Leq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Leq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Leq instance.
func (me *XsdGoPkgHasElem_Leq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Leq; fn != nil { fn(me) }
	me.Leq.Walk()
 }

type XsdGoPkgHasElem_Geq struct {
	Geq *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML geq"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Geq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Geq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Geq instance.
func (me *XsdGoPkgHasElem_Geq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Geq; fn != nil { fn(me) }
	me.Geq.Walk()
 }

type XsdGoPkgHasElem_Neq struct {
	Neq *TRelationsType `xml:"http://www.w3.org/1998/Math/MathML neq"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Neq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Neq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Neq instance.
func (me *XsdGoPkgHasElem_Neq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Neq; fn != nil { fn(me) }
	me.Neq.Walk()
 }

type XsdGoPkgHasGroup_ContentRelationsClass struct {
	XsdGoPkgHasElem_Neq

	XsdGoPkgHasElem_Eq

	XsdGoPkgHasElem_Equivalent

	XsdGoPkgHasElem_Lt

	XsdGoPkgHasElem_Gt

	XsdGoPkgHasElem_Approx

	XsdGoPkgHasElem_Factorof

	XsdGoPkgHasElem_Leq

	XsdGoPkgHasElem_Geq

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentRelationsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentRelationsClass instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentRelationsClass instance.
func (me *XsdGoPkgHasGroup_ContentRelationsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentRelationsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Leq.Walk()
	me.XsdGoPkgHasElem_Geq.Walk()
	me.XsdGoPkgHasElem_Neq.Walk()
	me.XsdGoPkgHasElem_Eq.Walk()
	me.XsdGoPkgHasElem_Equivalent.Walk()
	me.XsdGoPkgHasElem_Lt.Walk()
	me.XsdGoPkgHasElem_Gt.Walk()
	me.XsdGoPkgHasElem_Approx.Walk()
	me.XsdGoPkgHasElem_Factorof.Walk()
 }

type TinverseType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TinverseType function is not nil (ie. was set by outside code), calls it with this TinverseType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TinverseType instance.
func (me *TinverseType) Walk ()  { 
	if fn := WalkHandlers.TinverseType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Inverse struct {
	Inverse *TinverseType `xml:"http://www.w3.org/1998/Math/MathML inverse"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Inverse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Inverse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Inverse instance.
func (me *XsdGoPkgHasElem_Inverse) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Inverse; fn != nil { fn(me) }
	me.Inverse.Walk()
 }

type XsdGoPkgHasGroup_OtherwiseContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_OtherwiseContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_OtherwiseContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_OtherwiseContent instance.
func (me *XsdGoPkgHasGroup_OtherwiseContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_OtherwiseContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TotherwiseType struct {
	XsdGoPkgHasAtts_CommonAttrib

	XsdGoPkgHasGroup_OtherwiseContent

}

//	If the WalkHandlers.TotherwiseType function is not nil (ie. was set by outside code), calls it with this TotherwiseType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TotherwiseType instance.
func (me *TotherwiseType) Walk ()  { 
	if fn := WalkHandlers.TotherwiseType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_OtherwiseContent.Walk()
 }

type XsdGoPkgHasElem_Otherwise struct {
	Otherwise *TotherwiseType `xml:"http://www.w3.org/1998/Math/MathML otherwise"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Otherwise function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Otherwise instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Otherwise instance.
func (me *XsdGoPkgHasElem_Otherwise) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Otherwise; fn != nil { fn(me) }
	me.Otherwise.Walk()
 }

type XsdGoPkgHasGroup_PieceContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PieceContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PieceContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PieceContent instance.
func (me *XsdGoPkgHasGroup_PieceContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PieceContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TpieceType struct {
	XsdGoPkgHasGroup_PieceContent

}

//	If the WalkHandlers.TpieceType function is not nil (ie. was set by outside code), calls it with this TpieceType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TpieceType instance.
func (me *TpieceType) Walk ()  { 
	if fn := WalkHandlers.TpieceType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PieceContent.Walk()
 }

type XsdGoPkgHasElems_Piece struct {
	Pieces []*TpieceType `xml:"http://www.w3.org/1998/Math/MathML piece"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Piece function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Piece instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Piece instance.
func (me *XsdGoPkgHasElems_Piece) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Piece; fn != nil { fn(me) }
	for _, x := range me.Pieces { x.Walk() }
 }

type XsdGoPkgHasGroup_PiecewiseContent struct {
	XsdGoPkgHasElem_Otherwise

	XsdGoPkgHasElems_Piece

}

//	If the WalkHandlers.XsdGoPkgHasGroup_PiecewiseContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_PiecewiseContent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_PiecewiseContent instance.
func (me *XsdGoPkgHasGroup_PiecewiseContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_PiecewiseContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Otherwise.Walk()
	me.XsdGoPkgHasElems_Piece.Walk()
 }

type TpiecewiseType struct {
	XsdGoPkgHasGroup_PiecewiseContent

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TpiecewiseType function is not nil (ie. was set by outside code), calls it with this TpiecewiseType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TpiecewiseType instance.
func (me *TpiecewiseType) Walk ()  { 
	if fn := WalkHandlers.TpiecewiseType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_PiecewiseContent.Walk()
 }

type XsdGoPkgHasElem_Piecewise struct {
	Piecewise *TpiecewiseType `xml:"http://www.w3.org/1998/Math/MathML piecewise"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Piecewise function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Piecewise instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Piecewise instance.
func (me *XsdGoPkgHasElem_Piecewise) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Piecewise; fn != nil { fn(me) }
	me.Piecewise.Walk()
 }

type XsdGoPkgHasGroup_LambdaContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_LambdaContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_LambdaContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_LambdaContent instance.
func (me *XsdGoPkgHasGroup_LambdaContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_LambdaContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TlambdaType struct {
	XsdGoPkgHasGroup_LambdaContent

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TlambdaType function is not nil (ie. was set by outside code), calls it with this TlambdaType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TlambdaType instance.
func (me *TlambdaType) Walk ()  { 
	if fn := WalkHandlers.TlambdaType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_LambdaContent.Walk()
 }

type XsdGoPkgHasElem_Lambda struct {
	Lambda *TlambdaType `xml:"http://www.w3.org/1998/Math/MathML lambda"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Lambda function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lambda instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lambda instance.
func (me *XsdGoPkgHasElem_Lambda) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Lambda; fn != nil { fn(me) }
	me.Lambda.Walk()
 }

type XsdGoPkgHasGroup_BvarContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_BvarContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_BvarContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_BvarContent instance.
func (me *XsdGoPkgHasGroup_BvarContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_BvarContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TbvarType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_BvarContent

}

//	If the WalkHandlers.TbvarType function is not nil (ie. was set by outside code), calls it with this TbvarType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TbvarType instance.
func (me *TbvarType) Walk ()  { 
	if fn := WalkHandlers.TbvarType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_BvarContent.Walk()
 }

type XsdGoPkgHasElem_Bvar struct {
	Bvar *TbvarType `xml:"http://www.w3.org/1998/Math/MathML bvar"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Bvar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bvar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bvar instance.
func (me *XsdGoPkgHasElem_Bvar) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Bvar; fn != nil { fn(me) }
	me.Bvar.Walk()
 }

type XsdGoPkgHasGroup_ApplyContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ApplyContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ApplyContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ApplyContent instance.
func (me *XsdGoPkgHasGroup_ApplyContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ApplyContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TapplyType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_ApplyContent

}

//	If the WalkHandlers.TapplyType function is not nil (ie. was set by outside code), calls it with this TapplyType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TapplyType instance.
func (me *TapplyType) Walk ()  { 
	if fn := WalkHandlers.TapplyType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ApplyContent.Walk()
 }

type XsdGoPkgHasElem_Apply struct {
	Apply *TapplyType `xml:"http://www.w3.org/1998/Math/MathML apply"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Apply function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Apply instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Apply instance.
func (me *XsdGoPkgHasElem_Apply) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Apply; fn != nil { fn(me) }
	me.Apply.Walk()
 }

type XsdGoPkgHasGroup_DeclareContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_DeclareContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_DeclareContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_DeclareContent instance.
func (me *XsdGoPkgHasGroup_DeclareContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_DeclareContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TdeclareType struct {
	XsdGoPkgHasGroup_DeclareContent

	XsdGoPkgHasAtts_DeclareAttlist

}

//	If the WalkHandlers.TdeclareType function is not nil (ie. was set by outside code), calls it with this TdeclareType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TdeclareType instance.
func (me *TdeclareType) Walk ()  { 
	if fn := WalkHandlers.TdeclareType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_DeclareContent.Walk()
 }

type XsdGoPkgHasElem_Declare struct {
	Declare *TdeclareType `xml:"http://www.w3.org/1998/Math/MathML declare"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Declare function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Declare instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Declare instance.
func (me *XsdGoPkgHasElem_Declare) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Declare; fn != nil { fn(me) }
	me.Declare.Walk()
 }

type XsdGoPkgHasGroup_DegreeContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_DegreeContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_DegreeContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_DegreeContent instance.
func (me *XsdGoPkgHasGroup_DegreeContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_DegreeContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TdegreeType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_DegreeContent

}

//	If the WalkHandlers.TdegreeType function is not nil (ie. was set by outside code), calls it with this TdegreeType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TdegreeType instance.
func (me *TdegreeType) Walk ()  { 
	if fn := WalkHandlers.TdegreeType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_DegreeContent.Walk()
 }

type XsdGoPkgHasElem_Degree struct {
	Degree *TdegreeType `xml:"http://www.w3.org/1998/Math/MathML degree"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Degree function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Degree instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Degree instance.
func (me *XsdGoPkgHasElem_Degree) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Degree; fn != nil { fn(me) }
	me.Degree.Walk()
 }

type TintervalType struct {
	XsdGoPkgHasGroup_ContentExprClass

	XsdGoPkgHasAtts_IntervalAttlist

}

//	If the WalkHandlers.TintervalType function is not nil (ie. was set by outside code), calls it with this TintervalType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TintervalType instance.
func (me *TintervalType) Walk ()  { 
	if fn := WalkHandlers.TintervalType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type XsdGoPkgHasElem_Interval struct {
	Interval *TintervalType `xml:"http://www.w3.org/1998/Math/MathML interval"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Interval function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Interval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Interval instance.
func (me *XsdGoPkgHasElem_Interval) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Interval; fn != nil { fn(me) }
	me.Interval.Walk()
 }

type XsdGoPkgHasGroup_ConditionContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ConditionContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ConditionContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ConditionContent instance.
func (me *XsdGoPkgHasGroup_ConditionContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ConditionContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TconditionType struct {
	XsdGoPkgHasGroup_ConditionContent

	XsdGoPkgHasAtts_ConditionAttlist

}

//	If the WalkHandlers.TconditionType function is not nil (ie. was set by outside code), calls it with this TconditionType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TconditionType instance.
func (me *TconditionType) Walk ()  { 
	if fn := WalkHandlers.TconditionType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ConditionContent.Walk()
 }

type XsdGoPkgHasElem_Condition struct {
	Condition *TconditionType `xml:"http://www.w3.org/1998/Math/MathML condition"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Condition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Condition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Condition instance.
func (me *XsdGoPkgHasElem_Condition) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Condition; fn != nil { fn(me) }
	me.Condition.Walk()
 }

type XsdGoPkgHasGroup_ContentConstructsClass struct {
	XsdGoPkgHasElem_Piecewise

	XsdGoPkgHasElem_Lambda

	XsdGoPkgHasElem_Bvar

	XsdGoPkgHasElem_Apply

	XsdGoPkgHasElem_Declare

	XsdGoPkgHasElem_Degree

	XsdGoPkgHasElem_Interval

	XsdGoPkgHasElem_Condition

	XsdGoPkgHasElem_Inverse

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentConstructsClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentConstructsClass instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentConstructsClass instance.
func (me *XsdGoPkgHasGroup_ContentConstructsClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentConstructsClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Piecewise.Walk()
	me.XsdGoPkgHasElem_Lambda.Walk()
	me.XsdGoPkgHasElem_Bvar.Walk()
	me.XsdGoPkgHasElem_Apply.Walk()
	me.XsdGoPkgHasElem_Declare.Walk()
	me.XsdGoPkgHasElem_Degree.Walk()
	me.XsdGoPkgHasElem_Interval.Walk()
	me.XsdGoPkgHasElem_Condition.Walk()
	me.XsdGoPkgHasElem_Inverse.Walk()
 }

type XsdGoPkgHasGroup_VectorContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_VectorContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_VectorContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_VectorContent instance.
func (me *XsdGoPkgHasGroup_VectorContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_VectorContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TvectorType struct {
	XsdGoPkgHasAtts_MmultiscriptsAttlist

	XsdGoPkgHasGroup_VectorContent

}

//	If the WalkHandlers.TvectorType function is not nil (ie. was set by outside code), calls it with this TvectorType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TvectorType instance.
func (me *TvectorType) Walk ()  { 
	if fn := WalkHandlers.TvectorType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_VectorContent.Walk()
 }

type XsdGoPkgHasElem_Vector struct {
	Vector *TvectorType `xml:"http://www.w3.org/1998/Math/MathML vector"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Vector function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vector instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vector instance.
func (me *XsdGoPkgHasElem_Vector) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Vector; fn != nil { fn(me) }
	me.Vector.Walk()
 }

type TselectorType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TselectorType function is not nil (ie. was set by outside code), calls it with this TselectorType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TselectorType instance.
func (me *TselectorType) Walk ()  { 
	if fn := WalkHandlers.TselectorType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Selector struct {
	Selector *TselectorType `xml:"http://www.w3.org/1998/Math/MathML selector"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Selector function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Selector instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Selector instance.
func (me *XsdGoPkgHasElem_Selector) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Selector; fn != nil { fn(me) }
	me.Selector.Walk()
 }

type TvectorproductType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TvectorproductType function is not nil (ie. was set by outside code), calls it with this TvectorproductType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TvectorproductType instance.
func (me *TvectorproductType) Walk ()  { 
	if fn := WalkHandlers.TvectorproductType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Vectorproduct struct {
	Vectorproduct *TvectorproductType `xml:"http://www.w3.org/1998/Math/MathML vectorproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Vectorproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vectorproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vectorproduct instance.
func (me *XsdGoPkgHasElem_Vectorproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Vectorproduct; fn != nil { fn(me) }
	me.Vectorproduct.Walk()
 }

type TdeterminantType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TdeterminantType function is not nil (ie. was set by outside code), calls it with this TdeterminantType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TdeterminantType instance.
func (me *TdeterminantType) Walk ()  { 
	if fn := WalkHandlers.TdeterminantType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Determinant struct {
	Determinant *TdeterminantType `xml:"http://www.w3.org/1998/Math/MathML determinant"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Determinant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Determinant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Determinant instance.
func (me *XsdGoPkgHasElem_Determinant) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Determinant; fn != nil { fn(me) }
	me.Determinant.Walk()
 }

type XsdGoPkgHasGroup_MatrixrowContent struct {
	XsdGoPkgHasGroup_ContentExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MatrixrowContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MatrixrowContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MatrixrowContent instance.
func (me *XsdGoPkgHasGroup_MatrixrowContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MatrixrowContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentExprClass.Walk()
 }

type TmatrixrowType struct {
	XsdGoPkgHasGroup_MatrixrowContent

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TmatrixrowType function is not nil (ie. was set by outside code), calls it with this TmatrixrowType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmatrixrowType instance.
func (me *TmatrixrowType) Walk ()  { 
	if fn := WalkHandlers.TmatrixrowType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MatrixrowContent.Walk()
 }

type XsdGoPkgHasElem_Matrixrow struct {
	Matrixrow *TmatrixrowType `xml:"http://www.w3.org/1998/Math/MathML matrixrow"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Matrixrow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Matrixrow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Matrixrow instance.
func (me *XsdGoPkgHasElem_Matrixrow) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Matrixrow; fn != nil { fn(me) }
	me.Matrixrow.Walk()
 }

type XsdGoPkgHasGroup_MatrixContent struct {
	XsdGoPkgHasElem_Matrixrow

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MatrixContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MatrixContent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MatrixContent instance.
func (me *XsdGoPkgHasGroup_MatrixContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MatrixContent; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Matrixrow.Walk()
 }

type TmatrixType struct {
	XsdGoPkgHasGroup_MatrixContent

	XsdGoPkgHasAtts_MmultiscriptsAttlist

}

//	If the WalkHandlers.TmatrixType function is not nil (ie. was set by outside code), calls it with this TmatrixType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmatrixType instance.
func (me *TmatrixType) Walk ()  { 
	if fn := WalkHandlers.TmatrixType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MatrixContent.Walk()
 }

type XsdGoPkgHasElem_Matrix struct {
	Matrix *TmatrixType `xml:"http://www.w3.org/1998/Math/MathML matrix"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Matrix instance.
func (me *XsdGoPkgHasElem_Matrix) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Matrix; fn != nil { fn(me) }
	me.Matrix.Walk()
 }

type TscalarproductType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TscalarproductType function is not nil (ie. was set by outside code), calls it with this TscalarproductType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TscalarproductType instance.
func (me *TscalarproductType) Walk ()  { 
	if fn := WalkHandlers.TscalarproductType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Scalarproduct struct {
	Scalarproduct *TscalarproductType `xml:"http://www.w3.org/1998/Math/MathML scalarproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Scalarproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scalarproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Scalarproduct instance.
func (me *XsdGoPkgHasElem_Scalarproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Scalarproduct; fn != nil { fn(me) }
	me.Scalarproduct.Walk()
 }

type TouterproductType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TouterproductType function is not nil (ie. was set by outside code), calls it with this TouterproductType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TouterproductType instance.
func (me *TouterproductType) Walk ()  { 
	if fn := WalkHandlers.TouterproductType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Outerproduct struct {
	Outerproduct *TouterproductType `xml:"http://www.w3.org/1998/Math/MathML outerproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Outerproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Outerproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Outerproduct instance.
func (me *XsdGoPkgHasElem_Outerproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Outerproduct; fn != nil { fn(me) }
	me.Outerproduct.Walk()
 }

type TtransposeType struct {
	XsdGoPkgHasAtts_CsymbolAttlist

}

//	If the WalkHandlers.TtransposeType function is not nil (ie. was set by outside code), calls it with this TtransposeType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TtransposeType instance.
func (me *TtransposeType) Walk ()  { 
	if fn := WalkHandlers.TtransposeType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_Transpose struct {
	Transpose *TtransposeType `xml:"http://www.w3.org/1998/Math/MathML transpose"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Transpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Transpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Transpose instance.
func (me *XsdGoPkgHasElem_Transpose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Transpose; fn != nil { fn(me) }
	me.Transpose.Walk()
 }

type XsdGoPkgHasGroup_ContentLinearAlgebraClass struct {
	XsdGoPkgHasElem_Selector

	XsdGoPkgHasElem_Vectorproduct

	XsdGoPkgHasElem_Determinant

	XsdGoPkgHasElem_Matrix

	XsdGoPkgHasElem_Scalarproduct

	XsdGoPkgHasElem_Outerproduct

	XsdGoPkgHasElem_Transpose

	XsdGoPkgHasElem_Vector

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContentLinearAlgebraClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContentLinearAlgebraClass instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContentLinearAlgebraClass instance.
func (me *XsdGoPkgHasGroup_ContentLinearAlgebraClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContentLinearAlgebraClass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Selector.Walk()
	me.XsdGoPkgHasElem_Vectorproduct.Walk()
	me.XsdGoPkgHasElem_Determinant.Walk()
	me.XsdGoPkgHasElem_Matrix.Walk()
	me.XsdGoPkgHasElem_Scalarproduct.Walk()
	me.XsdGoPkgHasElem_Outerproduct.Walk()
	me.XsdGoPkgHasElem_Transpose.Walk()
	me.XsdGoPkgHasElem_Vector.Walk()
 }

type XsdGoPkgHasGroup_ContExprClass struct {
	XsdGoPkgHasGroup_ContentStatisticsClass

	XsdGoPkgHasGroup_ContentFunctionsClass

	XsdGoPkgHasGroup_ContentRelationsClass

	XsdGoPkgHasGroup_ContentConstructsClass

	XsdGoPkgHasGroup_ContentLinearAlgebraClass

	XsdGoPkgHasElem_Semantics

	XsdGoPkgHasGroup_ContentVectorCalculusClass

	XsdGoPkgHasGroup_ContentLogicClass

	XsdGoPkgHasGroup_ContentConstantsClass

	XsdGoPkgHasGroup_ContentArithClass

	XsdGoPkgHasGroup_ContentElementaryFunctionsClass

	XsdGoPkgHasGroup_ContentSetsClass

	XsdGoPkgHasGroup_ContentCalculusClass

	XsdGoPkgHasGroup_ContentTokensClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_ContExprClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ContExprClass instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ContExprClass instance.
func (me *XsdGoPkgHasGroup_ContExprClass) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_ContExprClass; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContentConstructsClass.Walk()
	me.XsdGoPkgHasGroup_ContentLinearAlgebraClass.Walk()
	me.XsdGoPkgHasElem_Semantics.Walk()
	me.XsdGoPkgHasGroup_ContentVectorCalculusClass.Walk()
	me.XsdGoPkgHasGroup_ContentLogicClass.Walk()
	me.XsdGoPkgHasGroup_ContentConstantsClass.Walk()
	me.XsdGoPkgHasGroup_ContentArithClass.Walk()
	me.XsdGoPkgHasGroup_ContentElementaryFunctionsClass.Walk()
	me.XsdGoPkgHasGroup_ContentSetsClass.Walk()
	me.XsdGoPkgHasGroup_ContentCalculusClass.Walk()
	me.XsdGoPkgHasGroup_ContentTokensClass.Walk()
	me.XsdGoPkgHasGroup_ContentStatisticsClass.Walk()
	me.XsdGoPkgHasGroup_ContentFunctionsClass.Walk()
	me.XsdGoPkgHasGroup_ContentRelationsClass.Walk()
 }

type XsdGoPkgHasGroup_MathContent struct {
	XsdGoPkgHasGroup_ContExprClass

	XsdGoPkgHasGroup_PresExprClass

}

//	If the WalkHandlers.XsdGoPkgHasGroup_MathContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_MathContent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_MathContent instance.
func (me *XsdGoPkgHasGroup_MathContent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasGroup_MathContent; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_ContExprClass.Walk()
	me.XsdGoPkgHasGroup_PresExprClass.Walk()
 }

type TmathType struct {
	XsdGoPkgHasAtts_MathAttlist

	XsdGoPkgHasGroup_MathContent

}

//	If the WalkHandlers.TmathType function is not nil (ie. was set by outside code), calls it with this TmathType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmathType instance.
func (me *TmathType) Walk ()  { 
	if fn := WalkHandlers.TmathType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_MathContent.Walk()
 }

type XsdGoPkgHasElem_Math struct {
	Math *TmathType `xml:"http://www.w3.org/1998/Math/MathML math"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Math function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Math instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Math instance.
func (me *XsdGoPkgHasElem_Math) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Math; fn != nil { fn(me) }
	me.Math.Walk()
 }

type XsdGoPkgHasElems_Math struct {
	Maths []*TmathType `xml:"http://www.w3.org/1998/Math/MathML math"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Math function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Math instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Math instance.
func (me *XsdGoPkgHasElems_Math) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Math; fn != nil { fn(me) }
	for _, x := range me.Maths { x.Walk() }
 }

type XsdGoPkgHasElems_Mglyph struct {
	Mglyphs []*TmglyphType `xml:"http://www.w3.org/1998/Math/MathML mglyph"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mglyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mglyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mglyph instance.
func (me *XsdGoPkgHasElems_Mglyph) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mglyph; fn != nil { fn(me) }
	for _, x := range me.Mglyphs { x.Walk() }
 }

type XsdGoPkgHasElems_Mi struct {
	Mis []*TmiType `xml:"http://www.w3.org/1998/Math/MathML mi"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mi instance.
func (me *XsdGoPkgHasElems_Mi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mi; fn != nil { fn(me) }
	for _, x := range me.Mis { x.Walk() }
 }

type XsdGoPkgHasElems_Mo struct {
	Mos []*TmoType `xml:"http://www.w3.org/1998/Math/MathML mo"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mo instance.
func (me *XsdGoPkgHasElems_Mo) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mo; fn != nil { fn(me) }
	for _, x := range me.Mos { x.Walk() }
 }

type XsdGoPkgHasElems_Mn struct {
	Mns []*TmnType `xml:"http://www.w3.org/1998/Math/MathML mn"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mn instance.
func (me *XsdGoPkgHasElems_Mn) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mn; fn != nil { fn(me) }
	for _, x := range me.Mns { x.Walk() }
 }

type XsdGoPkgHasElems_Mtext struct {
	Mtexts []*TmtextType `xml:"http://www.w3.org/1998/Math/MathML mtext"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mtext instance.
func (me *XsdGoPkgHasElems_Mtext) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mtext; fn != nil { fn(me) }
	for _, x := range me.Mtexts { x.Walk() }
 }

type XsdGoPkgHasElems_Ms struct {
	Mses []*TmsType `xml:"http://www.w3.org/1998/Math/MathML ms"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Ms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ms instance.
func (me *XsdGoPkgHasElems_Ms) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Ms; fn != nil { fn(me) }
	for _, x := range me.Mses { x.Walk() }
 }

type XsdGoPkgHasElems_Msub struct {
	Msubs []*TmsubType `xml:"http://www.w3.org/1998/Math/MathML msub"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Msub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msub instance.
func (me *XsdGoPkgHasElems_Msub) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Msub; fn != nil { fn(me) }
	for _, x := range me.Msubs { x.Walk() }
 }

type XsdGoPkgHasElems_Msup struct {
	Msups []*TmsupType `xml:"http://www.w3.org/1998/Math/MathML msup"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Msup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msup instance.
func (me *XsdGoPkgHasElems_Msup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Msup; fn != nil { fn(me) }
	for _, x := range me.Msups { x.Walk() }
 }

type XsdGoPkgHasElems_Msubsup struct {
	Msubsups []*TmsubsupType `xml:"http://www.w3.org/1998/Math/MathML msubsup"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Msubsup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msubsup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msubsup instance.
func (me *XsdGoPkgHasElems_Msubsup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Msubsup; fn != nil { fn(me) }
	for _, x := range me.Msubsups { x.Walk() }
 }

type XsdGoPkgHasElems_Munder struct {
	Munders []*TmunderType `xml:"http://www.w3.org/1998/Math/MathML munder"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Munder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Munder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Munder instance.
func (me *XsdGoPkgHasElems_Munder) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Munder; fn != nil { fn(me) }
	for _, x := range me.Munders { x.Walk() }
 }

type XsdGoPkgHasElems_Mover struct {
	Movers []*TmoverType `xml:"http://www.w3.org/1998/Math/MathML mover"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mover instance.
func (me *XsdGoPkgHasElems_Mover) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mover; fn != nil { fn(me) }
	for _, x := range me.Movers { x.Walk() }
 }

type XsdGoPkgHasElems_Munderover struct {
	Munderovers []*TmunderoverType `xml:"http://www.w3.org/1998/Math/MathML munderover"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Munderover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Munderover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Munderover instance.
func (me *XsdGoPkgHasElems_Munderover) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Munderover; fn != nil { fn(me) }
	for _, x := range me.Munderovers { x.Walk() }
 }

type XsdGoPkgHasElems_Mmultiscripts struct {
	Mmultiscriptses []*TmmultiscriptsType `xml:"http://www.w3.org/1998/Math/MathML mmultiscripts"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mmultiscripts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mmultiscripts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mmultiscripts instance.
func (me *XsdGoPkgHasElems_Mmultiscripts) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mmultiscripts; fn != nil { fn(me) }
	for _, x := range me.Mmultiscriptses { x.Walk() }
 }

type XsdGoPkgHasElems_None struct {
	Nones []*TnoneType `xml:"http://www.w3.org/1998/Math/MathML none"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_None instance.
func (me *XsdGoPkgHasElems_None) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_None; fn != nil { fn(me) }
	for _, x := range me.Nones { x.Walk() }
 }

type XsdGoPkgHasElems_Mprescripts struct {
	Mprescriptses []*TmprescriptsType `xml:"http://www.w3.org/1998/Math/MathML mprescripts"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mprescripts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mprescripts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mprescripts instance.
func (me *XsdGoPkgHasElems_Mprescripts) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mprescripts; fn != nil { fn(me) }
	for _, x := range me.Mprescriptses { x.Walk() }
 }

type XsdGoPkgHasElems_Mspace struct {
	Mspaces []*TmspaceType `xml:"http://www.w3.org/1998/Math/MathML mspace"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mspace function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mspace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mspace instance.
func (me *XsdGoPkgHasElems_Mspace) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mspace; fn != nil { fn(me) }
	for _, x := range me.Mspaces { x.Walk() }
 }

type XsdGoPkgHasElems_Mrow struct {
	Mrows []*TmrowType `xml:"http://www.w3.org/1998/Math/MathML mrow"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mrow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mrow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mrow instance.
func (me *XsdGoPkgHasElems_Mrow) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mrow; fn != nil { fn(me) }
	for _, x := range me.Mrows { x.Walk() }
 }

type XsdGoPkgHasElems_Mfrac struct {
	Mfracs []*TmfracType `xml:"http://www.w3.org/1998/Math/MathML mfrac"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mfrac function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mfrac instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mfrac instance.
func (me *XsdGoPkgHasElems_Mfrac) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mfrac; fn != nil { fn(me) }
	for _, x := range me.Mfracs { x.Walk() }
 }

type XsdGoPkgHasElems_Msqrt struct {
	Msqrts []*TmsqrtType `xml:"http://www.w3.org/1998/Math/MathML msqrt"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Msqrt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msqrt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msqrt instance.
func (me *XsdGoPkgHasElems_Msqrt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Msqrt; fn != nil { fn(me) }
	for _, x := range me.Msqrts { x.Walk() }
 }

type XsdGoPkgHasElems_Mroot struct {
	Mroots []*TmrootType `xml:"http://www.w3.org/1998/Math/MathML mroot"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mroot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mroot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mroot instance.
func (me *XsdGoPkgHasElems_Mroot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mroot; fn != nil { fn(me) }
	for _, x := range me.Mroots { x.Walk() }
 }

type XsdGoPkgHasElems_Mpadded struct {
	Mpaddeds []*TmpaddedType `xml:"http://www.w3.org/1998/Math/MathML mpadded"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mpadded function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mpadded instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mpadded instance.
func (me *XsdGoPkgHasElems_Mpadded) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mpadded; fn != nil { fn(me) }
	for _, x := range me.Mpaddeds { x.Walk() }
 }

type XsdGoPkgHasElems_Mphantom struct {
	Mphantoms []*TmphantomType `xml:"http://www.w3.org/1998/Math/MathML mphantom"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mphantom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mphantom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mphantom instance.
func (me *XsdGoPkgHasElems_Mphantom) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mphantom; fn != nil { fn(me) }
	for _, x := range me.Mphantoms { x.Walk() }
 }

type XsdGoPkgHasElems_Mfenced struct {
	Mfenceds []*TmfencedType `xml:"http://www.w3.org/1998/Math/MathML mfenced"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mfenced function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mfenced instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mfenced instance.
func (me *XsdGoPkgHasElems_Mfenced) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mfenced; fn != nil { fn(me) }
	for _, x := range me.Mfenceds { x.Walk() }
 }

type XsdGoPkgHasElems_Menclose struct {
	Mencloses []*TmencloseType `xml:"http://www.w3.org/1998/Math/MathML menclose"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Menclose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Menclose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Menclose instance.
func (me *XsdGoPkgHasElems_Menclose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Menclose; fn != nil { fn(me) }
	for _, x := range me.Mencloses { x.Walk() }
 }

type XsdGoPkgHasElems_Mtr struct {
	Mtrs []*TmtrType `xml:"http://www.w3.org/1998/Math/MathML mtr"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mtr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mtr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mtr instance.
func (me *XsdGoPkgHasElems_Mtr) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mtr; fn != nil { fn(me) }
	for _, x := range me.Mtrs { x.Walk() }
 }

type XsdGoPkgHasElems_Mlabeledtr struct {
	Mlabeledtrs []*TmlabeledtrType `xml:"http://www.w3.org/1998/Math/MathML mlabeledtr"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mlabeledtr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mlabeledtr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mlabeledtr instance.
func (me *XsdGoPkgHasElems_Mlabeledtr) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mlabeledtr; fn != nil { fn(me) }
	for _, x := range me.Mlabeledtrs { x.Walk() }
 }

type XsdGoPkgHasElems_Mtd struct {
	Mtds []*TmtdType `xml:"http://www.w3.org/1998/Math/MathML mtd"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mtd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mtd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mtd instance.
func (me *XsdGoPkgHasElems_Mtd) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mtd; fn != nil { fn(me) }
	for _, x := range me.Mtds { x.Walk() }
 }

type XsdGoPkgHasElems_Mtable struct {
	Mtables []*TmtableType `xml:"http://www.w3.org/1998/Math/MathML mtable"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mtable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mtable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mtable instance.
func (me *XsdGoPkgHasElems_Mtable) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mtable; fn != nil { fn(me) }
	for _, x := range me.Mtables { x.Walk() }
 }

type XsdGoPkgHasElems_Maligngroup struct {
	Maligngroups []*TmaligngroupType `xml:"http://www.w3.org/1998/Math/MathML maligngroup"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Maligngroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Maligngroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Maligngroup instance.
func (me *XsdGoPkgHasElems_Maligngroup) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Maligngroup; fn != nil { fn(me) }
	for _, x := range me.Maligngroups { x.Walk() }
 }

type XsdGoPkgHasElems_Malignmark struct {
	Malignmarks []*TmalignmarkType `xml:"http://www.w3.org/1998/Math/MathML malignmark"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Malignmark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Malignmark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Malignmark instance.
func (me *XsdGoPkgHasElems_Malignmark) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Malignmark; fn != nil { fn(me) }
	for _, x := range me.Malignmarks { x.Walk() }
 }

type XsdGoPkgHasElems_Mstyle struct {
	Mstyles []*TmstyleType `xml:"http://www.w3.org/1998/Math/MathML mstyle"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mstyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mstyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mstyle instance.
func (me *XsdGoPkgHasElems_Mstyle) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mstyle; fn != nil { fn(me) }
	for _, x := range me.Mstyles { x.Walk() }
 }

type XsdGoPkgHasElems_Merror struct {
	Merrors []*TmerrorType `xml:"http://www.w3.org/1998/Math/MathML merror"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Merror function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Merror instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Merror instance.
func (me *XsdGoPkgHasElems_Merror) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Merror; fn != nil { fn(me) }
	for _, x := range me.Merrors { x.Walk() }
 }

type XsdGoPkgHasElems_Maction struct {
	Mactions []*TmactionType `xml:"http://www.w3.org/1998/Math/MathML maction"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Maction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Maction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Maction instance.
func (me *XsdGoPkgHasElems_Maction) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Maction; fn != nil { fn(me) }
	for _, x := range me.Mactions { x.Walk() }
 }

type XsdGoPkgHasElems_Sep struct {
	Seps []*TsepType `xml:"http://www.w3.org/1998/Math/MathML sep"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sep function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sep instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sep instance.
func (me *XsdGoPkgHasElems_Sep) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sep; fn != nil { fn(me) }
	for _, x := range me.Seps { x.Walk() }
 }

type XsdGoPkgHasElems_Cn struct {
	Cns []*TcnType `xml:"http://www.w3.org/1998/Math/MathML cn"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Cn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cn instance.
func (me *XsdGoPkgHasElems_Cn) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Cn; fn != nil { fn(me) }
	for _, x := range me.Cns { x.Walk() }
 }

type XsdGoPkgHasElems_Ci struct {
	Cis []*TciType `xml:"http://www.w3.org/1998/Math/MathML ci"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Ci function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ci instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ci instance.
func (me *XsdGoPkgHasElems_Ci) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Ci; fn != nil { fn(me) }
	for _, x := range me.Cis { x.Walk() }
 }

type XsdGoPkgHasElems_Csymbol struct {
	Csymbols []*TcsymbolType `xml:"http://www.w3.org/1998/Math/MathML csymbol"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Csymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Csymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Csymbol instance.
func (me *XsdGoPkgHasElems_Csymbol) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Csymbol; fn != nil { fn(me) }
	for _, x := range me.Csymbols { x.Walk() }
 }

type XsdGoPkgHasElems_Abs struct {
	Abses []*TArithType `xml:"http://www.w3.org/1998/Math/MathML abs"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Abs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abs instance.
func (me *XsdGoPkgHasElems_Abs) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Abs; fn != nil { fn(me) }
	for _, x := range me.Abses { x.Walk() }
 }

type XsdGoPkgHasElems_Conjugate struct {
	Conjugates []*TArithType `xml:"http://www.w3.org/1998/Math/MathML conjugate"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Conjugate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Conjugate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Conjugate instance.
func (me *XsdGoPkgHasElems_Conjugate) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Conjugate; fn != nil { fn(me) }
	for _, x := range me.Conjugates { x.Walk() }
 }

type XsdGoPkgHasElems_Arg struct {
	Args []*TArithType `xml:"http://www.w3.org/1998/Math/MathML arg"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arg instance.
func (me *XsdGoPkgHasElems_Arg) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arg; fn != nil { fn(me) }
	for _, x := range me.Args { x.Walk() }
 }

type XsdGoPkgHasElems_Real struct {
	Reals []*TArithType `xml:"http://www.w3.org/1998/Math/MathML real"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Real function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Real instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Real instance.
func (me *XsdGoPkgHasElems_Real) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Real; fn != nil { fn(me) }
	for _, x := range me.Reals { x.Walk() }
 }

type XsdGoPkgHasElems_Imaginary struct {
	Imaginaries []*TArithType `xml:"http://www.w3.org/1998/Math/MathML imaginary"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Imaginary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imaginary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imaginary instance.
func (me *XsdGoPkgHasElems_Imaginary) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Imaginary; fn != nil { fn(me) }
	for _, x := range me.Imaginaries { x.Walk() }
 }

type XsdGoPkgHasElems_Floor struct {
	Floors []*TArithType `xml:"http://www.w3.org/1998/Math/MathML floor"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Floor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Floor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Floor instance.
func (me *XsdGoPkgHasElems_Floor) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Floor; fn != nil { fn(me) }
	for _, x := range me.Floors { x.Walk() }
 }

type XsdGoPkgHasElems_Ceiling struct {
	Ceilings []*TArithType `xml:"http://www.w3.org/1998/Math/MathML ceiling"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Ceiling function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ceiling instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ceiling instance.
func (me *XsdGoPkgHasElems_Ceiling) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Ceiling; fn != nil { fn(me) }
	for _, x := range me.Ceilings { x.Walk() }
 }

type XsdGoPkgHasElems_Power struct {
	Powers []*TArithType `xml:"http://www.w3.org/1998/Math/MathML power"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Power function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Power instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Power instance.
func (me *XsdGoPkgHasElems_Power) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Power; fn != nil { fn(me) }
	for _, x := range me.Powers { x.Walk() }
 }

type XsdGoPkgHasElems_Root struct {
	Roots []*TArithType `xml:"http://www.w3.org/1998/Math/MathML root"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Root function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Root instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Root instance.
func (me *XsdGoPkgHasElems_Root) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Root; fn != nil { fn(me) }
	for _, x := range me.Roots { x.Walk() }
 }

type XsdGoPkgHasElems_Minus struct {
	Minuses []*TArithType `xml:"http://www.w3.org/1998/Math/MathML minus"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Minus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Minus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Minus instance.
func (me *XsdGoPkgHasElems_Minus) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Minus; fn != nil { fn(me) }
	for _, x := range me.Minuses { x.Walk() }
 }

type XsdGoPkgHasElems_Plus struct {
	Pluses []*TArithType `xml:"http://www.w3.org/1998/Math/MathML plus"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Plus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Plus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Plus instance.
func (me *XsdGoPkgHasElems_Plus) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Plus; fn != nil { fn(me) }
	for _, x := range me.Pluses { x.Walk() }
 }

type XsdGoPkgHasElems_Sum struct {
	Sums []*TArithType `xml:"http://www.w3.org/1998/Math/MathML sum"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sum instance.
func (me *XsdGoPkgHasElems_Sum) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sum; fn != nil { fn(me) }
	for _, x := range me.Sums { x.Walk() }
 }

type XsdGoPkgHasElems_Times struct {
	Timeses []*TArithType `xml:"http://www.w3.org/1998/Math/MathML times"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Times function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Times instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Times instance.
func (me *XsdGoPkgHasElems_Times) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Times; fn != nil { fn(me) }
	for _, x := range me.Timeses { x.Walk() }
 }

type XsdGoPkgHasElems_Product struct {
	Products []*TArithType `xml:"http://www.w3.org/1998/Math/MathML product"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Product function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Product instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Product instance.
func (me *XsdGoPkgHasElems_Product) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Product; fn != nil { fn(me) }
	for _, x := range me.Products { x.Walk() }
 }

type XsdGoPkgHasElems_Max struct {
	Maxs []*TArithType `xml:"http://www.w3.org/1998/Math/MathML max"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Max function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Max instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Max instance.
func (me *XsdGoPkgHasElems_Max) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Max; fn != nil { fn(me) }
	for _, x := range me.Maxs { x.Walk() }
 }

type XsdGoPkgHasElems_Min struct {
	Mins []*TArithType `xml:"http://www.w3.org/1998/Math/MathML min"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Min function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Min instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Min instance.
func (me *XsdGoPkgHasElems_Min) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Min; fn != nil { fn(me) }
	for _, x := range me.Mins { x.Walk() }
 }

type XsdGoPkgHasElems_Factorial struct {
	Factorials []*TArithType `xml:"http://www.w3.org/1998/Math/MathML factorial"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Factorial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Factorial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Factorial instance.
func (me *XsdGoPkgHasElems_Factorial) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Factorial; fn != nil { fn(me) }
	for _, x := range me.Factorials { x.Walk() }
 }

type XsdGoPkgHasElems_Quotient struct {
	Quotients []*TArithType `xml:"http://www.w3.org/1998/Math/MathML quotient"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Quotient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Quotient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Quotient instance.
func (me *XsdGoPkgHasElems_Quotient) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Quotient; fn != nil { fn(me) }
	for _, x := range me.Quotients { x.Walk() }
 }

type XsdGoPkgHasElems_Divide struct {
	Divides []*TArithType `xml:"http://www.w3.org/1998/Math/MathML divide"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Divide function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Divide instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Divide instance.
func (me *XsdGoPkgHasElems_Divide) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Divide; fn != nil { fn(me) }
	for _, x := range me.Divides { x.Walk() }
 }

type XsdGoPkgHasElems_Rem struct {
	Rems []*TArithType `xml:"http://www.w3.org/1998/Math/MathML rem"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Rem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rem instance.
func (me *XsdGoPkgHasElems_Rem) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Rem; fn != nil { fn(me) }
	for _, x := range me.Rems { x.Walk() }
 }

type XsdGoPkgHasElems_Gcd struct {
	Gcds []*TArithType `xml:"http://www.w3.org/1998/Math/MathML gcd"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Gcd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Gcd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Gcd instance.
func (me *XsdGoPkgHasElems_Gcd) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Gcd; fn != nil { fn(me) }
	for _, x := range me.Gcds { x.Walk() }
 }

type XsdGoPkgHasElems_Lcm struct {
	Lcms []*TArithType `xml:"http://www.w3.org/1998/Math/MathML lcm"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Lcm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lcm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lcm instance.
func (me *XsdGoPkgHasElems_Lcm) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Lcm; fn != nil { fn(me) }
	for _, x := range me.Lcms { x.Walk() }
 }

type XsdGoPkgHasElems_Compose struct {
	Composes []*TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML compose"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Compose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Compose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Compose instance.
func (me *XsdGoPkgHasElems_Compose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Compose; fn != nil { fn(me) }
	for _, x := range me.Composes { x.Walk() }
 }

type XsdGoPkgHasElems_Domain struct {
	Domains []*TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML domain"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Domain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Domain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Domain instance.
func (me *XsdGoPkgHasElems_Domain) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Domain; fn != nil { fn(me) }
	for _, x := range me.Domains { x.Walk() }
 }

type XsdGoPkgHasElems_Codomain struct {
	Codomains []*TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML codomain"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Codomain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Codomain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Codomain instance.
func (me *XsdGoPkgHasElems_Codomain) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Codomain; fn != nil { fn(me) }
	for _, x := range me.Codomains { x.Walk() }
 }

type XsdGoPkgHasElems_Image struct {
	Images []*TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML image"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Image instance.
func (me *XsdGoPkgHasElems_Image) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Image; fn != nil { fn(me) }
	for _, x := range me.Images { x.Walk() }
 }

type XsdGoPkgHasElems_Domainofapplication struct {
	Domainofapplications []*TdomainofapplicationType `xml:"http://www.w3.org/1998/Math/MathML domainofapplication"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Domainofapplication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Domainofapplication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Domainofapplication instance.
func (me *XsdGoPkgHasElems_Domainofapplication) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Domainofapplication; fn != nil { fn(me) }
	for _, x := range me.Domainofapplications { x.Walk() }
 }

type XsdGoPkgHasElems_Ident struct {
	Idents []*TFunctionsType `xml:"http://www.w3.org/1998/Math/MathML ident"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Ident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ident instance.
func (me *XsdGoPkgHasElems_Ident) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Ident; fn != nil { fn(me) }
	for _, x := range me.Idents { x.Walk() }
 }

type XsdGoPkgHasElems_And struct {
	Ands []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML and"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_And function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_And instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_And instance.
func (me *XsdGoPkgHasElems_And) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_And; fn != nil { fn(me) }
	for _, x := range me.Ands { x.Walk() }
 }

type XsdGoPkgHasElems_Or struct {
	Ors []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML or"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Or function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Or instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Or instance.
func (me *XsdGoPkgHasElems_Or) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Or; fn != nil { fn(me) }
	for _, x := range me.Ors { x.Walk() }
 }

type XsdGoPkgHasElems_Xor struct {
	Xors []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML xor"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Xor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xor instance.
func (me *XsdGoPkgHasElems_Xor) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Xor; fn != nil { fn(me) }
	for _, x := range me.Xors { x.Walk() }
 }

type XsdGoPkgHasElems_Not struct {
	Nots []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML not"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Not function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Not instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Not instance.
func (me *XsdGoPkgHasElems_Not) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Not; fn != nil { fn(me) }
	for _, x := range me.Nots { x.Walk() }
 }

type XsdGoPkgHasElems_Exists struct {
	Existses []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML exists"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Exists function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Exists instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Exists instance.
func (me *XsdGoPkgHasElems_Exists) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Exists; fn != nil { fn(me) }
	for _, x := range me.Existses { x.Walk() }
 }

type XsdGoPkgHasElems_Forall struct {
	Foralls []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML forall"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Forall function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Forall instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Forall instance.
func (me *XsdGoPkgHasElems_Forall) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Forall; fn != nil { fn(me) }
	for _, x := range me.Foralls { x.Walk() }
 }

type XsdGoPkgHasElems_Implies struct {
	Implieses []*TLogicType `xml:"http://www.w3.org/1998/Math/MathML implies"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Implies function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Implies instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Implies instance.
func (me *XsdGoPkgHasElems_Implies) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Implies; fn != nil { fn(me) }
	for _, x := range me.Implieses { x.Walk() }
 }

type XsdGoPkgHasElems_Apply struct {
	Applies []*TapplyType `xml:"http://www.w3.org/1998/Math/MathML apply"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Apply function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Apply instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Apply instance.
func (me *XsdGoPkgHasElems_Apply) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Apply; fn != nil { fn(me) }
	for _, x := range me.Applies { x.Walk() }
 }

type XsdGoPkgHasElems_Interval struct {
	Intervals []*TintervalType `xml:"http://www.w3.org/1998/Math/MathML interval"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Interval function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Interval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Interval instance.
func (me *XsdGoPkgHasElems_Interval) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Interval; fn != nil { fn(me) }
	for _, x := range me.Intervals { x.Walk() }
 }

type XsdGoPkgHasElems_Inverse struct {
	Inverses []*TinverseType `xml:"http://www.w3.org/1998/Math/MathML inverse"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Inverse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Inverse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Inverse instance.
func (me *XsdGoPkgHasElems_Inverse) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Inverse; fn != nil { fn(me) }
	for _, x := range me.Inverses { x.Walk() }
 }

type XsdGoPkgHasElems_Condition struct {
	Conditions []*TconditionType `xml:"http://www.w3.org/1998/Math/MathML condition"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Condition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Condition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Condition instance.
func (me *XsdGoPkgHasElems_Condition) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Condition; fn != nil { fn(me) }
	for _, x := range me.Conditions { x.Walk() }
 }

type XsdGoPkgHasElems_Declare struct {
	Declares []*TdeclareType `xml:"http://www.w3.org/1998/Math/MathML declare"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Declare function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Declare instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Declare instance.
func (me *XsdGoPkgHasElems_Declare) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Declare; fn != nil { fn(me) }
	for _, x := range me.Declares { x.Walk() }
 }

type XsdGoPkgHasElems_Lambda struct {
	Lambdas []*TlambdaType `xml:"http://www.w3.org/1998/Math/MathML lambda"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Lambda function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lambda instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lambda instance.
func (me *XsdGoPkgHasElems_Lambda) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Lambda; fn != nil { fn(me) }
	for _, x := range me.Lambdas { x.Walk() }
 }

type XsdGoPkgHasElems_Otherwise struct {
	Otherwises []*TotherwiseType `xml:"http://www.w3.org/1998/Math/MathML otherwise"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Otherwise function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Otherwise instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Otherwise instance.
func (me *XsdGoPkgHasElems_Otherwise) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Otherwise; fn != nil { fn(me) }
	for _, x := range me.Otherwises { x.Walk() }
 }

type XsdGoPkgHasElem_Piece struct {
	Piece *TpieceType `xml:"http://www.w3.org/1998/Math/MathML piece"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Piece function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Piece instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Piece instance.
func (me *XsdGoPkgHasElem_Piece) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Piece; fn != nil { fn(me) }
	me.Piece.Walk()
 }

type XsdGoPkgHasElems_Piecewise struct {
	Piecewises []*TpiecewiseType `xml:"http://www.w3.org/1998/Math/MathML piecewise"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Piecewise function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Piecewise instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Piecewise instance.
func (me *XsdGoPkgHasElems_Piecewise) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Piecewise; fn != nil { fn(me) }
	for _, x := range me.Piecewises { x.Walk() }
 }

type XsdGoPkgHasElems_Bvar struct {
	Bvars []*TbvarType `xml:"http://www.w3.org/1998/Math/MathML bvar"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Bvar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bvar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bvar instance.
func (me *XsdGoPkgHasElems_Bvar) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Bvar; fn != nil { fn(me) }
	for _, x := range me.Bvars { x.Walk() }
 }

type XsdGoPkgHasElems_Degree struct {
	Degrees []*TdegreeType `xml:"http://www.w3.org/1998/Math/MathML degree"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Degree function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Degree instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Degree instance.
func (me *XsdGoPkgHasElems_Degree) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Degree; fn != nil { fn(me) }
	for _, x := range me.Degrees { x.Walk() }
 }

type XsdGoPkgHasElems_Naturalnumbers struct {
	Naturalnumberses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML naturalnumbers"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Naturalnumbers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Naturalnumbers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Naturalnumbers instance.
func (me *XsdGoPkgHasElems_Naturalnumbers) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Naturalnumbers; fn != nil { fn(me) }
	for _, x := range me.Naturalnumberses { x.Walk() }
 }

type XsdGoPkgHasElems_Primes struct {
	Primeses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML primes"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Primes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Primes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Primes instance.
func (me *XsdGoPkgHasElems_Primes) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Primes; fn != nil { fn(me) }
	for _, x := range me.Primeses { x.Walk() }
 }

type XsdGoPkgHasElems_Integers struct {
	Integerses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML integers"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Integers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Integers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Integers instance.
func (me *XsdGoPkgHasElems_Integers) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Integers; fn != nil { fn(me) }
	for _, x := range me.Integerses { x.Walk() }
 }

type XsdGoPkgHasElems_Rationals struct {
	Rationalses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML rationals"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Rationals function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rationals instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rationals instance.
func (me *XsdGoPkgHasElems_Rationals) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Rationals; fn != nil { fn(me) }
	for _, x := range me.Rationalses { x.Walk() }
 }

type XsdGoPkgHasElems_Reals struct {
	Realses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML reals"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Reals function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reals instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reals instance.
func (me *XsdGoPkgHasElems_Reals) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Reals; fn != nil { fn(me) }
	for _, x := range me.Realses { x.Walk() }
 }

type XsdGoPkgHasElems_Complexes struct {
	Complexeses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML complexes"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Complexes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Complexes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Complexes instance.
func (me *XsdGoPkgHasElems_Complexes) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Complexes; fn != nil { fn(me) }
	for _, x := range me.Complexeses { x.Walk() }
 }

type XsdGoPkgHasElems_Emptyset struct {
	Emptysets []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML emptyset"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Emptyset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Emptyset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Emptyset instance.
func (me *XsdGoPkgHasElems_Emptyset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Emptyset; fn != nil { fn(me) }
	for _, x := range me.Emptysets { x.Walk() }
 }

type XsdGoPkgHasElems_Exponentiale struct {
	Exponentiales []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML exponentiale"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Exponentiale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Exponentiale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Exponentiale instance.
func (me *XsdGoPkgHasElems_Exponentiale) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Exponentiale; fn != nil { fn(me) }
	for _, x := range me.Exponentiales { x.Walk() }
 }

type XsdGoPkgHasElems_Imaginaryi struct {
	Imaginaryis []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML imaginaryi"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Imaginaryi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imaginaryi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imaginaryi instance.
func (me *XsdGoPkgHasElems_Imaginaryi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Imaginaryi; fn != nil { fn(me) }
	for _, x := range me.Imaginaryis { x.Walk() }
 }

type XsdGoPkgHasElems_Pi struct {
	Pis []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML pi"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Pi function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pi instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pi instance.
func (me *XsdGoPkgHasElems_Pi) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Pi; fn != nil { fn(me) }
	for _, x := range me.Pis { x.Walk() }
 }

type XsdGoPkgHasElems_Eulergamma struct {
	Eulergammas []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML eulergamma"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Eulergamma function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Eulergamma instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Eulergamma instance.
func (me *XsdGoPkgHasElems_Eulergamma) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Eulergamma; fn != nil { fn(me) }
	for _, x := range me.Eulergammas { x.Walk() }
 }

type XsdGoPkgHasElems_True struct {
	Trues []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML true"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_True instance.
func (me *XsdGoPkgHasElems_True) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_True; fn != nil { fn(me) }
	for _, x := range me.Trues { x.Walk() }
 }

type XsdGoPkgHasElems_False struct {
	Falses []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML false"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_False instance.
func (me *XsdGoPkgHasElems_False) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_False; fn != nil { fn(me) }
	for _, x := range me.Falses { x.Walk() }
 }

type XsdGoPkgHasElems_Infinity struct {
	Infinities []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML infinity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Infinity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Infinity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Infinity instance.
func (me *XsdGoPkgHasElems_Infinity) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Infinity; fn != nil { fn(me) }
	for _, x := range me.Infinities { x.Walk() }
 }

type XsdGoPkgHasElems_Notanumber struct {
	Notanumbers []*TConstantType `xml:"http://www.w3.org/1998/Math/MathML notanumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Notanumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Notanumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Notanumber instance.
func (me *XsdGoPkgHasElems_Notanumber) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Notanumber; fn != nil { fn(me) }
	for _, x := range me.Notanumbers { x.Walk() }
 }

type XsdGoPkgHasElems_Exp struct {
	Exps []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML exp"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Exp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Exp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Exp instance.
func (me *XsdGoPkgHasElems_Exp) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Exp; fn != nil { fn(me) }
	for _, x := range me.Exps { x.Walk() }
 }

type XsdGoPkgHasElems_Ln struct {
	Lns []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML ln"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Ln function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ln instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ln instance.
func (me *XsdGoPkgHasElems_Ln) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Ln; fn != nil { fn(me) }
	for _, x := range me.Lns { x.Walk() }
 }

type XsdGoPkgHasElems_Log struct {
	Logs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML log"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Log function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Log instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Log instance.
func (me *XsdGoPkgHasElems_Log) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Log; fn != nil { fn(me) }
	for _, x := range me.Logs { x.Walk() }
 }

type XsdGoPkgHasElems_Logbase struct {
	Logbases []*TlogbaseType `xml:"http://www.w3.org/1998/Math/MathML logbase"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Logbase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Logbase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Logbase instance.
func (me *XsdGoPkgHasElems_Logbase) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Logbase; fn != nil { fn(me) }
	for _, x := range me.Logbases { x.Walk() }
 }

type XsdGoPkgHasElems_Sin struct {
	Sins []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sin"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sin instance.
func (me *XsdGoPkgHasElems_Sin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sin; fn != nil { fn(me) }
	for _, x := range me.Sins { x.Walk() }
 }

type XsdGoPkgHasElems_Cos struct {
	Coses []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cos"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Cos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cos instance.
func (me *XsdGoPkgHasElems_Cos) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Cos; fn != nil { fn(me) }
	for _, x := range me.Coses { x.Walk() }
 }

type XsdGoPkgHasElems_Tan struct {
	Tans []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML tan"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Tan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tan instance.
func (me *XsdGoPkgHasElems_Tan) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Tan; fn != nil { fn(me) }
	for _, x := range me.Tans { x.Walk() }
 }

type XsdGoPkgHasElems_Sec struct {
	Secs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sec"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sec instance.
func (me *XsdGoPkgHasElems_Sec) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sec; fn != nil { fn(me) }
	for _, x := range me.Secs { x.Walk() }
 }

type XsdGoPkgHasElems_Csc struct {
	Cscs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML csc"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Csc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Csc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Csc instance.
func (me *XsdGoPkgHasElems_Csc) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Csc; fn != nil { fn(me) }
	for _, x := range me.Cscs { x.Walk() }
 }

type XsdGoPkgHasElems_Cot struct {
	Cots []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cot"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Cot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cot instance.
func (me *XsdGoPkgHasElems_Cot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Cot; fn != nil { fn(me) }
	for _, x := range me.Cots { x.Walk() }
 }

type XsdGoPkgHasElems_Arcsin struct {
	Arcsins []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsin"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arcsin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arcsin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arcsin instance.
func (me *XsdGoPkgHasElems_Arcsin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arcsin; fn != nil { fn(me) }
	for _, x := range me.Arcsins { x.Walk() }
 }

type XsdGoPkgHasElems_Arccos struct {
	Arccoses []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccos"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccos instance.
func (me *XsdGoPkgHasElems_Arccos) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccos; fn != nil { fn(me) }
	for _, x := range me.Arccoses { x.Walk() }
 }

type XsdGoPkgHasElems_Arctan struct {
	Arctans []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arctan"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arctan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arctan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arctan instance.
func (me *XsdGoPkgHasElems_Arctan) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arctan; fn != nil { fn(me) }
	for _, x := range me.Arctans { x.Walk() }
 }

type XsdGoPkgHasElems_Arccot struct {
	Arccots []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccot"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccot instance.
func (me *XsdGoPkgHasElems_Arccot) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccot; fn != nil { fn(me) }
	for _, x := range me.Arccots { x.Walk() }
 }

type XsdGoPkgHasElems_Arccsc struct {
	Arccscs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccsc"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccsc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccsc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccsc instance.
func (me *XsdGoPkgHasElems_Arccsc) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccsc; fn != nil { fn(me) }
	for _, x := range me.Arccscs { x.Walk() }
 }

type XsdGoPkgHasElems_Arcsec struct {
	Arcsecs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsec"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arcsec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arcsec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arcsec instance.
func (me *XsdGoPkgHasElems_Arcsec) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arcsec; fn != nil { fn(me) }
	for _, x := range me.Arcsecs { x.Walk() }
 }

type XsdGoPkgHasElems_Sinh struct {
	Sinhs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sinh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sinh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sinh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sinh instance.
func (me *XsdGoPkgHasElems_Sinh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sinh; fn != nil { fn(me) }
	for _, x := range me.Sinhs { x.Walk() }
 }

type XsdGoPkgHasElems_Cosh struct {
	Coshs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML cosh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Cosh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cosh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cosh instance.
func (me *XsdGoPkgHasElems_Cosh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Cosh; fn != nil { fn(me) }
	for _, x := range me.Coshs { x.Walk() }
 }

type XsdGoPkgHasElems_Tanh struct {
	Tanhs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML tanh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Tanh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tanh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tanh instance.
func (me *XsdGoPkgHasElems_Tanh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Tanh; fn != nil { fn(me) }
	for _, x := range me.Tanhs { x.Walk() }
 }

type XsdGoPkgHasElems_Sech struct {
	Sechs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML sech"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sech function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sech instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sech instance.
func (me *XsdGoPkgHasElems_Sech) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sech; fn != nil { fn(me) }
	for _, x := range me.Sechs { x.Walk() }
 }

type XsdGoPkgHasElems_Csch struct {
	Cschs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML csch"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Csch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Csch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Csch instance.
func (me *XsdGoPkgHasElems_Csch) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Csch; fn != nil { fn(me) }
	for _, x := range me.Cschs { x.Walk() }
 }

type XsdGoPkgHasElems_Coth struct {
	Coths []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML coth"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Coth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Coth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Coth instance.
func (me *XsdGoPkgHasElems_Coth) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Coth; fn != nil { fn(me) }
	for _, x := range me.Coths { x.Walk() }
 }

type XsdGoPkgHasElems_Arccosh struct {
	Arccoshs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccosh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccosh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccosh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccosh instance.
func (me *XsdGoPkgHasElems_Arccosh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccosh; fn != nil { fn(me) }
	for _, x := range me.Arccoshs { x.Walk() }
 }

type XsdGoPkgHasElems_Arccoth struct {
	Arccoths []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccoth"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccoth function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccoth instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccoth instance.
func (me *XsdGoPkgHasElems_Arccoth) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccoth; fn != nil { fn(me) }
	for _, x := range me.Arccoths { x.Walk() }
 }

type XsdGoPkgHasElems_Arccsch struct {
	Arccschs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arccsch"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arccsch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arccsch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arccsch instance.
func (me *XsdGoPkgHasElems_Arccsch) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arccsch; fn != nil { fn(me) }
	for _, x := range me.Arccschs { x.Walk() }
 }

type XsdGoPkgHasElems_Arcsech struct {
	Arcsechs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsech"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arcsech function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arcsech instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arcsech instance.
func (me *XsdGoPkgHasElems_Arcsech) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arcsech; fn != nil { fn(me) }
	for _, x := range me.Arcsechs { x.Walk() }
 }

type XsdGoPkgHasElems_Arcsinh struct {
	Arcsinhs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arcsinh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arcsinh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arcsinh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arcsinh instance.
func (me *XsdGoPkgHasElems_Arcsinh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arcsinh; fn != nil { fn(me) }
	for _, x := range me.Arcsinhs { x.Walk() }
 }

type XsdGoPkgHasElems_Arctanh struct {
	Arctanhs []*TElementaryFunctionsType `xml:"http://www.w3.org/1998/Math/MathML arctanh"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Arctanh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arctanh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arctanh instance.
func (me *XsdGoPkgHasElems_Arctanh) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Arctanh; fn != nil { fn(me) }
	for _, x := range me.Arctanhs { x.Walk() }
 }

type XsdGoPkgHasElems_Eq struct {
	Eqs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML eq"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Eq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Eq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Eq instance.
func (me *XsdGoPkgHasElems_Eq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Eq; fn != nil { fn(me) }
	for _, x := range me.Eqs { x.Walk() }
 }

type XsdGoPkgHasElems_Neq struct {
	Neqs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML neq"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Neq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Neq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Neq instance.
func (me *XsdGoPkgHasElems_Neq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Neq; fn != nil { fn(me) }
	for _, x := range me.Neqs { x.Walk() }
 }

type XsdGoPkgHasElems_Leq struct {
	Leqs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML leq"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Leq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Leq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Leq instance.
func (me *XsdGoPkgHasElems_Leq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Leq; fn != nil { fn(me) }
	for _, x := range me.Leqs { x.Walk() }
 }

type XsdGoPkgHasElems_Lt struct {
	Lts []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML lt"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Lt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lt instance.
func (me *XsdGoPkgHasElems_Lt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Lt; fn != nil { fn(me) }
	for _, x := range me.Lts { x.Walk() }
 }

type XsdGoPkgHasElems_Geq struct {
	Geqs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML geq"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Geq function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Geq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Geq instance.
func (me *XsdGoPkgHasElems_Geq) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Geq; fn != nil { fn(me) }
	for _, x := range me.Geqs { x.Walk() }
 }

type XsdGoPkgHasElems_Gt struct {
	Gts []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML gt"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Gt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Gt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Gt instance.
func (me *XsdGoPkgHasElems_Gt) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Gt; fn != nil { fn(me) }
	for _, x := range me.Gts { x.Walk() }
 }

type XsdGoPkgHasElems_Equivalent struct {
	Equivalents []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML equivalent"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Equivalent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Equivalent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Equivalent instance.
func (me *XsdGoPkgHasElems_Equivalent) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Equivalent; fn != nil { fn(me) }
	for _, x := range me.Equivalents { x.Walk() }
 }

type XsdGoPkgHasElems_Approx struct {
	Approxs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML approx"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Approx function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Approx instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Approx instance.
func (me *XsdGoPkgHasElems_Approx) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Approx; fn != nil { fn(me) }
	for _, x := range me.Approxs { x.Walk() }
 }

type XsdGoPkgHasElems_Factorof struct {
	Factorofs []*TRelationsType `xml:"http://www.w3.org/1998/Math/MathML factorof"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Factorof function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Factorof instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Factorof instance.
func (me *XsdGoPkgHasElems_Factorof) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Factorof; fn != nil { fn(me) }
	for _, x := range me.Factorofs { x.Walk() }
 }

type XsdGoPkgHasElems_Annotation struct {
	Annotations []*TannotationType `xml:"http://www.w3.org/1998/Math/MathML annotation"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Annotation instance.
func (me *XsdGoPkgHasElems_Annotation) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Annotation; fn != nil { fn(me) }
	for _, x := range me.Annotations { x.Walk() }
 }

type XsdGoPkgHasElems_AnnotationXml struct {
	AnnotationXmls []*TannotationXmlType `xml:"http://www.w3.org/1998/Math/MathML annotation-xml"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AnnotationXml function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnnotationXml instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnnotationXml instance.
func (me *XsdGoPkgHasElems_AnnotationXml) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AnnotationXml; fn != nil { fn(me) }
	for _, x := range me.AnnotationXmls { x.Walk() }
 }

type XsdGoPkgHasElems_Semantics struct {
	Semanticses []*TsemanticsType `xml:"http://www.w3.org/1998/Math/MathML semantics"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Semantics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Semantics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Semantics instance.
func (me *XsdGoPkgHasElems_Semantics) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Semantics; fn != nil { fn(me) }
	for _, x := range me.Semanticses { x.Walk() }
 }

type XsdGoPkgHasElems_Set struct {
	Sets []*TsetType `xml:"http://www.w3.org/1998/Math/MathML set"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Set instance.
func (me *XsdGoPkgHasElems_Set) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Set; fn != nil { fn(me) }
	for _, x := range me.Sets { x.Walk() }
 }

type XsdGoPkgHasElems_List struct {
	Lists []*TlistType `xml:"http://www.w3.org/1998/Math/MathML list"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_List function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_List instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_List instance.
func (me *XsdGoPkgHasElems_List) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_List; fn != nil { fn(me) }
	for _, x := range me.Lists { x.Walk() }
 }

type XsdGoPkgHasElems_Union struct {
	Unions []*TunionType `xml:"http://www.w3.org/1998/Math/MathML union"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Union function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Union instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Union instance.
func (me *XsdGoPkgHasElems_Union) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Union; fn != nil { fn(me) }
	for _, x := range me.Unions { x.Walk() }
 }

type XsdGoPkgHasElems_Intersect struct {
	Intersects []*TintersectType `xml:"http://www.w3.org/1998/Math/MathML intersect"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Intersect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Intersect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Intersect instance.
func (me *XsdGoPkgHasElems_Intersect) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Intersect; fn != nil { fn(me) }
	for _, x := range me.Intersects { x.Walk() }
 }

type XsdGoPkgHasElems_In struct {
	Ins []*TinType `xml:"http://www.w3.org/1998/Math/MathML in"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_In function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_In instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_In instance.
func (me *XsdGoPkgHasElems_In) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_In; fn != nil { fn(me) }
	for _, x := range me.Ins { x.Walk() }
 }

type XsdGoPkgHasElems_Notin struct {
	Notins []*TnotinType `xml:"http://www.w3.org/1998/Math/MathML notin"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Notin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Notin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Notin instance.
func (me *XsdGoPkgHasElems_Notin) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Notin; fn != nil { fn(me) }
	for _, x := range me.Notins { x.Walk() }
 }

type XsdGoPkgHasElems_Subset struct {
	Subsets []*TsubsetType `xml:"http://www.w3.org/1998/Math/MathML subset"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Subset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subset instance.
func (me *XsdGoPkgHasElems_Subset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Subset; fn != nil { fn(me) }
	for _, x := range me.Subsets { x.Walk() }
 }

type XsdGoPkgHasElems_Prsubset struct {
	Prsubsets []*TprsubsetType `xml:"http://www.w3.org/1998/Math/MathML prsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Prsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Prsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Prsubset instance.
func (me *XsdGoPkgHasElems_Prsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Prsubset; fn != nil { fn(me) }
	for _, x := range me.Prsubsets { x.Walk() }
 }

type XsdGoPkgHasElems_Notsubset struct {
	Notsubsets []*TnotsubsetType `xml:"http://www.w3.org/1998/Math/MathML notsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Notsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Notsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Notsubset instance.
func (me *XsdGoPkgHasElems_Notsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Notsubset; fn != nil { fn(me) }
	for _, x := range me.Notsubsets { x.Walk() }
 }

type XsdGoPkgHasElems_Notprsubset struct {
	Notprsubsets []*TnotprsubsetType `xml:"http://www.w3.org/1998/Math/MathML notprsubset"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Notprsubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Notprsubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Notprsubset instance.
func (me *XsdGoPkgHasElems_Notprsubset) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Notprsubset; fn != nil { fn(me) }
	for _, x := range me.Notprsubsets { x.Walk() }
 }

type XsdGoPkgHasElems_Setdiff struct {
	Setdiffs []*TsetdiffType `xml:"http://www.w3.org/1998/Math/MathML setdiff"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Setdiff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Setdiff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Setdiff instance.
func (me *XsdGoPkgHasElems_Setdiff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Setdiff; fn != nil { fn(me) }
	for _, x := range me.Setdiffs { x.Walk() }
 }

type XsdGoPkgHasElems_Card struct {
	Cards []*TcardType `xml:"http://www.w3.org/1998/Math/MathML card"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Card function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Card instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Card instance.
func (me *XsdGoPkgHasElems_Card) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Card; fn != nil { fn(me) }
	for _, x := range me.Cards { x.Walk() }
 }

type XsdGoPkgHasElems_Cartesianproduct struct {
	Cartesianproducts []*TcartesianproductType `xml:"http://www.w3.org/1998/Math/MathML cartesianproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Cartesianproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cartesianproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cartesianproduct instance.
func (me *XsdGoPkgHasElems_Cartesianproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Cartesianproduct; fn != nil { fn(me) }
	for _, x := range me.Cartesianproducts { x.Walk() }
 }

type XsdGoPkgHasElems_Vector struct {
	Vectors []*TvectorType `xml:"http://www.w3.org/1998/Math/MathML vector"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Vector function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vector instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vector instance.
func (me *XsdGoPkgHasElems_Vector) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Vector; fn != nil { fn(me) }
	for _, x := range me.Vectors { x.Walk() }
 }

type XsdGoPkgHasElems_Matrix struct {
	Matrixs []*TmatrixType `xml:"http://www.w3.org/1998/Math/MathML matrix"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Matrix instance.
func (me *XsdGoPkgHasElems_Matrix) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Matrix; fn != nil { fn(me) }
	for _, x := range me.Matrixs { x.Walk() }
 }

type XsdGoPkgHasElems_Matrixrow struct {
	Matrixrows []*TmatrixrowType `xml:"http://www.w3.org/1998/Math/MathML matrixrow"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Matrixrow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Matrixrow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Matrixrow instance.
func (me *XsdGoPkgHasElems_Matrixrow) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Matrixrow; fn != nil { fn(me) }
	for _, x := range me.Matrixrows { x.Walk() }
 }

type XsdGoPkgHasElems_Determinant struct {
	Determinants []*TdeterminantType `xml:"http://www.w3.org/1998/Math/MathML determinant"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Determinant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Determinant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Determinant instance.
func (me *XsdGoPkgHasElems_Determinant) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Determinant; fn != nil { fn(me) }
	for _, x := range me.Determinants { x.Walk() }
 }

type XsdGoPkgHasElems_Transpose struct {
	Transposes []*TtransposeType `xml:"http://www.w3.org/1998/Math/MathML transpose"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Transpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Transpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Transpose instance.
func (me *XsdGoPkgHasElems_Transpose) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Transpose; fn != nil { fn(me) }
	for _, x := range me.Transposes { x.Walk() }
 }

type XsdGoPkgHasElems_Selector struct {
	Selectors []*TselectorType `xml:"http://www.w3.org/1998/Math/MathML selector"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Selector function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Selector instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Selector instance.
func (me *XsdGoPkgHasElems_Selector) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Selector; fn != nil { fn(me) }
	for _, x := range me.Selectors { x.Walk() }
 }

type XsdGoPkgHasElems_Vectorproduct struct {
	Vectorproducts []*TvectorproductType `xml:"http://www.w3.org/1998/Math/MathML vectorproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Vectorproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vectorproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vectorproduct instance.
func (me *XsdGoPkgHasElems_Vectorproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Vectorproduct; fn != nil { fn(me) }
	for _, x := range me.Vectorproducts { x.Walk() }
 }

type XsdGoPkgHasElems_Scalarproduct struct {
	Scalarproducts []*TscalarproductType `xml:"http://www.w3.org/1998/Math/MathML scalarproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Scalarproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scalarproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scalarproduct instance.
func (me *XsdGoPkgHasElems_Scalarproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Scalarproduct; fn != nil { fn(me) }
	for _, x := range me.Scalarproducts { x.Walk() }
 }

type XsdGoPkgHasElems_Outerproduct struct {
	Outerproducts []*TouterproductType `xml:"http://www.w3.org/1998/Math/MathML outerproduct"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Outerproduct function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Outerproduct instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Outerproduct instance.
func (me *XsdGoPkgHasElems_Outerproduct) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Outerproduct; fn != nil { fn(me) }
	for _, x := range me.Outerproducts { x.Walk() }
 }

type XsdGoPkgHasElems_Int struct {
	Ints []*TintType `xml:"http://www.w3.org/1998/Math/MathML int"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Int function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Int instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Int instance.
func (me *XsdGoPkgHasElems_Int) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Int; fn != nil { fn(me) }
	for _, x := range me.Ints { x.Walk() }
 }

type XsdGoPkgHasElems_Diff struct {
	Diffs []*TdiffType `xml:"http://www.w3.org/1998/Math/MathML diff"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Diff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Diff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Diff instance.
func (me *XsdGoPkgHasElems_Diff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Diff; fn != nil { fn(me) }
	for _, x := range me.Diffs { x.Walk() }
 }

type XsdGoPkgHasElems_Partialdiff struct {
	Partialdiffs []*TpartialdiffType `xml:"http://www.w3.org/1998/Math/MathML partialdiff"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Partialdiff function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Partialdiff instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Partialdiff instance.
func (me *XsdGoPkgHasElems_Partialdiff) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Partialdiff; fn != nil { fn(me) }
	for _, x := range me.Partialdiffs { x.Walk() }
 }

type XsdGoPkgHasElems_Limit struct {
	Limits []*TlimitType `xml:"http://www.w3.org/1998/Math/MathML limit"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Limit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Limit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Limit instance.
func (me *XsdGoPkgHasElems_Limit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Limit; fn != nil { fn(me) }
	for _, x := range me.Limits { x.Walk() }
 }

type XsdGoPkgHasElems_Lowlimit struct {
	Lowlimits []*TlowlimitType `xml:"http://www.w3.org/1998/Math/MathML lowlimit"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Lowlimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lowlimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lowlimit instance.
func (me *XsdGoPkgHasElems_Lowlimit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Lowlimit; fn != nil { fn(me) }
	for _, x := range me.Lowlimits { x.Walk() }
 }

type XsdGoPkgHasElems_Uplimit struct {
	Uplimits []*TuplimitType `xml:"http://www.w3.org/1998/Math/MathML uplimit"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Uplimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Uplimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Uplimit instance.
func (me *XsdGoPkgHasElems_Uplimit) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Uplimit; fn != nil { fn(me) }
	for _, x := range me.Uplimits { x.Walk() }
 }

type XsdGoPkgHasElems_Tendsto struct {
	Tendstos []*TtendstoType `xml:"http://www.w3.org/1998/Math/MathML tendsto"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Tendsto function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tendsto instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tendsto instance.
func (me *XsdGoPkgHasElems_Tendsto) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Tendsto; fn != nil { fn(me) }
	for _, x := range me.Tendstos { x.Walk() }
 }

type XsdGoPkgHasElems_Divergence struct {
	Divergences []*TdivergenceType `xml:"http://www.w3.org/1998/Math/MathML divergence"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Divergence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Divergence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Divergence instance.
func (me *XsdGoPkgHasElems_Divergence) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Divergence; fn != nil { fn(me) }
	for _, x := range me.Divergences { x.Walk() }
 }

type XsdGoPkgHasElems_Grad struct {
	Grads []*TgradType `xml:"http://www.w3.org/1998/Math/MathML grad"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Grad function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Grad instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Grad instance.
func (me *XsdGoPkgHasElems_Grad) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Grad; fn != nil { fn(me) }
	for _, x := range me.Grads { x.Walk() }
 }

type XsdGoPkgHasElems_Curl struct {
	Curls []*TcurlType `xml:"http://www.w3.org/1998/Math/MathML curl"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Curl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Curl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Curl instance.
func (me *XsdGoPkgHasElems_Curl) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Curl; fn != nil { fn(me) }
	for _, x := range me.Curls { x.Walk() }
 }

type XsdGoPkgHasElems_Laplacian struct {
	Laplacians []*TlaplacianType `xml:"http://www.w3.org/1998/Math/MathML laplacian"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Laplacian function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Laplacian instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Laplacian instance.
func (me *XsdGoPkgHasElems_Laplacian) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Laplacian; fn != nil { fn(me) }
	for _, x := range me.Laplacians { x.Walk() }
 }

type XsdGoPkgHasElems_Mean struct {
	Means []*TmeanType `xml:"http://www.w3.org/1998/Math/MathML mean"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mean function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mean instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mean instance.
func (me *XsdGoPkgHasElems_Mean) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mean; fn != nil { fn(me) }
	for _, x := range me.Means { x.Walk() }
 }

type XsdGoPkgHasElems_Sdev struct {
	Sdevs []*TsdevType `xml:"http://www.w3.org/1998/Math/MathML sdev"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Sdev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sdev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sdev instance.
func (me *XsdGoPkgHasElems_Sdev) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Sdev; fn != nil { fn(me) }
	for _, x := range me.Sdevs { x.Walk() }
 }

type XsdGoPkgHasElems_Variance struct {
	Variances []*TvarianceType `xml:"http://www.w3.org/1998/Math/MathML variance"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Variance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Variance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Variance instance.
func (me *XsdGoPkgHasElems_Variance) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Variance; fn != nil { fn(me) }
	for _, x := range me.Variances { x.Walk() }
 }

type XsdGoPkgHasElems_Median struct {
	Medians []*TmedianType `xml:"http://www.w3.org/1998/Math/MathML median"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Median function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Median instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Median instance.
func (me *XsdGoPkgHasElems_Median) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Median; fn != nil { fn(me) }
	for _, x := range me.Medians { x.Walk() }
 }

type XsdGoPkgHasElems_Mode struct {
	Modes []*TmodeType `xml:"http://www.w3.org/1998/Math/MathML mode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Mode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mode instance.
func (me *XsdGoPkgHasElems_Mode) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Mode; fn != nil { fn(me) }
	for _, x := range me.Modes { x.Walk() }
 }

type XsdGoPkgHasElems_Moment struct {
	Moments []*TmomentType `xml:"http://www.w3.org/1998/Math/MathML moment"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Moment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Moment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Moment instance.
func (me *XsdGoPkgHasElems_Moment) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Moment; fn != nil { fn(me) }
	for _, x := range me.Moments { x.Walk() }
 }

type XsdGoPkgHasElems_Momentabout struct {
	Momentabouts []*TmomentaboutType `xml:"http://www.w3.org/1998/Math/MathML momentabout"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Momentabout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Momentabout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Momentabout instance.
func (me *XsdGoPkgHasElems_Momentabout) Walk ()  { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Momentabout; fn != nil { fn(me) }
	for _, x := range me.Momentabouts { x.Walk() }
 }

//	Provides 515 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
var WalkHandlers = &XsdGoPkgWalkHandlers {}

type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Sum func (o *XsdGoPkgHasElem_Sum)
	XsdGoPkgHasElem_Otherwise func (o *XsdGoPkgHasElem_Otherwise)
	XsdGoPkgHasElem_Menclose func (o *XsdGoPkgHasElem_Menclose)
	XsdGoPkgHasElems_Notprsubset func (o *XsdGoPkgHasElems_Notprsubset)
	XsdGoPkgHasElem_Mfenced func (o *XsdGoPkgHasElem_Mfenced)
	XsdGoPkgHasElems_Mstyle func (o *XsdGoPkgHasElems_Mstyle)
	XsdGoPkgHasElem_Arccos func (o *XsdGoPkgHasElem_Arccos)
	XsdGoPkgHasElems_Product func (o *XsdGoPkgHasElems_Product)
	XsdGoPkgHasElem_Bvar func (o *XsdGoPkgHasElem_Bvar)
	XsdGoPkgHasElem_Approx func (o *XsdGoPkgHasElem_Approx)
	XsdGoPkgHasElem_Cot func (o *XsdGoPkgHasElem_Cot)
	XsdGoPkgHasElems_Real func (o *XsdGoPkgHasElems_Real)
	XsdGoPkgHasElem_Reals func (o *XsdGoPkgHasElem_Reals)
	XsdGoPkgHasElem_Malignmark func (o *XsdGoPkgHasElem_Malignmark)
	XsdGoPkgHasElems_Rationals func (o *XsdGoPkgHasElems_Rationals)
	XsdGoPkgHasElem_Coth func (o *XsdGoPkgHasElem_Coth)
	XsdGoPkgHasElem_Notin func (o *XsdGoPkgHasElem_Notin)
	XsdGoPkgHasElems_Mspace func (o *XsdGoPkgHasElems_Mspace)
	XsdGoPkgHasElem_Plus func (o *XsdGoPkgHasElem_Plus)
	XsdGoPkgHasElem_Scalarproduct func (o *XsdGoPkgHasElem_Scalarproduct)
	TtendstoType func (o *TtendstoType)
	TscalarproductType func (o *TscalarproductType)
	TLogicType func (o *TLogicType)
	XsdGoPkgHasElems_Arccot func (o *XsdGoPkgHasElems_Arccot)
	XsdGoPkgHasElem_Mean func (o *XsdGoPkgHasElem_Mean)
	XsdGoPkgHasElems_Forall func (o *XsdGoPkgHasElems_Forall)
	XsdGoPkgHasElems_Mn func (o *XsdGoPkgHasElems_Mn)
	XsdGoPkgHasElems_Gt func (o *XsdGoPkgHasElems_Gt)
	TmeanType func (o *TmeanType)
	TmathType func (o *TmathType)
	XsdGoPkgHasElem_Csch func (o *XsdGoPkgHasElem_Csch)
	TmodeType func (o *TmodeType)
	XsdGoPkgHasGroup_MatrixrowContent func (o *XsdGoPkgHasGroup_MatrixrowContent)
	XsdGoPkgHasElem_Exists func (o *XsdGoPkgHasElem_Exists)
	XsdGoPkgHasElem_Ident func (o *XsdGoPkgHasElem_Ident)
	TdivergenceType func (o *TdivergenceType)
	XsdGoPkgHasElem_Notprsubset func (o *XsdGoPkgHasElem_Notprsubset)
	XsdGoPkgHasElem_Set func (o *XsdGoPkgHasElem_Set)
	XsdGoPkgHasElems_Lt func (o *XsdGoPkgHasElems_Lt)
	XsdGoPkgHasElems_Munder func (o *XsdGoPkgHasElems_Munder)
	XsdGoPkgHasElem_Mspace func (o *XsdGoPkgHasElem_Mspace)
	TsdevType func (o *TsdevType)
	TintersectType func (o *TintersectType)
	XsdGoPkgHasElems_Mtable func (o *XsdGoPkgHasElems_Mtable)
	XsdGoPkgHasElems_Laplacian func (o *XsdGoPkgHasElems_Laplacian)
	XsdGoPkgHasElem_Laplacian func (o *XsdGoPkgHasElem_Laplacian)
	TmlabeledtrType func (o *TmlabeledtrType)
	XsdGoPkgHasGroup_UplimitContent func (o *XsdGoPkgHasGroup_UplimitContent)
	XsdGoPkgHasElem_Rationals func (o *XsdGoPkgHasElem_Rationals)
	XsdGoPkgHasElems_Cartesianproduct func (o *XsdGoPkgHasElems_Cartesianproduct)
	XsdGoPkgHasElems_Mphantom func (o *XsdGoPkgHasElems_Mphantom)
	XsdGoPkgHasElems_Leq func (o *XsdGoPkgHasElems_Leq)
	TunionType func (o *TunionType)
	TpieceType func (o *TpieceType)
	XsdGoPkgHasElem_Factorof func (o *XsdGoPkgHasElem_Factorof)
	XsdGoPkgHasGroup_PresentationScriptClass func (o *XsdGoPkgHasGroup_PresentationScriptClass)
	XsdGoPkgHasElems_Mpadded func (o *XsdGoPkgHasElems_Mpadded)
	TmsqrtType func (o *TmsqrtType)
	TRelationsType func (o *TRelationsType)
	XsdGoPkgHasElem_Arccoth func (o *XsdGoPkgHasElem_Arccoth)
	XsdGoPkgHasElems_Msqrt func (o *XsdGoPkgHasElems_Msqrt)
	XsdGoPkgHasElems_Notin func (o *XsdGoPkgHasElems_Notin)
	XsdGoPkgHasElem_Union func (o *XsdGoPkgHasElem_Union)
	XsdGoPkgHasElem_Grad func (o *XsdGoPkgHasElem_Grad)
	XsdGoPkgHasElem_Arccot func (o *XsdGoPkgHasElem_Arccot)
	XsdGoPkgHasGroup_ConditionContent func (o *XsdGoPkgHasGroup_ConditionContent)
	XsdGoPkgHasGroup_PiecewiseContent func (o *XsdGoPkgHasGroup_PiecewiseContent)
	XsdGoPkgHasElems_Otherwise func (o *XsdGoPkgHasElems_Otherwise)
	XsdGoPkgHasElems_Vectorproduct func (o *XsdGoPkgHasElems_Vectorproduct)
	XsdGoPkgHasElems_Mfenced func (o *XsdGoPkgHasElems_Mfenced)
	TmrootType func (o *TmrootType)
	XsdGoPkgHasGroup_PresentationLayoutClass func (o *XsdGoPkgHasGroup_PresentationLayoutClass)
	XsdGoPkgHasElems_Coth func (o *XsdGoPkgHasElems_Coth)
	XsdGoPkgHasElems_List func (o *XsdGoPkgHasElems_List)
	XsdGoPkgHasGroup_BvarContent func (o *XsdGoPkgHasGroup_BvarContent)
	XsdGoPkgHasElems_Apply func (o *XsdGoPkgHasElems_Apply)
	TdiffType func (o *TdiffType)
	XsdGoPkgHasElem_Curl func (o *XsdGoPkgHasElem_Curl)
	XsdGoPkgHasElem_Leq func (o *XsdGoPkgHasElem_Leq)
	XsdGoPkgHasGroup_ContentConstructsClass func (o *XsdGoPkgHasGroup_ContentConstructsClass)
	TmfencedType func (o *TmfencedType)
	XsdGoPkgHasElem_Min func (o *XsdGoPkgHasElem_Min)
	XsdGoPkgHasGroup_OtherwiseContent func (o *XsdGoPkgHasGroup_OtherwiseContent)
	XsdGoPkgHasElem_Msubsup func (o *XsdGoPkgHasElem_Msubsup)
	XsdGoPkgHasElems_Vector func (o *XsdGoPkgHasElems_Vector)
	XsdGoPkgHasGroup_PresentationExprClass func (o *XsdGoPkgHasGroup_PresentationExprClass)
	XsdGoPkgHasElem_Root func (o *XsdGoPkgHasElem_Root)
	XsdGoPkgHasElems_Divide func (o *XsdGoPkgHasElems_Divide)
	XsdGoPkgHasElems_Tan func (o *XsdGoPkgHasElems_Tan)
	TFunctionsType func (o *TFunctionsType)
	XsdGoPkgHasElem_Limit func (o *XsdGoPkgHasElem_Limit)
	TannotationType func (o *TannotationType)
	XsdGoPkgHasElems_Arccoth func (o *XsdGoPkgHasElems_Arccoth)
	XsdGoPkgHasElems_Ln func (o *XsdGoPkgHasElems_Ln)
	XsdGoPkgHasGroup_GlyphAlignmarkClass func (o *XsdGoPkgHasGroup_GlyphAlignmarkClass)
	TmglyphType func (o *TmglyphType)
	XsdGoPkgHasElems_Menclose func (o *XsdGoPkgHasElems_Menclose)
	XsdGoPkgHasElem_None func (o *XsdGoPkgHasElem_None)
	XsdGoPkgHasElems_Csymbol func (o *XsdGoPkgHasElems_Csymbol)
	XsdGoPkgHasElems_Sinh func (o *XsdGoPkgHasElems_Sinh)
	TmstyleType func (o *TmstyleType)
	XsdGoPkgHasElems_Merror func (o *XsdGoPkgHasElems_Merror)
	TvectorType func (o *TvectorType)
	XsdGoPkgHasElems_Cos func (o *XsdGoPkgHasElems_Cos)
	XsdGoPkgHasElems_Malignmark func (o *XsdGoPkgHasElems_Malignmark)
	XsdGoPkgHasElem_Eq func (o *XsdGoPkgHasElem_Eq)
	XsdGoPkgHasElem_Lt func (o *XsdGoPkgHasElem_Lt)
	XsdGoPkgHasElems_Equivalent func (o *XsdGoPkgHasElems_Equivalent)
	XsdGoPkgHasElem_Piecewise func (o *XsdGoPkgHasElem_Piecewise)
	TapplyType func (o *TapplyType)
	XsdGoPkgHasElem_Arccsc func (o *XsdGoPkgHasElem_Arccsc)
	XsdGoPkgHasElems_Xor func (o *XsdGoPkgHasElems_Xor)
	XsdGoPkgHasElem_Emptyset func (o *XsdGoPkgHasElem_Emptyset)
	XsdGoPkgHasElems_Min func (o *XsdGoPkgHasElems_Min)
	XsdGoPkgHasElem_Exponentiale func (o *XsdGoPkgHasElem_Exponentiale)
	XsdGoPkgHasElem_Power func (o *XsdGoPkgHasElem_Power)
	TcurlType func (o *TcurlType)
	XsdGoPkgHasElem_Compose func (o *XsdGoPkgHasElem_Compose)
	XsdGoPkgHasGroup_ContentArithClass func (o *XsdGoPkgHasGroup_ContentArithClass)
	XsdGoPkgHasElems_Sum func (o *XsdGoPkgHasElems_Sum)
	TintervalType func (o *TintervalType)
	XsdGoPkgHasElem_Mrow func (o *XsdGoPkgHasElem_Mrow)
	XsdGoPkgHasElems_Arctan func (o *XsdGoPkgHasElems_Arctan)
	XsdGoPkgHasElems_Ci func (o *XsdGoPkgHasElems_Ci)
	XsdGoPkgHasElems_Implies func (o *XsdGoPkgHasElems_Implies)
	XsdGoPkgHasElems_Momentabout func (o *XsdGoPkgHasElems_Momentabout)
	TpartialdiffType func (o *TpartialdiffType)
	XsdGoPkgHasElem_Rem func (o *XsdGoPkgHasElem_Rem)
	XsdGoPkgHasElems_Mlabeledtr func (o *XsdGoPkgHasElems_Mlabeledtr)
	XsdGoPkgHasElem_Mphantom func (o *XsdGoPkgHasElem_Mphantom)
	XsdGoPkgHasElems_Rem func (o *XsdGoPkgHasElems_Rem)
	TmomentaboutType func (o *TmomentaboutType)
	XsdGoPkgHasElems_Imaginaryi func (o *XsdGoPkgHasElems_Imaginaryi)
	TmunderoverType func (o *TmunderoverType)
	TmencloseType func (o *TmencloseType)
	XsdGoPkgHasGroup_LowlimitContent func (o *XsdGoPkgHasGroup_LowlimitContent)
	TinverseType func (o *TinverseType)
	XsdGoPkgHasElems_Arccos func (o *XsdGoPkgHasElems_Arccos)
	TcartesianproductType func (o *TcartesianproductType)
	XsdGoPkgHasElems_Mmultiscripts func (o *XsdGoPkgHasElems_Mmultiscripts)
	XsdGoPkgHasGroup_MtableContent func (o *XsdGoPkgHasGroup_MtableContent)
	TdeclareType func (o *TdeclareType)
	XsdGoPkgHasElem_Apply func (o *XsdGoPkgHasElem_Apply)
	XsdGoPkgHasElem_Arccsch func (o *XsdGoPkgHasElem_Arccsch)
	XsdGoPkgHasElems_None func (o *XsdGoPkgHasElems_None)
	TbvarType func (o *TbvarType)
	XsdGoPkgHasElems_Neq func (o *XsdGoPkgHasElems_Neq)
	XsdGoPkgHasElems_Domainofapplication func (o *XsdGoPkgHasElems_Domainofapplication)
	XsdGoPkgHasElems_Times func (o *XsdGoPkgHasElems_Times)
	XsdGoPkgHasElems_Infinity func (o *XsdGoPkgHasElems_Infinity)
	XsdGoPkgHasElem_Diff func (o *XsdGoPkgHasElem_Diff)
	XsdGoPkgHasElems_Sec func (o *XsdGoPkgHasElems_Sec)
	XsdGoPkgHasGroup_VectorContent func (o *XsdGoPkgHasGroup_VectorContent)
	XsdGoPkgHasGroup_MatrixContent func (o *XsdGoPkgHasGroup_MatrixContent)
	XsdGoPkgHasElem_Munderover func (o *XsdGoPkgHasElem_Munderover)
	XsdGoPkgHasElems_Notsubset func (o *XsdGoPkgHasElems_Notsubset)
	TmunderType func (o *TmunderType)
	XsdGoPkgHasGroup_MtdContent func (o *XsdGoPkgHasGroup_MtdContent)
	XsdGoPkgHasGroup_ContentFunctionsClass func (o *XsdGoPkgHasGroup_ContentFunctionsClass)
	XsdGoPkgHasElem_Vector func (o *XsdGoPkgHasElem_Vector)
	XsdGoPkgHasElems_Mrow func (o *XsdGoPkgHasElems_Mrow)
	XsdGoPkgHasElem_Factorial func (o *XsdGoPkgHasElem_Factorial)
	XsdGoPkgHasElem_Neq func (o *XsdGoPkgHasElem_Neq)
	XsdGoPkgHasElems_Notanumber func (o *XsdGoPkgHasElems_Notanumber)
	XsdGoPkgHasElem_Math func (o *XsdGoPkgHasElem_Math)
	XsdGoPkgHasElem_Sdev func (o *XsdGoPkgHasElem_Sdev)
	XsdGoPkgHasElems_Arccosh func (o *XsdGoPkgHasElems_Arccosh)
	XsdGoPkgHasElems_Msubsup func (o *XsdGoPkgHasElems_Msubsup)
	XsdGoPkgHasElems_Abs func (o *XsdGoPkgHasElems_Abs)
	TmsubsupType func (o *TmsubsupType)
	XsdGoPkgHasElems_Transpose func (o *XsdGoPkgHasElems_Transpose)
	XsdGoPkgHasGroup_ContentConstantsClass func (o *XsdGoPkgHasGroup_ContentConstantsClass)
	XsdGoPkgHasElem_Degree func (o *XsdGoPkgHasElem_Degree)
	TmprescriptsType func (o *TmprescriptsType)
	TmoType func (o *TmoType)
	XsdGoPkgHasElem_Semantics func (o *XsdGoPkgHasElem_Semantics)
	XsdGoPkgHasElem_Quotient func (o *XsdGoPkgHasElem_Quotient)
	XsdGoPkgHasElem_Mi func (o *XsdGoPkgHasElem_Mi)
	XsdGoPkgHasElem_Max func (o *XsdGoPkgHasElem_Max)
	XsdGoPkgHasElems_Integers func (o *XsdGoPkgHasElems_Integers)
	XsdGoPkgHasElems_Cosh func (o *XsdGoPkgHasElems_Cosh)
	XsdGoPkgHasElem_Mfrac func (o *XsdGoPkgHasElem_Mfrac)
	XsdGoPkgHasElem_Tanh func (o *XsdGoPkgHasElem_Tanh)
	XsdGoPkgHasElems_Lambda func (o *XsdGoPkgHasElems_Lambda)
	XsdGoPkgHasElem_Tan func (o *XsdGoPkgHasElem_Tan)
	XsdGoPkgHasElem_Subset func (o *XsdGoPkgHasElem_Subset)
	XsdGoPkgHasElems_Piece func (o *XsdGoPkgHasElems_Piece)
	XsdGoPkgHasElems_Condition func (o *XsdGoPkgHasElems_Condition)
	TmiType func (o *TmiType)
	XsdGoPkgHasElems_True func (o *XsdGoPkgHasElems_True)
	XsdGoPkgHasElem_Arcsin func (o *XsdGoPkgHasElem_Arcsin)
	TmtextType func (o *TmtextType)
	XsdGoPkgHasElem_Notsubset func (o *XsdGoPkgHasElem_Notsubset)
	TmrowType func (o *TmrowType)
	XsdGoPkgHasGroup_ContentSetsClass func (o *XsdGoPkgHasGroup_ContentSetsClass)
	TuplimitType func (o *TuplimitType)
	XsdGoPkgHasElems_Piecewise func (o *XsdGoPkgHasElems_Piecewise)
	XsdGoPkgHasElems_Selector func (o *XsdGoPkgHasElems_Selector)
	XsdGoPkgHasElems_False func (o *XsdGoPkgHasElems_False)
	XsdGoPkgHasElems_Inverse func (o *XsdGoPkgHasElems_Inverse)
	XsdGoPkgHasElem_Int func (o *XsdGoPkgHasElem_Int)
	XsdGoPkgHasGroup_DomainofapplicationContent func (o *XsdGoPkgHasGroup_DomainofapplicationContent)
	XsdGoPkgHasElems_Declare func (o *XsdGoPkgHasElems_Declare)
	XsdGoPkgHasElem_Lcm func (o *XsdGoPkgHasElem_Lcm)
	XsdGoPkgHasElems_Set func (o *XsdGoPkgHasElems_Set)
	TsubsetType func (o *TsubsetType)
	XsdGoPkgHasElem_Setdiff func (o *XsdGoPkgHasElem_Setdiff)
	XsdGoPkgHasGroup_ListContent func (o *XsdGoPkgHasGroup_ListContent)
	XsdGoPkgHasElem_In func (o *XsdGoPkgHasElem_In)
	XsdGoPkgHasElems_Union func (o *XsdGoPkgHasElems_Union)
	XsdGoPkgHasElem_Complexes func (o *XsdGoPkgHasElem_Complexes)
	XsdGoPkgHasElem_Domain func (o *XsdGoPkgHasElem_Domain)
	XsdGoPkgHasElems_Degree func (o *XsdGoPkgHasElems_Degree)
	XsdGoPkgHasGroup_SetContent func (o *XsdGoPkgHasGroup_SetContent)
	TmaligngroupType func (o *TmaligngroupType)
	TsemanticsType func (o *TsemanticsType)
	XsdGoPkgHasElems_Imaginary func (o *XsdGoPkgHasElems_Imaginary)
	XsdGoPkgHasElems_Minus func (o *XsdGoPkgHasElems_Minus)
	XsdGoPkgHasElem_Sech func (o *XsdGoPkgHasElem_Sech)
	TcsymbolType func (o *TcsymbolType)
	XsdGoPkgHasElem_Exp func (o *XsdGoPkgHasElem_Exp)
	XsdGoPkgHasElems_Limit func (o *XsdGoPkgHasElems_Limit)
	XsdGoPkgHasElems_Outerproduct func (o *XsdGoPkgHasElems_Outerproduct)
	XsdGoPkgHasElems_Lowlimit func (o *XsdGoPkgHasElems_Lowlimit)
	XsdGoPkgHasElem_Munder func (o *XsdGoPkgHasElem_Munder)
	XsdGoPkgHasGroup_MactionContent func (o *XsdGoPkgHasGroup_MactionContent)
	TdegreeType func (o *TdegreeType)
	XsdGoPkgHasGroup_DegreeContent func (o *XsdGoPkgHasGroup_DegreeContent)
	XsdGoPkgHasElem_Csymbol func (o *XsdGoPkgHasElem_Csymbol)
	XsdGoPkgHasElems_Grad func (o *XsdGoPkgHasElems_Grad)
	XsdGoPkgHasGroup_ContExprClass func (o *XsdGoPkgHasGroup_ContExprClass)
	XsdGoPkgHasElem_Abs func (o *XsdGoPkgHasElem_Abs)
	XsdGoPkgHasElems_Matrix func (o *XsdGoPkgHasElems_Matrix)
	TmpaddedType func (o *TmpaddedType)
	XsdGoPkgHasElems_Int func (o *XsdGoPkgHasElems_Int)
	XsdGoPkgHasElem_Or func (o *XsdGoPkgHasElem_Or)
	TlambdaType func (o *TlambdaType)
	TmalignmarkType func (o *TmalignmarkType)
	XsdGoPkgHasElem_AnnotationXml func (o *XsdGoPkgHasElem_AnnotationXml)
	XsdGoPkgHasElems_Mode func (o *XsdGoPkgHasElems_Mode)
	XsdGoPkgHasElem_Notanumber func (o *XsdGoPkgHasElem_Notanumber)
	XsdGoPkgHasCdata func (o *XsdGoPkgHasCdata)
	XsdGoPkgHasGroup_LogbaseContent func (o *XsdGoPkgHasGroup_LogbaseContent)
	XsdGoPkgHasElems_In func (o *XsdGoPkgHasElems_In)
	TlogbaseType func (o *TlogbaseType)
	XsdGoPkgHasElems_Floor func (o *XsdGoPkgHasElems_Floor)
	XsdGoPkgHasGroup_AnnotationXmlContent func (o *XsdGoPkgHasGroup_AnnotationXmlContent)
	XsdGoPkgHasElem_Moment func (o *XsdGoPkgHasElem_Moment)
	XsdGoPkgHasElem_Ceiling func (o *XsdGoPkgHasElem_Ceiling)
	XsdGoPkgHasElem_Matrix func (o *XsdGoPkgHasElem_Matrix)
	XsdGoPkgHasGroup_AnnotationClass func (o *XsdGoPkgHasGroup_AnnotationClass)
	XsdGoPkgHasElems_Plus func (o *XsdGoPkgHasElems_Plus)
	XsdGoPkgHasElems_Moment func (o *XsdGoPkgHasElems_Moment)
	XsdGoPkgHasElems_Mover func (o *XsdGoPkgHasElems_Mover)
	XsdGoPkgHasElem_Primes func (o *XsdGoPkgHasElem_Primes)
	XsdGoPkgHasElem_Arcsec func (o *XsdGoPkgHasElem_Arcsec)
	XsdGoPkgHasElem_Divergence func (o *XsdGoPkgHasElem_Divergence)
	XsdGoPkgHasGroup_ContentStatisticsClass func (o *XsdGoPkgHasGroup_ContentStatisticsClass)
	XsdGoPkgHasGroup_ContentElementaryFunctionsClass func (o *XsdGoPkgHasGroup_ContentElementaryFunctionsClass)
	TmactionType func (o *TmactionType)
	XsdGoPkgHasElems_Diff func (o *XsdGoPkgHasElems_Diff)
	XsdGoPkgHasGroup_MstyleContent func (o *XsdGoPkgHasGroup_MstyleContent)
	XsdGoPkgHasElems_Naturalnumbers func (o *XsdGoPkgHasElems_Naturalnumbers)
	XsdGoPkgHasElems_Codomain func (o *XsdGoPkgHasElems_Codomain)
	TlimitType func (o *TlimitType)
	XsdGoPkgHasElem_Integers func (o *XsdGoPkgHasElem_Integers)
	XsdGoPkgHasElems_Mi func (o *XsdGoPkgHasElems_Mi)
	XsdGoPkgHasElem_Prsubset func (o *XsdGoPkgHasElem_Prsubset)
	XsdGoPkgHasElem_Mprescripts func (o *XsdGoPkgHasElem_Mprescripts)
	XsdGoPkgHasElem_Msqrt func (o *XsdGoPkgHasElem_Msqrt)
	XsdGoPkgHasElem_Annotation func (o *XsdGoPkgHasElem_Annotation)
	XsdGoPkgHasElems_Arcsinh func (o *XsdGoPkgHasElems_Arcsinh)
	TConstantType func (o *TConstantType)
	XsdGoPkgHasGroup_MmultiscriptsContent func (o *XsdGoPkgHasGroup_MmultiscriptsContent)
	XsdGoPkgHasElems_Reals func (o *XsdGoPkgHasElems_Reals)
	XsdGoPkgHasElem_Floor func (o *XsdGoPkgHasElem_Floor)
	XsdGoPkgHasElems_Mean func (o *XsdGoPkgHasElems_Mean)
	TmatrixrowType func (o *TmatrixrowType)
	XsdGoPkgHasElem_Eulergamma func (o *XsdGoPkgHasElem_Eulergamma)
	XsdGoPkgHasElem_Conjugate func (o *XsdGoPkgHasElem_Conjugate)
	XsdGoPkgHasGroup_ContentTokensClass func (o *XsdGoPkgHasGroup_ContentTokensClass)
	XsdGoPkgHasElem_Mpadded func (o *XsdGoPkgHasElem_Mpadded)
	TsetType func (o *TsetType)
	XsdGoPkgHasElem_Ln func (o *XsdGoPkgHasElem_Ln)
	XsdGoPkgHasGroup_ContentLogicClass func (o *XsdGoPkgHasGroup_ContentLogicClass)
	TnotprsubsetType func (o *TnotprsubsetType)
	XsdGoPkgHasElems_Mo func (o *XsdGoPkgHasElems_Mo)
	XsdGoPkgHasElems_Arg func (o *XsdGoPkgHasElems_Arg)
	XsdGoPkgHasElems_Maligngroup func (o *XsdGoPkgHasElems_Maligngroup)
	XsdGoPkgHasElem_Naturalnumbers func (o *XsdGoPkgHasElem_Naturalnumbers)
	TcardType func (o *TcardType)
	XsdGoPkgHasElem_Piece func (o *XsdGoPkgHasElem_Piece)
	TnotsubsetType func (o *TnotsubsetType)
	XsdGoPkgHasElems_Mfrac func (o *XsdGoPkgHasElems_Mfrac)
	TmatrixType func (o *TmatrixType)
	TouterproductType func (o *TouterproductType)
	XsdGoPkgHasElem_Card func (o *XsdGoPkgHasElem_Card)
	TsetdiffType func (o *TsetdiffType)
	XsdGoPkgHasElem_Msup func (o *XsdGoPkgHasElem_Msup)
	XsdGoPkgHasElem_Cos func (o *XsdGoPkgHasElem_Cos)
	XsdGoPkgHasGroup_ApplyContent func (o *XsdGoPkgHasGroup_ApplyContent)
	XsdGoPkgHasElem_True func (o *XsdGoPkgHasElem_True)
	XsdGoPkgHasElems_Cn func (o *XsdGoPkgHasElems_Cn)
	XsdGoPkgHasGroup_PresentationTableClass func (o *XsdGoPkgHasGroup_PresentationTableClass)
	XsdGoPkgHasElem_Determinant func (o *XsdGoPkgHasElem_Determinant)
	XsdGoPkgHasElems_Lcm func (o *XsdGoPkgHasElems_Lcm)
	XsdGoPkgHasElems_AnnotationXml func (o *XsdGoPkgHasElems_AnnotationXml)
	XsdGoPkgHasElem_Sin func (o *XsdGoPkgHasElem_Sin)
	XsdGoPkgHasElem_Ci func (o *XsdGoPkgHasElem_Ci)
	XsdGoPkgHasElem_Variance func (o *XsdGoPkgHasElem_Variance)
	XsdGoPkgHasElems_Root func (o *XsdGoPkgHasElems_Root)
	XsdGoPkgHasElems_Mtext func (o *XsdGoPkgHasElems_Mtext)
	TgradType func (o *TgradType)
	XsdGoPkgHasGroup_SemanticsContent func (o *XsdGoPkgHasGroup_SemanticsContent)
	XsdGoPkgHasGroup_ContentCalculusClass func (o *XsdGoPkgHasGroup_ContentCalculusClass)
	TmoverType func (o *TmoverType)
	XsdGoPkgHasElem_Mmultiscripts func (o *XsdGoPkgHasElem_Mmultiscripts)
	XsdGoPkgHasElems_Pi func (o *XsdGoPkgHasElems_Pi)
	TdeterminantType func (o *TdeterminantType)
	XsdGoPkgHasElem_Imaginary func (o *XsdGoPkgHasElem_Imaginary)
	XsdGoPkgHasElem_Sep func (o *XsdGoPkgHasElem_Sep)
	XsdGoPkgHasElem_Minus func (o *XsdGoPkgHasElem_Minus)
	XsdGoPkgHasElem_Mtext func (o *XsdGoPkgHasElem_Mtext)
	XsdGoPkgHasElems_Mglyph func (o *XsdGoPkgHasElems_Mglyph)
	XsdGoPkgHasElems_Csch func (o *XsdGoPkgHasElems_Csch)
	XsdGoPkgHasElems_Arcsin func (o *XsdGoPkgHasElems_Arcsin)
	XsdGoPkgHasElems_Bvar func (o *XsdGoPkgHasElems_Bvar)
	XsdGoPkgHasElem_Lambda func (o *XsdGoPkgHasElem_Lambda)
	XsdGoPkgHasElems_Mtr func (o *XsdGoPkgHasElems_Mtr)
	XsdGoPkgHasElem_Imaginaryi func (o *XsdGoPkgHasElem_Imaginaryi)
	TprsubsetType func (o *TprsubsetType)
	XsdGoPkgHasElem_Mn func (o *XsdGoPkgHasElem_Mn)
	XsdGoPkgHasElems_Ms func (o *XsdGoPkgHasElems_Ms)
	TmerrorType func (o *TmerrorType)
	TArithType func (o *TArithType)
	XsdGoPkgHasElem_Sinh func (o *XsdGoPkgHasElem_Sinh)
	TmsubType func (o *TmsubType)
	TotherwiseType func (o *TotherwiseType)
	XsdGoPkgHasElems_Setdiff func (o *XsdGoPkgHasElems_Setdiff)
	TlaplacianType func (o *TlaplacianType)
	TtransposeType func (o *TtransposeType)
	XsdGoPkgHasElem_Mglyph func (o *XsdGoPkgHasElem_Mglyph)
	XsdGoPkgHasElems_Emptyset func (o *XsdGoPkgHasElems_Emptyset)
	XsdGoPkgHasGroup_PresentationExprOrNoneClass func (o *XsdGoPkgHasGroup_PresentationExprOrNoneClass)
	XsdGoPkgHasElems_Card func (o *XsdGoPkgHasElems_Card)
	XsdGoPkgHasGroup_CnContent func (o *XsdGoPkgHasGroup_CnContent)
	XsdGoPkgHasElem_Mtr func (o *XsdGoPkgHasElem_Mtr)
	XsdGoPkgHasElems_Msup func (o *XsdGoPkgHasElems_Msup)
	XsdGoPkgHasElems_Gcd func (o *XsdGoPkgHasElems_Gcd)
	XsdGoPkgHasElem_Forall func (o *XsdGoPkgHasElem_Forall)
	XsdGoPkgHasElem_Merror func (o *XsdGoPkgHasElem_Merror)
	XsdGoPkgHasElems_Intersect func (o *XsdGoPkgHasElems_Intersect)
	XsdGoPkgHasElems_Or func (o *XsdGoPkgHasElems_Or)
	XsdGoPkgHasGroup_PresExprClass func (o *XsdGoPkgHasGroup_PresExprClass)
	TvarianceType func (o *TvarianceType)
	XsdGoPkgHasElem_Median func (o *XsdGoPkgHasElem_Median)
	XsdGoPkgHasGroup_PieceContent func (o *XsdGoPkgHasGroup_PieceContent)
	XsdGoPkgHasElem_Lowlimit func (o *XsdGoPkgHasElem_Lowlimit)
	XsdGoPkgHasElem_Arccosh func (o *XsdGoPkgHasElem_Arccosh)
	XsdGoPkgHasElem_Intersect func (o *XsdGoPkgHasElem_Intersect)
	XsdGoPkgHasElem_Mover func (o *XsdGoPkgHasElem_Mover)
	XsdGoPkgHasElem_Partialdiff func (o *XsdGoPkgHasElem_Partialdiff)
	XsdGoPkgHasElems_Power func (o *XsdGoPkgHasElems_Power)
	XsdGoPkgHasElem_Uplimit func (o *XsdGoPkgHasElem_Uplimit)
	TpiecewiseType func (o *TpiecewiseType)
	TnotinType func (o *TnotinType)
	TElementaryFunctionsType func (o *TElementaryFunctionsType)
	XsdGoPkgHasElem_Xor func (o *XsdGoPkgHasElem_Xor)
	XsdGoPkgHasElem_Ms func (o *XsdGoPkgHasElem_Ms)
	XsdGoPkgHasElems_Tanh func (o *XsdGoPkgHasElems_Tanh)
	XsdGoPkgHasElem_Real func (o *XsdGoPkgHasElem_Real)
	XsdGoPkgHasGroup_ContentTokenContent func (o *XsdGoPkgHasGroup_ContentTokenContent)
	TcnType func (o *TcnType)
	TmomentType func (o *TmomentType)
	XsdGoPkgHasElem_Not func (o *XsdGoPkgHasElem_Not)
	TmedianType func (o *TmedianType)
	XsdGoPkgHasElems_Maction func (o *XsdGoPkgHasElems_Maction)
	TlistType func (o *TlistType)
	XsdGoPkgHasElem_Declare func (o *XsdGoPkgHasElem_Declare)
	XsdGoPkgHasElems_And func (o *XsdGoPkgHasElems_And)
	TvectorproductType func (o *TvectorproductType)
	XsdGoPkgHasElems_Exponentiale func (o *XsdGoPkgHasElems_Exponentiale)
	XsdGoPkgHasElem_Equivalent func (o *XsdGoPkgHasElem_Equivalent)
	TmsType func (o *TmsType)
	XsdGoPkgHasElem_Matrixrow func (o *XsdGoPkgHasElem_Matrixrow)
	XsdGoPkgHasElem_Mtable func (o *XsdGoPkgHasElem_Mtable)
	XsdGoPkgHasElems_Math func (o *XsdGoPkgHasElems_Math)
	XsdGoPkgHasElems_Annotation func (o *XsdGoPkgHasElems_Annotation)
	TdomainofapplicationType func (o *TdomainofapplicationType)
	XsdGoPkgHasElem_Implies func (o *XsdGoPkgHasElem_Implies)
	XsdGoPkgHasElems_Determinant func (o *XsdGoPkgHasElems_Determinant)
	XsdGoPkgHasElems_Primes func (o *XsdGoPkgHasElems_Primes)
	XsdGoPkgHasElems_Arccsch func (o *XsdGoPkgHasElems_Arccsch)
	TnoneType func (o *TnoneType)
	XsdGoPkgHasElems_Csc func (o *XsdGoPkgHasElems_Csc)
	XsdGoPkgHasElem_Sec func (o *XsdGoPkgHasElem_Sec)
	XsdGoPkgHasElem_Gcd func (o *XsdGoPkgHasElem_Gcd)
	XsdGoPkgHasGroup_MathContent func (o *XsdGoPkgHasGroup_MathContent)
	XsdGoPkgHasElems_Sep func (o *XsdGoPkgHasElems_Sep)
	XsdGoPkgHasElem_Arctanh func (o *XsdGoPkgHasElem_Arctanh)
	XsdGoPkgHasGroup_MomentaboutContent func (o *XsdGoPkgHasGroup_MomentaboutContent)
	XsdGoPkgHasElem_Infinity func (o *XsdGoPkgHasElem_Infinity)
	XsdGoPkgHasElems_Sech func (o *XsdGoPkgHasElems_Sech)
	XsdGoPkgHasElem_Domainofapplication func (o *XsdGoPkgHasElem_Domainofapplication)
	XsdGoPkgHasElem_Mroot func (o *XsdGoPkgHasElem_Mroot)
	XsdGoPkgHasElem_Geq func (o *XsdGoPkgHasElem_Geq)
	XsdGoPkgHasElems_Complexes func (o *XsdGoPkgHasElems_Complexes)
	XsdGoPkgHasElems_Ident func (o *XsdGoPkgHasElems_Ident)
	TinType func (o *TinType)
	XsdGoPkgHasElem_Arcsech func (o *XsdGoPkgHasElem_Arcsech)
	TmnType func (o *TmnType)
	TconditionType func (o *TconditionType)
	XsdGoPkgHasElem_Maction func (o *XsdGoPkgHasElem_Maction)
	XsdGoPkgHasElems_Median func (o *XsdGoPkgHasElems_Median)
	TmphantomType func (o *TmphantomType)
	XsdGoPkgHasElem_False func (o *XsdGoPkgHasElem_False)
	XsdGoPkgHasElems_Cot func (o *XsdGoPkgHasElems_Cot)
	XsdGoPkgHasElems_Uplimit func (o *XsdGoPkgHasElems_Uplimit)
	XsdGoPkgHasElems_Interval func (o *XsdGoPkgHasElems_Interval)
	XsdGoPkgHasElems_Munderover func (o *XsdGoPkgHasElems_Munderover)
	XsdGoPkgHasElem_Image func (o *XsdGoPkgHasElem_Image)
	XsdGoPkgHasElems_Eulergamma func (o *XsdGoPkgHasElems_Eulergamma)
	XsdGoPkgHasElems_Geq func (o *XsdGoPkgHasElems_Geq)
	XsdGoPkgHasElems_Arccsc func (o *XsdGoPkgHasElems_Arccsc)
	XsdGoPkgHasElem_Mstyle func (o *XsdGoPkgHasElem_Mstyle)
	XsdGoPkgHasElems_Arcsech func (o *XsdGoPkgHasElems_Arcsech)
	XsdGoPkgHasElems_Prsubset func (o *XsdGoPkgHasElems_Prsubset)
	XsdGoPkgHasElems_Scalarproduct func (o *XsdGoPkgHasElems_Scalarproduct)
	XsdGoPkgHasGroup_LambdaContent func (o *XsdGoPkgHasGroup_LambdaContent)
	XsdGoPkgHasElem_Divide func (o *XsdGoPkgHasElem_Divide)
	XsdGoPkgHasElem_Maligngroup func (o *XsdGoPkgHasElem_Maligngroup)
	XsdGoPkgHasElems_Approx func (o *XsdGoPkgHasElems_Approx)
	XsdGoPkgHasElem_Mlabeledtr func (o *XsdGoPkgHasElem_Mlabeledtr)
	TmmultiscriptsType func (o *TmmultiscriptsType)
	XsdGoPkgHasElem_Cartesianproduct func (o *XsdGoPkgHasElem_Cartesianproduct)
	XsdGoPkgHasElem_Msub func (o *XsdGoPkgHasElem_Msub)
	TmtableType func (o *TmtableType)
	XsdGoPkgHasElem_Times func (o *XsdGoPkgHasElem_Times)
	XsdGoPkgHasGroup_ContentRelationsClass func (o *XsdGoPkgHasGroup_ContentRelationsClass)
	XsdGoPkgHasElem_Outerproduct func (o *XsdGoPkgHasElem_Outerproduct)
	TmtrType func (o *TmtrType)
	XsdGoPkgHasElems_Divergence func (o *XsdGoPkgHasElems_Divergence)
	XsdGoPkgHasElems_Max func (o *XsdGoPkgHasElems_Max)
	XsdGoPkgHasGroup_MlabeledtrContent func (o *XsdGoPkgHasGroup_MlabeledtrContent)
	XsdGoPkgHasElems_Arcsec func (o *XsdGoPkgHasElems_Arcsec)
	XsdGoPkgHasGroup_DeclareContent func (o *XsdGoPkgHasGroup_DeclareContent)
	XsdGoPkgHasElems_Ceiling func (o *XsdGoPkgHasElems_Ceiling)
	XsdGoPkgHasElems_Domain func (o *XsdGoPkgHasElems_Domain)
	XsdGoPkgHasElem_Pi func (o *XsdGoPkgHasElem_Pi)
	XsdGoPkgHasElems_Tendsto func (o *XsdGoPkgHasElems_Tendsto)
	XsdGoPkgHasElems_Mroot func (o *XsdGoPkgHasElems_Mroot)
	XsdGoPkgHasElems_Subset func (o *XsdGoPkgHasElems_Subset)
	TselectorType func (o *TselectorType)
	XsdGoPkgHasElem_Interval func (o *XsdGoPkgHasElem_Interval)
	XsdGoPkgHasElems_Variance func (o *XsdGoPkgHasElems_Variance)
	XsdGoPkgHasElem_Cn func (o *XsdGoPkgHasElem_Cn)
	XsdGoPkgHasElems_Exp func (o *XsdGoPkgHasElems_Exp)
	XsdGoPkgHasElems_Mprescripts func (o *XsdGoPkgHasElems_Mprescripts)
	XsdGoPkgHasElems_Image func (o *XsdGoPkgHasElems_Image)
	XsdGoPkgHasGroup_MtrContent func (o *XsdGoPkgHasGroup_MtrContent)
	XsdGoPkgHasGroup_ContentVectorCalculusClass func (o *XsdGoPkgHasGroup_ContentVectorCalculusClass)
	XsdGoPkgHasGroup_ContentExprClass func (o *XsdGoPkgHasGroup_ContentExprClass)
	XsdGoPkgHasElems_Sdev func (o *XsdGoPkgHasElems_Sdev)
	XsdGoPkgHasElem_Arg func (o *XsdGoPkgHasElem_Arg)
	XsdGoPkgHasElem_Mtd func (o *XsdGoPkgHasElem_Mtd)
	XsdGoPkgHasGroup_MerrorContent func (o *XsdGoPkgHasGroup_MerrorContent)
	TmfracType func (o *TmfracType)
	XsdGoPkgHasElems_Exists func (o *XsdGoPkgHasElems_Exists)
	XsdGoPkgHasElems_Quotient func (o *XsdGoPkgHasElems_Quotient)
	XsdGoPkgHasElems_Msub func (o *XsdGoPkgHasElems_Msub)
	XsdGoPkgHasElem_List func (o *XsdGoPkgHasElem_List)
	XsdGoPkgHasElem_Selector func (o *XsdGoPkgHasElem_Selector)
	XsdGoPkgHasGroup_PresentationTokenClass func (o *XsdGoPkgHasGroup_PresentationTokenClass)
	XsdGoPkgHasElems_Eq func (o *XsdGoPkgHasElems_Eq)
	XsdGoPkgHasElem_Mo func (o *XsdGoPkgHasElem_Mo)
	XsdGoPkgHasElems_Curl func (o *XsdGoPkgHasElems_Curl)
	TsepType func (o *TsepType)
	XsdGoPkgHasElems_Conjugate func (o *XsdGoPkgHasElems_Conjugate)
	XsdGoPkgHasElem_Logbase func (o *XsdGoPkgHasElem_Logbase)
	XsdGoPkgHasElem_Arcsinh func (o *XsdGoPkgHasElem_Arcsinh)
	TmspaceType func (o *TmspaceType)
	TlowlimitType func (o *TlowlimitType)
	XsdGoPkgHasElems_Not func (o *XsdGoPkgHasElems_Not)
	XsdGoPkgHasElems_Compose func (o *XsdGoPkgHasElems_Compose)
	XsdGoPkgHasElem_Condition func (o *XsdGoPkgHasElem_Condition)
	XsdGoPkgHasElems_Factorial func (o *XsdGoPkgHasElems_Factorial)
	XsdGoPkgHasElem_Product func (o *XsdGoPkgHasElem_Product)
	XsdGoPkgHasElems_Matrixrow func (o *XsdGoPkgHasElems_Matrixrow)
	XsdGoPkgHasElems_Logbase func (o *XsdGoPkgHasElems_Logbase)
	TmsupType func (o *TmsupType)
	XsdGoPkgHasElems_Sin func (o *XsdGoPkgHasElems_Sin)
	XsdGoPkgHasElem_Csc func (o *XsdGoPkgHasElem_Csc)
	XsdGoPkgHasElem_Log func (o *XsdGoPkgHasElem_Log)
	XsdGoPkgHasElems_Log func (o *XsdGoPkgHasElems_Log)
	XsdGoPkgHasElem_Cosh func (o *XsdGoPkgHasElem_Cosh)
	XsdGoPkgHasElem_Mode func (o *XsdGoPkgHasElem_Mode)
	XsdGoPkgHasElem_Inverse func (o *XsdGoPkgHasElem_Inverse)
	XsdGoPkgHasGroup_ContentLinearAlgebraClass func (o *XsdGoPkgHasGroup_ContentLinearAlgebraClass)
	TmtdType func (o *TmtdType)
	XsdGoPkgHasElem_Arctan func (o *XsdGoPkgHasElem_Arctan)
	XsdGoPkgHasElem_Gt func (o *XsdGoPkgHasElem_Gt)
	XsdGoPkgHasElem_Codomain func (o *XsdGoPkgHasElem_Codomain)
	TciType func (o *TciType)
	XsdGoPkgHasElem_Transpose func (o *XsdGoPkgHasElem_Transpose)
	XsdGoPkgHasElem_Momentabout func (o *XsdGoPkgHasElem_Momentabout)
	TannotationXmlType func (o *TannotationXmlType)
	TintType func (o *TintType)
	XsdGoPkgHasElems_Arctanh func (o *XsdGoPkgHasElems_Arctanh)
	XsdGoPkgHasElems_Partialdiff func (o *XsdGoPkgHasElems_Partialdiff)
	XsdGoPkgHasElems_Semantics func (o *XsdGoPkgHasElems_Semantics)
	XsdGoPkgHasElems_Factorof func (o *XsdGoPkgHasElems_Factorof)
	XsdGoPkgHasElems_Mtd func (o *XsdGoPkgHasElems_Mtd)
	XsdGoPkgHasElem_Vectorproduct func (o *XsdGoPkgHasElem_Vectorproduct)
	XsdGoPkgHasElem_Tendsto func (o *XsdGoPkgHasElem_Tendsto)
	XsdGoPkgHasElem_And func (o *XsdGoPkgHasElem_And)
}
