//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Math/XMLSchema/mathml2/presentation/common-attribs.xsd
package gopkg_WwwW3OrgMathXMLSchemaMathml2Mathml2Xsd

//	This schema module defines sets of attributes common to several elements
//	of presentation MathML.
//	Author: St√©phane Dalmas, INRIA.
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TxsdTokenStyleAttribMathvariant xsdt.String

//	Since TxsdTokenStyleAttribMathvariant is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTokenStyleAttribMathvariant) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdTokenStyleAttribMathvariant is just a simple String type, this merely returns the current string value.
func (me TxsdTokenStyleAttribMathvariant) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTokenStyleAttribMathvariant's alias type xsdt.String
func (me TxsdTokenStyleAttribMathvariant) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "normal".
func (me TxsdTokenStyleAttribMathvariant) IsNormal () bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold".
func (me TxsdTokenStyleAttribMathvariant) IsBold () bool { return me == "bold" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "italic".
func (me TxsdTokenStyleAttribMathvariant) IsItalic () bool { return me == "italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-italic".
func (me TxsdTokenStyleAttribMathvariant) IsBoldItalic () bool { return me == "bold-italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "double-struck".
func (me TxsdTokenStyleAttribMathvariant) IsDoubleStruck () bool { return me == "double-struck" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-fraktur".
func (me TxsdTokenStyleAttribMathvariant) IsBoldFraktur () bool { return me == "bold-fraktur" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "script".
func (me TxsdTokenStyleAttribMathvariant) IsScript () bool { return me == "script" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-script".
func (me TxsdTokenStyleAttribMathvariant) IsBoldScript () bool { return me == "bold-script" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "fraktur".
func (me TxsdTokenStyleAttribMathvariant) IsFraktur () bool { return me == "fraktur" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerif () bool { return me == "sans-serif" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "bold-sans-serif".
func (me TxsdTokenStyleAttribMathvariant) IsBoldSansSerif () bool { return me == "bold-sans-serif" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif-italic".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerifItalic () bool { return me == "sans-serif-italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "sans-serif-bold-italic".
func (me TxsdTokenStyleAttribMathvariant) IsSansSerifBoldItalic () bool { return me == "sans-serif-bold-italic" }

//	Returns true if the value of this enumerated TxsdTokenStyleAttribMathvariant is "monospace".
func (me TxsdTokenStyleAttribMathvariant) IsMonospace () bool { return me == "monospace" }

type XsdGoPkgHasAttr_Mathvariant_TxsdTokenStyleAttribMathvariant_ struct {
	Mathvariant TxsdTokenStyleAttribMathvariant `xml:"http://www.w3.org/1998/Math/MathML mathvariant,attr"`
}

type TxsdTokenStyleAttribMathsize xsdt.String

//	Since TxsdTokenStyleAttribMathsize is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTokenStyleAttribMathsize) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdTokenStyleAttribMathsize is just a simple String type, this merely returns the current string value.
func (me TxsdTokenStyleAttribMathsize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTokenStyleAttribMathsize's alias type xsdt.String
func (me TxsdTokenStyleAttribMathsize) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdTokenStyleAttribMathsize is an XSD union type of several types. This is a simple type conversion to TsimpleSize, but keep in mind the actual value may or may not be a valid TsimpleSize value.
func (me TxsdTokenStyleAttribMathsize) ToTsimpleSize () TsimpleSize { return TsimpleSize(me) }

//	TxsdTokenStyleAttribMathsize is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdTokenStyleAttribMathsize) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

type XsdGoPkgHasAttr_Mathsize_TxsdTokenStyleAttribMathsize_ struct {
	Mathsize TxsdTokenStyleAttribMathsize `xml:"http://www.w3.org/1998/Math/MathML mathsize,attr"`
}

type XsdGoPkgHasAttr_Mathcolor_XsdtString_ struct {
	Mathcolor xsdt.String `xml:"http://www.w3.org/1998/Math/MathML mathcolor,attr"`
}

type XsdGoPkgHasAttr_Mathbackground_XsdtString_ struct {
	Mathbackground xsdt.String `xml:"http://www.w3.org/1998/Math/MathML mathbackground,attr"`
}

type XsdGoPkgHasAtts_TokenStyleAttrib struct {
	XsdGoPkgHasAttr_Mathvariant_TxsdTokenStyleAttribMathvariant_
	XsdGoPkgHasAttr_Mathsize_TxsdTokenStyleAttribMathsize_
	XsdGoPkgHasAttr_Mathcolor_XsdtString_
	XsdGoPkgHasAttr_Mathbackground_XsdtString_
}

type TxsdOperatorAttribForm xsdt.String

//	Since TxsdOperatorAttribForm is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribForm) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribForm is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribForm) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribForm's alias type xsdt.String
func (me TxsdOperatorAttribForm) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "prefix".
func (me TxsdOperatorAttribForm) IsPrefix () bool { return me == "prefix" }

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "infix".
func (me TxsdOperatorAttribForm) IsInfix () bool { return me == "infix" }

//	Returns true if the value of this enumerated TxsdOperatorAttribForm is "postfix".
func (me TxsdOperatorAttribForm) IsPostfix () bool { return me == "postfix" }

type XsdGoPkgHasAttr_Form_TxsdOperatorAttribForm_ struct {
	Form TxsdOperatorAttribForm `xml:"http://www.w3.org/1998/Math/MathML form,attr"`
}

type TxsdOperatorAttribLspace xsdt.String

//	Since TxsdOperatorAttribLspace is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribLspace) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribLspace is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribLspace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribLspace's alias type xsdt.String
func (me TxsdOperatorAttribLspace) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdOperatorAttribLspace is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribLspace) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribLspace is an XSD union type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribLspace) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

type XsdGoPkgHasAttr_Lspace_TxsdOperatorAttribLspace_ struct {
	Lspace TxsdOperatorAttribLspace `xml:"http://www.w3.org/1998/Math/MathML lspace,attr"`
}

type TxsdOperatorAttribRspace xsdt.String

//	Since TxsdOperatorAttribRspace is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribRspace) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribRspace is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribRspace) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribRspace's alias type xsdt.String
func (me TxsdOperatorAttribRspace) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdOperatorAttribRspace is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribRspace) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribRspace is an XSD union type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribRspace) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

type XsdGoPkgHasAttr_Rspace_TxsdOperatorAttribRspace_ struct {
	Rspace TxsdOperatorAttribRspace `xml:"http://www.w3.org/1998/Math/MathML rspace,attr"`
}

type XsdGoPkgHasAttr_Fence_XsdtBoolean_ struct {
	Fence xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML fence,attr"`
}

type XsdGoPkgHasAttr_Separator_XsdtBoolean_ struct {
	Separator xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML separator,attr"`
}

type XsdGoPkgHasAttr_Stretchy_XsdtBoolean_ struct {
	Stretchy xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML stretchy,attr"`
}

type XsdGoPkgHasAttr_Symmetric_XsdtBoolean_ struct {
	Symmetric xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML symmetric,attr"`
}

type XsdGoPkgHasAttr_Movablelimits_XsdtBoolean_ struct {
	Movablelimits xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML movablelimits,attr"`
}

type XsdGoPkgHasAttr_Accent_XsdtBoolean_ struct {
	Accent xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML accent,attr"`
}

type XsdGoPkgHasAttr_Largeop_XsdtBoolean_ struct {
	Largeop xsdt.Boolean `xml:"http://www.w3.org/1998/Math/MathML largeop,attr"`
}

type TxsdOperatorAttribMinsize xsdt.String

//	Since TxsdOperatorAttribMinsize is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribMinsize) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribMinsize is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribMinsize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribMinsize's alias type xsdt.String
func (me TxsdOperatorAttribMinsize) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdOperatorAttribMinsize is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribMinsize) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribMinsize is an XSD union type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribMinsize) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

type XsdGoPkgHasAttr_Minsize_TxsdOperatorAttribMinsize_ struct {
	Minsize TxsdOperatorAttribMinsize `xml:"http://www.w3.org/1998/Math/MathML minsize,attr"`
}

type TxsdOperatorAttribMaxsize xsdt.String

//	Since TxsdOperatorAttribMaxsize is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOperatorAttribMaxsize) SetFromString (s string) { (*xsdt.String)(me).SetFromString(s) }

//	Since TxsdOperatorAttribMaxsize is just a simple String type, this merely returns the current string value.
func (me TxsdOperatorAttribMaxsize) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOperatorAttribMaxsize's alias type xsdt.String
func (me TxsdOperatorAttribMaxsize) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TxsdOperatorAttribMaxsize is an XSD union type of several types. This is a simple type conversion to TlengthWithUnit, but keep in mind the actual value may or may not be a valid TlengthWithUnit value.
func (me TxsdOperatorAttribMaxsize) ToTlengthWithUnit () TlengthWithUnit { return TlengthWithUnit(me) }

//	TxsdOperatorAttribMaxsize is an XSD union type of several types. This is a simple type conversion to TnamedSpace, but keep in mind the actual value may or may not be a valid TnamedSpace value.
func (me TxsdOperatorAttribMaxsize) ToTnamedSpace () TnamedSpace { return TnamedSpace(me) }

//	TxsdOperatorAttribMaxsize is an XSD union type of several types. This is a simple type conversion to Tinfinity, but keep in mind the actual value may or may not be a valid Tinfinity value.
func (me TxsdOperatorAttribMaxsize) ToTinfinity () Tinfinity { return Tinfinity(me) }

//	TxsdOperatorAttribMaxsize is an XSD union type of several types. This is a simple type conversion to XsdtFloat, but keep in mind the actual value may or may not be a valid XsdtFloat value.
func (me TxsdOperatorAttribMaxsize) ToXsdtFloat () xsdt.Float { var x = new(xsdt.Float); x.SetFromString(me.String()); return *x }

type XsdGoPkgHasAttr_Maxsize_TxsdOperatorAttribMaxsize_ struct {
	Maxsize TxsdOperatorAttribMaxsize `xml:"http://www.w3.org/1998/Math/MathML maxsize,attr"`
}

type XsdGoPkgHasAtts_OperatorAttrib struct {
	XsdGoPkgHasAttr_Form_TxsdOperatorAttribForm_
	XsdGoPkgHasAttr_Lspace_TxsdOperatorAttribLspace_
	XsdGoPkgHasAttr_Rspace_TxsdOperatorAttribRspace_
	XsdGoPkgHasAttr_Fence_XsdtBoolean_
	XsdGoPkgHasAttr_Separator_XsdtBoolean_
	XsdGoPkgHasAttr_Stretchy_XsdtBoolean_
	XsdGoPkgHasAttr_Symmetric_XsdtBoolean_
	XsdGoPkgHasAttr_Movablelimits_XsdtBoolean_
	XsdGoPkgHasAttr_Accent_XsdtBoolean_
	XsdGoPkgHasAttr_Largeop_XsdtBoolean_
	XsdGoPkgHasAttr_Minsize_TxsdOperatorAttribMinsize_
	XsdGoPkgHasAttr_Maxsize_TxsdOperatorAttribMaxsize_
}
