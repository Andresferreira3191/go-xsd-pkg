//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docbook.org/xml/5.0/xsd/docbook.xsd
package go_Docbook

import (
	xlink "github.com/metaleap/go-xsd-pkg/docbook.org/xml/5.0/xsd/xlink.xsd_go"
	xml "github.com/metaleap/go-xsd-pkg/docbook.org/xml/5.0/xsd/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Security_XsdtString_ struct {
	Security xsdt.String `xml:"http://docbook.org/ns/docbook security,attr"`
}

type XsdGoPkgHasAttr_Remap_XsdtString_ struct {
	Remap xsdt.String `xml:"http://docbook.org/ns/docbook remap,attr"`
}

type XsdGoPkgHasAttr_Os_XsdtString_ struct {
	Os xsdt.String `xml:"http://docbook.org/ns/docbook os,attr"`
}

type TxsdDbCommonAttributesDir xsdt.Token

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "rtl".
func (me TxsdDbCommonAttributesDir) IsRtl() bool { return me == "rtl" }

//	This convenience method just performs a simple type conversion to TxsdDbCommonAttributesDir's alias type xsdt.Token.
func (me TxsdDbCommonAttributesDir) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdDbCommonAttributesDir is just a simple String type, this merely returns the current string value.
func (me TxsdDbCommonAttributesDir) String() string { return xsdt.Token(me).String() }

//	Since TxsdDbCommonAttributesDir is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDbCommonAttributesDir) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "rlo".
func (me TxsdDbCommonAttributesDir) IsRlo() bool { return me == "rlo" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "ltr".
func (me TxsdDbCommonAttributesDir) IsLtr() bool { return me == "ltr" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "lro".
func (me TxsdDbCommonAttributesDir) IsLro() bool { return me == "lro" }

type XsdGoPkgHasAttr_Dir_TxsdDbCommonAttributesDir_ struct {
	Dir TxsdDbCommonAttributesDir `xml:"http://docbook.org/ns/docbook dir,attr"`
}

type XsdGoPkgHasAttr_Vendor_XsdtString_ struct {
	Vendor xsdt.String `xml:"http://docbook.org/ns/docbook vendor,attr"`
}

type TxsdDbCommonAttributesRevisionflag xsdt.Token

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "added".
func (me TxsdDbCommonAttributesRevisionflag) IsAdded() bool { return me == "added" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "changed".
func (me TxsdDbCommonAttributesRevisionflag) IsChanged() bool { return me == "changed" }

//	Since TxsdDbCommonAttributesRevisionflag is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDbCommonAttributesRevisionflag) SetFromString(s string) {
	(*xsdt.Token)(me).SetFromString(s)
}

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "off".
func (me TxsdDbCommonAttributesRevisionflag) IsOff() bool { return me == "off" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "deleted".
func (me TxsdDbCommonAttributesRevisionflag) IsDeleted() bool { return me == "deleted" }

//	This convenience method just performs a simple type conversion to TxsdDbCommonAttributesRevisionflag's alias type xsdt.Token.
func (me TxsdDbCommonAttributesRevisionflag) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdDbCommonAttributesRevisionflag is just a simple String type, this merely returns the current string value.
func (me TxsdDbCommonAttributesRevisionflag) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Revisionflag_TxsdDbCommonAttributesRevisionflag_ struct {
	Revisionflag TxsdDbCommonAttributesRevisionflag `xml:"http://docbook.org/ns/docbook revisionflag,attr"`
}

type XsdGoPkgHasAttr_Annotations_XsdtString_ struct {
	Annotations xsdt.String `xml:"http://docbook.org/ns/docbook annotations,attr"`
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"http://docbook.org/ns/docbook version,attr"`
}

type XsdGoPkgHasAttr_Wordsize_XsdtString_ struct {
	Wordsize xsdt.String `xml:"http://docbook.org/ns/docbook wordsize,attr"`
}

type XsdGoPkgHasAttr_Audience_XsdtString_ struct {
	Audience xsdt.String `xml:"http://docbook.org/ns/docbook audience,attr"`
}

type XsdGoPkgHasAttr_Arch_XsdtString_ struct {
	Arch xsdt.String `xml:"http://docbook.org/ns/docbook arch,attr"`
}

type XsdGoPkgHasAttr_Revision_XsdtString_ struct {
	Revision xsdt.String `xml:"http://docbook.org/ns/docbook revision,attr"`
}

type XsdGoPkgHasAttr_Condition_XsdtString_ struct {
	Condition xsdt.String `xml:"http://docbook.org/ns/docbook condition,attr"`
}

type XsdGoPkgHasAttr_Xreflabel_XsdtString_ struct {
	Xreflabel xsdt.String `xml:"http://docbook.org/ns/docbook xreflabel,attr"`
}

type XsdGoPkgHasAttr_Userlevel_XsdtString_ struct {
	Userlevel xsdt.String `xml:"http://docbook.org/ns/docbook userlevel,attr"`
}

type XsdGoPkgHasAttr_Conformance_XsdtString_ struct {
	Conformance xsdt.String `xml:"http://docbook.org/ns/docbook conformance,attr"`
}

type XsdGoPkgHasAtts_DbCommonAttributes struct {
	XsdGoPkgHasAttr_Revision_XsdtString_

	XsdGoPkgHasAttr_Condition_XsdtString_

	XsdGoPkgHasAttr_Xreflabel_XsdtString_

	XsdGoPkgHasAttr_Userlevel_XsdtString_

	XsdGoPkgHasAttr_Conformance_XsdtString_

	xml.XsdGoPkgHasAttr_Lang

	xml.XsdGoPkgHasAttr_Base

	XsdGoPkgHasAttr_Security_XsdtString_

	XsdGoPkgHasAttr_Remap_XsdtString_

	XsdGoPkgHasAttr_Os_XsdtString_

	XsdGoPkgHasAttr_Dir_TxsdDbCommonAttributesDir_

	XsdGoPkgHasAttr_Vendor_XsdtString_

	xml.XsdGoPkgHasAttr_Id

	XsdGoPkgHasAttr_Revisionflag_TxsdDbCommonAttributesRevisionflag_

	XsdGoPkgHasAttr_Annotations_XsdtString_

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_Wordsize_XsdtString_

	XsdGoPkgHasAttr_Audience_XsdtString_

	XsdGoPkgHasAttr_Arch_XsdtString_
}

type XsdGoPkgHasAttr_Linkend_XsdtIdref_ struct {
	Linkend xsdt.Idref `xml:"http://docbook.org/ns/docbook linkend,attr"`
}

type XsdGoPkgHasAtts_DbCommonLinkingAttributes struct {
	xlink.XsdGoPkgHasAttr_Title

	XsdGoPkgHasAttr_Linkend_XsdtIdref_

	xlink.XsdGoPkgHasAttr_Type

	xlink.XsdGoPkgHasAttr_Arcrole

	xlink.XsdGoPkgHasAttr_Role

	xlink.XsdGoPkgHasAttr_Href

	xlink.XsdGoPkgHasAttr_Actuate

	xlink.XsdGoPkgHasAttr_Show
}

type XsdGoPkgHasAttr_Role_XsdtString_ struct {
	Role xsdt.String `xml:"http://docbook.org/ns/docbook role,attr"`
}

type TxsdAnchor struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdAnchor function is not nil (ie. was set by outside code), calls it with this TxsdAnchor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdAnchor instance.
func (me *TxsdAnchor) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnchor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Anchor struct {
	Anchors []*TxsdAnchor `xml:"http://docbook.org/ns/docbook anchor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Anchor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Anchor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Anchor instance.
func (me *XsdGoPkgHasElems_Anchor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Anchor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Anchors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReplaceableClass xsdt.Token

//	Returns true if the value of this enumerated TxsdReplaceableClass is "command".
func (me TxsdReplaceableClass) IsCommand() bool { return me == "command" }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "parameter".
func (me TxsdReplaceableClass) IsParameter() bool { return me == "parameter" }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "option".
func (me TxsdReplaceableClass) IsOption() bool { return me == "option" }

//	Since TxsdReplaceableClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdReplaceableClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "function".
func (me TxsdReplaceableClass) IsFunction() bool { return me == "function" }

//	Since TxsdReplaceableClass is just a simple String type, this merely returns the current string value.
func (me TxsdReplaceableClass) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdReplaceableClass's alias type xsdt.Token.
func (me TxsdReplaceableClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Class_TxsdReplaceableClass_ struct {
	Class TxsdReplaceableClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Xrefstyle_XsdtString_ struct {
	Xrefstyle xsdt.String `xml:"http://docbook.org/ns/docbook xrefstyle,attr"`
}

type XsdGoPkgHasAttr_End_XsdtNmtoken_ struct {
	End xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook end,attr"`
}

type XsdGoPkgHasAttr_Begin_XsdtNmtoken_ struct {
	Begin xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook begin,attr"`
}

type XsdGoPkgHasAttr_Endterm_XsdtIdref_ struct {
	Endterm xsdt.Idref `xml:"http://docbook.org/ns/docbook endterm,attr"`
}

type XsdGoPkgHasAttr_Units_XsdtNmtoken_ struct {
	Units xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook units,attr"`
}

type TxsdBiblioref struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Begin_XsdtNmtoken_

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasAttr_Units_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_End_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdBiblioref function is not nil (ie. was set by outside code), calls it with this TxsdBiblioref instance as the single argument. Then calls the Walk() method on 0/8 embed(s) and 0/0 field(s) belonging to this TxsdBiblioref instance.
func (me *TxsdBiblioref) Walk() (err error) {
	if fn := WalkHandlers.TxsdBiblioref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Biblioref struct {
	Bibliorefs []*TxsdBiblioref `xml:"http://docbook.org/ns/docbook biblioref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioref instance.
func (me *XsdGoPkgHasElems_Biblioref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Biblioref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliorefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVoid struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdVoid function is not nil (ie. was set by outside code), calls it with this TxsdVoid instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdVoid instance.
func (me *TxsdVoid) Walk() (err error) {
	if fn := WalkHandlers.TxsdVoid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Void struct {
	Void *TxsdVoid `xml:"http://docbook.org/ns/docbook void"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Void function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Void instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Void instance.
func (me *XsdGoPkgHasElem_Void) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Void; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Void.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAlt struct {
	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdAlt function is not nil (ie. was set by outside code), calls it with this TxsdAlt instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdAlt instance.
func (me *TxsdAlt) Walk() (err error) {
	if fn := WalkHandlers.TxsdAlt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Alt struct {
	Alts []*TxsdAlt `xml:"http://docbook.org/ns/docbook alt"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Alt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Alt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Alt instance.
func (me *XsdGoPkgHasElems_Alt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Alt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Alts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://docbook.org/ns/docbook type,attr"`
}

type TxsdXref struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_
}

//	If the WalkHandlers.TxsdXref function is not nil (ie. was set by outside code), calls it with this TxsdXref instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdXref instance.
func (me *TxsdXref) Walk() (err error) {
	if fn := WalkHandlers.TxsdXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Xref struct {
	Xrefs []*TxsdXref `xml:"http://docbook.org/ns/docbook xref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xref instance.
func (me *XsdGoPkgHasElems_Xref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Xref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Xrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLiteral struct {
	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdLiteral function is not nil (ie. was set by outside code), calls it with this TxsdLiteral instance as the single argument. Then calls the Walk() method on 5/18 embed(s) and 0/0 field(s) belonging to this TxsdLiteral instance.
func (me *TxsdLiteral) Walk() (err error) {
	if fn := WalkHandlers.TxsdLiteral; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Literal struct {
	Literals []*TxsdLiteral `xml:"http://docbook.org/ns/docbook literal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Literal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Literal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Literal instance.
func (me *XsdGoPkgHasElems_Literal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Literal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Literals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Accel struct {
	Accels []*TxsdLiteral `xml:"http://docbook.org/ns/docbook accel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Accel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Accel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Accel instance.
func (me *XsdGoPkgHasElems_Accel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Accel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Accels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGuimenuitem struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdGuimenuitem function is not nil (ie. was set by outside code), calls it with this TxsdGuimenuitem instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdGuimenuitem instance.
func (me *TxsdGuimenuitem) Walk() (err error) {
	if fn := WalkHandlers.TxsdGuimenuitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guimenuitem struct {
	Guimenuitems []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenuitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guimenuitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guimenuitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guimenuitem instance.
func (me *XsdGoPkgHasElems_Guimenuitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guimenuitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guimenuitems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Mousebutton struct {
	Mousebuttons []*TxsdLiteral `xml:"http://docbook.org/ns/docbook mousebutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mousebutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mousebutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mousebutton instance.
func (me *XsdGoPkgHasElems_Mousebutton) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Mousebutton; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mousebuttons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keysym struct {
	Keysyms []*TxsdLiteral `xml:"http://docbook.org/ns/docbook keysym"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keysym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keysym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keysym instance.
func (me *XsdGoPkgHasElems_Keysym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keysym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keysyms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdKeycapFunction xsdt.Token

//	Since TxsdKeycapFunction is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdKeycapFunction) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "up".
func (me TxsdKeycapFunction) IsUp() bool { return me == "up" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "home".
func (me TxsdKeycapFunction) IsHome() bool { return me == "home" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "left".
func (me TxsdKeycapFunction) IsLeft() bool { return me == "left" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "escape".
func (me TxsdKeycapFunction) IsEscape() bool { return me == "escape" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "insert".
func (me TxsdKeycapFunction) IsInsert() bool { return me == "insert" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "right".
func (me TxsdKeycapFunction) IsRight() bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "shift".
func (me TxsdKeycapFunction) IsShift() bool { return me == "shift" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "command".
func (me TxsdKeycapFunction) IsCommand() bool { return me == "command" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "meta".
func (me TxsdKeycapFunction) IsMeta() bool { return me == "meta" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "alt".
func (me TxsdKeycapFunction) IsAlt() bool { return me == "alt" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "tab".
func (me TxsdKeycapFunction) IsTab() bool { return me == "tab" }

//	This convenience method just performs a simple type conversion to TxsdKeycapFunction's alias type xsdt.Token.
func (me TxsdKeycapFunction) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "option".
func (me TxsdKeycapFunction) IsOption() bool { return me == "option" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "enter".
func (me TxsdKeycapFunction) IsEnter() bool { return me == "enter" }

//	Since TxsdKeycapFunction is just a simple String type, this merely returns the current string value.
func (me TxsdKeycapFunction) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "space".
func (me TxsdKeycapFunction) IsSpace() bool { return me == "space" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "control".
func (me TxsdKeycapFunction) IsControl() bool { return me == "control" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "end".
func (me TxsdKeycapFunction) IsEnd() bool { return me == "end" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "pageup".
func (me TxsdKeycapFunction) IsPageup() bool { return me == "pageup" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "backspace".
func (me TxsdKeycapFunction) IsBackspace() bool { return me == "backspace" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "pagedown".
func (me TxsdKeycapFunction) IsPagedown() bool { return me == "pagedown" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "other".
func (me TxsdKeycapFunction) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "delete".
func (me TxsdKeycapFunction) IsDelete() bool { return me == "delete" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "down".
func (me TxsdKeycapFunction) IsDown() bool { return me == "down" }

type XsdGoPkgHasAttr_Function_TxsdKeycapFunction_ struct {
	Function TxsdKeycapFunction `xml:"http://docbook.org/ns/docbook function,attr"`
}

type XsdGoPkgHasAttr_Otherfunction_XsdtString_ struct {
	Otherfunction xsdt.String `xml:"http://docbook.org/ns/docbook otherfunction,attr"`
}

type TxsdKeycap struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Otherfunction_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Function_TxsdKeycapFunction_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdKeycap function is not nil (ie. was set by outside code), calls it with this TxsdKeycap instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdKeycap instance.
func (me *TxsdKeycap) Walk() (err error) {
	if fn := WalkHandlers.TxsdKeycap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keycap struct {
	Keycaps []*TxsdKeycap `xml:"http://docbook.org/ns/docbook keycap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycap instance.
func (me *XsdGoPkgHasElems_Keycap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keycap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keycaps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Otheraction_XsdtString_ struct {
	Otheraction xsdt.String `xml:"http://docbook.org/ns/docbook otheraction,attr"`
}

type TxsdKeycomboAction xsdt.Token

//	Returns true if the value of this enumerated TxsdKeycomboAction is "double-click".
func (me TxsdKeycomboAction) IsDoubleClick() bool { return me == "double-click" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "other".
func (me TxsdKeycomboAction) IsOther() bool { return me == "other" }

//	This convenience method just performs a simple type conversion to TxsdKeycomboAction's alias type xsdt.Token.
func (me TxsdKeycomboAction) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "press".
func (me TxsdKeycomboAction) IsPress() bool { return me == "press" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "simul".
func (me TxsdKeycomboAction) IsSimul() bool { return me == "simul" }

//	Since TxsdKeycomboAction is just a simple String type, this merely returns the current string value.
func (me TxsdKeycomboAction) String() string { return xsdt.Token(me).String() }

//	Since TxsdKeycomboAction is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdKeycomboAction) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "click".
func (me TxsdKeycomboAction) IsClick() bool { return me == "click" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "seq".
func (me TxsdKeycomboAction) IsSeq() bool { return me == "seq" }

type XsdGoPkgHasAttr_Action_TxsdKeycomboAction_ struct {
	Action TxsdKeycomboAction `xml:"http://docbook.org/ns/docbook action,attr"`
}

type TxsdKeycombo struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAttr_Action_TxsdKeycomboAction_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasAttr_Otheraction_XsdtString_
}

//	If the WalkHandlers.TxsdKeycombo function is not nil (ie. was set by outside code), calls it with this TxsdKeycombo instance as the single argument. Then calls the Walk() method on 3/9 embed(s) and 0/0 field(s) belonging to this TxsdKeycombo instance.
func (me *TxsdKeycombo) Walk() (err error) {
	if fn := WalkHandlers.TxsdKeycombo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keycombo struct {
	Keycombos []*TxsdKeycombo `xml:"http://docbook.org/ns/docbook keycombo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycombo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycombo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycombo instance.
func (me *XsdGoPkgHasElems_Keycombo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keycombo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keycombos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Action_TxsdShortcutAction_ struct {
	Action TxsdKeycomboAction `xml:"http://docbook.org/ns/docbook action,attr"`
}

type TxsdShortcut struct {
	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Action_TxsdShortcutAction_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Otheraction_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdShortcut function is not nil (ie. was set by outside code), calls it with this TxsdShortcut instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdShortcut instance.
func (me *TxsdShortcut) Walk() (err error) {
	if fn := WalkHandlers.TxsdShortcut; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Shortcut struct {
	Shortcuts []*TxsdShortcut `xml:"http://docbook.org/ns/docbook shortcut"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shortcut function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shortcut instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shortcut instance.
func (me *XsdGoPkgHasElems_Shortcut) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Shortcut; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shortcuts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keycode struct {
	Keycodes []*TxsdLiteral `xml:"http://docbook.org/ns/docbook keycode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycode instance.
func (me *XsdGoPkgHasElems_Keycode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keycode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keycodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Type struct {
	Types []*TxsdLiteral `xml:"http://docbook.org/ns/docbook type"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Type function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Type instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Type instance.
func (me *XsdGoPkgHasElems_Type) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Type; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Types {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTagClass xsdt.Token

//	Returns true if the value of this enumerated TxsdTagClass is "namespace".
func (me TxsdTagClass) IsNamespace() bool { return me == "namespace" }

//	Returns true if the value of this enumerated TxsdTagClass is "xmlpi".
func (me TxsdTagClass) IsXmlpi() bool { return me == "xmlpi" }

//	Returns true if the value of this enumerated TxsdTagClass is "starttag".
func (me TxsdTagClass) IsStarttag() bool { return me == "starttag" }

//	Returns true if the value of this enumerated TxsdTagClass is "endtag".
func (me TxsdTagClass) IsEndtag() bool { return me == "endtag" }

//	Returns true if the value of this enumerated TxsdTagClass is "element".
func (me TxsdTagClass) IsElement() bool { return me == "element" }

//	Returns true if the value of this enumerated TxsdTagClass is "localname".
func (me TxsdTagClass) IsLocalname() bool { return me == "localname" }

//	Returns true if the value of this enumerated TxsdTagClass is "emptytag".
func (me TxsdTagClass) IsEmptytag() bool { return me == "emptytag" }

//	This convenience method just performs a simple type conversion to TxsdTagClass's alias type xsdt.Token.
func (me TxsdTagClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTagClass is "numcharref".
func (me TxsdTagClass) IsNumcharref() bool { return me == "numcharref" }

//	Returns true if the value of this enumerated TxsdTagClass is "prefix".
func (me TxsdTagClass) IsPrefix() bool { return me == "prefix" }

//	Returns true if the value of this enumerated TxsdTagClass is "paramentity".
func (me TxsdTagClass) IsParamentity() bool { return me == "paramentity" }

//	Since TxsdTagClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTagClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTagClass is "genentity".
func (me TxsdTagClass) IsGenentity() bool { return me == "genentity" }

//	Returns true if the value of this enumerated TxsdTagClass is "attribute".
func (me TxsdTagClass) IsAttribute() bool { return me == "attribute" }

//	Returns true if the value of this enumerated TxsdTagClass is "pi".
func (me TxsdTagClass) IsPi() bool { return me == "pi" }

//	Returns true if the value of this enumerated TxsdTagClass is "attvalue".
func (me TxsdTagClass) IsAttvalue() bool { return me == "attvalue" }

//	Since TxsdTagClass is just a simple String type, this merely returns the current string value.
func (me TxsdTagClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTagClass is "comment".
func (me TxsdTagClass) IsComment() bool { return me == "comment" }

type XsdGoPkgHasAttr_Class_TxsdTagClass_ struct {
	Class TxsdTagClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Namespace_XsdtString_ struct {
	Namespace xsdt.String `xml:"http://docbook.org/ns/docbook namespace,attr"`
}

type TxsdTag struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Namespace_XsdtString_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Class_TxsdTagClass_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdTag function is not nil (ie. was set by outside code), calls it with this TxsdTag instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdTag instance.
func (me *TxsdTag) Walk() (err error) {
	if fn := WalkHandlers.TxsdTag; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tag struct {
	Tags []*TxsdTag `xml:"http://docbook.org/ns/docbook tag"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tag instance.
func (me *XsdGoPkgHasElems_Tag) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tag; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tags {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Errorname struct {
	Errornames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook errorname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errorname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errorname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errorname instance.
func (me *XsdGoPkgHasElems_Errorname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Errorname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errornames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Package struct {
	Packages []*TxsdLiteral `xml:"http://docbook.org/ns/docbook package"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Package function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Package instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Package instance.
func (me *XsdGoPkgHasElems_Package) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Package; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Packages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Classname struct {
	Classname *TxsdClassname `xml:"http://docbook.org/ns/docbook classname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Classname instance.
func (me *XsdGoPkgHasElem_Classname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Classname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdModifier struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdModifier function is not nil (ie. was set by outside code), calls it with this TxsdModifier instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdModifier instance.
func (me *TxsdModifier) Walk() (err error) {
	if fn := WalkHandlers.TxsdModifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Modifier struct {
	Modifiers []*TxsdModifier `xml:"http://docbook.org/ns/docbook modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Modifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Modifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Modifier instance.
func (me *XsdGoPkgHasElems_Modifier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Modifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Modifiers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOoclass struct {
	XsdGoPkgHasElem_Classname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Package
}

//	If the WalkHandlers.TxsdOoclass function is not nil (ie. was set by outside code), calls it with this TxsdOoclass instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOoclass instance.
func (me *TxsdOoclass) Walk() (err error) {
	if fn := WalkHandlers.TxsdOoclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Classname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ooclass struct {
	Ooclasses []*TxsdOoclass `xml:"http://docbook.org/ns/docbook ooclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ooclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ooclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ooclass instance.
func (me *XsdGoPkgHasElems_Ooclass) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ooclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ooclasses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTrademarkClass xsdt.Token

//	Since TxsdTrademarkClass is just a simple String type, this merely returns the current string value.
func (me TxsdTrademarkClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "service".
func (me TxsdTrademarkClass) IsService() bool { return me == "service" }

//	This convenience method just performs a simple type conversion to TxsdTrademarkClass's alias type xsdt.Token.
func (me TxsdTrademarkClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "registered".
func (me TxsdTrademarkClass) IsRegistered() bool { return me == "registered" }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "copyright".
func (me TxsdTrademarkClass) IsCopyright() bool { return me == "copyright" }

//	Since TxsdTrademarkClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTrademarkClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "trade".
func (me TxsdTrademarkClass) IsTrade() bool { return me == "trade" }

type XsdGoPkgHasAttr_Class_TxsdTrademarkClass_ struct {
	Class TxsdTrademarkClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdTrademark struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Class_TxsdTrademarkClass_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdTrademark function is not nil (ie. was set by outside code), calls it with this TxsdTrademark instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdTrademark instance.
func (me *TxsdTrademark) Walk() (err error) {
	if fn := WalkHandlers.TxsdTrademark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Trademark struct {
	Trademarks []*TxsdTrademark `xml:"http://docbook.org/ns/docbook trademark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Trademark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Trademark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Trademark instance.
func (me *XsdGoPkgHasElems_Trademark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Trademark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trademarks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAbbrev struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdAbbrev function is not nil (ie. was set by outside code), calls it with this TxsdAbbrev instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdAbbrev instance.
func (me *TxsdAbbrev) Walk() (err error) {
	if fn := WalkHandlers.TxsdAbbrev; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Abbrev struct {
	Abbrevs []*TxsdAbbrev `xml:"http://docbook.org/ns/docbook abbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abbrev instance.
func (me *XsdGoPkgHasElems_Abbrev) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Abbrev; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Abbrevs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUri struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdUri function is not nil (ie. was set by outside code), calls it with this TxsdUri instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdUri instance.
func (me *TxsdUri) Walk() (err error) {
	if fn := WalkHandlers.TxsdUri; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Uri struct {
	Uris []*TxsdUri `xml:"http://docbook.org/ns/docbook uri"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Uri function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Uri instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Uri instance.
func (me *XsdGoPkgHasElems_Uri) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Uri; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uris {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Phone struct {
	Phones []*TxsdLiteral `xml:"http://docbook.org/ns/docbook phone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Phone instance.
func (me *XsdGoPkgHasElems_Phone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Phone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Phones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Email struct {
	Emails []*TxsdLiteral `xml:"http://docbook.org/ns/docbook email"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Emails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_State struct {
	States []*TxsdLiteral `xml:"http://docbook.org/ns/docbook state"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_State instance.
func (me *XsdGoPkgHasElems_State) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_State; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.States {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pob struct {
	Pobs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook pob"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pob function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pob instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pob instance.
func (me *XsdGoPkgHasElems_Pob) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pob; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pobs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Postcode struct {
	Postcodes []*TxsdLiteral `xml:"http://docbook.org/ns/docbook postcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Postcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Postcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Postcode instance.
func (me *XsdGoPkgHasElems_Postcode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Postcode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Postcodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Country struct {
	Countries []*TxsdLiteral `xml:"http://docbook.org/ns/docbook country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Country instance.
func (me *XsdGoPkgHasElems_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Countries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Street struct {
	Streets []*TxsdLiteral `xml:"http://docbook.org/ns/docbook street"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Street function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Street instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Street instance.
func (me *XsdGoPkgHasElems_Street) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Street; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Streets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAddressLinenumbering xsdt.Token

//	Since TxsdAddressLinenumbering is just a simple String type, this merely returns the current string value.
func (me TxsdAddressLinenumbering) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdAddressLinenumbering is "numbered".
func (me TxsdAddressLinenumbering) IsNumbered() bool { return me == "numbered" }

//	This convenience method just performs a simple type conversion to TxsdAddressLinenumbering's alias type xsdt.Token.
func (me TxsdAddressLinenumbering) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdAddressLinenumbering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAddressLinenumbering) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdAddressLinenumbering is "unnumbered".
func (me TxsdAddressLinenumbering) IsUnnumbered() bool { return me == "unnumbered" }

type XsdGoPkgHasAttr_Linenumbering_TxsdAddressLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_ struct {
	Startinglinenumber xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook startinglinenumber,attr"`
}

type XsdGoPkgHasElems_City struct {
	Cities []*TxsdLiteral `xml:"http://docbook.org/ns/docbook city"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_City instance.
func (me *XsdGoPkgHasElems_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Otheraddr struct {
	Otheraddrs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook otheraddr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Otheraddr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Otheraddr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Otheraddr instance.
func (me *XsdGoPkgHasElems_Otheraddr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Otheraddr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Otheraddrs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Language_XsdtString_ struct {
	Language xsdt.String `xml:"http://docbook.org/ns/docbook language,attr"`
}

type XsdGoPkgHasElems_Firstname struct {
	Firstnames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook firstname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Firstname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Firstname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Firstname instance.
func (me *XsdGoPkgHasElems_Firstname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Firstname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Firstnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Honorific struct {
	Honorifics []*TxsdLiteral `xml:"http://docbook.org/ns/docbook honorific"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Honorific function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Honorific instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Honorific instance.
func (me *XsdGoPkgHasElems_Honorific) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Honorific; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Honorifics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Othername struct {
	Othernames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook othername"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Othername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Othername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Othername instance.
func (me *XsdGoPkgHasElems_Othername) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Othername; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Othernames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Surname struct {
	Surnames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook surname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Surname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Surname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Surname instance.
func (me *XsdGoPkgHasElems_Surname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Surname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Surnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Lineage struct {
	Lineages []*TxsdLiteral `xml:"http://docbook.org/ns/docbook lineage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lineage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lineage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lineage instance.
func (me *XsdGoPkgHasElems_Lineage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lineage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lineages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPersonname struct {
	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Othername

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Surname

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Lineage

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Firstname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Honorific
}

//	If the WalkHandlers.TxsdPersonname function is not nil (ie. was set by outside code), calls it with this TxsdPersonname instance as the single argument. Then calls the Walk() method on 10/23 embed(s) and 0/0 field(s) belonging to this TxsdPersonname instance.
func (me *TxsdPersonname) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Lineage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Honorific.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Surname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Personname struct {
	Personnames []*TxsdPersonname `xml:"http://docbook.org/ns/docbook personname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Personname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Personname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Personname instance.
func (me *XsdGoPkgHasElems_Personname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Personname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Personnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAddressContinuation xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdAddressContinuation's alias type xsdt.Token.
func (me TxsdAddressContinuation) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdAddressContinuation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAddressContinuation) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdAddressContinuation is "restarts".
func (me TxsdAddressContinuation) IsRestarts() bool { return me == "restarts" }

//	Returns true if the value of this enumerated TxsdAddressContinuation is "continues".
func (me TxsdAddressContinuation) IsContinues() bool { return me == "continues" }

//	Since TxsdAddressContinuation is just a simple String type, this merely returns the current string value.
func (me TxsdAddressContinuation) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Continuation_TxsdAddressContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type TxsdAddress struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Postcode

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Country

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Street

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Linenumbering_TxsdAddressLinenumbering_

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_City

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Otheraddr

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAttr_Continuation_TxsdAddressContinuation_

	XsdGoPkgHasCdata

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Fax

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Phone

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_State

	XsdGoPkgHasElems_Pob
}

//	If the WalkHandlers.TxsdAddress function is not nil (ie. was set by outside code), calls it with this TxsdAddress instance as the single argument. Then calls the Walk() method on 17/35 embed(s) and 0/0 field(s) belonging to this TxsdAddress instance.
func (me *TxsdAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Phone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_State.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pob.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Postcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Street.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Otheraddr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TxsdAddress `xml:"http://docbook.org/ns/docbook address"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Addresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Otherclass_XsdtString_ struct {
	Otherclass xsdt.String `xml:"http://docbook.org/ns/docbook otherclass,attr"`
}

type TxsdOrgnameClass xsdt.Token

//	Returns true if the value of this enumerated TxsdOrgnameClass is "other".
func (me TxsdOrgnameClass) IsOther() bool { return me == "other" }

//	Since TxsdOrgnameClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrgnameClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdOrgnameClass is just a simple String type, this merely returns the current string value.
func (me TxsdOrgnameClass) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdOrgnameClass's alias type xsdt.Token.
func (me TxsdOrgnameClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "corporation".
func (me TxsdOrgnameClass) IsCorporation() bool { return me == "corporation" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "consortium".
func (me TxsdOrgnameClass) IsConsortium() bool { return me == "consortium" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "informal".
func (me TxsdOrgnameClass) IsInformal() bool { return me == "informal" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "nonprofit".
func (me TxsdOrgnameClass) IsNonprofit() bool { return me == "nonprofit" }

type XsdGoPkgHasAttr_Class_TxsdOrgnameClass_ struct {
	Class TxsdOrgnameClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdOrgname struct {
	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Otherclass_XsdtString_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Class_TxsdOrgnameClass_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdOrgname function is not nil (ie. was set by outside code), calls it with this TxsdOrgname instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdOrgname instance.
func (me *TxsdOrgname) Walk() (err error) {
	if fn := WalkHandlers.TxsdOrgname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Orgname struct {
	Orgname *TxsdOrgname `xml:"http://docbook.org/ns/docbook orgname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orgname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orgname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orgname instance.
func (me *XsdGoPkgHasElem_Orgname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Orgname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Errorcode struct {
	Errorcodes []*TxsdLiteral `xml:"http://docbook.org/ns/docbook errorcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errorcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errorcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errorcode instance.
func (me *XsdGoPkgHasElems_Errorcode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Errorcode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errorcodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Def_XsdtString_ struct {
	Def xsdt.String `xml:"http://docbook.org/ns/docbook def,attr"`
}

type TxsdNonterminal struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Def_XsdtString_
}

//	If the WalkHandlers.TxsdNonterminal function is not nil (ie. was set by outside code), calls it with this TxsdNonterminal instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdNonterminal instance.
func (me *TxsdNonterminal) Walk() (err error) {
	if fn := WalkHandlers.TxsdNonterminal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Nonterminal struct {
	Nonterminals []*TxsdNonterminal `xml:"http://docbook.org/ns/docbook nonterminal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nonterminal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nonterminal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nonterminal instance.
func (me *XsdGoPkgHasElems_Nonterminal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Nonterminal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nonterminals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdConstantClass xsdt.Token

//	Since TxsdConstantClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdConstantClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdConstantClass is just a simple String type, this merely returns the current string value.
func (me TxsdConstantClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdConstantClass is "limit".
func (me TxsdConstantClass) IsLimit() bool { return me == "limit" }

//	This convenience method just performs a simple type conversion to TxsdConstantClass's alias type xsdt.Token.
func (me TxsdConstantClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Class_TxsdConstantClass_ struct {
	Class TxsdConstantClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdConstant struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Class_TxsdConstantClass_

	XsdGoPkgHasElems_Inlinemediaobject
}

//	If the WalkHandlers.TxsdConstant function is not nil (ie. was set by outside code), calls it with this TxsdConstant instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdConstant instance.
func (me *TxsdConstant) Walk() (err error) {
	if fn := WalkHandlers.TxsdConstant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Constant struct {
	Constants []*TxsdConstant `xml:"http://docbook.org/ns/docbook constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constant instance.
func (me *XsdGoPkgHasElems_Constant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Constant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Constants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Class_TxsdSymbolClass_ struct {
	Class TxsdConstantClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdSymbol struct {
	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Class_TxsdSymbolClass_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdSymbol function is not nil (ie. was set by outside code), calls it with this TxsdSymbol instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdSymbol instance.
func (me *TxsdSymbol) Walk() (err error) {
	if fn := WalkHandlers.TxsdSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Symbol struct {
	Symbols []*TxsdSymbol `xml:"http://docbook.org/ns/docbook symbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Symbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Symbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Symbol instance.
func (me *XsdGoPkgHasElems_Symbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Symbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Symbols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Markup struct {
	Markups []*TxsdLiteral `xml:"http://docbook.org/ns/docbook markup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Markup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Markup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Markup instance.
func (me *XsdGoPkgHasElems_Markup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Markup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Markups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Option struct {
	Options []*TxsdLiteral `xml:"http://docbook.org/ns/docbook option"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Option instance.
func (me *XsdGoPkgHasElems_Option) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Option; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Options {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Property struct {
	Properties []*TxsdLiteral `xml:"http://docbook.org/ns/docbook property"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Property instance.
func (me *XsdGoPkgHasElems_Property) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Property; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Properties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Envar struct {
	Envars []*TxsdLiteral `xml:"http://docbook.org/ns/docbook envar"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Envar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Envar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Envar instance.
func (me *XsdGoPkgHasElems_Envar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Envar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Envars {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Methodname struct {
	Methodnames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook methodname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodname instance.
func (me *XsdGoPkgHasElems_Methodname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Methodname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methodnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Varname struct {
	Varnames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook varname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varname instance.
func (me *XsdGoPkgHasElems_Varname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Varname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Varnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Initializer struct {
	Initializers []*TxsdLiteral `xml:"http://docbook.org/ns/docbook initializer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Initializer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Initializer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Initializer instance.
func (me *XsdGoPkgHasElems_Initializer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Initializer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Initializers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Function struct {
	Functions []*TxsdLiteral `xml:"http://docbook.org/ns/docbook function"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Function function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Function instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Function instance.
func (me *XsdGoPkgHasElems_Function) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Function; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Functions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdParameterClass xsdt.Token

//	Since TxsdParameterClass is just a simple String type, this merely returns the current string value.
func (me TxsdParameterClass) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdParameterClass's alias type xsdt.Token.
func (me TxsdParameterClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdParameterClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdParameterClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdParameterClass is "command".
func (me TxsdParameterClass) IsCommand() bool { return me == "command" }

//	Returns true if the value of this enumerated TxsdParameterClass is "function".
func (me TxsdParameterClass) IsFunction() bool { return me == "function" }

//	Returns true if the value of this enumerated TxsdParameterClass is "option".
func (me TxsdParameterClass) IsOption() bool { return me == "option" }

type XsdGoPkgHasAttr_Class_TxsdParameterClass_ struct {
	Class TxsdParameterClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdParameter struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Class_TxsdParameterClass_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdParameter function is not nil (ie. was set by outside code), calls it with this TxsdParameter instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdParameter instance.
func (me *TxsdParameter) Walk() (err error) {
	if fn := WalkHandlers.TxsdParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Parameter struct {
	Parameters []*TxsdParameter `xml:"http://docbook.org/ns/docbook parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Parameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Parameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Parameter instance.
func (me *XsdGoPkgHasElems_Parameter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Parameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Parameters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Returnvalue struct {
	Returnvalues []*TxsdLiteral `xml:"http://docbook.org/ns/docbook returnvalue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Returnvalue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Returnvalue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Returnvalue instance.
func (me *XsdGoPkgHasElems_Returnvalue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Returnvalue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Returnvalues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Exceptionname struct {
	Exceptionname *TxsdExceptionname `xml:"http://docbook.org/ns/docbook exceptionname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Exceptionname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Exceptionname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Exceptionname instance.
func (me *XsdGoPkgHasElem_Exceptionname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Exceptionname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOoexception struct {
	XsdGoPkgHasElem_Exceptionname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Modifier
}

//	If the WalkHandlers.TxsdOoexception function is not nil (ie. was set by outside code), calls it with this TxsdOoexception instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOoexception instance.
func (me *TxsdOoexception) Walk() (err error) {
	if fn := WalkHandlers.TxsdOoexception; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ooexception struct {
	Ooexceptions []*TxsdOoexception `xml:"http://docbook.org/ns/docbook ooexception"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ooexception function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ooexception instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ooexception instance.
func (me *XsdGoPkgHasElems_Ooexception) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ooexception; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ooexceptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Interfacename struct {
	Interfacename *TxsdLiteral `xml:"http://docbook.org/ns/docbook interfacename"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Interfacename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Interfacename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Interfacename instance.
func (me *XsdGoPkgHasElem_Interfacename) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Interfacename; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOointerface struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Interfacename
}

//	If the WalkHandlers.TxsdOointerface function is not nil (ie. was set by outside code), calls it with this TxsdOointerface instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOointerface instance.
func (me *TxsdOointerface) Walk() (err error) {
	if fn := WalkHandlers.TxsdOointerface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Oointerface struct {
	Oointerfaces []*TxsdOointerface `xml:"http://docbook.org/ns/docbook oointerface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Oointerface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Oointerface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Oointerface instance.
func (me *XsdGoPkgHasElems_Oointerface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Oointerface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Oointerfaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Interfacename struct {
	Interfacenames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook interfacename"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Interfacename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Interfacename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Interfacename instance.
func (me *XsdGoPkgHasElems_Interfacename) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Interfacename; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Interfacenames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCode struct {
	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Returnvalue
}

//	If the WalkHandlers.TxsdCode function is not nil (ie. was set by outside code), calls it with this TxsdCode instance as the single argument. Then calls the Walk() method on 17/33 embed(s) and 0/0 field(s) belonging to this TxsdCode instance.
func (me *TxsdCode) Walk() (err error) {
	if fn := WalkHandlers.TxsdCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Code struct {
	Codes []*TxsdCode `xml:"http://docbook.org/ns/docbook code"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Code function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Code instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Code instance.
func (me *XsdGoPkgHasElems_Code) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Code; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Codes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guisubmenu struct {
	Guisubmenus []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guisubmenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guisubmenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guisubmenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guisubmenu instance.
func (me *XsdGoPkgHasElems_Guisubmenu) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guisubmenu; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guisubmenus {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystemitemClass xsdt.Token

//	Returns true if the value of this enumerated TxsdSystemitemClass is "username".
func (me TxsdSystemitemClass) IsUsername() bool { return me == "username" }

//	Since TxsdSystemitemClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSystemitemClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "daemon".
func (me TxsdSystemitemClass) IsDaemon() bool { return me == "daemon" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "domainname".
func (me TxsdSystemitemClass) IsDomainname() bool { return me == "domainname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "filesystem".
func (me TxsdSystemitemClass) IsFilesystem() bool { return me == "filesystem" }

//	Since TxsdSystemitemClass is just a simple String type, this merely returns the current string value.
func (me TxsdSystemitemClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "osname".
func (me TxsdSystemitemClass) IsOsname() bool { return me == "osname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "process".
func (me TxsdSystemitemClass) IsProcess() bool { return me == "process" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "newsgroup".
func (me TxsdSystemitemClass) IsNewsgroup() bool { return me == "newsgroup" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "groupname".
func (me TxsdSystemitemClass) IsGroupname() bool { return me == "groupname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "ipaddress".
func (me TxsdSystemitemClass) IsIpaddress() bool { return me == "ipaddress" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "event".
func (me TxsdSystemitemClass) IsEvent() bool { return me == "event" }

//	This convenience method just performs a simple type conversion to TxsdSystemitemClass's alias type xsdt.Token.
func (me TxsdSystemitemClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "etheraddress".
func (me TxsdSystemitemClass) IsEtheraddress() bool { return me == "etheraddress" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "macro".
func (me TxsdSystemitemClass) IsMacro() bool { return me == "macro" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "systemname".
func (me TxsdSystemitemClass) IsSystemname() bool { return me == "systemname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "eventhandler".
func (me TxsdSystemitemClass) IsEventhandler() bool { return me == "eventhandler" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "resource".
func (me TxsdSystemitemClass) IsResource() bool { return me == "resource" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "netmask".
func (me TxsdSystemitemClass) IsNetmask() bool { return me == "netmask" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "protocol".
func (me TxsdSystemitemClass) IsProtocol() bool { return me == "protocol" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "fqdomainname".
func (me TxsdSystemitemClass) IsFqdomainname() bool { return me == "fqdomainname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "service".
func (me TxsdSystemitemClass) IsService() bool { return me == "service" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "server".
func (me TxsdSystemitemClass) IsServer() bool { return me == "server" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "library".
func (me TxsdSystemitemClass) IsLibrary() bool { return me == "library" }

type XsdGoPkgHasAttr_Class_TxsdSystemitemClass_ struct {
	Class TxsdSystemitemClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	Label xsdt.String `xml:"http://docbook.org/ns/docbook label,attr"`
}

type XsdGoPkgHasAttr_Linkends_XsdtIdrefs_ struct {
	Linkends xsdt.Idrefs `xml:"http://docbook.org/ns/docbook linkends,attr"`
}

type TxsdCo struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdCo function is not nil (ie. was set by outside code), calls it with this TxsdCo instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdCo instance.
func (me *TxsdCo) Walk() (err error) {
	if fn := WalkHandlers.TxsdCo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Co struct {
	Cos []*TxsdCo `xml:"http://docbook.org/ns/docbook co"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Co function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Co instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Co instance.
func (me *XsdGoPkgHasElems_Co) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Co; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystemitem struct {
	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Class_TxsdSystemitemClass_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdSystemitem function is not nil (ie. was set by outside code), calls it with this TxsdSystemitem instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TxsdSystemitem instance.
func (me *TxsdSystemitem) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystemitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Systemitem struct {
	Systemitems []*TxsdSystemitem `xml:"http://docbook.org/ns/docbook systemitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Systemitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Systemitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Systemitem instance.
func (me *XsdGoPkgHasElems_Systemitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Systemitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Systemitems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guibutton struct {
	Guibuttons []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guibutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guibutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guibutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guibutton instance.
func (me *XsdGoPkgHasElems_Guibutton) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guibutton; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guibuttons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guimenu struct {
	Guimenus []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guimenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guimenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guimenu instance.
func (me *XsdGoPkgHasElems_Guimenu) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guimenu; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guimenus {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Shortcut struct {
	Shortcut *TxsdShortcut `xml:"http://docbook.org/ns/docbook shortcut"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Shortcut function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shortcut instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Shortcut instance.
func (me *XsdGoPkgHasElem_Shortcut) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Shortcut; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guilabel struct {
	Guilabels []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guilabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guilabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guilabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guilabel instance.
func (me *XsdGoPkgHasElems_Guilabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guilabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guilabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMenuchoice struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElem_Shortcut

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Guiicon
}

//	If the WalkHandlers.TxsdMenuchoice function is not nil (ie. was set by outside code), calls it with this TxsdMenuchoice instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TxsdMenuchoice instance.
func (me *TxsdMenuchoice) Walk() (err error) {
	if fn := WalkHandlers.TxsdMenuchoice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Menuchoice struct {
	Menuchoices []*TxsdMenuchoice `xml:"http://docbook.org/ns/docbook menuchoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Menuchoice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Menuchoice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Menuchoice instance.
func (me *XsdGoPkgHasElems_Menuchoice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Menuchoice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Menuchoices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Personname struct {
	Personname *TxsdPersonname `xml:"http://docbook.org/ns/docbook personname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Personname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Personname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Personname instance.
func (me *XsdGoPkgHasElem_Personname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Personname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Wordasword struct {
	Wordaswords []*TxsdLiteral `xml:"http://docbook.org/ns/docbook wordasword"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Wordasword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Wordasword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Wordasword instance.
func (me *XsdGoPkgHasElems_Wordasword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Wordasword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Wordaswords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Optional struct {
	Optionals []*TxsdLiteral `xml:"http://docbook.org/ns/docbook optional"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Optional function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Optional instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Optional instance.
func (me *XsdGoPkgHasElems_Optional) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Optional; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Optionals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Acronym struct {
	Acronyms []*TxsdAbbrev `xml:"http://docbook.org/ns/docbook acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Acronym instance.
func (me *XsdGoPkgHasElems_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Acronyms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Hardware struct {
	Hardwares []*TxsdLiteral `xml:"http://docbook.org/ns/docbook hardware"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Hardware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Hardware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Hardware instance.
func (me *XsdGoPkgHasElems_Hardware) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Hardware; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Hardwares {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Class_TxsdProductnameClass_ struct {
	Class TxsdTrademarkClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdProductname struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Class_TxsdProductnameClass_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdProductname function is not nil (ie. was set by outside code), calls it with this TxsdProductname instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdProductname instance.
func (me *TxsdProductname) Walk() (err error) {
	if fn := WalkHandlers.TxsdProductname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Productname struct {
	Productnames []*TxsdProductname `xml:"http://docbook.org/ns/docbook productname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productname instance.
func (me *XsdGoPkgHasElems_Productname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Productname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Productnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Orgname struct {
	Orgnames []*TxsdOrgname `xml:"http://docbook.org/ns/docbook orgname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orgname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orgname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orgname instance.
func (me *XsdGoPkgHasElems_Orgname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Orgname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Orgnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Productnumber struct {
	Productnumbers []*TxsdLiteral `xml:"http://docbook.org/ns/docbook productnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productnumber instance.
func (me *XsdGoPkgHasElems_Productnumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Productnumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Productnumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Org struct {
	Org *TxsdOrg `xml:"http://docbook.org/ns/docbook org"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Org function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Org instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Org instance.
func (me *XsdGoPkgHasElem_Org) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Org; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Jobtitle struct {
	Jobtitles []*TxsdLiteral `xml:"http://docbook.org/ns/docbook jobtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Jobtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Jobtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Jobtitle instance.
func (me *XsdGoPkgHasElems_Jobtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Jobtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Jobtitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Shortaffil struct {
	Shortaffil *TxsdLiteral `xml:"http://docbook.org/ns/docbook shortaffil"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Shortaffil function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shortaffil instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Shortaffil instance.
func (me *XsdGoPkgHasElem_Shortaffil) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Shortaffil; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shortaffil.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAffiliation struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Shortaffil

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElem_Org

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Jobtitle
}

//	If the WalkHandlers.TxsdAffiliation function is not nil (ie. was set by outside code), calls it with this TxsdAffiliation instance as the single argument. Then calls the Walk() method on 5/9 embed(s) and 0/0 field(s) belonging to this TxsdAffiliation instance.
func (me *TxsdAffiliation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAffiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Shortaffil.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Affiliation struct {
	Affiliations []*TxsdAffiliation `xml:"http://docbook.org/ns/docbook affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Affiliation instance.
func (me *XsdGoPkgHasElems_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Affiliations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contrib struct {
	Contribs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook contrib"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contrib function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contrib instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contrib instance.
func (me *XsdGoPkgHasElems_Contrib) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contrib; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contribs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAuthor struct {
	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Contrib

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdAuthor function is not nil (ie. was set by outside code), calls it with this TxsdAuthor instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdAuthor instance.
func (me *TxsdAuthor) Walk() (err error) {
	if fn := WalkHandlers.TxsdAuthor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Contrib.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Author struct {
	Authors []*TxsdAuthor `xml:"http://docbook.org/ns/docbook author"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Author instance.
func (me *XsdGoPkgHasElems_Author) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCoref struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdCoref function is not nil (ie. was set by outside code), calls it with this TxsdCoref instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdCoref instance.
func (me *TxsdCoref) Walk() (err error) {
	if fn := WalkHandlers.TxsdCoref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Coref struct {
	Corefs []*TxsdCoref `xml:"http://docbook.org/ns/docbook coref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Coref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Coref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Coref instance.
func (me *XsdGoPkgHasElems_Coref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Coref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Corefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Columns_XsdtNmtoken_ struct {
	Columns xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook columns,attr"`
}

type XsdGoPkgHasElems_Errortext struct {
	Errortexts []*TxsdLiteral `xml:"http://docbook.org/ns/docbook errortext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errortext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errortext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errortext instance.
func (me *XsdGoPkgHasElems_Errortext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Errortext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errortexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDate struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdDate function is not nil (ie. was set by outside code), calls it with this TxsdDate instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdDate instance.
func (me *TxsdDate) Walk() (err error) {
	if fn := WalkHandlers.TxsdDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Date struct {
	Dates []*TxsdDate `xml:"http://docbook.org/ns/docbook date"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Date instance.
func (me *XsdGoPkgHasElems_Date) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Date; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Dates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Footnoteref struct {
	Footnoterefs []*TxsdCoref `xml:"http://docbook.org/ns/docbook footnoteref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Footnoteref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Footnoteref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Footnoteref instance.
func (me *XsdGoPkgHasElems_Footnoteref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Footnoteref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Footnoterefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCitebiblioidClass xsdt.Token

//	Since TxsdCitebiblioidClass is just a simple String type, this merely returns the current string value.
func (me TxsdCitebiblioidClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "issn".
func (me TxsdCitebiblioidClass) IsIssn() bool { return me == "issn" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "isrn".
func (me TxsdCitebiblioidClass) IsIsrn() bool { return me == "isrn" }

//	Since TxsdCitebiblioidClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCitebiblioidClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "pubsnumber".
func (me TxsdCitebiblioidClass) IsPubsnumber() bool { return me == "pubsnumber" }

//	This convenience method just performs a simple type conversion to TxsdCitebiblioidClass's alias type xsdt.Token.
func (me TxsdCitebiblioidClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "doi".
func (me TxsdCitebiblioidClass) IsDoi() bool { return me == "doi" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "other".
func (me TxsdCitebiblioidClass) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "isbn".
func (me TxsdCitebiblioidClass) IsIsbn() bool { return me == "isbn" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "uri".
func (me TxsdCitebiblioidClass) IsUri() bool { return me == "uri" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "libraryofcongress".
func (me TxsdCitebiblioidClass) IsLibraryofcongress() bool { return me == "libraryofcongress" }

type XsdGoPkgHasAttr_Class_TxsdCitebiblioidClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_ struct {
	Otherclass xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherclass,attr"`
}

type TxsdCitebiblioid struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Class_TxsdCitebiblioidClass_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdCitebiblioid function is not nil (ie. was set by outside code), calls it with this TxsdCitebiblioid instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdCitebiblioid instance.
func (me *TxsdCitebiblioid) Walk() (err error) {
	if fn := WalkHandlers.TxsdCitebiblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Citebiblioid struct {
	Citebiblioids []*TxsdCitebiblioid `xml:"http://docbook.org/ns/docbook citebiblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citebiblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citebiblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citebiblioid instance.
func (me *XsdGoPkgHasElems_Citebiblioid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Citebiblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Citebiblioids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDatabaseClass xsdt.Token

//	Returns true if the value of this enumerated TxsdDatabaseClass is "table".
func (me TxsdDatabaseClass) IsTable() bool { return me == "table" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "procedure".
func (me TxsdDatabaseClass) IsProcedure() bool { return me == "procedure" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "field".
func (me TxsdDatabaseClass) IsField() bool { return me == "field" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "key2".
func (me TxsdDatabaseClass) IsKey2() bool { return me == "key2" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "key1".
func (me TxsdDatabaseClass) IsKey1() bool { return me == "key1" }

//	This convenience method just performs a simple type conversion to TxsdDatabaseClass's alias type xsdt.Token.
func (me TxsdDatabaseClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "index".
func (me TxsdDatabaseClass) IsIndex() bool { return me == "index" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "constraint".
func (me TxsdDatabaseClass) IsConstraint() bool { return me == "constraint" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "rule".
func (me TxsdDatabaseClass) IsRule() bool { return me == "rule" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "secondarykey".
func (me TxsdDatabaseClass) IsSecondarykey() bool { return me == "secondarykey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "altkey".
func (me TxsdDatabaseClass) IsAltkey() bool { return me == "altkey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "foreignkey".
func (me TxsdDatabaseClass) IsForeignkey() bool { return me == "foreignkey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "user".
func (me TxsdDatabaseClass) IsUser() bool { return me == "user" }

//	Since TxsdDatabaseClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDatabaseClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "group".
func (me TxsdDatabaseClass) IsGroup() bool { return me == "group" }

//	Since TxsdDatabaseClass is just a simple String type, this merely returns the current string value.
func (me TxsdDatabaseClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "view".
func (me TxsdDatabaseClass) IsView() bool { return me == "view" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "primarykey".
func (me TxsdDatabaseClass) IsPrimarykey() bool { return me == "primarykey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "record".
func (me TxsdDatabaseClass) IsRecord() bool { return me == "record" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "name".
func (me TxsdDatabaseClass) IsName() bool { return me == "name" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "datatype".
func (me TxsdDatabaseClass) IsDatatype() bool { return me == "datatype" }

type XsdGoPkgHasAttr_Class_TxsdDatabaseClass_ struct {
	Class TxsdDatabaseClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdDatabase struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Class_TxsdDatabaseClass_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdDatabase function is not nil (ie. was set by outside code), calls it with this TxsdDatabase instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdDatabase instance.
func (me *TxsdDatabase) Walk() (err error) {
	if fn := WalkHandlers.TxsdDatabase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Database struct {
	Databases []*TxsdDatabase `xml:"http://docbook.org/ns/docbook database"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Database function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Database instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Database instance.
func (me *XsdGoPkgHasElems_Database) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Database; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Databases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Path_XsdtString_ struct {
	Path xsdt.String `xml:"http://docbook.org/ns/docbook path,attr"`
}

type TxsdFilenameClass xsdt.Token

//	Returns true if the value of this enumerated TxsdFilenameClass is "partition".
func (me TxsdFilenameClass) IsPartition() bool { return me == "partition" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "headerfile".
func (me TxsdFilenameClass) IsHeaderfile() bool { return me == "headerfile" }

//	Since TxsdFilenameClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFilenameClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdFilenameClass is just a simple String type, this merely returns the current string value.
func (me TxsdFilenameClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdFilenameClass is "symlink".
func (me TxsdFilenameClass) IsSymlink() bool { return me == "symlink" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "libraryfile".
func (me TxsdFilenameClass) IsLibraryfile() bool { return me == "libraryfile" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "directory".
func (me TxsdFilenameClass) IsDirectory() bool { return me == "directory" }

//	This convenience method just performs a simple type conversion to TxsdFilenameClass's alias type xsdt.Token.
func (me TxsdFilenameClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdFilenameClass is "devicefile".
func (me TxsdFilenameClass) IsDevicefile() bool { return me == "devicefile" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "extension".
func (me TxsdFilenameClass) IsExtension() bool { return me == "extension" }

type XsdGoPkgHasAttr_Class_TxsdFilenameClass_ struct {
	Class TxsdFilenameClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdFilename struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Path_XsdtString_

	XsdGoPkgHasAttr_Class_TxsdFilenameClass_

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt
}

//	If the WalkHandlers.TxsdFilename function is not nil (ie. was set by outside code), calls it with this TxsdFilename instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdFilename instance.
func (me *TxsdFilename) Walk() (err error) {
	if fn := WalkHandlers.TxsdFilename; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Filename struct {
	Filenames []*TxsdFilename `xml:"http://docbook.org/ns/docbook filename"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Filename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Filename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Filename instance.
func (me *XsdGoPkgHasElems_Filename) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Filename; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Filenames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Token struct {
	Tokens []*TxsdLiteral `xml:"http://docbook.org/ns/docbook token"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Token function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Token instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Token instance.
func (me *XsdGoPkgHasElems_Token) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Token; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tokens {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMathphrase struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdMathphrase function is not nil (ie. was set by outside code), calls it with this TxsdMathphrase instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdMathphrase instance.
func (me *TxsdMathphrase) Walk() (err error) {
	if fn := WalkHandlers.TxsdMathphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Mathphrase struct {
	Mathphrases []*TxsdMathphrase `xml:"http://docbook.org/ns/docbook mathphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mathphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mathphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mathphrase instance.
func (me *XsdGoPkgHasElems_Mathphrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Mathphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mathphrases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Alt struct {
	Alt *TxsdAlt `xml:"http://docbook.org/ns/docbook alt"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Alt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Alt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Alt instance.
func (me *XsdGoPkgHasElem_Alt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Alt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInlineequation struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdInlineequation function is not nil (ie. was set by outside code), calls it with this TxsdInlineequation instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TxsdInlineequation instance.
func (me *TxsdInlineequation) Walk() (err error) {
	if fn := WalkHandlers.TxsdInlineequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Mathphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Inlineequation struct {
	Inlineequations []*TxsdInlineequation `xml:"http://docbook.org/ns/docbook inlineequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Inlineequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Inlineequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Inlineequation instance.
func (me *XsdGoPkgHasElems_Inlineequation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Inlineequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inlineequations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrompt struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Co

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdPrompt function is not nil (ie. was set by outside code), calls it with this TxsdPrompt instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdPrompt instance.
func (me *TxsdPrompt) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrompt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Prompt struct {
	Prompts []*TxsdPrompt `xml:"http://docbook.org/ns/docbook prompt"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Prompt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Prompt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Prompt instance.
func (me *XsdGoPkgHasElems_Prompt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Prompt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Prompts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Editor struct {
	Editors []*TxsdAuthor `xml:"http://docbook.org/ns/docbook editor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Editor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Editor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Editor instance.
func (me *XsdGoPkgHasElems_Editor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Editor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Editors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Command struct {
	Commands []*TxsdLiteral `xml:"http://docbook.org/ns/docbook command"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Command function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Command instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Command instance.
func (me *XsdGoPkgHasElems_Command) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Command; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Commands {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdQuote struct {
	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdQuote function is not nil (ie. was set by outside code), calls it with this TxsdQuote instance as the single argument. Then calls the Walk() method on 70/102 embed(s) and 0/0 field(s) belonging to this TxsdQuote instance.
func (me *TxsdQuote) Walk() (err error) {
	if fn := WalkHandlers.TxsdQuote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Quote struct {
	Quotes []*TxsdQuote `xml:"http://docbook.org/ns/docbook quote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Quote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Quote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Quote instance.
func (me *XsdGoPkgHasElems_Quote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Quote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Quotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCitetitlePubwork xsdt.Token

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "section".
func (me TxsdCitetitlePubwork) IsSection() bool { return me == "section" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "cdrom".
func (me TxsdCitetitlePubwork) IsCdrom() bool { return me == "cdrom" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "part".
func (me TxsdCitetitlePubwork) IsPart() bool { return me == "part" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "bbs".
func (me TxsdCitetitlePubwork) IsBbs() bool { return me == "bbs" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "refentry".
func (me TxsdCitetitlePubwork) IsRefentry() bool { return me == "refentry" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "dvd".
func (me TxsdCitetitlePubwork) IsDvd() bool { return me == "dvd" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "series".
func (me TxsdCitetitlePubwork) IsSeries() bool { return me == "series" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "set".
func (me TxsdCitetitlePubwork) IsSet() bool { return me == "set" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "wiki".
func (me TxsdCitetitlePubwork) IsWiki() bool { return me == "wiki" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "journal".
func (me TxsdCitetitlePubwork) IsJournal() bool { return me == "journal" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "book".
func (me TxsdCitetitlePubwork) IsBook() bool { return me == "book" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "newsposting".
func (me TxsdCitetitlePubwork) IsNewsposting() bool { return me == "newsposting" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "chapter".
func (me TxsdCitetitlePubwork) IsChapter() bool { return me == "chapter" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "article".
func (me TxsdCitetitlePubwork) IsArticle() bool { return me == "article" }

//	Since TxsdCitetitlePubwork is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCitetitlePubwork) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "webpage".
func (me TxsdCitetitlePubwork) IsWebpage() bool { return me == "webpage" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "gopher".
func (me TxsdCitetitlePubwork) IsGopher() bool { return me == "gopher" }

//	This convenience method just performs a simple type conversion to TxsdCitetitlePubwork's alias type xsdt.Token.
func (me TxsdCitetitlePubwork) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdCitetitlePubwork is just a simple String type, this merely returns the current string value.
func (me TxsdCitetitlePubwork) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "emailmessage".
func (me TxsdCitetitlePubwork) IsEmailmessage() bool { return me == "emailmessage" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "manuscript".
func (me TxsdCitetitlePubwork) IsManuscript() bool { return me == "manuscript" }

type XsdGoPkgHasAttr_Pubwork_TxsdCitetitlePubwork_ struct {
	Pubwork TxsdCitetitlePubwork `xml:"http://docbook.org/ns/docbook pubwork,attr"`
}

type TxsdCitetitle struct {
	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasAttr_Pubwork_TxsdCitetitlePubwork_
}

//	If the WalkHandlers.TxsdCitetitle function is not nil (ie. was set by outside code), calls it with this TxsdCitetitle instance as the single argument. Then calls the Walk() method on 71/103 embed(s) and 0/0 field(s) belonging to this TxsdCitetitle instance.
func (me *TxsdCitetitle) Walk() (err error) {
	if fn := WalkHandlers.TxsdCitetitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Citetitle struct {
	Citetitles []*TxsdCitetitle `xml:"http://docbook.org/ns/docbook citetitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citetitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citetitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citetitle instance.
func (me *XsdGoPkgHasElems_Citetitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Citetitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Citetitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdForeignphrase struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Author

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject
}

//	If the WalkHandlers.TxsdForeignphrase function is not nil (ie. was set by outside code), calls it with this TxsdForeignphrase instance as the single argument. Then calls the Walk() method on 23/43 embed(s) and 0/0 field(s) belonging to this TxsdForeignphrase instance.
func (me *TxsdForeignphrase) Walk() (err error) {
	if fn := WalkHandlers.TxsdForeignphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Foreignphrase struct {
	Foreignphrases []*TxsdForeignphrase `xml:"http://docbook.org/ns/docbook foreignphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Foreignphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Foreignphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Foreignphrase instance.
func (me *XsdGoPkgHasElems_Foreignphrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Foreignphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Foreignphrases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMember struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Application

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Code

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Mousebutton
}

//	If the WalkHandlers.TxsdMember function is not nil (ie. was set by outside code), calls it with this TxsdMember instance as the single argument. Then calls the Walk() method on 73/102 embed(s) and 0/0 field(s) belonging to this TxsdMember instance.
func (me *TxsdMember) Walk() (err error) {
	if fn := WalkHandlers.TxsdMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Member struct {
	Members []*TxsdMember `xml:"http://docbook.org/ns/docbook member"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Member function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Member instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Member instance.
func (me *XsdGoPkgHasElems_Member) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Member; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Members {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSimplelistType xsdt.Token

//	Since TxsdSimplelistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSimplelistType) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdSimplelistType's alias type xsdt.Token.
func (me TxsdSimplelistType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdSimplelistType is "horiz".
func (me TxsdSimplelistType) IsHoriz() bool { return me == "horiz" }

//	Since TxsdSimplelistType is just a simple String type, this merely returns the current string value.
func (me TxsdSimplelistType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdSimplelistType is "vert".
func (me TxsdSimplelistType) IsVert() bool { return me == "vert" }

//	Returns true if the value of this enumerated TxsdSimplelistType is "inline".
func (me TxsdSimplelistType) IsInline() bool { return me == "inline" }

type XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert struct {
	Type TxsdSimplelistType `xml:"http://docbook.org/ns/docbook type,attr"`
}

//	Returns the default value for Type -- "vert"
func (me XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert) TypeDefault() TxsdSimplelistType {
	return TxsdSimplelistType("vert")
}

type TxsdSimplelist struct {
	XsdGoPkgHasAttr_Columns_XsdtNmtoken_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Member

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert
}

//	If the WalkHandlers.TxsdSimplelist function is not nil (ie. was set by outside code), calls it with this TxsdSimplelist instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSimplelist instance.
func (me *TxsdSimplelist) Walk() (err error) {
	if fn := WalkHandlers.TxsdSimplelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Member.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Simplelist struct {
	Simplelists []*TxsdSimplelist `xml:"http://docbook.org/ns/docbook simplelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplelist instance.
func (me *XsdGoPkgHasElems_Simplelist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Simplelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Simplelists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subtitle struct {
	Subtitles []*TxsdMember `xml:"http://docbook.org/ns/docbook subtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subtitle instance.
func (me *XsdGoPkgHasElems_Subtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subtitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Titleabbrev struct {
	Titleabbrevs []*TxsdMember `xml:"http://docbook.org/ns/docbook titleabbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Titleabbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Titleabbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Titleabbrev instance.
func (me *XsdGoPkgHasElems_Titleabbrev) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Titleabbrev; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titleabbrevs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Mediaobject struct {
	Mediaobject *TxsdMediaobject `xml:"http://docbook.org/ns/docbook mediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Mediaobject instance.
func (me *XsdGoPkgHasElem_Mediaobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Mediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdScreenshot struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Mediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdScreenshot function is not nil (ie. was set by outside code), calls it with this TxsdScreenshot instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdScreenshot instance.
func (me *TxsdScreenshot) Walk() (err error) {
	if fn := WalkHandlers.TxsdScreenshot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Screenshot struct {
	Screenshots []*TxsdScreenshot `xml:"http://docbook.org/ns/docbook screenshot"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screenshot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screenshot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screenshot instance.
func (me *XsdGoPkgHasElems_Screenshot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Screenshot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Screenshots {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Initializer struct {
	Initializer *TxsdLiteral `xml:"http://docbook.org/ns/docbook initializer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Initializer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Initializer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Initializer instance.
func (me *XsdGoPkgHasElem_Initializer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Initializer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Funcparams struct {
	Funcparams *TxsdLiteral `xml:"http://docbook.org/ns/docbook funcparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcparams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcparams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcparams instance.
func (me *XsdGoPkgHasElem_Funcparams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Funcparams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Funcparams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethodparamChoice xsdt.Token

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "opt".
func (me TxsdMethodparamChoice) IsOpt() bool { return me == "opt" }

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "req".
func (me TxsdMethodparamChoice) IsReq() bool { return me == "req" }

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "plain".
func (me TxsdMethodparamChoice) IsPlain() bool { return me == "plain" }

//	Since TxsdMethodparamChoice is just a simple String type, this merely returns the current string value.
func (me TxsdMethodparamChoice) String() string { return xsdt.Token(me).String() }

//	Since TxsdMethodparamChoice is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMethodparamChoice) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdMethodparamChoice's alias type xsdt.Token.
func (me TxsdMethodparamChoice) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "req"
func (me XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("req")
}

type XsdGoPkgHasElem_Parameter struct {
	Parameter *TxsdParameter `xml:"http://docbook.org/ns/docbook parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Parameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Parameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Parameter instance.
func (me *XsdGoPkgHasElem_Parameter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Parameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethodparamRep xsdt.Token

//	Since TxsdMethodparamRep is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMethodparamRep) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdMethodparamRep is "repeat".
func (me TxsdMethodparamRep) IsRepeat() bool { return me == "repeat" }

//	Returns true if the value of this enumerated TxsdMethodparamRep is "norepeat".
func (me TxsdMethodparamRep) IsNorepeat() bool { return me == "norepeat" }

//	Since TxsdMethodparamRep is just a simple String type, this merely returns the current string value.
func (me TxsdMethodparamRep) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMethodparamRep's alias type xsdt.Token.
func (me TxsdMethodparamRep) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type TxsdMethodparam struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElem_Initializer

	XsdGoPkgHasElem_Funcparams

	XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElem_Parameter

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat
}

//	If the WalkHandlers.TxsdMethodparam function is not nil (ie. was set by outside code), calls it with this TxsdMethodparam instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdMethodparam instance.
func (me *TxsdMethodparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdMethodparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Funcparams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Methodparam struct {
	Methodparams []*TxsdMethodparam `xml:"http://docbook.org/ns/docbook methodparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodparam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodparam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodparam instance.
func (me *XsdGoPkgHasElems_Methodparam) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Methodparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methodparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Methodname struct {
	Methodname *TxsdLiteral `xml:"http://docbook.org/ns/docbook methodname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodname instance.
func (me *XsdGoPkgHasElem_Methodname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Methodname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdConstructorsynopsis struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Methodparam

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Methodname

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElem_Void

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Language_XsdtString_
}

//	If the WalkHandlers.TxsdConstructorsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdConstructorsynopsis instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdConstructorsynopsis instance.
func (me *TxsdConstructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdConstructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Void.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodparam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Constructorsynopsis struct {
	Constructorsynopsises []*TxsdConstructorsynopsis `xml:"http://docbook.org/ns/docbook constructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constructorsynopsis instance.
func (me *XsdGoPkgHasElems_Constructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Constructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Constructorsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Phrase struct {
	Phrase *TxsdPhrase `xml:"http://docbook.org/ns/docbook phrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Phrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Phrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Phrase instance.
func (me *XsdGoPkgHasElem_Phrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Phrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Type struct {
	Type *TxsdLiteral `xml:"http://docbook.org/ns/docbook type"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Type function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Type instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Type instance.
func (me *XsdGoPkgHasElem_Type) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Type; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethodsynopsis struct {
	XsdGoPkgHasElem_Void

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Methodname

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Type

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Methodparam

	XsdGoPkgHasElems_Exceptionname
}

//	If the WalkHandlers.TxsdMethodsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdMethodsynopsis instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdMethodsynopsis instance.
func (me *TxsdMethodsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdMethodsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodparam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Void.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Methodsynopsis struct {
	Methodsynopsises []*TxsdMethodsynopsis `xml:"http://docbook.org/ns/docbook methodsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodsynopsis instance.
func (me *XsdGoPkgHasElems_Methodsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Methodsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methodsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Funcparams struct {
	Funcparamses []*TxsdLiteral `xml:"http://docbook.org/ns/docbook funcparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcparams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcparams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcparams instance.
func (me *XsdGoPkgHasElems_Funcparams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Funcparams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Funcparamses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdParamdefChoice xsdt.Token

//	Since TxsdParamdefChoice is just a simple String type, this merely returns the current string value.
func (me TxsdParamdefChoice) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdParamdefChoice's alias type xsdt.Token.
func (me TxsdParamdefChoice) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdParamdefChoice is "req".
func (me TxsdParamdefChoice) IsReq() bool { return me == "req" }

//	Since TxsdParamdefChoice is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdParamdefChoice) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdParamdefChoice is "opt".
func (me TxsdParamdefChoice) IsOpt() bool { return me == "opt" }

type XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt struct {
	Choice TxsdParamdefChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt) ChoiceDefault() TxsdParamdefChoice {
	return TxsdParamdefChoice("opt")
}

type TxsdParamdef struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Funcparams

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Phrase
}

//	If the WalkHandlers.TxsdParamdef function is not nil (ie. was set by outside code), calls it with this TxsdParamdef instance as the single argument. Then calls the Walk() method on 9/23 embed(s) and 0/0 field(s) belonging to this TxsdParamdef instance.
func (me *TxsdParamdef) Walk() (err error) {
	if fn := WalkHandlers.TxsdParamdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcparams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Paramdef struct {
	Paramdefs []*TxsdParamdef `xml:"http://docbook.org/ns/docbook paramdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Paramdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Paramdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Paramdef instance.
func (me *XsdGoPkgHasElems_Paramdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Paramdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paramdefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Varargs struct {
	Varargs *TxsdVoid `xml:"http://docbook.org/ns/docbook varargs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varargs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varargs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varargs instance.
func (me *XsdGoPkgHasElem_Varargs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Varargs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Varargs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFuncdef struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Function

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref
}

//	If the WalkHandlers.TxsdFuncdef function is not nil (ie. was set by outside code), calls it with this TxsdFuncdef instance as the single argument. Then calls the Walk() method on 7/20 embed(s) and 0/0 field(s) belonging to this TxsdFuncdef instance.
func (me *TxsdFuncdef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFuncdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Funcdef struct {
	Funcdef *TxsdFuncdef `xml:"http://docbook.org/ns/docbook funcdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcdef instance.
func (me *XsdGoPkgHasElem_Funcdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Funcdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Funcdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFuncprototype struct {
	XsdGoPkgHasElems_Paramdef

	XsdGoPkgHasElem_Varargs

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Void

	XsdGoPkgHasElem_Funcdef

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdFuncprototype function is not nil (ie. was set by outside code), calls it with this TxsdFuncprototype instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdFuncprototype instance.
func (me *TxsdFuncprototype) Walk() (err error) {
	if fn := WalkHandlers.TxsdFuncprototype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Paramdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Varargs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Void.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Funcdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Funcprototype struct {
	Funcprototypes []*TxsdFuncprototype `xml:"http://docbook.org/ns/docbook funcprototype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcprototype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcprototype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcprototype instance.
func (me *XsdGoPkgHasElems_Funcprototype) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Funcprototype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Funcprototypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Continuation_TxsdFuncsynopsisinfoContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasElems_Info struct {
	Infos []*TxsdInfo `xml:"http://docbook.org/ns/docbook info"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Info function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Info instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Info instance.
func (me *XsdGoPkgHasElems_Info) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Info; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Linenumbering_TxsdFuncsynopsisinfoLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type XsdGoPkgHasElems_Lineannotation struct {
	Lineannotations []*TxsdLiteral `xml:"http://docbook.org/ns/docbook lineannotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lineannotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lineannotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lineannotation instance.
func (me *XsdGoPkgHasElems_Lineannotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lineannotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lineannotations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFuncsynopsisinfo struct {
	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Linenumbering_TxsdFuncsynopsisinfoLinenumbering_

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasAttr_Continuation_TxsdFuncsynopsisinfoContinuation_

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Hardware

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Editor
}

//	If the WalkHandlers.TxsdFuncsynopsisinfo function is not nil (ie. was set by outside code), calls it with this TxsdFuncsynopsisinfo instance as the single argument. Then calls the Walk() method on 76/111 embed(s) and 0/0 field(s) belonging to this TxsdFuncsynopsisinfo instance.
func (me *TxsdFuncsynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdFuncsynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Funcsynopsisinfo struct {
	Funcsynopsisinfos []*TxsdFuncsynopsisinfo `xml:"http://docbook.org/ns/docbook funcsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcsynopsisinfo instance.
func (me *XsdGoPkgHasElems_Funcsynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Funcsynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Funcsynopsisinfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFuncsynopsis struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Funcprototype

	XsdGoPkgHasElems_Funcsynopsisinfo
}

//	If the WalkHandlers.TxsdFuncsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdFuncsynopsis instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFuncsynopsis instance.
func (me *TxsdFuncsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdFuncsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Funcprototype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsisinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Funcsynopsis struct {
	Funcsynopsises []*TxsdFuncsynopsis `xml:"http://docbook.org/ns/docbook funcsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcsynopsis instance.
func (me *XsdGoPkgHasElems_Funcsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Funcsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Funcsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Continuation_TxsdLiterallayoutContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type TxsdLiterallayoutClass xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdLiterallayoutClass's alias type xsdt.Token.
func (me TxsdLiterallayoutClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdLiterallayoutClass is "normal".
func (me TxsdLiterallayoutClass) IsNormal() bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdLiterallayoutClass is "monospaced".
func (me TxsdLiterallayoutClass) IsMonospaced() bool { return me == "monospaced" }

//	Since TxsdLiterallayoutClass is just a simple String type, this merely returns the current string value.
func (me TxsdLiterallayoutClass) String() string { return xsdt.Token(me).String() }

//	Since TxsdLiterallayoutClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLiterallayoutClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdLiterallayoutClass_ struct {
	Class TxsdLiterallayoutClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdLiterallayoutLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdLiterallayout struct {
	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAttr_Class_TxsdLiterallayoutClass_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Computeroutput

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Linenumbering_TxsdLiterallayoutLinenumbering_

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAttr_Continuation_TxsdLiterallayoutContinuation_
}

//	If the WalkHandlers.TxsdLiterallayout function is not nil (ie. was set by outside code), calls it with this TxsdLiterallayout instance as the single argument. Then calls the Walk() method on 76/112 embed(s) and 0/0 field(s) belonging to this TxsdLiterallayout instance.
func (me *TxsdLiterallayout) Walk() (err error) {
	if fn := WalkHandlers.TxsdLiterallayout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Literallayout struct {
	Literallayouts []*TxsdLiterallayout `xml:"http://docbook.org/ns/docbook literallayout"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Literallayout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Literallayout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Literallayout instance.
func (me *XsdGoPkgHasElems_Literallayout) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Literallayout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Literallayouts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAttribution struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Citation
}

//	If the WalkHandlers.TxsdAttribution function is not nil (ie. was set by outside code), calls it with this TxsdAttribution instance as the single argument. Then calls the Walk() method on 7/22 embed(s) and 0/0 field(s) belonging to this TxsdAttribution instance.
func (me *TxsdAttribution) Walk() (err error) {
	if fn := WalkHandlers.TxsdAttribution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Attribution struct {
	Attribution *TxsdAttribution `xml:"http://docbook.org/ns/docbook attribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Attribution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Attribution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Attribution instance.
func (me *XsdGoPkgHasElem_Attribution) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Attribution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attribution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Para struct {
	Para *TxsdPara `xml:"http://docbook.org/ns/docbook para"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Para function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Para instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Para instance.
func (me *XsdGoPkgHasElem_Para) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Para; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFormalpara struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElem_Para

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdFormalpara function is not nil (ie. was set by outside code), calls it with this TxsdFormalpara instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdFormalpara instance.
func (me *TxsdFormalpara) Walk() (err error) {
	if fn := WalkHandlers.TxsdFormalpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Formalpara struct {
	Formalparas []*TxsdFormalpara `xml:"http://docbook.org/ns/docbook formalpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Formalpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Formalpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Formalpara instance.
func (me *XsdGoPkgHasElems_Formalpara) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Formalpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Formalparas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEpigraph struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Attribution

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simpara
}

//	If the WalkHandlers.TxsdEpigraph function is not nil (ie. was set by outside code), calls it with this TxsdEpigraph instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TxsdEpigraph instance.
func (me *TxsdEpigraph) Walk() (err error) {
	if fn := WalkHandlers.TxsdEpigraph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Attribution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Epigraph struct {
	Epigraphs []*TxsdEpigraph `xml:"http://docbook.org/ns/docbook epigraph"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Epigraph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Epigraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Epigraph instance.
func (me *XsdGoPkgHasElems_Epigraph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Epigraph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Epigraphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Style_XsdtString_ struct {
	Style xsdt.String `xml:"http://docbook.org/ns/docbook style,attr"`
}

type XsdGoPkgHasAttr_Onclick_XsdtString_ struct {
	Onclick xsdt.String `xml:"http://docbook.org/ns/docbook onclick,attr"`
}

type XsdGoPkgHasAttr_Floatstyle_XsdtString_ struct {
	Floatstyle xsdt.String `xml:"http://docbook.org/ns/docbook floatstyle,attr"`
}

type TxsdTgroupAlign xsdt.Token

//	Returns true if the value of this enumerated TxsdTgroupAlign is "justify".
func (me TxsdTgroupAlign) IsJustify() bool { return me == "justify" }

//	Returns true if the value of this enumerated TxsdTgroupAlign is "left".
func (me TxsdTgroupAlign) IsLeft() bool { return me == "left" }

//	Since TxsdTgroupAlign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTgroupAlign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTgroupAlign is "char".
func (me TxsdTgroupAlign) IsChar() bool { return me == "char" }

//	This convenience method just performs a simple type conversion to TxsdTgroupAlign's alias type xsdt.Token.
func (me TxsdTgroupAlign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdTgroupAlign is just a simple String type, this merely returns the current string value.
func (me TxsdTgroupAlign) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTgroupAlign is "center".
func (me TxsdTgroupAlign) IsCenter() bool { return me == "center" }

//	Returns true if the value of this enumerated TxsdTgroupAlign is "right".
func (me TxsdTgroupAlign) IsRight() bool { return me == "right" }

type XsdGoPkgHasAttr_Align_TxsdTgroupAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Tgroupstyle_XsdtString_ struct {
	Tgroupstyle xsdt.String `xml:"http://docbook.org/ns/docbook tgroupstyle,attr"`
}

type XsdGoPkgHasAttr_Charoff_XsdtString_ struct {
	Charoff xsdt.String `xml:"http://docbook.org/ns/docbook charoff,attr"`
}

type XsdGoPkgHasAttr_Namest_XsdtString_ struct {
	Namest xsdt.String `xml:"http://docbook.org/ns/docbook namest,attr"`
}

type XsdGoPkgHasAttr_Char_XsdtString_ struct {
	Char xsdt.String `xml:"http://docbook.org/ns/docbook char,attr"`
}

type TxsdSpanspecRowsep xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdSpanspecRowsep's alias type xsdt.Token.
func (me TxsdSpanspecRowsep) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdSpanspecRowsep is "1".
func (me TxsdSpanspecRowsep) Is1() bool { return me == "1" }

//	Returns true if the value of this enumerated TxsdSpanspecRowsep is "0".
func (me TxsdSpanspecRowsep) Is0() bool { return me == "0" }

//	Since TxsdSpanspecRowsep is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpanspecRowsep) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdSpanspecRowsep is just a simple String type, this merely returns the current string value.
func (me TxsdSpanspecRowsep) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Rowsep_TxsdSpanspecRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Spanname_XsdtString_ struct {
	Spanname xsdt.String `xml:"http://docbook.org/ns/docbook spanname,attr"`
}

type XsdGoPkgHasAttr_Nameend_XsdtString_ struct {
	Nameend xsdt.String `xml:"http://docbook.org/ns/docbook nameend,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdSpanspecAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdSpanspecColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type TxsdSpanspec struct {
	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Rowsep_TxsdSpanspecRowsep_

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdSpanspecAlign_

	XsdGoPkgHasAttr_Colsep_TxsdSpanspecColsep_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSpanspec function is not nil (ie. was set by outside code), calls it with this TxsdSpanspec instance as the single argument. Then calls the Walk() method on 0/11 embed(s) and 0/0 field(s) belonging to this TxsdSpanspec instance.
func (me *TxsdSpanspec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Spanspec struct {
	Spanspecs []*TxsdSpanspec `xml:"http://docbook.org/ns/docbook spanspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Spanspec instance.
func (me *XsdGoPkgHasElems_Spanspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Spanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Spanspecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Rowsep_TxsdTgroupRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdTgroupColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Onmouseout_XsdtString_ struct {
	Onmouseout xsdt.String `xml:"http://docbook.org/ns/docbook onmouseout,attr"`
}

type XsdGoPkgHasAttr_Class_XsdtString_ struct {
	Class xsdt.String `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Title_XsdtString_ struct {
	Title xsdt.String `xml:"http://docbook.org/ns/docbook title,attr"`
}

type XsdGoPkgHasAttr_Onkeyup_XsdtString_ struct {
	Onkeyup xsdt.String `xml:"http://docbook.org/ns/docbook onkeyup,attr"`
}

type XsdGoPkgHasAttr_Onkeydown_XsdtString_ struct {
	Onkeydown xsdt.String `xml:"http://docbook.org/ns/docbook onkeydown,attr"`
}

type XsdGoPkgHasAttr_Colnum_XsdtNmtoken_ struct {
	Colnum xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook colnum,attr"`
}

type XsdGoPkgHasAttr_Colwidth_XsdtString_ struct {
	Colwidth xsdt.String `xml:"http://docbook.org/ns/docbook colwidth,attr"`
}

type XsdGoPkgHasAttr_Colname_XsdtString_ struct {
	Colname xsdt.String `xml:"http://docbook.org/ns/docbook colname,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdColspecColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdColspecRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdColspecAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdColspec struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Colnum_XsdtNmtoken_

	XsdGoPkgHasAttr_Colwidth_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdColspecColsep_

	XsdGoPkgHasAttr_Rowsep_TxsdColspecRowsep_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Align_TxsdColspecAlign_

	XsdGoPkgHasAttr_Charoff_XsdtString_
}

//	If the WalkHandlers.TxsdColspec function is not nil (ie. was set by outside code), calls it with this TxsdColspec instance as the single argument. Then calls the Walk() method on 0/11 embed(s) and 0/0 field(s) belonging to this TxsdColspec instance.
func (me *TxsdColspec) Walk() (err error) {
	if fn := WalkHandlers.TxsdColspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Colspec struct {
	Colspecs []*TxsdColspec `xml:"http://docbook.org/ns/docbook colspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colspec instance.
func (me *XsdGoPkgHasElems_Colspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Colspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colspecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Ondblclick_XsdtString_ struct {
	Ondblclick xsdt.String `xml:"http://docbook.org/ns/docbook ondblclick,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTfootAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Lang_XsdtString_ struct {
	Lang xsdt.String `xml:"http://docbook.org/ns/docbook lang,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdEntrytblColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Cols_XsdtNmtoken_ struct {
	Cols xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook cols,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdEntrytblRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Onmousemove_XsdtString_ struct {
	Onmousemove xsdt.String `xml:"http://docbook.org/ns/docbook onmousemove,attr"`
}

type XsdGoPkgHasAttr_Onmousedown_XsdtString_ struct {
	Onmousedown xsdt.String `xml:"http://docbook.org/ns/docbook onmousedown,attr"`
}

type XsdGoPkgHasElems_Productionrecap struct {
	Productionrecaps []*TxsdVoid `xml:"http://docbook.org/ns/docbook productionrecap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productionrecap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productionrecap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productionrecap instance.
func (me *XsdGoPkgHasElems_Productionrecap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Productionrecap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Productionrecaps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Lhs struct {
	Lhs *TxsdDate `xml:"http://docbook.org/ns/docbook lhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lhs instance.
func (me *XsdGoPkgHasElem_Lhs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lhs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lhs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Constraint struct {
	Constraints []*TxsdVoid `xml:"http://docbook.org/ns/docbook constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constraint instance.
func (me *XsdGoPkgHasElems_Constraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Constraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Constraints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sbr struct {
	Sbrs []*TxsdAnchor `xml:"http://docbook.org/ns/docbook sbr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sbr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sbr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sbr instance.
func (me *XsdGoPkgHasElems_Sbr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sbr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sbrs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRhs struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdRhs function is not nil (ie. was set by outside code), calls it with this TxsdRhs instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRhs instance.
func (me *TxsdRhs) Walk() (err error) {
	if fn := WalkHandlers.TxsdRhs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sbr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Rhs struct {
	Rhs *TxsdRhs `xml:"http://docbook.org/ns/docbook rhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Rhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rhs instance.
func (me *XsdGoPkgHasElem_Rhs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Rhs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rhs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProduction struct {
	XsdGoPkgHasElem_Lhs

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constraint

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Rhs
}

//	If the WalkHandlers.TxsdProduction function is not nil (ie. was set by outside code), calls it with this TxsdProduction instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdProduction instance.
func (me *TxsdProduction) Walk() (err error) {
	if fn := WalkHandlers.TxsdProduction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Rhs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Lhs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Production struct {
	Productions []*TxsdProduction `xml:"http://docbook.org/ns/docbook production"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Production function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Production instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Production instance.
func (me *XsdGoPkgHasElems_Production) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Production; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Productions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProductionset struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Productionrecap

	XsdGoPkgHasElems_Production

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdProductionset function is not nil (ie. was set by outside code), calls it with this TxsdProductionset instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdProductionset instance.
func (me *TxsdProductionset) Walk() (err error) {
	if fn := WalkHandlers.TxsdProductionset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionrecap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Production.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Productionset struct {
	Productionsets []*TxsdProductionset `xml:"http://docbook.org/ns/docbook productionset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productionset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productionset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productionset instance.
func (me *XsdGoPkgHasElems_Productionset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Productionset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Productionsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Width_XsdtNmtoken_ struct {
	Width xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook width,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdProgramlistingContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdProgramlistingLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdProgramlisting struct {
	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAttr_Continuation_TxsdProgramlistingContinuation_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAttr_Linenumbering_TxsdProgramlistingLinenumbering_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Property

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Alt
}

//	If the WalkHandlers.TxsdProgramlisting function is not nil (ie. was set by outside code), calls it with this TxsdProgramlisting instance as the single argument. Then calls the Walk() method on 76/112 embed(s) and 0/0 field(s) belonging to this TxsdProgramlisting instance.
func (me *TxsdProgramlisting) Walk() (err error) {
	if fn := WalkHandlers.TxsdProgramlisting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Programlisting struct {
	Programlistings []*TxsdProgramlisting `xml:"http://docbook.org/ns/docbook programlisting"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Programlisting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Programlisting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Programlisting instance.
func (me *XsdGoPkgHasElems_Programlisting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Programlisting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Programlistings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Synopfragmentref struct {
	Synopfragmentrefs []*TxsdDate `xml:"http://docbook.org/ns/docbook synopfragmentref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopfragmentref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopfragmentref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopfragmentref instance.
func (me *XsdGoPkgHasElems_Synopfragmentref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Synopfragmentref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Synopfragmentrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("opt")
}

type XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("opt")
}

type XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type TxsdArg struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Synopfragmentref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Group
}

//	If the WalkHandlers.TxsdArg function is not nil (ie. was set by outside code), calls it with this TxsdArg instance as the single argument. Then calls the Walk() method on 8/25 embed(s) and 0/0 field(s) belonging to this TxsdArg instance.
func (me *TxsdArg) Walk() (err error) {
	if fn := WalkHandlers.TxsdArg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sbr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopfragmentref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Arg struct {
	Args []*TxsdArg `xml:"http://docbook.org/ns/docbook arg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arg instance.
func (me *XsdGoPkgHasElems_Arg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Arg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Args {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGroup struct {
	XsdGoPkgHasElems_Option

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Synopfragmentref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat

	XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasElems_Group

	XsdGoPkgHasElems_Arg
}

//	If the WalkHandlers.TxsdGroup function is not nil (ie. was set by outside code), calls it with this TxsdGroup instance as the single argument. Then calls the Walk() method on 4/11 embed(s) and 0/0 field(s) belonging to this TxsdGroup instance.
func (me *TxsdGroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopfragmentref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sbr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Arg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Group struct {
	Groups []*TxsdGroup `xml:"http://docbook.org/ns/docbook group"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Group instance.
func (me *XsdGoPkgHasElems_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Groups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Sepchar_XsdtString_ struct {
	Sepchar xsdt.String `xml:"http://docbook.org/ns/docbook sepchar,attr"`
}

type XsdGoPkgHasAttr_Cmdlength_XsdtString_ struct {
	Cmdlength xsdt.String `xml:"http://docbook.org/ns/docbook cmdlength,attr"`
}

type TxsdSynopfragment struct {
	XsdGoPkgHasElems_Arg

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Group
}

//	If the WalkHandlers.TxsdSynopfragment function is not nil (ie. was set by outside code), calls it with this TxsdSynopfragment instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdSynopfragment instance.
func (me *TxsdSynopfragment) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynopfragment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Arg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Synopfragment struct {
	Synopfragments []*TxsdSynopfragment `xml:"http://docbook.org/ns/docbook synopfragment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopfragment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopfragment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopfragment instance.
func (me *XsdGoPkgHasElems_Synopfragment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Synopfragment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Synopfragments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCmdsynopsis struct {
	XsdGoPkgHasAttr_Cmdlength_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Synopfragment

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Group

	XsdGoPkgHasAttr_Sepchar_XsdtString_
}

//	If the WalkHandlers.TxsdCmdsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdCmdsynopsis instance as the single argument. Then calls the Walk() method on 5/12 embed(s) and 0/0 field(s) belonging to this TxsdCmdsynopsis instance.
func (me *TxsdCmdsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdCmdsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Arg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sbr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopfragment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Cmdsynopsis struct {
	Cmdsynopsises []*TxsdCmdsynopsis `xml:"http://docbook.org/ns/docbook cmdsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cmdsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cmdsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cmdsynopsis instance.
func (me *XsdGoPkgHasElems_Cmdsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cmdsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cmdsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Otherrenderas_XsdtNmtoken_ struct {
	Otherrenderas xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherrenderas,attr"`
}

type TxsdBridgeheadRenderas xsdt.Token

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect3".
func (me TxsdBridgeheadRenderas) IsSect3() bool { return me == "sect3" }

//	Since TxsdBridgeheadRenderas is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBridgeheadRenderas) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "other".
func (me TxsdBridgeheadRenderas) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect4".
func (me TxsdBridgeheadRenderas) IsSect4() bool { return me == "sect4" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect5".
func (me TxsdBridgeheadRenderas) IsSect5() bool { return me == "sect5" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect2".
func (me TxsdBridgeheadRenderas) IsSect2() bool { return me == "sect2" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect1".
func (me TxsdBridgeheadRenderas) IsSect1() bool { return me == "sect1" }

//	This convenience method just performs a simple type conversion to TxsdBridgeheadRenderas's alias type xsdt.Token.
func (me TxsdBridgeheadRenderas) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdBridgeheadRenderas is just a simple String type, this merely returns the current string value.
func (me TxsdBridgeheadRenderas) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Renderas_TxsdBridgeheadRenderas_ struct {
	Renderas TxsdBridgeheadRenderas `xml:"http://docbook.org/ns/docbook renderas,attr"`
}

type TxsdBridgehead struct {
	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasAttr_Renderas_TxsdBridgeheadRenderas_

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasAttr_Otherrenderas_XsdtNmtoken_

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdBridgehead function is not nil (ie. was set by outside code), calls it with this TxsdBridgehead instance as the single argument. Then calls the Walk() method on 73/104 embed(s) and 0/0 field(s) belonging to this TxsdBridgehead instance.
func (me *TxsdBridgehead) Walk() (err error) {
	if fn := WalkHandlers.TxsdBridgehead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bridgehead struct {
	Bridgeheads []*TxsdBridgehead `xml:"http://docbook.org/ns/docbook bridgehead"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bridgehead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bridgehead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bridgehead instance.
func (me *XsdGoPkgHasElems_Bridgehead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bridgehead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bridgeheads {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Varname struct {
	Varname *TxsdLiteral `xml:"http://docbook.org/ns/docbook varname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varname instance.
func (me *XsdGoPkgHasElem_Varname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Varname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFieldsynopsis struct {
	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElem_Varname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Type

	XsdGoPkgHasElem_Initializer
}

//	If the WalkHandlers.TxsdFieldsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdFieldsynopsis instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdFieldsynopsis instance.
func (me *TxsdFieldsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdFieldsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fieldsynopsis struct {
	Fieldsynopsises []*TxsdFieldsynopsis `xml:"http://docbook.org/ns/docbook fieldsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fieldsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fieldsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fieldsynopsis instance.
func (me *XsdGoPkgHasElems_Fieldsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fieldsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fieldsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Programlisting struct {
	Programlisting *TxsdProgramlisting `xml:"http://docbook.org/ns/docbook programlisting"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Programlisting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Programlisting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Programlisting instance.
func (me *XsdGoPkgHasElem_Programlisting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Programlisting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAreasetUnits xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdAreasetUnits's alias type xsdt.Token.
func (me TxsdAreasetUnits) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdAreasetUnits is "linecolumn".
func (me TxsdAreasetUnits) IsLinecolumn() bool { return me == "linecolumn" }

//	Returns true if the value of this enumerated TxsdAreasetUnits is "linecolumnpair".
func (me TxsdAreasetUnits) IsLinecolumnpair() bool { return me == "linecolumnpair" }

//	Since TxsdAreasetUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAreasetUnits) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdAreasetUnits is "linerange".
func (me TxsdAreasetUnits) IsLinerange() bool { return me == "linerange" }

//	Since TxsdAreasetUnits is just a simple String type, this merely returns the current string value.
func (me TxsdAreasetUnits) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdAreasetUnits is "other".
func (me TxsdAreasetUnits) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdAreasetUnits is "calspair".
func (me TxsdAreasetUnits) IsCalspair() bool { return me == "calspair" }

type XsdGoPkgHasAttr_Units_TxsdAreasetUnits_ struct {
	Units TxsdAreasetUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type XsdGoPkgHasAttr_Coords_XsdtString_ struct {
	Coords xsdt.String `xml:"http://docbook.org/ns/docbook coords,attr"`
}

type XsdGoPkgHasAttr_Units_TxsdAreaUnits_ struct {
	Units TxsdAreasetUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_ struct {
	Otherunits xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherunits,attr"`
}

type TxsdArea struct {
	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasAttr_Coords_XsdtString_

	XsdGoPkgHasAttr_Units_TxsdAreaUnits_

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdArea function is not nil (ie. was set by outside code), calls it with this TxsdArea instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdArea instance.
func (me *TxsdArea) Walk() (err error) {
	if fn := WalkHandlers.TxsdArea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Area struct {
	Areas []*TxsdArea `xml:"http://docbook.org/ns/docbook area"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Area instance.
func (me *XsdGoPkgHasElems_Area) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Area; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Areas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAreaset struct {
	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Units_TxsdAreasetUnits_

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Area

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdAreaset function is not nil (ie. was set by outside code), calls it with this TxsdAreaset instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdAreaset instance.
func (me *TxsdAreaset) Walk() (err error) {
	if fn := WalkHandlers.TxsdAreaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Area.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Areaset struct {
	Areasets []*TxsdAreaset `xml:"http://docbook.org/ns/docbook areaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Areaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Areaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Areaset instance.
func (me *XsdGoPkgHasElems_Areaset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Areaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Areasets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Units_TxsdAreaspecUnits_ struct {
	Units TxsdAreasetUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type TxsdAreaspec struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Area

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Areaset

	XsdGoPkgHasAttr_Units_TxsdAreaspecUnits_
}

//	If the WalkHandlers.TxsdAreaspec function is not nil (ie. was set by outside code), calls it with this TxsdAreaspec instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdAreaspec instance.
func (me *TxsdAreaspec) Walk() (err error) {
	if fn := WalkHandlers.TxsdAreaspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Area.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Areaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Areaspec struct {
	Areaspec *TxsdAreaspec `xml:"http://docbook.org/ns/docbook areaspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Areaspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Areaspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Areaspec instance.
func (me *XsdGoPkgHasElem_Areaspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Areaspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Areaspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProgramlistingco struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Programlisting
}

//	If the WalkHandlers.TxsdProgramlistingco function is not nil (ie. was set by outside code), calls it with this TxsdProgramlistingco instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdProgramlistingco instance.
func (me *TxsdProgramlistingco) Walk() (err error) {
	if fn := WalkHandlers.TxsdProgramlistingco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Areaspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Programlistingco struct {
	Programlistingcos []*TxsdProgramlistingco `xml:"http://docbook.org/ns/docbook programlistingco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Programlistingco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Programlistingco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Programlistingco instance.
func (me *XsdGoPkgHasElems_Programlistingco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Programlistingco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Programlistingcos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInformalequation struct {
	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdInformalequation function is not nil (ie. was set by outside code), calls it with this TxsdInformalequation instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdInformalequation instance.
func (me *TxsdInformalequation) Walk() (err error) {
	if fn := WalkHandlers.TxsdInformalequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Mathphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Informalequation struct {
	Informalequations []*TxsdInformalequation `xml:"http://docbook.org/ns/docbook informalequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalequation instance.
func (me *XsdGoPkgHasElems_Informalequation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Informalequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Informalequations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Segtitle struct {
	Segtitles []*TxsdMember `xml:"http://docbook.org/ns/docbook segtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Segtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Segtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Segtitle instance.
func (me *XsdGoPkgHasElems_Segtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Segtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Segtitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Seg struct {
	Segs []*TxsdMember `xml:"http://docbook.org/ns/docbook seg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seg instance.
func (me *XsdGoPkgHasElems_Seg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Segs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSeglistitem struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Seg
}

//	If the WalkHandlers.TxsdSeglistitem function is not nil (ie. was set by outside code), calls it with this TxsdSeglistitem instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdSeglistitem instance.
func (me *TxsdSeglistitem) Walk() (err error) {
	if fn := WalkHandlers.TxsdSeglistitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Seg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Seglistitem struct {
	Seglistitems []*TxsdSeglistitem `xml:"http://docbook.org/ns/docbook seglistitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seglistitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seglistitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seglistitem instance.
func (me *XsdGoPkgHasElems_Seglistitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seglistitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Seglistitems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSegmentedlist struct {
	XsdGoPkgHasElems_Segtitle

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Seglistitem

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdSegmentedlist function is not nil (ie. was set by outside code), calls it with this TxsdSegmentedlist instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdSegmentedlist instance.
func (me *TxsdSegmentedlist) Walk() (err error) {
	if fn := WalkHandlers.TxsdSegmentedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Seglistitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Segmentedlist struct {
	Segmentedlists []*TxsdSegmentedlist `xml:"http://docbook.org/ns/docbook segmentedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Segmentedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Segmentedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Segmentedlist instance.
func (me *XsdGoPkgHasElems_Segmentedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Segmentedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Segmentedlists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdItemizedlistSpacing xsdt.Token

//	Returns true if the value of this enumerated TxsdItemizedlistSpacing is "compact".
func (me TxsdItemizedlistSpacing) IsCompact() bool { return me == "compact" }

//	Since TxsdItemizedlistSpacing is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdItemizedlistSpacing) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdItemizedlistSpacing is just a simple String type, this merely returns the current string value.
func (me TxsdItemizedlistSpacing) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdItemizedlistSpacing's alias type xsdt.Token.
func (me TxsdItemizedlistSpacing) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdItemizedlistSpacing is "normal".
func (me TxsdItemizedlistSpacing) IsNormal() bool { return me == "normal" }

type XsdGoPkgHasAttr_Spacing_TxsdItemizedlistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdTableColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type TxsdTableRowheader xsdt.Token

//	Returns true if the value of this enumerated TxsdTableRowheader is "firstcol".
func (me TxsdTableRowheader) IsFirstcol() bool { return me == "firstcol" }

//	This convenience method just performs a simple type conversion to TxsdTableRowheader's alias type xsdt.Token.
func (me TxsdTableRowheader) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdTableRowheader is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableRowheader) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTableRowheader is "norowheader".
func (me TxsdTableRowheader) IsNorowheader() bool { return me == "norowheader" }

//	Since TxsdTableRowheader is just a simple String type, this merely returns the current string value.
func (me TxsdTableRowheader) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Rowheader_TxsdTableRowheader_ struct {
	Rowheader TxsdTableRowheader `xml:"http://docbook.org/ns/docbook rowheader,attr"`
}

type XsdGoPkgHasAttr_Width_XsdtString_ struct {
	Width xsdt.String `xml:"http://docbook.org/ns/docbook width,attr"`
}

type XsdGoPkgHasAttr_Onmouseover_XsdtString_ struct {
	Onmouseover xsdt.String `xml:"http://docbook.org/ns/docbook onmouseover,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdColAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Onmouseup_XsdtString_ struct {
	Onmouseup xsdt.String `xml:"http://docbook.org/ns/docbook onmouseup,attr"`
}

type TxsdColValign xsdt.Token

//	Returns true if the value of this enumerated TxsdColValign is "middle".
func (me TxsdColValign) IsMiddle() bool { return me == "middle" }

//	Since TxsdColValign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdColValign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdColValign is "baseline".
func (me TxsdColValign) IsBaseline() bool { return me == "baseline" }

//	This convenience method just performs a simple type conversion to TxsdColValign's alias type xsdt.Token.
func (me TxsdColValign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdColValign is "bottom".
func (me TxsdColValign) IsBottom() bool { return me == "bottom" }

//	Since TxsdColValign is just a simple String type, this merely returns the current string value.
func (me TxsdColValign) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdColValign is "top".
func (me TxsdColValign) IsTop() bool { return me == "top" }

type XsdGoPkgHasAttr_Valign_TxsdColValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Span_XsdtNmtoken_ struct {
	Span xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook span,attr"`
}

type XsdGoPkgHasAttr_Onkeypress_XsdtString_ struct {
	Onkeypress xsdt.String `xml:"http://docbook.org/ns/docbook onkeypress,attr"`
}

type TxsdCol struct {
	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Span_XsdtNmtoken_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdColAlign_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdColValign_
}

//	If the WalkHandlers.TxsdCol function is not nil (ie. was set by outside code), calls it with this TxsdCol instance as the single argument. Then calls the Walk() method on 0/21 embed(s) and 0/0 field(s) belonging to this TxsdCol instance.
func (me *TxsdCol) Walk() (err error) {
	if fn := WalkHandlers.TxsdCol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Col struct {
	Cols []*TxsdCol `xml:"http://docbook.org/ns/docbook col"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Col function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Col instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Col instance.
func (me *XsdGoPkgHasElems_Col) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Col; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Tocentry_TxsdTableTocentry_ struct {
	Tocentry TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook tocentry,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdTableRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasElem_Titleabbrev struct {
	Titleabbrev *TxsdMember `xml:"http://docbook.org/ns/docbook titleabbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Titleabbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Titleabbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Titleabbrev instance.
func (me *XsdGoPkgHasElem_Titleabbrev) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Titleabbrev; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TxsdColgroupAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdColgroupValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdColgroup struct {
	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasElems_Col

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdColgroupAlign_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Valign_TxsdColgroupValign_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Span_XsdtNmtoken_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_
}

//	If the WalkHandlers.TxsdColgroup function is not nil (ie. was set by outside code), calls it with this TxsdColgroup instance as the single argument. Then calls the Walk() method on 1/22 embed(s) and 0/0 field(s) belonging to this TxsdColgroup instance.
func (me *TxsdColgroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdColgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Col.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Colgroup struct {
	Colgroups []*TxsdColgroup `xml:"http://docbook.org/ns/docbook colgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colgroup instance.
func (me *XsdGoPkgHasElems_Colgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Colgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colgroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Shortentry_TxsdTableShortentry_ struct {
	Shortentry TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook shortentry,attr"`
}

type XsdGoPkgHasAttr_Tabstyle_XsdtString_ struct {
	Tabstyle xsdt.String `xml:"http://docbook.org/ns/docbook tabstyle,attr"`
}

type XsdGoPkgHasAttr_Cellpadding_XsdtString_ struct {
	Cellpadding xsdt.String `xml:"http://docbook.org/ns/docbook cellpadding,attr"`
}

type XsdGoPkgHasAttr_Cellspacing_XsdtString_ struct {
	Cellspacing xsdt.String `xml:"http://docbook.org/ns/docbook cellspacing,attr"`
}

type XsdGoPkgHasElem_Title struct {
	Title *TxsdTitle `xml:"http://docbook.org/ns/docbook title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Title instance.
func (me *XsdGoPkgHasElem_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTableFrame xsdt.Token

//	Returns true if the value of this enumerated TxsdTableFrame is "rhs".
func (me TxsdTableFrame) IsRhs() bool { return me == "rhs" }

//	Returns true if the value of this enumerated TxsdTableFrame is "lhs".
func (me TxsdTableFrame) IsLhs() bool { return me == "lhs" }

//	Returns true if the value of this enumerated TxsdTableFrame is "below".
func (me TxsdTableFrame) IsBelow() bool { return me == "below" }

//	Returns true if the value of this enumerated TxsdTableFrame is "void".
func (me TxsdTableFrame) IsVoid() bool { return me == "void" }

//	Returns true if the value of this enumerated TxsdTableFrame is "all".
func (me TxsdTableFrame) IsAll() bool { return me == "all" }

//	Since TxsdTableFrame is just a simple String type, this merely returns the current string value.
func (me TxsdTableFrame) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTableFrame's alias type xsdt.Token.
func (me TxsdTableFrame) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTableFrame is "sides".
func (me TxsdTableFrame) IsSides() bool { return me == "sides" }

//	Since TxsdTableFrame is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableFrame) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTableFrame is "bottom".
func (me TxsdTableFrame) IsBottom() bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdTableFrame is "above".
func (me TxsdTableFrame) IsAbove() bool { return me == "above" }

//	Returns true if the value of this enumerated TxsdTableFrame is "topbot".
func (me TxsdTableFrame) IsTopbot() bool { return me == "topbot" }

//	Returns true if the value of this enumerated TxsdTableFrame is "vsides".
func (me TxsdTableFrame) IsVsides() bool { return me == "vsides" }

//	Returns true if the value of this enumerated TxsdTableFrame is "top".
func (me TxsdTableFrame) IsTop() bool { return me == "top" }

//	Returns true if the value of this enumerated TxsdTableFrame is "hsides".
func (me TxsdTableFrame) IsHsides() bool { return me == "hsides" }

//	Returns true if the value of this enumerated TxsdTableFrame is "border".
func (me TxsdTableFrame) IsBorder() bool { return me == "border" }

//	Returns true if the value of this enumerated TxsdTableFrame is "box".
func (me TxsdTableFrame) IsBox() bool { return me == "box" }

//	Returns true if the value of this enumerated TxsdTableFrame is "none".
func (me TxsdTableFrame) IsNone() bool { return me == "none" }

type XsdGoPkgHasAttr_Frame_TxsdTableFrame_ struct {
	Frame TxsdTableFrame `xml:"http://docbook.org/ns/docbook frame,attr"`
}

type TxsdTableOrient xsdt.Token

//	Returns true if the value of this enumerated TxsdTableOrient is "land".
func (me TxsdTableOrient) IsLand() bool { return me == "land" }

//	Since TxsdTableOrient is just a simple String type, this merely returns the current string value.
func (me TxsdTableOrient) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTableOrient's alias type xsdt.Token.
func (me TxsdTableOrient) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdTableOrient is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableOrient) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTableOrient is "port".
func (me TxsdTableOrient) IsPort() bool { return me == "port" }

type XsdGoPkgHasAttr_Orient_TxsdTableOrient_ struct {
	Orient TxsdTableOrient `xml:"http://docbook.org/ns/docbook orient,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTbodyAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTbodyValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdTbody struct {
	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTbodyAlign_

	XsdGoPkgHasAttr_Valign_TxsdTbodyValign_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdTbody function is not nil (ie. was set by outside code), calls it with this TxsdTbody instance as the single argument. Then calls the Walk() method on 0/23 embed(s) and 0/0 field(s) belonging to this TxsdTbody instance.
func (me *TxsdTbody) Walk() (err error) {
	if fn := WalkHandlers.TxsdTbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tbody struct {
	Tbodies []*TxsdTbody `xml:"http://docbook.org/ns/docbook tbody"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tbody instance.
func (me *XsdGoPkgHasElems_Tbody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tbodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_TxsdTablePgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdTableRules xsdt.Token

//	Returns true if the value of this enumerated TxsdTableRules is "cols".
func (me TxsdTableRules) IsCols() bool { return me == "cols" }

//	Returns true if the value of this enumerated TxsdTableRules is "none".
func (me TxsdTableRules) IsNone() bool { return me == "none" }

//	Returns true if the value of this enumerated TxsdTableRules is "all".
func (me TxsdTableRules) IsAll() bool { return me == "all" }

//	Since TxsdTableRules is just a simple String type, this merely returns the current string value.
func (me TxsdTableRules) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTableRules is "rows".
func (me TxsdTableRules) IsRows() bool { return me == "rows" }

//	This convenience method just performs a simple type conversion to TxsdTableRules's alias type xsdt.Token.
func (me TxsdTableRules) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTableRules is "groups".
func (me TxsdTableRules) IsGroups() bool { return me == "groups" }

//	Since TxsdTableRules is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableRules) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Rules_TxsdTableRules_ struct {
	Rules TxsdTableRules `xml:"http://docbook.org/ns/docbook rules,attr"`
}

type XsdGoPkgHasAttr_Summary_XsdtString_ struct {
	Summary xsdt.String `xml:"http://docbook.org/ns/docbook summary,attr"`
}

type XsdGoPkgHasAttr_Border_XsdtNmtoken_ struct {
	Border xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook border,attr"`
}

type TxsdTable struct {
	XsdGoPkgHasElems_Colgroup

	XsdGoPkgHasAttr_Shortentry_TxsdTableShortentry_

	XsdGoPkgHasAttr_Tabstyle_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Cellpadding_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Cellspacing_XsdtString_

	XsdGoPkgHasElem_Title

	XsdGoPkgHasAttr_Frame_TxsdTableFrame_

	XsdGoPkgHasAttr_Orient_TxsdTableOrient_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Tgroup

	XsdGoPkgHasElems_Tbody

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Pgwide_TxsdTablePgwide_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Rules_TxsdTableRules_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Summary_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Border_XsdtNmtoken_

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdTableColsep_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Rowheader_TxsdTableRowheader_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Col

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Tocentry_TxsdTableTocentry_

	XsdGoPkgHasAttr_Rowsep_TxsdTableRowsep_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElem_Titleabbrev

	XsdGoPkgHasElem_Thead
}

//	If the WalkHandlers.TxsdTable function is not nil (ie. was set by outside code), calls it with this TxsdTable instance as the single argument. Then calls the Walk() method on 5/48 embed(s) and 0/0 field(s) belonging to this TxsdTable instance.
func (me *TxsdTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Col.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Table struct {
	Tables []*TxsdTable `xml:"http://docbook.org/ns/docbook table"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Table instance.
func (me *XsdGoPkgHasElems_Table) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Table; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Continuation_TxsdScreenContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdScreenLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdScreen struct {
	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAttr_Language_XsdtString_

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasAttr_Linenumbering_TxsdScreenLinenumbering_

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Database

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAttr_Continuation_TxsdScreenContinuation_

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Inlinemediaobject
}

//	If the WalkHandlers.TxsdScreen function is not nil (ie. was set by outside code), calls it with this TxsdScreen instance as the single argument. Then calls the Walk() method on 76/112 embed(s) and 0/0 field(s) belonging to this TxsdScreen instance.
func (me *TxsdScreen) Walk() (err error) {
	if fn := WalkHandlers.TxsdScreen; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Screen struct {
	Screen *TxsdScreen `xml:"http://docbook.org/ns/docbook screen"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screen function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screen instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screen instance.
func (me *XsdGoPkgHasElem_Screen) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Screen; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdScreenco struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElem_Screen

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdScreenco function is not nil (ie. was set by outside code), calls it with this TxsdScreenco instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdScreenco instance.
func (me *TxsdScreenco) Walk() (err error) {
	if fn := WalkHandlers.TxsdScreenco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Areaspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Screenco struct {
	Screencos []*TxsdScreenco `xml:"http://docbook.org/ns/docbook screenco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screenco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screenco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screenco instance.
func (me *XsdGoPkgHasElems_Screenco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Screenco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Screencos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdClasssynopsisClass xsdt.Token

//	Since TxsdClasssynopsisClass is just a simple String type, this merely returns the current string value.
func (me TxsdClasssynopsisClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdClasssynopsisClass is "interface".
func (me TxsdClasssynopsisClass) IsInterface() bool { return me == "interface" }

//	Since TxsdClasssynopsisClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdClasssynopsisClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdClasssynopsisClass's alias type xsdt.Token.
func (me TxsdClasssynopsisClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdClasssynopsisClass is "class".
func (me TxsdClasssynopsisClass) IsClass() bool { return me == "class" }

type XsdGoPkgHasAttr_Class_TxsdClasssynopsisClass_ struct {
	Class TxsdClasssynopsisClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdClasssynopsisinfoContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdClasssynopsisinfoLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdClasssynopsisinfo struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Trademark

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasAttr_Continuation_TxsdClasssynopsisinfoContinuation_

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Type

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Linenumbering_TxsdClasssynopsisinfoLinenumbering_

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdClasssynopsisinfo function is not nil (ie. was set by outside code), calls it with this TxsdClasssynopsisinfo instance as the single argument. Then calls the Walk() method on 76/111 embed(s) and 0/0 field(s) belonging to this TxsdClasssynopsisinfo instance.
func (me *TxsdClasssynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdClasssynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Classsynopsisinfo struct {
	Classsynopsisinfos []*TxsdClasssynopsisinfo `xml:"http://docbook.org/ns/docbook classsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classsynopsisinfo instance.
func (me *XsdGoPkgHasElems_Classsynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Classsynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Classsynopsisinfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdClasssynopsis struct {
	XsdGoPkgHasAttr_Class_TxsdClasssynopsisClass_

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Classsynopsisinfo
}

//	If the WalkHandlers.TxsdClasssynopsis function is not nil (ie. was set by outside code), calls it with this TxsdClasssynopsis instance as the single argument. Then calls the Walk() method on 7/13 embed(s) and 0/0 field(s) belonging to this TxsdClasssynopsis instance.
func (me *TxsdClasssynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdClasssynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Classsynopsisinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Classsynopsis struct {
	Classsynopsises []*TxsdClasssynopsis `xml:"http://docbook.org/ns/docbook classsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classsynopsis instance.
func (me *XsdGoPkgHasElems_Classsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Classsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Classsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Continuation_TxsdOrderedlistContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Spacing_TxsdOrderedlistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type TxsdOrderedlistNumeration xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdOrderedlistNumeration's alias type xsdt.Token.
func (me TxsdOrderedlistNumeration) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "upperalpha".
func (me TxsdOrderedlistNumeration) IsUpperalpha() bool { return me == "upperalpha" }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "lowerroman".
func (me TxsdOrderedlistNumeration) IsLowerroman() bool { return me == "lowerroman" }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "upperroman".
func (me TxsdOrderedlistNumeration) IsUpperroman() bool { return me == "upperroman" }

//	Since TxsdOrderedlistNumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrderedlistNumeration) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "arabic".
func (me TxsdOrderedlistNumeration) IsArabic() bool { return me == "arabic" }

//	Since TxsdOrderedlistNumeration is just a simple String type, this merely returns the current string value.
func (me TxsdOrderedlistNumeration) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "loweralpha".
func (me TxsdOrderedlistNumeration) IsLoweralpha() bool { return me == "loweralpha" }

type XsdGoPkgHasAttr_Numeration_TxsdOrderedlistNumeration_ struct {
	Numeration TxsdOrderedlistNumeration `xml:"http://docbook.org/ns/docbook numeration,attr"`
}

type XsdGoPkgHasElems_Screen struct {
	Screens []*TxsdScreen `xml:"http://docbook.org/ns/docbook screen"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screen function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screen instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screen instance.
func (me *XsdGoPkgHasElems_Screen) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Screen; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Screens {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Startingnumber_XsdtNmtoken_ struct {
	Startingnumber xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook startingnumber,attr"`
}

type TxsdOrderedlistInheritnum xsdt.Token

//	Since TxsdOrderedlistInheritnum is just a simple String type, this merely returns the current string value.
func (me TxsdOrderedlistInheritnum) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdOrderedlistInheritnum is "ignore".
func (me TxsdOrderedlistInheritnum) IsIgnore() bool { return me == "ignore" }

//	Since TxsdOrderedlistInheritnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrderedlistInheritnum) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOrderedlistInheritnum is "inherit".
func (me TxsdOrderedlistInheritnum) IsInherit() bool { return me == "inherit" }

//	This convenience method just performs a simple type conversion to TxsdOrderedlistInheritnum's alias type xsdt.Token.
func (me TxsdOrderedlistInheritnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Inheritnum_TxsdOrderedlistInheritnum_ struct {
	Inheritnum TxsdOrderedlistInheritnum `xml:"http://docbook.org/ns/docbook inheritnum,attr"`
}

type TxsdOrderedlist struct {
	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAttr_Continuation_TxsdOrderedlistContinuation_

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Spacing_TxsdOrderedlistSpacing_

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Numeration_TxsdOrderedlistNumeration_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Startingnumber_XsdtNmtoken_

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Listitem

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAttr_Inheritnum_TxsdOrderedlistInheritnum_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdOrderedlist function is not nil (ie. was set by outside code), calls it with this TxsdOrderedlist instance as the single argument. Then calls the Walk() method on 23/67 embed(s) and 0/0 field(s) belonging to this TxsdOrderedlist instance.
func (me *TxsdOrderedlist) Walk() (err error) {
	if fn := WalkHandlers.TxsdOrderedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Orderedlist struct {
	Orderedlists []*TxsdOrderedlist `xml:"http://docbook.org/ns/docbook orderedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orderedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orderedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orderedlist instance.
func (me *XsdGoPkgHasElems_Orderedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Orderedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Orderedlists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStepalternativesPerformance xsdt.Token

//	Since TxsdStepalternativesPerformance is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdStepalternativesPerformance) SetFromString(s string) {
	(*xsdt.Token)(me).SetFromString(s)
}

//	Since TxsdStepalternativesPerformance is just a simple String type, this merely returns the current string value.
func (me TxsdStepalternativesPerformance) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdStepalternativesPerformance is "optional".
func (me TxsdStepalternativesPerformance) IsOptional() bool { return me == "optional" }

//	This convenience method just performs a simple type conversion to TxsdStepalternativesPerformance's alias type xsdt.Token.
func (me TxsdStepalternativesPerformance) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdStepalternativesPerformance is "required".
func (me TxsdStepalternativesPerformance) IsRequired() bool { return me == "required" }

type XsdGoPkgHasAttr_Performance_TxsdStepalternativesPerformance_ struct {
	Performance TxsdStepalternativesPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type TxsdStepalternatives struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Performance_TxsdStepalternativesPerformance_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Step

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdStepalternatives function is not nil (ie. was set by outside code), calls it with this TxsdStepalternatives instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdStepalternatives instance.
func (me *TxsdStepalternatives) Walk() (err error) {
	if fn := WalkHandlers.TxsdStepalternatives; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Stepalternatives struct {
	Stepalternatives *TxsdStepalternatives `xml:"http://docbook.org/ns/docbook stepalternatives"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Stepalternatives function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Stepalternatives instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Stepalternatives instance.
func (me *XsdGoPkgHasElem_Stepalternatives) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Stepalternatives; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Stepalternatives.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Performance_TxsdStepPerformance_ struct {
	Performance TxsdStepalternativesPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type XsdGoPkgHasAttr_Performance_TxsdSubstepsPerformance_ struct {
	Performance TxsdStepalternativesPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type TxsdSubsteps struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Performance_TxsdSubstepsPerformance_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Step

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdSubsteps function is not nil (ie. was set by outside code), calls it with this TxsdSubsteps instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdSubsteps instance.
func (me *TxsdSubsteps) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubsteps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Substeps struct {
	Substeps *TxsdSubsteps `xml:"http://docbook.org/ns/docbook substeps"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Substeps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Substeps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Substeps instance.
func (me *XsdGoPkgHasElem_Substeps) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Substeps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Substeps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStep struct {
	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElem_Stepalternatives

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAttr_Performance_TxsdStepPerformance_

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElem_Substeps

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Important
}

//	If the WalkHandlers.TxsdStep function is not nil (ie. was set by outside code), calls it with this TxsdStep instance as the single argument. Then calls the Walk() method on 26/64 embed(s) and 0/0 field(s) belonging to this TxsdStep instance.
func (me *TxsdStep) Walk() (err error) {
	if fn := WalkHandlers.TxsdStep; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Substeps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Stepalternatives.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Step struct {
	Steps []*TxsdStep `xml:"http://docbook.org/ns/docbook step"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Step function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Step instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Step instance.
func (me *XsdGoPkgHasElems_Step) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Step; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Steps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProcedure struct {
	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Step

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Methodsynopsis
}

//	If the WalkHandlers.TxsdProcedure function is not nil (ie. was set by outside code), calls it with this TxsdProcedure instance as the single argument. Then calls the Walk() method on 25/62 embed(s) and 0/0 field(s) belonging to this TxsdProcedure instance.
func (me *TxsdProcedure) Walk() (err error) {
	if fn := WalkHandlers.TxsdProcedure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Step.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Procedure struct {
	Procedures []*TxsdProcedure `xml:"http://docbook.org/ns/docbook procedure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Procedure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Procedure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Procedure instance.
func (me *XsdGoPkgHasElems_Procedure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Procedure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Procedures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOthercreditClass xsdt.Token

//	Returns true if the value of this enumerated TxsdOthercreditClass is "technicaleditor".
func (me TxsdOthercreditClass) IsTechnicaleditor() bool { return me == "technicaleditor" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "other".
func (me TxsdOthercreditClass) IsOther() bool { return me == "other" }

//	This convenience method just performs a simple type conversion to TxsdOthercreditClass's alias type xsdt.Token.
func (me TxsdOthercreditClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "graphicdesigner".
func (me TxsdOthercreditClass) IsGraphicdesigner() bool { return me == "graphicdesigner" }

//	Since TxsdOthercreditClass is just a simple String type, this merely returns the current string value.
func (me TxsdOthercreditClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "copyeditor".
func (me TxsdOthercreditClass) IsCopyeditor() bool { return me == "copyeditor" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "productioneditor".
func (me TxsdOthercreditClass) IsProductioneditor() bool { return me == "productioneditor" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "translator".
func (me TxsdOthercreditClass) IsTranslator() bool { return me == "translator" }

//	Since TxsdOthercreditClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOthercreditClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdOthercreditClass_ struct {
	Class TxsdOthercreditClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdOthercredit struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Class_TxsdOthercreditClass_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Contrib

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Orgdiv
}

//	If the WalkHandlers.TxsdOthercredit function is not nil (ie. was set by outside code), calls it with this TxsdOthercredit instance as the single argument. Then calls the Walk() method on 7/14 embed(s) and 0/0 field(s) belonging to this TxsdOthercredit instance.
func (me *TxsdOthercredit) Walk() (err error) {
	if fn := WalkHandlers.TxsdOthercredit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contrib.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Othercredit struct {
	Othercredits []*TxsdOthercredit `xml:"http://docbook.org/ns/docbook othercredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Othercredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Othercredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Othercredit instance.
func (me *XsdGoPkgHasElems_Othercredit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Othercredit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Othercredits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAuthorgroup struct {
	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Author

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdAuthorgroup function is not nil (ie. was set by outside code), calls it with this TxsdAuthorgroup instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdAuthorgroup instance.
func (me *TxsdAuthorgroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdAuthorgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Authorgroup struct {
	Authorgroups []*TxsdAuthorgroup `xml:"http://docbook.org/ns/docbook authorgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Authorgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Authorgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Authorgroup instance.
func (me *XsdGoPkgHasElems_Authorgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Authorgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authorgroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Conftitle struct {
	Conftitles []*TxsdLiteral `xml:"http://docbook.org/ns/docbook conftitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Conftitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Conftitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Conftitle instance.
func (me *XsdGoPkgHasElems_Conftitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Conftitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conftitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confsponsor struct {
	Confsponsors []*TxsdLiteral `xml:"http://docbook.org/ns/docbook confsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confsponsor instance.
func (me *XsdGoPkgHasElems_Confsponsor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confsponsor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confsponsors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confnum struct {
	Confnums []*TxsdLiteral `xml:"http://docbook.org/ns/docbook confnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confnum instance.
func (me *XsdGoPkgHasElems_Confnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confnums {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confdates struct {
	Confdateses []*TxsdLiteral `xml:"http://docbook.org/ns/docbook confdates"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confdates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confdates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confdates instance.
func (me *XsdGoPkgHasElems_Confdates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confdates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confdateses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdConfgroup struct {
	XsdGoPkgHasElems_Conftitle

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Confsponsor

	XsdGoPkgHasElems_Confnum

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Confdates
}

//	If the WalkHandlers.TxsdConfgroup function is not nil (ie. was set by outside code), calls it with this TxsdConfgroup instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdConfgroup instance.
func (me *TxsdConfgroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdConfgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Confsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confdates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Conftitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confgroup struct {
	Confgroups []*TxsdConfgroup `xml:"http://docbook.org/ns/docbook confgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confgroup instance.
func (me *XsdGoPkgHasElems_Confgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confgroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Class_TxsdBibliosourceClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdBibliosource struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Class_TxsdBibliosourceClass_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdBibliosource function is not nil (ie. was set by outside code), calls it with this TxsdBibliosource instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdBibliosource instance.
func (me *TxsdBibliosource) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliosource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliosource struct {
	Bibliosources []*TxsdBibliosource `xml:"http://docbook.org/ns/docbook bibliosource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliosource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliosource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliosource instance.
func (me *XsdGoPkgHasElems_Bibliosource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliosource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliosources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Othertemporal_XsdtNmtoken_ struct {
	Othertemporal xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook othertemporal,attr"`
}

type TxsdBibliocoverageSpatial xsdt.Token

//	Since TxsdBibliocoverageSpatial is just a simple String type, this merely returns the current string value.
func (me TxsdBibliocoverageSpatial) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "dcmibox".
func (me TxsdBibliocoverageSpatial) IsDcmibox() bool { return me == "dcmibox" }

//	Since TxsdBibliocoverageSpatial is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliocoverageSpatial) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "otherspatial".
func (me TxsdBibliocoverageSpatial) IsOtherspatial() bool { return me == "otherspatial" }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "dcmipoint".
func (me TxsdBibliocoverageSpatial) IsDcmipoint() bool { return me == "dcmipoint" }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "tgn".
func (me TxsdBibliocoverageSpatial) IsTgn() bool { return me == "tgn" }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "iso3166".
func (me TxsdBibliocoverageSpatial) IsIso3166() bool { return me == "iso3166" }

//	This convenience method just performs a simple type conversion to TxsdBibliocoverageSpatial's alias type xsdt.Token.
func (me TxsdBibliocoverageSpatial) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Spatial_TxsdBibliocoverageSpatial_ struct {
	Spatial TxsdBibliocoverageSpatial `xml:"http://docbook.org/ns/docbook spatial,attr"`
}

type XsdGoPkgHasAttr_Otherspatial_XsdtNmtoken_ struct {
	Otherspatial xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherspatial,attr"`
}

type TxsdBibliocoverageTemporal xsdt.Token

//	Since TxsdBibliocoverageTemporal is just a simple String type, this merely returns the current string value.
func (me TxsdBibliocoverageTemporal) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "dcmiperiod".
func (me TxsdBibliocoverageTemporal) IsDcmiperiod() bool { return me == "dcmiperiod" }

//	This convenience method just performs a simple type conversion to TxsdBibliocoverageTemporal's alias type xsdt.Token.
func (me TxsdBibliocoverageTemporal) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "othertemporal".
func (me TxsdBibliocoverageTemporal) IsOthertemporal() bool { return me == "othertemporal" }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "w3c-dtf".
func (me TxsdBibliocoverageTemporal) IsW3CDtf() bool { return me == "w3c-dtf" }

//	Since TxsdBibliocoverageTemporal is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliocoverageTemporal) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Temporal_TxsdBibliocoverageTemporal_ struct {
	Temporal TxsdBibliocoverageTemporal `xml:"http://docbook.org/ns/docbook temporal,attr"`
}

type TxsdBibliocoverage struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Othertemporal_XsdtNmtoken_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Spatial_TxsdBibliocoverageSpatial_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Otherspatial_XsdtNmtoken_

	XsdGoPkgHasAttr_Temporal_TxsdBibliocoverageTemporal_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdBibliocoverage function is not nil (ie. was set by outside code), calls it with this TxsdBibliocoverage instance as the single argument. Then calls the Walk() method on 5/22 embed(s) and 0/0 field(s) belonging to this TxsdBibliocoverage instance.
func (me *TxsdBibliocoverage) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliocoverage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliocoverage struct {
	Bibliocoverages []*TxsdBibliocoverage `xml:"http://docbook.org/ns/docbook bibliocoverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliocoverage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliocoverage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliocoverage instance.
func (me *XsdGoPkgHasElems_Bibliocoverage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliocoverage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliocoverages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAbstract struct {
	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdAbstract function is not nil (ie. was set by outside code), calls it with this TxsdAbstract instance as the single argument. Then calls the Walk() method on 3/10 embed(s) and 0/0 field(s) belonging to this TxsdAbstract instance.
func (me *TxsdAbstract) Walk() (err error) {
	if fn := WalkHandlers.TxsdAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Abstract struct {
	Abstracts []*TxsdAbstract `xml:"http://docbook.org/ns/docbook abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abstract instance.
func (me *XsdGoPkgHasElems_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Abstracts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrinthistory struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Anchor
}

//	If the WalkHandlers.TxsdPrinthistory function is not nil (ie. was set by outside code), calls it with this TxsdPrinthistory instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdPrinthistory instance.
func (me *TxsdPrinthistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrinthistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Printhistory struct {
	Printhistories []*TxsdPrinthistory `xml:"http://docbook.org/ns/docbook printhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Printhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Printhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Printhistory instance.
func (me *XsdGoPkgHasElems_Printhistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Printhistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Printhistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contractsponsor struct {
	Contractsponsors []*TxsdLiteral `xml:"http://docbook.org/ns/docbook contractsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contractsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contractsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contractsponsor instance.
func (me *XsdGoPkgHasElems_Contractsponsor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contractsponsor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contractsponsors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Holder struct {
	Holders []*TxsdLiteral `xml:"http://docbook.org/ns/docbook holder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Holder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Holder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Holder instance.
func (me *XsdGoPkgHasElems_Holder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Holder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Holders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Year struct {
	Years []*TxsdLiteral `xml:"http://docbook.org/ns/docbook year"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Year instance.
func (me *XsdGoPkgHasElems_Year) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Years {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCopyright struct {
	XsdGoPkgHasElems_Holder

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Year

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdCopyright function is not nil (ie. was set by outside code), calls it with this TxsdCopyright instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdCopyright instance.
func (me *TxsdCopyright) Walk() (err error) {
	if fn := WalkHandlers.TxsdCopyright; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Holder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Copyright struct {
	Copyrights []*TxsdCopyright `xml:"http://docbook.org/ns/docbook copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Copyright function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Copyright instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Copyright instance.
func (me *XsdGoPkgHasElems_Copyright) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Copyright; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Copyrights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Edition struct {
	Editions []*TxsdLiteral `xml:"http://docbook.org/ns/docbook edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Edition instance.
func (me *XsdGoPkgHasElems_Edition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Editions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Releaseinfo struct {
	Releaseinfos []*TxsdLiteral `xml:"http://docbook.org/ns/docbook releaseinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Releaseinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Releaseinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Releaseinfo instance.
func (me *XsdGoPkgHasElems_Releaseinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Releaseinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Releaseinfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCollab struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Person
}

//	If the WalkHandlers.TxsdCollab function is not nil (ie. was set by outside code), calls it with this TxsdCollab instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdCollab instance.
func (me *TxsdCollab) Walk() (err error) {
	if fn := WalkHandlers.TxsdCollab; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Collab struct {
	Collabs []*TxsdCollab `xml:"http://docbook.org/ns/docbook collab"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Collab function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collab instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collab instance.
func (me *XsdGoPkgHasElems_Collab) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Collab; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Collabs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Class_TxsdBiblioidClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdBiblioid struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Class_TxsdBiblioidClass_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdBiblioid function is not nil (ie. was set by outside code), calls it with this TxsdBiblioid instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdBiblioid instance.
func (me *TxsdBiblioid) Walk() (err error) {
	if fn := WalkHandlers.TxsdBiblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Biblioid struct {
	Biblioids []*TxsdBiblioid `xml:"http://docbook.org/ns/docbook biblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioid instance.
func (me *XsdGoPkgHasElems_Biblioid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Biblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Biblioids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Artpagenums struct {
	Artpagenumses []*TxsdLiteral `xml:"http://docbook.org/ns/docbook artpagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Artpagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Artpagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Artpagenums instance.
func (me *XsdGoPkgHasElems_Artpagenums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Artpagenums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Artpagenumses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Publishername struct {
	Publishernames []*TxsdLiteral `xml:"http://docbook.org/ns/docbook publishername"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publishername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publishername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publishername instance.
func (me *XsdGoPkgHasElems_Publishername) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Publishername; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publishernames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Authorinitials struct {
	Authorinitialses []*TxsdLiteral `xml:"http://docbook.org/ns/docbook authorinitials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Authorinitials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Authorinitials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Authorinitials instance.
func (me *XsdGoPkgHasElems_Authorinitials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Authorinitials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authorinitialses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCover struct {
	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Anchor
}

//	If the WalkHandlers.TxsdCover function is not nil (ie. was set by outside code), calls it with this TxsdCover instance as the single argument. Then calls the Walk() method on 23/47 embed(s) and 0/0 field(s) belonging to this TxsdCover instance.
func (me *TxsdCover) Walk() (err error) {
	if fn := WalkHandlers.TxsdCover; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Cover struct {
	Covers []*TxsdCover `xml:"http://docbook.org/ns/docbook cover"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cover instance.
func (me *XsdGoPkgHasElems_Cover) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cover; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Covers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contractnum struct {
	Contractnums []*TxsdLiteral `xml:"http://docbook.org/ns/docbook contractnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contractnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contractnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contractnum instance.
func (me *XsdGoPkgHasElems_Contractnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contractnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contractnums {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Class_TxsdBibliorelationClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdBibliorelationType xsdt.Token

//	Returns true if the value of this enumerated TxsdBibliorelationType is "replaces".
func (me TxsdBibliorelationType) IsReplaces() bool { return me == "replaces" }

//	Since TxsdBibliorelationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliorelationType) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "ispartof".
func (me TxsdBibliorelationType) IsIspartof() bool { return me == "ispartof" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "haspart".
func (me TxsdBibliorelationType) IsHaspart() bool { return me == "haspart" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isversionof".
func (me TxsdBibliorelationType) IsIsversionof() bool { return me == "isversionof" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "requires".
func (me TxsdBibliorelationType) IsRequires() bool { return me == "requires" }

//	Since TxsdBibliorelationType is just a simple String type, this merely returns the current string value.
func (me TxsdBibliorelationType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isreplacedby".
func (me TxsdBibliorelationType) IsIsreplacedby() bool { return me == "isreplacedby" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "othertype".
func (me TxsdBibliorelationType) IsOthertype() bool { return me == "othertype" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isrequiredby".
func (me TxsdBibliorelationType) IsIsrequiredby() bool { return me == "isrequiredby" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "hasversion".
func (me TxsdBibliorelationType) IsHasversion() bool { return me == "hasversion" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "hasformat".
func (me TxsdBibliorelationType) IsHasformat() bool { return me == "hasformat" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isformatof".
func (me TxsdBibliorelationType) IsIsformatof() bool { return me == "isformatof" }

//	This convenience method just performs a simple type conversion to TxsdBibliorelationType's alias type xsdt.Token.
func (me TxsdBibliorelationType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "references".
func (me TxsdBibliorelationType) IsReferences() bool { return me == "references" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isreferencedby".
func (me TxsdBibliorelationType) IsIsreferencedby() bool { return me == "isreferencedby" }

type XsdGoPkgHasAttr_Type_TxsdBibliorelationType_ struct {
	Type TxsdBibliorelationType `xml:"http://docbook.org/ns/docbook type,attr"`
}

type XsdGoPkgHasAttr_Othertype_XsdtNmtoken_ struct {
	Othertype xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook othertype,attr"`
}

type TxsdBibliorelation struct {
	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Type_TxsdBibliorelationType_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Othertype_XsdtNmtoken_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Class_TxsdBibliorelationClass_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdBibliorelation function is not nil (ie. was set by outside code), calls it with this TxsdBibliorelation instance as the single argument. Then calls the Walk() method on 5/22 embed(s) and 0/0 field(s) belonging to this TxsdBibliorelation instance.
func (me *TxsdBibliorelation) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliorelation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliorelation struct {
	Bibliorelations []*TxsdBibliorelation `xml:"http://docbook.org/ns/docbook bibliorelation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliorelation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliorelation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliorelation instance.
func (me *XsdGoPkgHasElems_Bibliorelation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliorelation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliorelations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Scheme_XsdtNmtoken_ struct {
	Scheme xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook scheme,attr"`
}

type XsdGoPkgHasAttr_Weight_XsdtString_ struct {
	Weight xsdt.String `xml:"http://docbook.org/ns/docbook weight,attr"`
}

type XsdGoPkgHasElems_Subjectterm struct {
	Subjectterms []*TxsdDate `xml:"http://docbook.org/ns/docbook subjectterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subjectterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subjectterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subjectterm instance.
func (me *XsdGoPkgHasElems_Subjectterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subjectterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjectterms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubject struct {
	XsdGoPkgHasAttr_Weight_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subjectterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSubject function is not nil (ie. was set by outside code), calls it with this TxsdSubject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdSubject instance.
func (me *TxsdSubject) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Subjectterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subject struct {
	Subjects []*TxsdSubject `xml:"http://docbook.org/ns/docbook subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subject instance.
func (me *XsdGoPkgHasElems_Subject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubjectset struct {
	XsdGoPkgHasAttr_Scheme_XsdtNmtoken_

	XsdGoPkgHasElems_Subject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSubjectset function is not nil (ie. was set by outside code), calls it with this TxsdSubjectset instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdSubjectset instance.
func (me *TxsdSubjectset) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubjectset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subjectset struct {
	Subjectsets []*TxsdSubjectset `xml:"http://docbook.org/ns/docbook subjectset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subjectset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subjectset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subjectset instance.
func (me *XsdGoPkgHasElems_Subjectset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subjectset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjectsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLocator struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	xlink.XsdGoPkgHasAttr_Label
}

//	If the WalkHandlers.TxsdLocator function is not nil (ie. was set by outside code), calls it with this TxsdLocator instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdLocator instance.
func (me *TxsdLocator) Walk() (err error) {
	if fn := WalkHandlers.TxsdLocator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Locator struct {
	Locators []*TxsdLocator `xml:"http://docbook.org/ns/docbook locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Locator instance.
func (me *XsdGoPkgHasElems_Locator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Locator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Locators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdArc struct {
	xlink.XsdGoPkgHasAttr_To

	xlink.XsdGoPkgHasAttr_From

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdArc function is not nil (ie. was set by outside code), calls it with this TxsdArc instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdArc instance.
func (me *TxsdArc) Walk() (err error) {
	if fn := WalkHandlers.TxsdArc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Arc struct {
	Arcs []*TxsdArc `xml:"http://docbook.org/ns/docbook arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arc instance.
func (me *XsdGoPkgHasElems_Arc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Arc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdExtendedlink struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Locator

	XsdGoPkgHasElems_Arc
}

//	If the WalkHandlers.TxsdExtendedlink function is not nil (ie. was set by outside code), calls it with this TxsdExtendedlink instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdExtendedlink instance.
func (me *TxsdExtendedlink) Walk() (err error) {
	if fn := WalkHandlers.TxsdExtendedlink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Locator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Arc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extendedlink struct {
	Extendedlinks []*TxsdExtendedlink `xml:"http://docbook.org/ns/docbook extendedlink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extendedlink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extendedlink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extendedlink instance.
func (me *XsdGoPkgHasElems_Extendedlink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extendedlink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extendedlinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Publishername struct {
	Publishername *TxsdLiteral `xml:"http://docbook.org/ns/docbook publishername"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publishername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publishername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publishername instance.
func (me *XsdGoPkgHasElem_Publishername) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Publishername; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPublisher struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Publishername

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdPublisher function is not nil (ie. was set by outside code), calls it with this TxsdPublisher instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdPublisher instance.
func (me *TxsdPublisher) Walk() (err error) {
	if fn := WalkHandlers.TxsdPublisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Publisher struct {
	Publishers []*TxsdPublisher `xml:"http://docbook.org/ns/docbook publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publisher instance.
func (me *XsdGoPkgHasElems_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publishers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pagenums struct {
	Pagenumses []*TxsdLiteral `xml:"http://docbook.org/ns/docbook pagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pagenums instance.
func (me *XsdGoPkgHasElems_Pagenums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pagenums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pagenumses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Volumenum struct {
	Volumenums []*TxsdLiteral `xml:"http://docbook.org/ns/docbook volumenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Volumenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Volumenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Volumenum instance.
func (me *XsdGoPkgHasElems_Volumenum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Volumenum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Volumenums {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Issuenum struct {
	Issuenums []*TxsdLiteral `xml:"http://docbook.org/ns/docbook issuenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Issuenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Issuenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Issuenum instance.
func (me *XsdGoPkgHasElems_Issuenum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Issuenum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issuenums {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLegalnotice struct {
	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Blockquote
}

//	If the WalkHandlers.TxsdLegalnotice function is not nil (ie. was set by outside code), calls it with this TxsdLegalnotice instance as the single argument. Then calls the Walk() method on 25/61 embed(s) and 0/0 field(s) belonging to this TxsdLegalnotice instance.
func (me *TxsdLegalnotice) Walk() (err error) {
	if fn := WalkHandlers.TxsdLegalnotice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Legalnotice struct {
	Legalnotices []*TxsdLegalnotice `xml:"http://docbook.org/ns/docbook legalnotice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Legalnotice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Legalnotice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Legalnotice instance.
func (me *XsdGoPkgHasElems_Legalnotice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Legalnotice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Legalnotices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pubdate struct {
	Pubdates []*TxsdDate `xml:"http://docbook.org/ns/docbook pubdate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pubdate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pubdate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pubdate instance.
func (me *XsdGoPkgHasElems_Pubdate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pubdate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pubdates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Relation_XsdtString_ struct {
	Relation xsdt.String `xml:"http://docbook.org/ns/docbook relation,attr"`
}

type TxsdItermset struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdItermset function is not nil (ie. was set by outside code), calls it with this TxsdItermset instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdItermset instance.
func (me *TxsdItermset) Walk() (err error) {
	if fn := WalkHandlers.TxsdItermset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Itermset struct {
	Itermsets []*TxsdItermset `xml:"http://docbook.org/ns/docbook itermset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Itermset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Itermset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Itermset instance.
func (me *XsdGoPkgHasElems_Itermset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Itermset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Itermsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliomisc struct {
	Bibliomiscs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook bibliomisc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomisc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomisc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomisc instance.
func (me *XsdGoPkgHasElems_Bibliomisc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliomisc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliomiscs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keyword struct {
	Keywords []*TxsdDate `xml:"http://docbook.org/ns/docbook keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keyword instance.
func (me *XsdGoPkgHasElems_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keywords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdKeywordset struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Keyword
}

//	If the WalkHandlers.TxsdKeywordset function is not nil (ie. was set by outside code), calls it with this TxsdKeywordset instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdKeywordset instance.
func (me *TxsdKeywordset) Walk() (err error) {
	if fn := WalkHandlers.TxsdKeywordset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keywordset struct {
	Keywordsets []*TxsdKeywordset `xml:"http://docbook.org/ns/docbook keywordset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keywordset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keywordset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keywordset instance.
func (me *XsdGoPkgHasElems_Keywordset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keywordset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keywordsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBiblioset struct {
	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasAttr_Relation_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Biblioset
}

//	If the WalkHandlers.TxsdBiblioset function is not nil (ie. was set by outside code), calls it with this TxsdBiblioset instance as the single argument. Then calls the Walk() method on 49/71 embed(s) and 0/0 field(s) belonging to this TxsdBiblioset instance.
func (me *TxsdBiblioset) Walk() (err error) {
	if fn := WalkHandlers.TxsdBiblioset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Biblioset struct {
	Bibliosets []*TxsdBiblioset `xml:"http://docbook.org/ns/docbook biblioset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioset instance.
func (me *XsdGoPkgHasElems_Biblioset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Biblioset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliosets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBibliomset struct {
	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasAttr_Relation_XsdtString_

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Authorgroup
}

//	If the WalkHandlers.TxsdBibliomset function is not nil (ie. was set by outside code), calls it with this TxsdBibliomset instance as the single argument. Then calls the Walk() method on 55/82 embed(s) and 0/0 field(s) belonging to this TxsdBibliomset instance.
func (me *TxsdBibliomset) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliomset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliomset struct {
	Bibliomsets []*TxsdBibliomset `xml:"http://docbook.org/ns/docbook bibliomset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomset instance.
func (me *XsdGoPkgHasElems_Bibliomset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliomset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliomsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBibliomixed struct {
	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Itermset
}

//	If the WalkHandlers.TxsdBibliomixed function is not nil (ie. was set by outside code), calls it with this TxsdBibliomixed instance as the single argument. Then calls the Walk() method on 52/71 embed(s) and 0/0 field(s) belonging to this TxsdBibliomixed instance.
func (me *TxsdBibliomixed) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliomixed; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliomixed struct {
	Bibliomixeds []*TxsdBibliomixed `xml:"http://docbook.org/ns/docbook bibliomixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomixed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomixed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomixed instance.
func (me *XsdGoPkgHasElems_Bibliomixed) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliomixed; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliomixeds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBiblioentry struct {
	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Wordasword
}

//	If the WalkHandlers.TxsdBiblioentry function is not nil (ie. was set by outside code), calls it with this TxsdBiblioentry instance as the single argument. Then calls the Walk() method on 51/70 embed(s) and 0/0 field(s) belonging to this TxsdBiblioentry instance.
func (me *TxsdBiblioentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdBiblioentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Biblioentry struct {
	Biblioentries []*TxsdBiblioentry `xml:"http://docbook.org/ns/docbook biblioentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioentry instance.
func (me *XsdGoPkgHasElems_Biblioentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Biblioentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Biblioentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBibliolist struct {
	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Task
}

//	If the WalkHandlers.TxsdBibliolist function is not nil (ie. was set by outside code), calls it with this TxsdBibliolist instance as the single argument. Then calls the Walk() method on 27/63 embed(s) and 0/0 field(s) belonging to this TxsdBibliolist instance.
func (me *TxsdBibliolist) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliolist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomixed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliolist struct {
	Bibliolists []*TxsdBibliolist `xml:"http://docbook.org/ns/docbook bibliolist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliolist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliolist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliolist instance.
func (me *XsdGoPkgHasElems_Bibliolist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliolist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliolists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdConstraintdef struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlisting
}

//	If the WalkHandlers.TxsdConstraintdef function is not nil (ie. was set by outside code), calls it with this TxsdConstraintdef instance as the single argument. Then calls the Walk() method on 26/61 embed(s) and 0/0 field(s) belonging to this TxsdConstraintdef instance.
func (me *TxsdConstraintdef) Walk() (err error) {
	if fn := WalkHandlers.TxsdConstraintdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Constraintdef struct {
	Constraintdefs []*TxsdConstraintdef `xml:"http://docbook.org/ns/docbook constraintdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constraintdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constraintdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constraintdef instance.
func (me *XsdGoPkgHasElems_Constraintdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Constraintdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Constraintdefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNote struct {
	XsdGoPkgHasElems_Example

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Warning
}

//	If the WalkHandlers.TxsdNote function is not nil (ie. was set by outside code), calls it with this TxsdNote instance as the single argument. Then calls the Walk() method on 27/61 embed(s) and 0/0 field(s) belonging to this TxsdNote instance.
func (me *TxsdNote) Walk() (err error) {
	if fn := WalkHandlers.TxsdNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Note struct {
	Notes []*TxsdNote `xml:"http://docbook.org/ns/docbook note"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Note instance.
func (me *XsdGoPkgHasElems_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Notes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Override_XsdtNmtoken_ struct {
	Override xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook override,attr"`
}

type TxsdListitem struct {
	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Override_XsdtNmtoken_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Warning
}

//	If the WalkHandlers.TxsdListitem function is not nil (ie. was set by outside code), calls it with this TxsdListitem instance as the single argument. Then calls the Walk() method on 27/59 embed(s) and 0/0 field(s) belonging to this TxsdListitem instance.
func (me *TxsdListitem) Walk() (err error) {
	if fn := WalkHandlers.TxsdListitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Listitem struct {
	Listitems []*TxsdListitem `xml:"http://docbook.org/ns/docbook listitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Listitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Listitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Listitem instance.
func (me *XsdGoPkgHasElems_Listitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Listitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Listitems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Mark_XsdtNmtoken_ struct {
	Mark xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook mark,attr"`
}

type TxsdItemizedlist struct {
	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Mark_XsdtNmtoken_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Spacing_TxsdItemizedlistSpacing_

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Listitem

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Screenshot
}

//	If the WalkHandlers.TxsdItemizedlist function is not nil (ie. was set by outside code), calls it with this TxsdItemizedlist instance as the single argument. Then calls the Walk() method on 29/64 embed(s) and 0/0 field(s) belonging to this TxsdItemizedlist instance.
func (me *TxsdItemizedlist) Walk() (err error) {
	if fn := WalkHandlers.TxsdItemizedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Listitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Itemizedlist struct {
	Itemizedlists []*TxsdItemizedlist `xml:"http://docbook.org/ns/docbook itemizedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Itemizedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Itemizedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Itemizedlist instance.
func (me *XsdGoPkgHasElems_Itemizedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Itemizedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Itemizedlists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Label struct {
	Label *TxsdLiteral `xml:"http://docbook.org/ns/docbook label"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Label instance.
func (me *XsdGoPkgHasElem_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdQuestion struct {
	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElem_Label

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdQuestion function is not nil (ie. was set by outside code), calls it with this TxsdQuestion instance as the single argument. Then calls the Walk() method on 29/59 embed(s) and 0/0 field(s) belonging to this TxsdQuestion instance.
func (me *TxsdQuestion) Walk() (err error) {
	if fn := WalkHandlers.TxsdQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Question struct {
	Question *TxsdQuestion `xml:"http://docbook.org/ns/docbook question"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Question function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Question instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Question instance.
func (me *XsdGoPkgHasElem_Question) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Question; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Question.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Answer struct {
	Answers []*TxsdQuestion `xml:"http://docbook.org/ns/docbook answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Answer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Answer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Answer instance.
func (me *XsdGoPkgHasElems_Answer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Answer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Answers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdQandaentry struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Answer

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Question

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdQandaentry function is not nil (ie. was set by outside code), calls it with this TxsdQandaentry instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdQandaentry instance.
func (me *TxsdQandaentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdQandaentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Answer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Question.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Qandaentry struct {
	Qandaentries []*TxsdQandaentry `xml:"http://docbook.org/ns/docbook qandaentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandaentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandaentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandaentry instance.
func (me *XsdGoPkgHasElems_Qandaentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Qandaentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Qandaentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdQandasetDefaultlabel xsdt.Token

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "number".
func (me TxsdQandasetDefaultlabel) IsNumber() bool { return me == "number" }

//	This convenience method just performs a simple type conversion to TxsdQandasetDefaultlabel's alias type xsdt.Token.
func (me TxsdQandasetDefaultlabel) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "none".
func (me TxsdQandasetDefaultlabel) IsNone() bool { return me == "none" }

//	Since TxsdQandasetDefaultlabel is just a simple String type, this merely returns the current string value.
func (me TxsdQandasetDefaultlabel) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "qanda".
func (me TxsdQandasetDefaultlabel) IsQanda() bool { return me == "qanda" }

//	Since TxsdQandasetDefaultlabel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdQandasetDefaultlabel) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Defaultlabel_TxsdQandasetDefaultlabel_ struct {
	Defaultlabel TxsdQandasetDefaultlabel `xml:"http://docbook.org/ns/docbook defaultlabel,attr"`
}

type TxsdQandadiv struct {
	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Qandadiv

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Qandaentry

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Orderedlist
}

//	If the WalkHandlers.TxsdQandadiv function is not nil (ie. was set by outside code), calls it with this TxsdQandadiv instance as the single argument. Then calls the Walk() method on 30/63 embed(s) and 0/0 field(s) belonging to this TxsdQandadiv instance.
func (me *TxsdQandadiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdQandadiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Qandadiv struct {
	Qandadivs []*TxsdQandadiv `xml:"http://docbook.org/ns/docbook qandadiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandadiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandadiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandadiv instance.
func (me *XsdGoPkgHasElems_Qandadiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Qandadiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Qandadivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdQandaset struct {
	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Qandaentry

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Defaultlabel_TxsdQandasetDefaultlabel_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Qandadiv

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Variablelist
}

//	If the WalkHandlers.TxsdQandaset function is not nil (ie. was set by outside code), calls it with this TxsdQandaset instance as the single argument. Then calls the Walk() method on 31/64 embed(s) and 0/0 field(s) belonging to this TxsdQandaset instance.
func (me *TxsdQandaset) Walk() (err error) {
	if fn := WalkHandlers.TxsdQandaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Qandadiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Qandaset struct {
	Qandasets []*TxsdQandaset `xml:"http://docbook.org/ns/docbook qandaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandaset instance.
func (me *XsdGoPkgHasElems_Qandaset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Qandaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Qandasets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCaution struct {
	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Note
}

//	If the WalkHandlers.TxsdCaution function is not nil (ie. was set by outside code), calls it with this TxsdCaution instance as the single argument. Then calls the Walk() method on 30/61 embed(s) and 0/0 field(s) belonging to this TxsdCaution instance.
func (me *TxsdCaution) Walk() (err error) {
	if fn := WalkHandlers.TxsdCaution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Caution struct {
	Cautions []*TxsdCaution `xml:"http://docbook.org/ns/docbook caution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Caution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Caution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Caution instance.
func (me *XsdGoPkgHasElems_Caution) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Caution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cautions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdWarning struct {
	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdWarning function is not nil (ie. was set by outside code), calls it with this TxsdWarning instance as the single argument. Then calls the Walk() method on 31/61 embed(s) and 0/0 field(s) belonging to this TxsdWarning instance.
func (me *TxsdWarning) Walk() (err error) {
	if fn := WalkHandlers.TxsdWarning; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Warning struct {
	Warnings []*TxsdWarning `xml:"http://docbook.org/ns/docbook warning"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Warning function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Warning instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Warning instance.
func (me *XsdGoPkgHasElems_Warning) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Warning; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Warnings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImportant struct {
	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informalexample
}

//	If the WalkHandlers.TxsdImportant function is not nil (ie. was set by outside code), calls it with this TxsdImportant instance as the single argument. Then calls the Walk() method on 32/61 embed(s) and 0/0 field(s) belonging to this TxsdImportant instance.
func (me *TxsdImportant) Walk() (err error) {
	if fn := WalkHandlers.TxsdImportant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Important struct {
	Importants []*TxsdImportant `xml:"http://docbook.org/ns/docbook important"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Important function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Important instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Important instance.
func (me *XsdGoPkgHasElems_Important) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Important; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Importants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsgtext struct {
	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Caution
}

//	If the WalkHandlers.TxsdMsgtext function is not nil (ie. was set by outside code), calls it with this TxsdMsgtext instance as the single argument. Then calls the Walk() method on 32/58 embed(s) and 0/0 field(s) belonging to this TxsdMsgtext instance.
func (me *TxsdMsgtext) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsgtext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgtext struct {
	Msgtext *TxsdMsgtext `xml:"http://docbook.org/ns/docbook msgtext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgtext instance.
func (me *XsdGoPkgHasElem_Msgtext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgtext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgtext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgexplan struct {
	Msgexplans []*TxsdImportant `xml:"http://docbook.org/ns/docbook msgexplan"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgexplan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgexplan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgexplan instance.
func (me *XsdGoPkgHasElems_Msgexplan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgexplan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgexplans {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Msgorig_XsdtString_ struct {
	Msgorig xsdt.String `xml:"http://docbook.org/ns/docbook msgorig,attr"`
}

type XsdGoPkgHasAttr_Msglevel_XsdtString_ struct {
	Msglevel xsdt.String `xml:"http://docbook.org/ns/docbook msglevel,attr"`
}

type XsdGoPkgHasAttr_Msgaud_XsdtString_ struct {
	Msgaud xsdt.String `xml:"http://docbook.org/ns/docbook msgaud,attr"`
}

type TxsdSimplemsgentry struct {
	XsdGoPkgHasElem_Msgtext

	XsdGoPkgHasElems_Msgexplan

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Msgorig_XsdtString_

	XsdGoPkgHasAttr_Msglevel_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Msgaud_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdSimplemsgentry function is not nil (ie. was set by outside code), calls it with this TxsdSimplemsgentry instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdSimplemsgentry instance.
func (me *TxsdSimplemsgentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdSimplemsgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Msgtext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgexplan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Simplemsgentry struct {
	Simplemsgentries []*TxsdSimplemsgentry `xml:"http://docbook.org/ns/docbook simplemsgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplemsgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplemsgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplemsgentry instance.
func (me *XsdGoPkgHasElems_Simplemsgentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Simplemsgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Simplemsgentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsgmain struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Msgtext

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.TxsdMsgmain function is not nil (ie. was set by outside code), calls it with this TxsdMsgmain instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdMsgmain instance.
func (me *TxsdMsgmain) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsgmain; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Msgtext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgmain struct {
	Msgmain *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgmain"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgmain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgmain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgmain instance.
func (me *XsdGoPkgHasElem_Msgmain) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgmain; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgmain.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgrel struct {
	Msgrels []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgrel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgrel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgrel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgrel instance.
func (me *XsdGoPkgHasElems_Msgrel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgrel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgrels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgsub struct {
	Msgsubs []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgsub"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgsub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgsub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgsub instance.
func (me *XsdGoPkgHasElems_Msgsub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgsub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgsubs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsg struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Msgrel

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msgsub

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Msgmain
}

//	If the WalkHandlers.TxsdMsg function is not nil (ie. was set by outside code), calls it with this TxsdMsg instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdMsg instance.
func (me *TxsdMsg) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Msgmain.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgrel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgsub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msg struct {
	Msgs []*TxsdMsg `xml:"http://docbook.org/ns/docbook msg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msg instance.
func (me *XsdGoPkgHasElems_Msg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgorig struct {
	Msgorigs []*TxsdLiteral `xml:"http://docbook.org/ns/docbook msgorig"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgorig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgorig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgorig instance.
func (me *XsdGoPkgHasElems_Msgorig) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgorig; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgorigs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msglevel struct {
	Msglevels []*TxsdLiteral `xml:"http://docbook.org/ns/docbook msglevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msglevel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msglevel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msglevel instance.
func (me *XsdGoPkgHasElems_Msglevel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msglevel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msglevels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgaud struct {
	Msgauds []*TxsdLiteral `xml:"http://docbook.org/ns/docbook msgaud"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgaud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgaud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgaud instance.
func (me *XsdGoPkgHasElems_Msgaud) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgaud; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgauds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsginfo struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Msgorig

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msglevel

	XsdGoPkgHasElems_Msgaud
}

//	If the WalkHandlers.TxsdMsginfo function is not nil (ie. was set by outside code), calls it with this TxsdMsginfo instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdMsginfo instance.
func (me *TxsdMsginfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsginfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Msgaud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgorig.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msglevel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msginfo struct {
	Msginfo *TxsdMsginfo `xml:"http://docbook.org/ns/docbook msginfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msginfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msginfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msginfo instance.
func (me *XsdGoPkgHasElem_Msginfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msginfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msginfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsgentry struct {
	XsdGoPkgHasElems_Msgexplan

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Msginfo

	XsdGoPkgHasElems_Msg

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdMsgentry function is not nil (ie. was set by outside code), calls it with this TxsdMsgentry instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdMsgentry instance.
func (me *TxsdMsgentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Msginfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgexplan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgentry struct {
	Msgentries []*TxsdMsgentry `xml:"http://docbook.org/ns/docbook msgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgentry instance.
func (me *XsdGoPkgHasElems_Msgentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsgset struct {
	XsdGoPkgHasElems_Simplemsgentry

	XsdGoPkgHasElems_Msgentry

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdMsgset function is not nil (ie. was set by outside code), calls it with this TxsdMsgset instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMsgset instance.
func (me *TxsdMsgset) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsgset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplemsgentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgset struct {
	Msgsets []*TxsdMsgset `xml:"http://docbook.org/ns/docbook msgset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgset instance.
func (me *XsdGoPkgHasElems_Msgset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_ struct {
	Rowspan xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook rowspan,attr"`
}

type XsdGoPkgHasAttr_Abbr_XsdtString_ struct {
	Abbr xsdt.String `xml:"http://docbook.org/ns/docbook abbr,attr"`
}

type XsdGoPkgHasAttr_Colspan_XsdtNmtoken_ struct {
	Colspan xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook colspan,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTdAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdTdScope xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdTdScope's alias type xsdt.Token.
func (me TxsdTdScope) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTdScope is "colgroup".
func (me TxsdTdScope) IsColgroup() bool { return me == "colgroup" }

//	Returns true if the value of this enumerated TxsdTdScope is "col".
func (me TxsdTdScope) IsCol() bool { return me == "col" }

//	Returns true if the value of this enumerated TxsdTdScope is "row".
func (me TxsdTdScope) IsRow() bool { return me == "row" }

//	Since TxsdTdScope is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTdScope) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTdScope is "rowgroup".
func (me TxsdTdScope) IsRowgroup() bool { return me == "rowgroup" }

//	Since TxsdTdScope is just a simple String type, this merely returns the current string value.
func (me TxsdTdScope) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Scope_TxsdTdScope_ struct {
	Scope TxsdTdScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTdValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Headers_XsdtString_ struct {
	Headers xsdt.String `xml:"http://docbook.org/ns/docbook headers,attr"`
}

type XsdGoPkgHasAttr_Axis_XsdtString_ struct {
	Axis xsdt.String `xml:"http://docbook.org/ns/docbook axis,attr"`
}

type TxsdTd struct {
	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Database

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasElems_Command

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Abbr_XsdtString_

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Colspan_XsdtNmtoken_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasAttr_Align_TxsdTdAlign_

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAttr_Scope_TxsdTdScope_

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAttr_Valign_TxsdTdValign_

	XsdGoPkgHasAttr_Headers_XsdtString_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAttr_Axis_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasElems_Type

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Userinput
}

//	If the WalkHandlers.TxsdTd function is not nil (ie. was set by outside code), calls it with this TxsdTd instance as the single argument. Then calls the Walk() method on 105/175 embed(s) and 0/0 field(s) belonging to this TxsdTd instance.
func (me *TxsdTd) Walk() (err error) {
	if fn := WalkHandlers.TxsdTd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Td struct {
	Tds []*TxsdTd `xml:"http://docbook.org/ns/docbook td"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Td function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Td instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Td instance.
func (me *XsdGoPkgHasElems_Td) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Td; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Scope_TxsdThScope_ struct {
	Scope TxsdTdScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdThValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdThAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdTh struct {
	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Token

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasAttr_Valign_TxsdThValign_

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasAttr_Align_TxsdThAlign_

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Command

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAttr_Colspan_XsdtNmtoken_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Abbr_XsdtString_

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasAttr_Axis_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAttr_Scope_TxsdThScope_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Para

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAttr_Headers_XsdtString_

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Mediaobject
}

//	If the WalkHandlers.TxsdTh function is not nil (ie. was set by outside code), calls it with this TxsdTh instance as the single argument. Then calls the Walk() method on 105/175 embed(s) and 0/0 field(s) belonging to this TxsdTh instance.
func (me *TxsdTh) Walk() (err error) {
	if fn := WalkHandlers.TxsdTh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Th struct {
	Ths []*TxsdTh `xml:"http://docbook.org/ns/docbook th"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Th function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Th instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Th instance.
func (me *XsdGoPkgHasElems_Th) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Th; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TxsdTrAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTrValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdTr struct {
	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Td

	XsdGoPkgHasElems_Th

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTrAlign_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdTrValign_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_
}

//	If the WalkHandlers.TxsdTr function is not nil (ie. was set by outside code), calls it with this TxsdTr instance as the single argument. Then calls the Walk() method on 2/21 embed(s) and 0/0 field(s) belonging to this TxsdTr instance.
func (me *TxsdTr) Walk() (err error) {
	if fn := WalkHandlers.TxsdTr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Td.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Th.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tr struct {
	Trs []*TxsdTr `xml:"http://docbook.org/ns/docbook tr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tr instance.
func (me *XsdGoPkgHasElems_Tr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TxsdTheadAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTheadValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdThead struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTheadAlign_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdTheadValign_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_
}

//	If the WalkHandlers.TxsdThead function is not nil (ie. was set by outside code), calls it with this TxsdThead instance as the single argument. Then calls the Walk() method on 2/24 embed(s) and 0/0 field(s) belonging to this TxsdThead instance.
func (me *TxsdThead) Walk() (err error) {
	if fn := WalkHandlers.TxsdThead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Tr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Thead struct {
	Thead *TxsdThead `xml:"http://docbook.org/ns/docbook thead"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Thead instance.
func (me *XsdGoPkgHasElem_Thead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Thead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tbody struct {
	Tbody *TxsdTbody `xml:"http://docbook.org/ns/docbook tbody"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tbody instance.
func (me *XsdGoPkgHasElem_Tbody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TxsdEntrytblAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdEntrytbl struct {
	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Tbody

	XsdGoPkgHasAttr_Align_TxsdEntrytblAlign_

	XsdGoPkgHasAttr_Tgroupstyle_XsdtString_

	XsdGoPkgHasElems_Spanspec

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdEntrytblColsep_

	XsdGoPkgHasAttr_Cols_XsdtNmtoken_

	XsdGoPkgHasAttr_Rowsep_TxsdEntrytblRowsep_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasElems_Colspec
}

//	If the WalkHandlers.TxsdEntrytbl function is not nil (ie. was set by outside code), calls it with this TxsdEntrytbl instance as the single argument. Then calls the Walk() method on 4/18 embed(s) and 0/0 field(s) belonging to this TxsdEntrytbl instance.
func (me *TxsdEntrytbl) Walk() (err error) {
	if fn := WalkHandlers.TxsdEntrytbl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Spanspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Entrytbl struct {
	Entrytbls []*TxsdEntrytbl `xml:"http://docbook.org/ns/docbook entrytbl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entrytbl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entrytbl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entrytbl instance.
func (me *XsdGoPkgHasElems_Entrytbl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Entrytbl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Entrytbls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRowValign xsdt.Token

//	Returns true if the value of this enumerated TxsdRowValign is "top".
func (me TxsdRowValign) IsTop() bool { return me == "top" }

//	This convenience method just performs a simple type conversion to TxsdRowValign's alias type xsdt.Token.
func (me TxsdRowValign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdRowValign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRowValign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdRowValign is just a simple String type, this merely returns the current string value.
func (me TxsdRowValign) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdRowValign is "middle".
func (me TxsdRowValign) IsMiddle() bool { return me == "middle" }

//	Returns true if the value of this enumerated TxsdRowValign is "bottom".
func (me TxsdRowValign) IsBottom() bool { return me == "bottom" }

type XsdGoPkgHasAttr_Valign_TxsdRowValign_ struct {
	Valign TxsdRowValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdEntryAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdEntryRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Morerows_XsdtNmtoken_ struct {
	Morerows xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook morerows,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdEntryValign_ struct {
	Valign TxsdRowValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Rotate_TxsdEntryRotate_ struct {
	Rotate TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rotate,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdEntryColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type TxsdEntry struct {
	XsdGoPkgHasAttr_Rotate_TxsdEntryRotate_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Colsep_TxsdEntryColsep_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAttr_Align_TxsdEntryAlign_

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Rowsep_TxsdEntryRowsep_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Morerows_XsdtNmtoken_

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasAttr_Valign_TxsdEntryValign_

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Code

	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Tag
}

//	If the WalkHandlers.TxsdEntry function is not nil (ie. was set by outside code), calls it with this TxsdEntry instance as the single argument. Then calls the Walk() method on 105/165 embed(s) and 0/0 field(s) belonging to this TxsdEntry instance.
func (me *TxsdEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Entry struct {
	Entries []*TxsdEntry `xml:"http://docbook.org/ns/docbook entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entry instance.
func (me *XsdGoPkgHasElems_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Entries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Rowsep_TxsdRowRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type TxsdRow struct {
	XsdGoPkgHasAttr_Rowsep_TxsdRowRowsep_

	XsdGoPkgHasElems_Entrytbl

	XsdGoPkgHasAttr_Valign_TxsdRowValign_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Entry

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdRow function is not nil (ie. was set by outside code), calls it with this TxsdRow instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdRow instance.
func (me *TxsdRow) Walk() (err error) {
	if fn := WalkHandlers.TxsdRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Entrytbl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Row struct {
	Rows []*TxsdRow `xml:"http://docbook.org/ns/docbook row"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Row instance.
func (me *XsdGoPkgHasElems_Row) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Row; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Valign_TxsdTfootValign_ struct {
	Valign TxsdColValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdTfoot struct {
	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTfootAlign_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Valign_TxsdTfootValign_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Colspec
}

//	If the WalkHandlers.TxsdTfoot function is not nil (ie. was set by outside code), calls it with this TxsdTfoot instance as the single argument. Then calls the Walk() method on 3/24 embed(s) and 0/0 field(s) belonging to this TxsdTfoot instance.
func (me *TxsdTfoot) Walk() (err error) {
	if fn := WalkHandlers.TxsdTfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tfoot struct {
	Tfoot *TxsdTfoot `xml:"http://docbook.org/ns/docbook tfoot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tfoot instance.
func (me *XsdGoPkgHasElem_Tfoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tfoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTgroup struct {
	XsdGoPkgHasAttr_Align_TxsdTgroupAlign_

	XsdGoPkgHasAttr_Tgroupstyle_XsdtString_

	XsdGoPkgHasElems_Spanspec

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdTgroupRowsep_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdTgroupColsep_

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasAttr_Cols_XsdtNmtoken_

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasElem_Tbody
}

//	If the WalkHandlers.TxsdTgroup function is not nil (ie. was set by outside code), calls it with this TxsdTgroup instance as the single argument. Then calls the Walk() method on 5/15 embed(s) and 0/0 field(s) belonging to this TxsdTgroup instance.
func (me *TxsdTgroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdTgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Spanspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tfoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tgroup struct {
	Tgroups []*TxsdTgroup `xml:"http://docbook.org/ns/docbook tgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tgroup instance.
func (me *XsdGoPkgHasElems_Tgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tgroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Rules_TxsdInformaltableRules_ struct {
	Rules TxsdTableRules `xml:"http://docbook.org/ns/docbook rules,attr"`
}

type XsdGoPkgHasAttr_Frame_TxsdInformaltableFrame_ struct {
	Frame TxsdTableFrame `xml:"http://docbook.org/ns/docbook frame,attr"`
}

type XsdGoPkgHasAttr_Pgwide_TxsdInformaltablePgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type XsdGoPkgHasAttr_Orient_TxsdInformaltableOrient_ struct {
	Orient TxsdTableOrient `xml:"http://docbook.org/ns/docbook orient,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdInformaltableRowsep_ struct {
	Rowsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdInformaltableColsep_ struct {
	Colsep TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Rowheader_TxsdInformaltableRowheader_ struct {
	Rowheader TxsdTableRowheader `xml:"http://docbook.org/ns/docbook rowheader,attr"`
}

type TxsdInformaltable struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Border_XsdtNmtoken_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Tbody

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Tgroup

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Cellpadding_XsdtString_

	XsdGoPkgHasElems_Colgroup

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Rules_TxsdInformaltableRules_

	XsdGoPkgHasAttr_Frame_TxsdInformaltableFrame_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasElems_Col

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Pgwide_TxsdInformaltablePgwide_

	XsdGoPkgHasAttr_Cellspacing_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Orient_TxsdInformaltableOrient_

	XsdGoPkgHasAttr_Summary_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdInformaltableRowsep_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Colsep_TxsdInformaltableColsep_

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Tabstyle_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAttr_Rowheader_TxsdInformaltableRowheader_
}

//	If the WalkHandlers.TxsdInformaltable function is not nil (ie. was set by outside code), calls it with this TxsdInformaltable instance as the single argument. Then calls the Walk() method on 7/41 embed(s) and 0/0 field(s) belonging to this TxsdInformaltable instance.
func (me *TxsdInformaltable) Walk() (err error) {
	if fn := WalkHandlers.TxsdInformaltable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Tr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Col.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tfoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Informaltable struct {
	Informaltables []*TxsdInformaltable `xml:"http://docbook.org/ns/docbook informaltable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informaltable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informaltable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informaltable instance.
func (me *XsdGoPkgHasElems_Informaltable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Informaltable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Informaltables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Arearefs_XsdtIdrefs_ struct {
	Arearefs xsdt.Idrefs `xml:"http://docbook.org/ns/docbook arearefs,attr"`
}

type TxsdCallout struct {
	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Arearefs_XsdtIdrefs_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Orderedlist
}

//	If the WalkHandlers.TxsdCallout function is not nil (ie. was set by outside code), calls it with this TxsdCallout instance as the single argument. Then calls the Walk() method on 34/58 embed(s) and 0/0 field(s) belonging to this TxsdCallout instance.
func (me *TxsdCallout) Walk() (err error) {
	if fn := WalkHandlers.TxsdCallout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Callout struct {
	Callouts []*TxsdCallout `xml:"http://docbook.org/ns/docbook callout"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Callout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Callout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Callout instance.
func (me *XsdGoPkgHasElems_Callout) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Callout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Callouts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCalloutlist struct {
	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Callout

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdCalloutlist function is not nil (ie. was set by outside code), calls it with this TxsdCalloutlist instance as the single argument. Then calls the Walk() method on 36/62 embed(s) and 0/0 field(s) belonging to this TxsdCalloutlist instance.
func (me *TxsdCalloutlist) Walk() (err error) {
	if fn := WalkHandlers.TxsdCalloutlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Callout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Calloutlist struct {
	Calloutlists []*TxsdCalloutlist `xml:"http://docbook.org/ns/docbook calloutlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Calloutlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Calloutlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Calloutlist instance.
func (me *XsdGoPkgHasElems_Calloutlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Calloutlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Calloutlists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_TxsdInformalfigurePgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdInformalfigure struct {
	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Pgwide_TxsdInformalfigurePgwide_

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Procedure
}

//	If the WalkHandlers.TxsdInformalfigure function is not nil (ie. was set by outside code), calls it with this TxsdInformalfigure instance as the single argument. Then calls the Walk() method on 35/63 embed(s) and 0/0 field(s) belonging to this TxsdInformalfigure instance.
func (me *TxsdInformalfigure) Walk() (err error) {
	if fn := WalkHandlers.TxsdInformalfigure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Informalfigure struct {
	Informalfigures []*TxsdInformalfigure `xml:"http://docbook.org/ns/docbook informalfigure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalfigure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalfigure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalfigure instance.
func (me *XsdGoPkgHasElems_Informalfigure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Informalfigure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Informalfigures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSidebar struct {
	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalfigure
}

//	If the WalkHandlers.TxsdSidebar function is not nil (ie. was set by outside code), calls it with this TxsdSidebar instance as the single argument. Then calls the Walk() method on 37/61 embed(s) and 0/0 field(s) belonging to this TxsdSidebar instance.
func (me *TxsdSidebar) Walk() (err error) {
	if fn := WalkHandlers.TxsdSidebar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sidebar struct {
	Sidebars []*TxsdSidebar `xml:"http://docbook.org/ns/docbook sidebar"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sidebar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sidebar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sidebar instance.
func (me *XsdGoPkgHasElems_Sidebar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sidebar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sidebars {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossterm struct {
	Glossterm *TxsdGlossterm `xml:"http://docbook.org/ns/docbook glossterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Glossterm instance.
func (me *XsdGoPkgHasElem_Glossterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Sortas_XsdtString_ struct {
	Sortas xsdt.String `xml:"http://docbook.org/ns/docbook sortas,attr"`
}

type XsdGoPkgHasAttr_Otherterm_XsdtIdref_ struct {
	Otherterm xsdt.Idref `xml:"http://docbook.org/ns/docbook otherterm,attr"`
}

type TxsdGlossseealso struct {
	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAttr_Otherterm_XsdtIdref_

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Function

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdGlossseealso function is not nil (ie. was set by outside code), calls it with this TxsdGlossseealso instance as the single argument. Then calls the Walk() method on 73/103 embed(s) and 0/0 field(s) belonging to this TxsdGlossseealso instance.
func (me *TxsdGlossseealso) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossseealso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossseealso struct {
	Glossseealsos []*TxsdGlossseealso `xml:"http://docbook.org/ns/docbook glossseealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossseealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossseealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossseealso instance.
func (me *XsdGoPkgHasElems_Glossseealso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossseealso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossseealsos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Subject_XsdtString_ struct {
	Subject xsdt.String `xml:"http://docbook.org/ns/docbook subject,attr"`
}

type TxsdGlossdef struct {
	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Subject_XsdtString_

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Glossseealso

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screenshot
}

//	If the WalkHandlers.TxsdGlossdef function is not nil (ie. was set by outside code), calls it with this TxsdGlossdef instance as the single argument. Then calls the Walk() method on 38/60 embed(s) and 0/0 field(s) belonging to this TxsdGlossdef instance.
func (me *TxsdGlossdef) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossseealso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossdef struct {
	Glossdefs []*TxsdGlossdef `xml:"http://docbook.org/ns/docbook glossdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossdef instance.
func (me *XsdGoPkgHasElems_Glossdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossdefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Abbrev struct {
	Abbrev *TxsdAbbrev `xml:"http://docbook.org/ns/docbook abbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abbrev instance.
func (me *XsdGoPkgHasElem_Abbrev) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Abbrev; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Acronym struct {
	Acronym *TxsdAbbrev `xml:"http://docbook.org/ns/docbook acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Acronym instance.
func (me *XsdGoPkgHasElem_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glosssee struct {
	Glosssee *TxsdGlossseealso `xml:"http://docbook.org/ns/docbook glosssee"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glosssee function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glosssee instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glosssee instance.
func (me *XsdGoPkgHasElem_Glosssee) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glosssee; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glosssee.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlossentry struct {
	XsdGoPkgHasAttr_Sortas_XsdtString_

	XsdGoPkgHasElems_Glossdef

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElem_Abbrev

	XsdGoPkgHasElem_Acronym

	XsdGoPkgHasElem_Glosssee

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Glossterm
}

//	If the WalkHandlers.TxsdGlossentry function is not nil (ie. was set by outside code), calls it with this TxsdGlossentry instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdGlossentry instance.
func (me *TxsdGlossentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Glossdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Glosssee.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossentry struct {
	Glossentries []*TxsdGlossentry `xml:"http://docbook.org/ns/docbook glossentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossentry instance.
func (me *XsdGoPkgHasElems_Glossentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlosslist struct {
	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdGlosslist function is not nil (ie. was set by outside code), calls it with this TxsdGlosslist instance as the single argument. Then calls the Walk() method on 39/62 embed(s) and 0/0 field(s) belonging to this TxsdGlosslist instance.
func (me *TxsdGlosslist) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlosslist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glosslist struct {
	Glosslists []*TxsdGlosslist `xml:"http://docbook.org/ns/docbook glosslist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glosslist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glosslist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glosslist instance.
func (me *XsdGoPkgHasElems_Glosslist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glosslist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glosslists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Encoding_XsdtString_ struct {
	Encoding xsdt.String `xml:"http://docbook.org/ns/docbook encoding,attr"`
}

type XsdGoPkgHasAttr_Fileref_XsdtString_ struct {
	Fileref xsdt.String `xml:"http://docbook.org/ns/docbook fileref,attr"`
}

type XsdGoPkgHasAttr_Entityref_XsdtEntity_ struct {
	Entityref xsdt.Entity `xml:"http://docbook.org/ns/docbook entityref,attr"`
}

type XsdGoPkgHasAttr_Format_XsdtString_ struct {
	Format xsdt.String `xml:"http://docbook.org/ns/docbook format,attr"`
}

type TxsdTextdata struct {
	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Encoding_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Fileref_XsdtString_
}

//	If the WalkHandlers.TxsdTextdata function is not nil (ie. was set by outside code), calls it with this TxsdTextdata instance as the single argument. Then calls the Walk() method on 0/7 embed(s) and 0/0 field(s) belonging to this TxsdTextdata instance.
func (me *TxsdTextdata) Walk() (err error) {
	if fn := WalkHandlers.TxsdTextdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Textdata struct {
	Textdata *TxsdTextdata `xml:"http://docbook.org/ns/docbook textdata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Textdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Textdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Textdata instance.
func (me *XsdGoPkgHasElem_Textdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Textdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Textdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTextobject struct {
	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElem_Phrase

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElem_Textdata

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdTextobject function is not nil (ie. was set by outside code), calls it with this TxsdTextobject instance as the single argument. Then calls the Walk() method on 40/61 embed(s) and 0/0 field(s) belonging to this TxsdTextobject instance.
func (me *TxsdTextobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdTextobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Textdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Textobject struct {
	Textobjects []*TxsdTextobject `xml:"http://docbook.org/ns/docbook textobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Textobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Textobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Textobject instance.
func (me *XsdGoPkgHasElems_Textobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Textobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Textobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Continuation_TxsdSynopsisContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdSynopsisLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdSynopsis struct {
	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Continuation_TxsdSynopsisContinuation_

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Xref

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasAttr_Linenumbering_TxsdSynopsisLinenumbering_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdSynopsis function is not nil (ie. was set by outside code), calls it with this TxsdSynopsis instance as the single argument. Then calls the Walk() method on 77/112 embed(s) and 0/0 field(s) belonging to this TxsdSynopsis instance.
func (me *TxsdSynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Textobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Synopsis struct {
	Synopsises []*TxsdSynopsis `xml:"http://docbook.org/ns/docbook synopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopsis instance.
func (me *XsdGoPkgHasElems_Synopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Synopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Synopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_TxsdFigurePgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdFigure struct {
	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Pgwide_TxsdFigurePgwide_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Methodsynopsis
}

//	If the WalkHandlers.TxsdFigure function is not nil (ie. was set by outside code), calls it with this TxsdFigure instance as the single argument. Then calls the Walk() method on 40/65 embed(s) and 0/0 field(s) belonging to this TxsdFigure instance.
func (me *TxsdFigure) Walk() (err error) {
	if fn := WalkHandlers.TxsdFigure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Figure struct {
	Figures []*TxsdFigure `xml:"http://docbook.org/ns/docbook figure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Figure instance.
func (me *XsdGoPkgHasElems_Figure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Figure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Figures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInformalexample struct {
	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdInformalexample function is not nil (ie. was set by outside code), calls it with this TxsdInformalexample instance as the single argument. Then calls the Walk() method on 40/62 embed(s) and 0/0 field(s) belonging to this TxsdInformalexample instance.
func (me *TxsdInformalexample) Walk() (err error) {
	if fn := WalkHandlers.TxsdInformalexample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Informalexample struct {
	Informalexamples []*TxsdInformalexample `xml:"http://docbook.org/ns/docbook informalexample"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalexample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalexample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalexample instance.
func (me *XsdGoPkgHasElems_Informalexample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Informalexample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Informalexamples {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPara struct {
	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Keycap
}

//	If the WalkHandlers.TxsdPara function is not nil (ie. was set by outside code), calls it with this TxsdPara instance as the single argument. Then calls the Walk() method on 113/151 embed(s) and 0/0 field(s) belonging to this TxsdPara instance.
func (me *TxsdPara) Walk() (err error) {
	if fn := WalkHandlers.TxsdPara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Para struct {
	Paras []*TxsdPara `xml:"http://docbook.org/ns/docbook para"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Para function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Para instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Para instance.
func (me *XsdGoPkgHasElems_Para) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Para; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paras {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevdescription struct {
	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informaltable
}

//	If the WalkHandlers.TxsdRevdescription function is not nil (ie. was set by outside code), calls it with this TxsdRevdescription instance as the single argument. Then calls the Walk() method on 42/58 embed(s) and 0/0 field(s) belonging to this TxsdRevdescription instance.
func (me *TxsdRevdescription) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevdescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Revdescription struct {
	Revdescription *TxsdRevdescription `xml:"http://docbook.org/ns/docbook revdescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revdescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revdescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revdescription instance.
func (me *XsdGoPkgHasElem_Revdescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Revdescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Revdescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Date struct {
	Date *TxsdDate `xml:"http://docbook.org/ns/docbook date"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Date instance.
func (me *XsdGoPkgHasElem_Date) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Date; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Revnumber struct {
	Revnumber *TxsdLiteral `xml:"http://docbook.org/ns/docbook revnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revnumber instance.
func (me *XsdGoPkgHasElem_Revnumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Revnumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Revnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Revremark struct {
	Revremark *TxsdLiteral `xml:"http://docbook.org/ns/docbook revremark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revremark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revremark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revremark instance.
func (me *XsdGoPkgHasElem_Revremark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Revremark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Revremark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevision struct {
	XsdGoPkgHasElem_Revdescription

	XsdGoPkgHasElem_Date

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElem_Revnumber

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElem_Revremark

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdRevision function is not nil (ie. was set by outside code), calls it with this TxsdRevision instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdRevision instance.
func (me *TxsdRevision) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Revdescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Revnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Revremark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Revision struct {
	Revisions []*TxsdRevision `xml:"http://docbook.org/ns/docbook revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revision instance.
func (me *XsdGoPkgHasElems_Revision) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Revision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revisions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevhistory struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Revision

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdRevhistory function is not nil (ie. was set by outside code), calls it with this TxsdRevhistory instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdRevhistory instance.
func (me *TxsdRevhistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevhistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revision.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Revhistory struct {
	Revhistories []*TxsdRevhistory `xml:"http://docbook.org/ns/docbook revhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revhistory instance.
func (me *XsdGoPkgHasElems_Revhistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Revhistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revhistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_TxsdExamplePgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdExample struct {
	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasAttr_Pgwide_TxsdExamplePgwide_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample
}

//	If the WalkHandlers.TxsdExample function is not nil (ie. was set by outside code), calls it with this TxsdExample instance as the single argument. Then calls the Walk() method on 44/66 embed(s) and 0/0 field(s) belonging to this TxsdExample instance.
func (me *TxsdExample) Walk() (err error) {
	if fn := WalkHandlers.TxsdExample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Example struct {
	Examples []*TxsdExample `xml:"http://docbook.org/ns/docbook example"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Example function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Example instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Example instance.
func (me *XsdGoPkgHasElems_Example) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Example; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Examples {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Taskrelated struct {
	Taskrelated *TxsdSidebar `xml:"http://docbook.org/ns/docbook taskrelated"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Taskrelated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Taskrelated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Taskrelated instance.
func (me *XsdGoPkgHasElem_Taskrelated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Taskrelated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Taskrelated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tasksummary struct {
	Tasksummary *TxsdSidebar `xml:"http://docbook.org/ns/docbook tasksummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tasksummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tasksummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tasksummary instance.
func (me *XsdGoPkgHasElem_Tasksummary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tasksummary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tasksummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Procedure struct {
	Procedure *TxsdProcedure `xml:"http://docbook.org/ns/docbook procedure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Procedure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Procedure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Procedure instance.
func (me *XsdGoPkgHasElem_Procedure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Procedure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Taskprerequisites struct {
	Taskprerequisites *TxsdSidebar `xml:"http://docbook.org/ns/docbook taskprerequisites"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Taskprerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Taskprerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Taskprerequisites instance.
func (me *XsdGoPkgHasElem_Taskprerequisites) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Taskprerequisites; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Taskprerequisites.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTask struct {
	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Tasksummary

	XsdGoPkgHasElem_Procedure

	XsdGoPkgHasElem_Taskprerequisites

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElem_Taskrelated
}

//	If the WalkHandlers.TxsdTask function is not nil (ie. was set by outside code), calls it with this TxsdTask instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdTask instance.
func (me *TxsdTask) Walk() (err error) {
	if fn := WalkHandlers.TxsdTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Taskrelated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tasksummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Taskprerequisites.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Task struct {
	Tasks []*TxsdTask `xml:"http://docbook.org/ns/docbook task"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Task instance.
func (me *XsdGoPkgHasElems_Task) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Task; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Spacing_TxsdVariablelistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type XsdGoPkgHasAttr_Termlength_XsdtString_ struct {
	Termlength xsdt.String `xml:"http://docbook.org/ns/docbook termlength,attr"`
}

type XsdGoPkgHasElem_Listitem struct {
	Listitem *TxsdListitem `xml:"http://docbook.org/ns/docbook listitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Listitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Listitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Listitem instance.
func (me *XsdGoPkgHasElem_Listitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Listitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Listitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Term struct {
	Terms []*TxsdMember `xml:"http://docbook.org/ns/docbook term"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Term function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Term instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Term instance.
func (me *XsdGoPkgHasElems_Term) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Term; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Terms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVarlistentry struct {
	XsdGoPkgHasElem_Listitem

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Term

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdVarlistentry function is not nil (ie. was set by outside code), calls it with this TxsdVarlistentry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdVarlistentry instance.
func (me *TxsdVarlistentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdVarlistentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Listitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Term.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Varlistentry struct {
	Varlistentries []*TxsdVarlistentry `xml:"http://docbook.org/ns/docbook varlistentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varlistentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varlistentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varlistentry instance.
func (me *XsdGoPkgHasElems_Varlistentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Varlistentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Varlistentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVariablelist struct {
	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Termlength_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Varlistentry

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Spacing_TxsdVariablelistSpacing_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdVariablelist function is not nil (ie. was set by outside code), calls it with this TxsdVariablelist instance as the single argument. Then calls the Walk() method on 47/64 embed(s) and 0/0 field(s) belonging to this TxsdVariablelist instance.
func (me *TxsdVariablelist) Walk() (err error) {
	if fn := WalkHandlers.TxsdVariablelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varlistentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Variablelist struct {
	Variablelists []*TxsdVariablelist `xml:"http://docbook.org/ns/docbook variablelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Variablelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Variablelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Variablelist instance.
func (me *XsdGoPkgHasElems_Variablelist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Variablelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Variablelists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCaption struct {
	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Informaltable
}

//	If the WalkHandlers.TxsdCaption function is not nil (ie. was set by outside code), calls it with this TxsdCaption instance as the single argument. Then calls the Walk() method on 47/73 embed(s) and 0/0 field(s) belonging to this TxsdCaption instance.
func (me *TxsdCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Caption struct {
	Caption *TxsdCaption `xml:"http://docbook.org/ns/docbook caption"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Caption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Caption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Caption instance.
func (me *XsdGoPkgHasElem_Caption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Caption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Caption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TxsdImagedataAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdImagedataValign_ struct {
	Valign TxsdRowValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Scalefit_TxsdImagedataScalefit_ struct {
	Scalefit TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook scalefit,attr"`
}

type XsdGoPkgHasAttr_Scale_XsdtNmtoken_ struct {
	Scale xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook scale,attr"`
}

type XsdGoPkgHasAttr_Contentwidth_XsdtString_ struct {
	Contentwidth xsdt.String `xml:"http://docbook.org/ns/docbook contentwidth,attr"`
}

type XsdGoPkgHasAttr_Contentdepth_XsdtString_ struct {
	Contentdepth xsdt.String `xml:"http://docbook.org/ns/docbook contentdepth,attr"`
}

type XsdGoPkgHasAttr_Depth_XsdtString_ struct {
	Depth xsdt.String `xml:"http://docbook.org/ns/docbook depth,attr"`
}

type TxsdImagedata struct {
	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdImagedataValign_

	XsdGoPkgHasAttr_Scalefit_TxsdImagedataScalefit_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Scale_XsdtNmtoken_

	XsdGoPkgHasAttr_Contentwidth_XsdtString_

	XsdGoPkgHasAttr_Contentdepth_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Depth_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Align_TxsdImagedataAlign_
}

//	If the WalkHandlers.TxsdImagedata function is not nil (ie. was set by outside code), calls it with this TxsdImagedata instance as the single argument. Then calls the Walk() method on 0/14 embed(s) and 0/0 field(s) belonging to this TxsdImagedata instance.
func (me *TxsdImagedata) Walk() (err error) {
	if fn := WalkHandlers.TxsdImagedata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Imagedata struct {
	Imagedata *TxsdImagedata `xml:"http://docbook.org/ns/docbook imagedata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imagedata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imagedata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imagedata instance.
func (me *XsdGoPkgHasElem_Imagedata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Imagedata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Imagedata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageobject struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Imagedata

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdImageobject function is not nil (ie. was set by outside code), calls it with this TxsdImageobject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdImageobject instance.
func (me *TxsdImageobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Imagedata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Imageobject struct {
	Imageobjects []*TxsdImageobject `xml:"http://docbook.org/ns/docbook imageobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imageobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imageobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imageobject instance.
func (me *XsdGoPkgHasElems_Imageobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Imageobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Imageobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAudiodata struct {
	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Fileref_XsdtString_
}

//	If the WalkHandlers.TxsdAudiodata function is not nil (ie. was set by outside code), calls it with this TxsdAudiodata instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdAudiodata instance.
func (me *TxsdAudiodata) Walk() (err error) {
	if fn := WalkHandlers.TxsdAudiodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Audiodata struct {
	Audiodata *TxsdAudiodata `xml:"http://docbook.org/ns/docbook audiodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audiodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audiodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audiodata instance.
func (me *XsdGoPkgHasElem_Audiodata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Audiodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Audiodata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAudioobject struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElem_Audiodata

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdAudioobject function is not nil (ie. was set by outside code), calls it with this TxsdAudioobject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdAudioobject instance.
func (me *TxsdAudioobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdAudioobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Audiodata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Audioobject struct {
	Audioobjects []*TxsdAudioobject `xml:"http://docbook.org/ns/docbook audioobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audioobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audioobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audioobject instance.
func (me *XsdGoPkgHasElems_Audioobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Audioobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Audioobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageobjectco struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Imageobject
}

//	If the WalkHandlers.TxsdImageobjectco function is not nil (ie. was set by outside code), calls it with this TxsdImageobjectco instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdImageobjectco instance.
func (me *TxsdImageobjectco) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageobjectco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Imageobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Areaspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Imageobjectco struct {
	Imageobjectcos []*TxsdImageobjectco `xml:"http://docbook.org/ns/docbook imageobjectco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imageobjectco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imageobjectco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imageobjectco instance.
func (me *XsdGoPkgHasElems_Imageobjectco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Imageobjectco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Imageobjectcos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMediaobject struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Audioobject

	XsdGoPkgHasElems_Imageobjectco

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Videoobject

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Imageobject

	XsdGoPkgHasElem_Alt
}

//	If the WalkHandlers.TxsdMediaobject function is not nil (ie. was set by outside code), calls it with this TxsdMediaobject instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdMediaobject instance.
func (me *TxsdMediaobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdMediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Caption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Textobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Imageobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audioobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Imageobjectco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Mediaobject struct {
	Mediaobjects []*TxsdMediaobject `xml:"http://docbook.org/ns/docbook mediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mediaobject instance.
func (me *XsdGoPkgHasElems_Mediaobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Mediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mediaobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_TxsdEquationPgwide_ struct {
	Pgwide TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdEquation struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Pgwide_TxsdEquationPgwide_

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdEquation function is not nil (ie. was set by outside code), calls it with this TxsdEquation instance as the single argument. Then calls the Walk() method on 5/13 embed(s) and 0/0 field(s) belonging to this TxsdEquation instance.
func (me *TxsdEquation) Walk() (err error) {
	if fn := WalkHandlers.TxsdEquation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Caption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mathphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Equation struct {
	Equations []*TxsdEquation `xml:"http://docbook.org/ns/docbook equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Equation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Equation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Equation instance.
func (me *XsdGoPkgHasElems_Equation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Equation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Equations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTip struct {
	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Formalpara
}

//	If the WalkHandlers.TxsdTip function is not nil (ie. was set by outside code), calls it with this TxsdTip instance as the single argument. Then calls the Walk() method on 49/61 embed(s) and 0/0 field(s) belonging to this TxsdTip instance.
func (me *TxsdTip) Walk() (err error) {
	if fn := WalkHandlers.TxsdTip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tip struct {
	Tips []*TxsdTip `xml:"http://docbook.org/ns/docbook tip"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tip instance.
func (me *XsdGoPkgHasElems_Tip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tips {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Label_XsdtNmtoken_ struct {
	Label xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook label,attr"`
}

type TxsdFootnote struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAttr_Label_XsdtNmtoken_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Constraintdef
}

//	If the WalkHandlers.TxsdFootnote function is not nil (ie. was set by outside code), calls it with this TxsdFootnote instance as the single argument. Then calls the Walk() method on 49/59 embed(s) and 0/0 field(s) belonging to this TxsdFootnote instance.
func (me *TxsdFootnote) Walk() (err error) {
	if fn := WalkHandlers.TxsdFootnote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Footnote struct {
	Footnotes []*TxsdFootnote `xml:"http://docbook.org/ns/docbook footnote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Footnote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Footnote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Footnote instance.
func (me *XsdGoPkgHasElems_Footnote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Footnote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Footnotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Baseform_XsdtString_ struct {
	Baseform xsdt.String `xml:"http://docbook.org/ns/docbook baseform,attr"`
}

type TxsdFirstterm struct {
	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Email

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Token

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Tag
}

//	If the WalkHandlers.TxsdFirstterm function is not nil (ie. was set by outside code), calls it with this TxsdFirstterm instance as the single argument. Then calls the Walk() method on 74/103 embed(s) and 0/0 field(s) belonging to this TxsdFirstterm instance.
func (me *TxsdFirstterm) Walk() (err error) {
	if fn := WalkHandlers.TxsdFirstterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Firstterm struct {
	Firstterms []*TxsdFirstterm `xml:"http://docbook.org/ns/docbook firstterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Firstterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Firstterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Firstterm instance.
func (me *XsdGoPkgHasElems_Firstterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Firstterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Firstterms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCitation struct {
	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Option

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Person

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Application

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Mousebutton
}

//	If the WalkHandlers.TxsdCitation function is not nil (ie. was set by outside code), calls it with this TxsdCitation instance as the single argument. Then calls the Walk() method on 75/102 embed(s) and 0/0 field(s) belonging to this TxsdCitation instance.
func (me *TxsdCitation) Walk() (err error) {
	if fn := WalkHandlers.TxsdCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Citation struct {
	Citations []*TxsdCitation `xml:"http://docbook.org/ns/docbook citation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citation instance.
func (me *XsdGoPkgHasElems_Citation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Citation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Citations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSimpara struct {
	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Constant
}

//	If the WalkHandlers.TxsdSimpara function is not nil (ie. was set by outside code), calls it with this TxsdSimpara instance as the single argument. Then calls the Walk() method on 77/103 embed(s) and 0/0 field(s) belonging to this TxsdSimpara instance.
func (me *TxsdSimpara) Walk() (err error) {
	if fn := WalkHandlers.TxsdSimpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Simpara struct {
	Simparas []*TxsdSimpara `xml:"http://docbook.org/ns/docbook simpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simpara instance.
func (me *XsdGoPkgHasElems_Simpara) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Simpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Simparas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPersonblurb struct {
	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdPersonblurb function is not nil (ie. was set by outside code), calls it with this TxsdPersonblurb instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdPersonblurb instance.
func (me *TxsdPersonblurb) Walk() (err error) {
	if fn := WalkHandlers.TxsdPersonblurb; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Personblurb struct {
	Personblurbs []*TxsdPersonblurb `xml:"http://docbook.org/ns/docbook personblurb"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Personblurb function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Personblurb instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Personblurb instance.
func (me *XsdGoPkgHasElems_Personblurb) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Personblurb; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Personblurbs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPerson struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdPerson function is not nil (ie. was set by outside code), calls it with this TxsdPerson instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdPerson instance.
func (me *TxsdPerson) Walk() (err error) {
	if fn := WalkHandlers.TxsdPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personblurb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Person struct {
	Persons []*TxsdPerson `xml:"http://docbook.org/ns/docbook person"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Person function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Person instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Person instance.
func (me *XsdGoPkgHasElems_Person) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Person; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Persons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTermdef struct {
	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasAttr_Sortas_XsdtString_

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Command
}

//	If the WalkHandlers.TxsdTermdef function is not nil (ie. was set by outside code), calls it with this TxsdTermdef instance as the single argument. Then calls the Walk() method on 77/104 embed(s) and 0/0 field(s) belonging to this TxsdTermdef instance.
func (me *TxsdTermdef) Walk() (err error) {
	if fn := WalkHandlers.TxsdTermdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Termdef struct {
	Termdefs []*TxsdTermdef `xml:"http://docbook.org/ns/docbook termdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Termdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Termdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Termdef instance.
func (me *XsdGoPkgHasElems_Termdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Termdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Termdefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUserinput struct {
	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Accel
}

//	If the WalkHandlers.TxsdUserinput function is not nil (ie. was set by outside code), calls it with this TxsdUserinput instance as the single argument. Then calls the Walk() method on 40/55 embed(s) and 0/0 field(s) belonging to this TxsdUserinput instance.
func (me *TxsdUserinput) Walk() (err error) {
	if fn := WalkHandlers.TxsdUserinput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Userinput struct {
	Userinputs []*TxsdUserinput `xml:"http://docbook.org/ns/docbook userinput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Userinput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Userinput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Userinput instance.
func (me *XsdGoPkgHasElems_Userinput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Userinput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Userinputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdComputeroutput struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdComputeroutput function is not nil (ie. was set by outside code), calls it with this TxsdComputeroutput instance as the single argument. Then calls the Walk() method on 28/41 embed(s) and 0/0 field(s) belonging to this TxsdComputeroutput instance.
func (me *TxsdComputeroutput) Walk() (err error) {
	if fn := WalkHandlers.TxsdComputeroutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Computeroutput struct {
	Computeroutputs []*TxsdComputeroutput `xml:"http://docbook.org/ns/docbook computeroutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Computeroutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Computeroutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Computeroutput instance.
func (me *XsdGoPkgHasElems_Computeroutput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Computeroutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Computeroutputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefentrytitle struct {
	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Command
}

//	If the WalkHandlers.TxsdRefentrytitle function is not nil (ie. was set by outside code), calls it with this TxsdRefentrytitle instance as the single argument. Then calls the Walk() method on 80/102 embed(s) and 0/0 field(s) belonging to this TxsdRefentrytitle instance.
func (me *TxsdRefentrytitle) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefentrytitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refentrytitle struct {
	Refentrytitle *TxsdRefentrytitle `xml:"http://docbook.org/ns/docbook refentrytitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refentrytitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refentrytitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refentrytitle instance.
func (me *XsdGoPkgHasElem_Refentrytitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refentrytitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refentrytitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Manvolnum struct {
	Manvolnum *TxsdLiteral `xml:"http://docbook.org/ns/docbook manvolnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Manvolnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Manvolnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Manvolnum instance.
func (me *XsdGoPkgHasElem_Manvolnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Manvolnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Manvolnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCiterefentry struct {
	XsdGoPkgHasElem_Manvolnum

	XsdGoPkgHasElem_Refentrytitle

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdCiterefentry function is not nil (ie. was set by outside code), calls it with this TxsdCiterefentry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdCiterefentry instance.
func (me *TxsdCiterefentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdCiterefentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Manvolnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Refentrytitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Citerefentry struct {
	Citerefentries []*TxsdCiterefentry `xml:"http://docbook.org/ns/docbook citerefentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citerefentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citerefentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citerefentry instance.
func (me *XsdGoPkgHasElems_Citerefentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Citerefentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Citerefentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOrgdiv struct {
	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Productnumber
}

//	If the WalkHandlers.TxsdOrgdiv function is not nil (ie. was set by outside code), calls it with this TxsdOrgdiv instance as the single argument. Then calls the Walk() method on 81/102 embed(s) and 0/0 field(s) belonging to this TxsdOrgdiv instance.
func (me *TxsdOrgdiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdOrgdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Orgdiv struct {
	Orgdivs []*TxsdOrgdiv `xml:"http://docbook.org/ns/docbook orgdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orgdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orgdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orgdiv instance.
func (me *XsdGoPkgHasElems_Orgdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Orgdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Orgdivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOrg struct {
	XsdGoPkgHasElems_Email

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Affiliation
}

//	If the WalkHandlers.TxsdOrg function is not nil (ie. was set by outside code), calls it with this TxsdOrg instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdOrg instance.
func (me *TxsdOrg) Walk() (err error) {
	if fn := WalkHandlers.TxsdOrg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Org struct {
	Orgs []*TxsdOrg `xml:"http://docbook.org/ns/docbook org"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Org function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Org instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Org instance.
func (me *XsdGoPkgHasElems_Org) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Org; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Orgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlossterm struct {
	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdGlossterm function is not nil (ie. was set by outside code), calls it with this TxsdGlossterm instance as the single argument. Then calls the Walk() method on 82/103 embed(s) and 0/0 field(s) belonging to this TxsdGlossterm instance.
func (me *TxsdGlossterm) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossterm struct {
	Glossterms []*TxsdGlossterm `xml:"http://docbook.org/ns/docbook glossterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossterm instance.
func (me *XsdGoPkgHasElems_Glossterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossterms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEmphasis struct {
	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Database
}

//	If the WalkHandlers.TxsdEmphasis function is not nil (ie. was set by outside code), calls it with this TxsdEmphasis instance as the single argument. Then calls the Walk() method on 83/102 embed(s) and 0/0 field(s) belonging to this TxsdEmphasis instance.
func (me *TxsdEmphasis) Walk() (err error) {
	if fn := WalkHandlers.TxsdEmphasis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Emphasis struct {
	Emphasises []*TxsdEmphasis `xml:"http://docbook.org/ns/docbook emphasis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Emphasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Emphasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Emphasis instance.
func (me *XsdGoPkgHasElems_Emphasis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Emphasis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Emphasises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrimary struct {
	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAttr_Sortas_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdPrimary function is not nil (ie. was set by outside code), calls it with this TxsdPrimary instance as the single argument. Then calls the Walk() method on 84/103 embed(s) and 0/0 field(s) belonging to this TxsdPrimary instance.
func (me *TxsdPrimary) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrimary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Primary struct {
	Primary *TxsdPrimary `xml:"http://docbook.org/ns/docbook primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Primary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Primary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Primary instance.
func (me *XsdGoPkgHasElem_Primary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Primary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Primary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndextermClass xsdt.Token

//	Returns true if the value of this enumerated TxsdIndextermClass is "singular".
func (me TxsdIndextermClass) IsSingular() bool { return me == "singular" }

//	Since TxsdIndextermClass is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdIndextermClass is "startofrange".
func (me TxsdIndextermClass) IsStartofrange() bool { return me == "startofrange" }

//	Returns true if the value of this enumerated TxsdIndextermClass is "endofrange".
func (me TxsdIndextermClass) IsEndofrange() bool { return me == "endofrange" }

//	This convenience method just performs a simple type conversion to TxsdIndextermClass's alias type xsdt.Token.
func (me TxsdIndextermClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdIndextermClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdIndextermClass_ struct {
	Class TxsdIndextermClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdIndextermScope xsdt.Token

//	Returns true if the value of this enumerated TxsdIndextermScope is "all".
func (me TxsdIndextermScope) IsAll() bool { return me == "all" }

//	Returns true if the value of this enumerated TxsdIndextermScope is "local".
func (me TxsdIndextermScope) IsLocal() bool { return me == "local" }

//	Returns true if the value of this enumerated TxsdIndextermScope is "global".
func (me TxsdIndextermScope) IsGlobal() bool { return me == "global" }

//	Since TxsdIndextermScope is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermScope) String() string { return xsdt.Token(me).String() }

//	Since TxsdIndextermScope is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermScope) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdIndextermScope's alias type xsdt.Token.
func (me TxsdIndextermScope) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Scope_TxsdIndextermScope_ struct {
	Scope TxsdIndextermScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type XsdGoPkgHasElem_Secondary struct {
	Secondary *TxsdPrimary `xml:"http://docbook.org/ns/docbook secondary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Secondary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Secondary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Secondary instance.
func (me *XsdGoPkgHasElem_Secondary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Secondary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Secondary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_See struct {
	See *TxsdEmphasis `xml:"http://docbook.org/ns/docbook see"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_See function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_See instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_See instance.
func (me *XsdGoPkgHasElem_See) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_See; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.See.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pagenum_XsdtString_ struct {
	Pagenum xsdt.String `xml:"http://docbook.org/ns/docbook pagenum,attr"`
}

type XsdGoPkgHasElem_Tertiary struct {
	Tertiary *TxsdPrimary `xml:"http://docbook.org/ns/docbook tertiary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tertiary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tertiary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tertiary instance.
func (me *XsdGoPkgHasElem_Tertiary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tertiary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tertiary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Zone_XsdtIdrefs_ struct {
	Zone xsdt.Idrefs `xml:"http://docbook.org/ns/docbook zone,attr"`
}

type XsdGoPkgHasElems_Seealso struct {
	Seealsos []*TxsdEmphasis `xml:"http://docbook.org/ns/docbook seealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seealso instance.
func (me *XsdGoPkgHasElems_Seealso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seealso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Seealsos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndextermSignificance xsdt.Token

//	Returns true if the value of this enumerated TxsdIndextermSignificance is "normal".
func (me TxsdIndextermSignificance) IsNormal() bool { return me == "normal" }

//	This convenience method just performs a simple type conversion to TxsdIndextermSignificance's alias type xsdt.Token.
func (me TxsdIndextermSignificance) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdIndextermSignificance is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermSignificance) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdIndextermSignificance is "preferred".
func (me TxsdIndextermSignificance) IsPreferred() bool { return me == "preferred" }

//	Since TxsdIndextermSignificance is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermSignificance) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Significance_TxsdIndextermSignificance_ struct {
	Significance TxsdIndextermSignificance `xml:"http://docbook.org/ns/docbook significance,attr"`
}

type XsdGoPkgHasAttr_Startref_XsdtIdref_ struct {
	Startref xsdt.Idref `xml:"http://docbook.org/ns/docbook startref,attr"`
}

type TxsdIndexterm struct {
	XsdGoPkgHasAttr_Startref_XsdtIdref_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElem_Primary

	XsdGoPkgHasAttr_Class_TxsdIndextermClass_

	XsdGoPkgHasAttr_Scope_TxsdIndextermScope_

	XsdGoPkgHasElem_Secondary

	XsdGoPkgHasElem_See

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasElem_Tertiary

	XsdGoPkgHasAttr_Zone_XsdtIdrefs_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Seealso

	XsdGoPkgHasAttr_Significance_TxsdIndextermSignificance_
}

//	If the WalkHandlers.TxsdIndexterm function is not nil (ie. was set by outside code), calls it with this TxsdIndexterm instance as the single argument. Then calls the Walk() method on 5/15 embed(s) and 0/0 field(s) belonging to this TxsdIndexterm instance.
func (me *TxsdIndexterm) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndexterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Primary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Secondary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_See.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tertiary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Seealso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Indexterm struct {
	Indexterms []*TxsdIndexterm `xml:"http://docbook.org/ns/docbook indexterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexterm instance.
func (me *XsdGoPkgHasElems_Indexterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Indexterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indexterms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSuperscript struct {
	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdSuperscript function is not nil (ie. was set by outside code), calls it with this TxsdSuperscript instance as the single argument. Then calls the Walk() method on 6/18 embed(s) and 0/0 field(s) belonging to this TxsdSuperscript instance.
func (me *TxsdSuperscript) Walk() (err error) {
	if fn := WalkHandlers.TxsdSuperscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Superscript struct {
	Superscripts []*TxsdSuperscript `xml:"http://docbook.org/ns/docbook superscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Superscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Superscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Superscript instance.
func (me *XsdGoPkgHasElems_Superscript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Superscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Superscripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRemark struct {
	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdRemark function is not nil (ie. was set by outside code), calls it with this TxsdRemark instance as the single argument. Then calls the Walk() method on 7/18 embed(s) and 0/0 field(s) belonging to this TxsdRemark instance.
func (me *TxsdRemark) Walk() (err error) {
	if fn := WalkHandlers.TxsdRemark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Remark struct {
	Remarks []*TxsdRemark `xml:"http://docbook.org/ns/docbook remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Remark instance.
func (me *XsdGoPkgHasElems_Remark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Remark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Remarks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdExceptionname struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdExceptionname function is not nil (ie. was set by outside code), calls it with this TxsdExceptionname instance as the single argument. Then calls the Walk() method on 8/18 embed(s) and 0/0 field(s) belonging to this TxsdExceptionname instance.
func (me *TxsdExceptionname) Walk() (err error) {
	if fn := WalkHandlers.TxsdExceptionname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Exceptionname struct {
	Exceptionnames []*TxsdExceptionname `xml:"http://docbook.org/ns/docbook exceptionname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Exceptionname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Exceptionname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Exceptionname instance.
func (me *XsdGoPkgHasElems_Exceptionname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Exceptionname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Exceptionnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDestructorsynopsis struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Void

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElem_Methodname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Methodparam

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdDestructorsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdDestructorsynopsis instance as the single argument. Then calls the Walk() method on 5/9 embed(s) and 0/0 field(s) belonging to this TxsdDestructorsynopsis instance.
func (me *TxsdDestructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdDestructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Void.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodparam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Destructorsynopsis struct {
	Destructorsynopsises []*TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook destructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Destructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Destructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Destructorsynopsis instance.
func (me *XsdGoPkgHasElems_Destructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Destructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Destructorsynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBlockquote struct {
	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElem_Attribution

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElem_Info
}

//	If the WalkHandlers.TxsdBlockquote function is not nil (ie. was set by outside code), calls it with this TxsdBlockquote instance as the single argument. Then calls the Walk() method on 55/62 embed(s) and 0/0 field(s) belonging to this TxsdBlockquote instance.
func (me *TxsdBlockquote) Walk() (err error) {
	if fn := WalkHandlers.TxsdBlockquote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Attribution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Blockquote struct {
	Blockquotes []*TxsdBlockquote `xml:"http://docbook.org/ns/docbook blockquote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Blockquote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Blockquote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Blockquote instance.
func (me *XsdGoPkgHasElems_Blockquote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Blockquote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Blockquotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Annotates_XsdtString_ struct {
	Annotates xsdt.String `xml:"http://docbook.org/ns/docbook annotates,attr"`
}

type TxsdAnnotation struct {
	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_Annotates_XsdtString_

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bibliolist
}

//	If the WalkHandlers.TxsdAnnotation function is not nil (ie. was set by outside code), calls it with this TxsdAnnotation instance as the single argument. Then calls the Walk() method on 55/61 embed(s) and 0/0 field(s) belonging to this TxsdAnnotation instance.
func (me *TxsdAnnotation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Annotation struct {
	Annotations []*TxsdAnnotation `xml:"http://docbook.org/ns/docbook annotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Annotation instance.
func (me *XsdGoPkgHasElems_Annotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Annotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Annotations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApplicationClass xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdApplicationClass's alias type xsdt.Token.
func (me TxsdApplicationClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdApplicationClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdApplicationClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdApplicationClass is "hardware".
func (me TxsdApplicationClass) IsHardware() bool { return me == "hardware" }

//	Since TxsdApplicationClass is just a simple String type, this merely returns the current string value.
func (me TxsdApplicationClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdApplicationClass is "software".
func (me TxsdApplicationClass) IsSoftware() bool { return me == "software" }

type XsdGoPkgHasAttr_Class_TxsdApplicationClass_ struct {
	Class TxsdApplicationClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdApplication struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Class_TxsdApplicationClass_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdApplication function is not nil (ie. was set by outside code), calls it with this TxsdApplication instance as the single argument. Then calls the Walk() method on 9/19 embed(s) and 0/0 field(s) belonging to this TxsdApplication instance.
func (me *TxsdApplication) Walk() (err error) {
	if fn := WalkHandlers.TxsdApplication; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Application struct {
	Applications []*TxsdApplication `xml:"http://docbook.org/ns/docbook application"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Application instance.
func (me *XsdGoPkgHasElems_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Applications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Localinfo_XsdtString_ struct {
	Localinfo xsdt.String `xml:"http://docbook.org/ns/docbook localinfo,attr"`
}

type XsdGoPkgHasAttr_Targetdoc_XsdtString_ struct {
	Targetdoc xsdt.String `xml:"http://docbook.org/ns/docbook targetdoc,attr"`
}

type XsdGoPkgHasAttr_Targetptr_XsdtString_ struct {
	Targetptr xsdt.String `xml:"http://docbook.org/ns/docbook targetptr,attr"`
}

type TxsdOlink struct {
	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasAttr_Localinfo_XsdtString_

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Targetdoc_XsdtString_

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasAttr_Targetptr_XsdtString_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Foreignphrase
}

//	If the WalkHandlers.TxsdOlink function is not nil (ie. was set by outside code), calls it with this TxsdOlink instance as the single argument. Then calls the Walk() method on 90/106 embed(s) and 0/0 field(s) belonging to this TxsdOlink instance.
func (me *TxsdOlink) Walk() (err error) {
	if fn := WalkHandlers.TxsdOlink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Olink struct {
	Olinks []*TxsdOlink `xml:"http://docbook.org/ns/docbook olink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Olink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Olink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Olink instance.
func (me *XsdGoPkgHasElems_Olink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Olink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Olinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubscript struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdSubscript function is not nil (ie. was set by outside code), calls it with this TxsdSubscript instance as the single argument. Then calls the Walk() method on 10/18 embed(s) and 0/0 field(s) belonging to this TxsdSubscript instance.
func (me *TxsdSubscript) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subscript struct {
	Subscripts []*TxsdSubscript `xml:"http://docbook.org/ns/docbook subscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subscript instance.
func (me *XsdGoPkgHasElems_Subscript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subscripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGuiicon struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdGuiicon function is not nil (ie. was set by outside code), calls it with this TxsdGuiicon instance as the single argument. Then calls the Walk() method on 12/19 embed(s) and 0/0 field(s) belonging to this TxsdGuiicon instance.
func (me *TxsdGuiicon) Walk() (err error) {
	if fn := WalkHandlers.TxsdGuiicon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Guiicon struct {
	Guiicons []*TxsdGuiicon `xml:"http://docbook.org/ns/docbook guiicon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guiicon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guiicon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guiicon instance.
func (me *XsdGoPkgHasElems_Guiicon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Guiicon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Guiicons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhrase struct {
	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Hardware
}

//	If the WalkHandlers.TxsdPhrase function is not nil (ie. was set by outside code), calls it with this TxsdPhrase instance as the single argument. Then calls the Walk() method on 93/102 embed(s) and 0/0 field(s) belonging to this TxsdPhrase instance.
func (me *TxsdPhrase) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Phrase struct {
	Phrases []*TxsdPhrase `xml:"http://docbook.org/ns/docbook phrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Phrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Phrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Phrase instance.
func (me *XsdGoPkgHasElems_Phrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Phrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Phrases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSeriesvolnums struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdSeriesvolnums function is not nil (ie. was set by outside code), calls it with this TxsdSeriesvolnums instance as the single argument. Then calls the Walk() method on 12/18 embed(s) and 0/0 field(s) belonging to this TxsdSeriesvolnums instance.
func (me *TxsdSeriesvolnums) Walk() (err error) {
	if fn := WalkHandlers.TxsdSeriesvolnums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Seriesvolnums struct {
	Seriesvolnumses []*TxsdSeriesvolnums `xml:"http://docbook.org/ns/docbook seriesvolnums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seriesvolnums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seriesvolnums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seriesvolnums instance.
func (me *XsdGoPkgHasElems_Seriesvolnums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seriesvolnums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Seriesvolnumses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInfo struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.TxsdInfo function is not nil (ie. was set by outside code), calls it with this TxsdInfo instance as the single argument. Then calls the Walk() method on 46/49 embed(s) and 0/0 field(s) belonging to this TxsdInfo instance.
func (me *TxsdInfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Seriesvolnums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publishername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Info struct {
	Info *TxsdInfo `xml:"http://docbook.org/ns/docbook info"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Info function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Info instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Info instance.
func (me *XsdGoPkgHasElem_Info) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Info; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Scalefit_TxsdVideodataScalefit_ struct {
	Scalefit TxsdSpanspecRowsep `xml:"http://docbook.org/ns/docbook scalefit,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdVideodataValign_ struct {
	Valign TxsdRowValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdVideodataAlign_ struct {
	Align TxsdTgroupAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdVideodata struct {
	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Depth_XsdtString_

	XsdGoPkgHasAttr_Contentdepth_XsdtString_

	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Scale_XsdtNmtoken_

	XsdGoPkgHasAttr_Scalefit_TxsdVideodataScalefit_

	XsdGoPkgHasAttr_Contentwidth_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdVideodataValign_

	XsdGoPkgHasAttr_Align_TxsdVideodataAlign_
}

//	If the WalkHandlers.TxsdVideodata function is not nil (ie. was set by outside code), calls it with this TxsdVideodata instance as the single argument. Then calls the Walk() method on 1/14 embed(s) and 0/0 field(s) belonging to this TxsdVideodata instance.
func (me *TxsdVideodata) Walk() (err error) {
	if fn := WalkHandlers.TxsdVideodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Videodata struct {
	Videodata *TxsdVideodata `xml:"http://docbook.org/ns/docbook videodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Videodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Videodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Videodata instance.
func (me *XsdGoPkgHasElem_Videodata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Videodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Videodata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVideoobject struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Videodata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdVideoobject function is not nil (ie. was set by outside code), calls it with this TxsdVideoobject instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdVideoobject instance.
func (me *TxsdVideoobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdVideoobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Videodata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Videoobject struct {
	Videoobjects []*TxsdVideoobject `xml:"http://docbook.org/ns/docbook videoobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Videoobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Videoobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Videoobject instance.
func (me *XsdGoPkgHasElems_Videoobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Videoobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Videoobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInlinemediaobject struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Imageobject

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Videoobject

	XsdGoPkgHasElems_Audioobject

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Imageobjectco

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Alt
}

//	If the WalkHandlers.TxsdInlinemediaobject function is not nil (ie. was set by outside code), calls it with this TxsdInlinemediaobject instance as the single argument. Then calls the Walk() method on 7/10 embed(s) and 0/0 field(s) belonging to this TxsdInlinemediaobject instance.
func (me *TxsdInlinemediaobject) Walk() (err error) {
	if fn := WalkHandlers.TxsdInlinemediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Imageobjectco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Imageobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Textobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Videoobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audioobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Inlinemediaobject struct {
	Inlinemediaobjects []*TxsdInlinemediaobject `xml:"http://docbook.org/ns/docbook inlinemediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Inlinemediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Inlinemediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Inlinemediaobject instance.
func (me *XsdGoPkgHasElems_Inlinemediaobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Inlinemediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inlinemediaobjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReplaceable struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Class_TxsdReplaceableClass_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdReplaceable function is not nil (ie. was set by outside code), calls it with this TxsdReplaceable instance as the single argument. Then calls the Walk() method on 14/20 embed(s) and 0/0 field(s) belonging to this TxsdReplaceable instance.
func (me *TxsdReplaceable) Walk() (err error) {
	if fn := WalkHandlers.TxsdReplaceable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Replaceable struct {
	Replaceables []*TxsdReplaceable `xml:"http://docbook.org/ns/docbook replaceable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Replaceable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Replaceable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Replaceable instance.
func (me *XsdGoPkgHasElems_Replaceable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Replaceable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Replaceables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdErrortype struct {
	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Olink
}

//	If the WalkHandlers.TxsdErrortype function is not nil (ie. was set by outside code), calls it with this TxsdErrortype instance as the single argument. Then calls the Walk() method on 14/18 embed(s) and 0/0 field(s) belonging to this TxsdErrortype instance.
func (me *TxsdErrortype) Walk() (err error) {
	if fn := WalkHandlers.TxsdErrortype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Errortype struct {
	Errortypes []*TxsdErrortype `xml:"http://docbook.org/ns/docbook errortype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errortype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errortype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errortype instance.
func (me *XsdGoPkgHasElems_Errortype) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Errortype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errortypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLink struct {
	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Date

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Person
}

//	If the WalkHandlers.TxsdLink function is not nil (ie. was set by outside code), calls it with this TxsdLink instance as the single argument. Then calls the Walk() method on 97/104 embed(s) and 0/0 field(s) belonging to this TxsdLink instance.
func (me *TxsdLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Link struct {
	Links []*TxsdLink `xml:"http://docbook.org/ns/docbook link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Link instance.
func (me *XsdGoPkgHasElems_Link) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Link; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Links {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdClassname struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdClassname function is not nil (ie. was set by outside code), calls it with this TxsdClassname instance as the single argument. Then calls the Walk() method on 15/18 embed(s) and 0/0 field(s) belonging to this TxsdClassname instance.
func (me *TxsdClassname) Walk() (err error) {
	if fn := WalkHandlers.TxsdClassname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Classname struct {
	Classnames []*TxsdClassname `xml:"http://docbook.org/ns/docbook classname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classname instance.
func (me *XsdGoPkgHasElems_Classname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Classname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Classnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTitle struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Orgname
}

//	If the WalkHandlers.TxsdTitle function is not nil (ie. was set by outside code), calls it with this TxsdTitle instance as the single argument. Then calls the Walk() method on 99/102 embed(s) and 0/0 field(s) belonging to this TxsdTitle instance.
func (me *TxsdTitle) Walk() (err error) {
	if fn := WalkHandlers.TxsdTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Title struct {
	Titles []*TxsdTitle `xml:"http://docbook.org/ns/docbook title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Title instance.
func (me *XsdGoPkgHasElems_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subtitle struct {
	Subtitle *TxsdMember `xml:"http://docbook.org/ns/docbook subtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subtitle instance.
func (me *XsdGoPkgHasElem_Subtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subjectset struct {
	Subjectset *TxsdSubjectset `xml:"http://docbook.org/ns/docbook subjectset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subjectset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subjectset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subjectset instance.
func (me *XsdGoPkgHasElem_Subjectset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subjectset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subjectset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subject struct {
	Subject *TxsdSubject `xml:"http://docbook.org/ns/docbook subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subject instance.
func (me *XsdGoPkgHasElem_Subject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subjectterm struct {
	Subjectterm *TxsdDate `xml:"http://docbook.org/ns/docbook subjectterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subjectterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subjectterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subjectterm instance.
func (me *XsdGoPkgHasElem_Subjectterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subjectterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subjectterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keywordset struct {
	Keywordset *TxsdKeywordset `xml:"http://docbook.org/ns/docbook keywordset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keywordset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keywordset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keywordset instance.
func (me *XsdGoPkgHasElem_Keywordset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keywordset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keywordset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keyword struct {
	Keyword *TxsdDate `xml:"http://docbook.org/ns/docbook keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keyword instance.
func (me *XsdGoPkgHasElem_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Step struct {
	Step *TxsdStep `xml:"http://docbook.org/ns/docbook step"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Step function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Step instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Step instance.
func (me *XsdGoPkgHasElem_Step) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Step; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Step.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Stepalternatives struct {
	Stepalternativeses []*TxsdStepalternatives `xml:"http://docbook.org/ns/docbook stepalternatives"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Stepalternatives function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Stepalternatives instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Stepalternatives instance.
func (me *XsdGoPkgHasElems_Stepalternatives) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Stepalternatives; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Stepalternativeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Substeps struct {
	Substepses []*TxsdSubsteps `xml:"http://docbook.org/ns/docbook substeps"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Substeps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Substeps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Substeps instance.
func (me *XsdGoPkgHasElems_Substeps) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Substeps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Substepses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sidebar struct {
	Sidebar *TxsdSidebar `xml:"http://docbook.org/ns/docbook sidebar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sidebar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sidebar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sidebar instance.
func (me *XsdGoPkgHasElem_Sidebar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sidebar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Abstract struct {
	Abstract *TxsdAbstract `xml:"http://docbook.org/ns/docbook abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abstract instance.
func (me *XsdGoPkgHasElem_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Personblurb struct {
	Personblurb *TxsdPersonblurb `xml:"http://docbook.org/ns/docbook personblurb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Personblurb function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Personblurb instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Personblurb instance.
func (me *XsdGoPkgHasElem_Personblurb) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Personblurb; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Personblurb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Blockquote struct {
	Blockquote *TxsdBlockquote `xml:"http://docbook.org/ns/docbook blockquote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Blockquote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Blockquote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Blockquote instance.
func (me *XsdGoPkgHasElem_Blockquote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Blockquote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Attribution struct {
	Attributions []*TxsdAttribution `xml:"http://docbook.org/ns/docbook attribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Attribution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Attribution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Attribution instance.
func (me *XsdGoPkgHasElems_Attribution) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Attribution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Attributions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bridgehead struct {
	Bridgehead *TxsdBridgehead `xml:"http://docbook.org/ns/docbook bridgehead"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bridgehead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bridgehead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bridgehead instance.
func (me *XsdGoPkgHasElem_Bridgehead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bridgehead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Remark struct {
	Remark *TxsdRemark `xml:"http://docbook.org/ns/docbook remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Remark instance.
func (me *XsdGoPkgHasElem_Remark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Remark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Epigraph struct {
	Epigraph *TxsdEpigraph `xml:"http://docbook.org/ns/docbook epigraph"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Epigraph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Epigraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Epigraph instance.
func (me *XsdGoPkgHasElem_Epigraph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Epigraph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Footnote struct {
	Footnote *TxsdFootnote `xml:"http://docbook.org/ns/docbook footnote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Footnote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Footnote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Footnote instance.
func (me *XsdGoPkgHasElem_Footnote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Footnote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Formalpara struct {
	Formalpara *TxsdFormalpara `xml:"http://docbook.org/ns/docbook formalpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Formalpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Formalpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Formalpara instance.
func (me *XsdGoPkgHasElem_Formalpara) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Formalpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Simpara struct {
	Simpara *TxsdSimpara `xml:"http://docbook.org/ns/docbook simpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simpara instance.
func (me *XsdGoPkgHasElem_Simpara) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Simpara; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Itemizedlist struct {
	Itemizedlist *TxsdItemizedlist `xml:"http://docbook.org/ns/docbook itemizedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Itemizedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Itemizedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Itemizedlist instance.
func (me *XsdGoPkgHasElem_Itemizedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Itemizedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Orderedlist struct {
	Orderedlist *TxsdOrderedlist `xml:"http://docbook.org/ns/docbook orderedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orderedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orderedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orderedlist instance.
func (me *XsdGoPkgHasElem_Orderedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Orderedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Segmentedlist struct {
	Segmentedlist *TxsdSegmentedlist `xml:"http://docbook.org/ns/docbook segmentedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Segmentedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Segmentedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Segmentedlist instance.
func (me *XsdGoPkgHasElem_Segmentedlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Segmentedlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Segtitle struct {
	Segtitle *TxsdMember `xml:"http://docbook.org/ns/docbook segtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Segtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Segtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Segtitle instance.
func (me *XsdGoPkgHasElem_Segtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Segtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Segtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seglistitem struct {
	Seglistitem *TxsdSeglistitem `xml:"http://docbook.org/ns/docbook seglistitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seglistitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seglistitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seglistitem instance.
func (me *XsdGoPkgHasElem_Seglistitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seglistitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seglistitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seg struct {
	Seg *TxsdMember `xml:"http://docbook.org/ns/docbook seg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seg instance.
func (me *XsdGoPkgHasElem_Seg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Simplelist struct {
	Simplelist *TxsdSimplelist `xml:"http://docbook.org/ns/docbook simplelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplelist instance.
func (me *XsdGoPkgHasElem_Simplelist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Simplelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Member struct {
	Member *TxsdMember `xml:"http://docbook.org/ns/docbook member"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Member function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Member instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Member instance.
func (me *XsdGoPkgHasElem_Member) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Member; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Member.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Variablelist struct {
	Variablelist *TxsdVariablelist `xml:"http://docbook.org/ns/docbook variablelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Variablelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Variablelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Variablelist instance.
func (me *XsdGoPkgHasElem_Variablelist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Variablelist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Varlistentry struct {
	Varlistentry *TxsdVarlistentry `xml:"http://docbook.org/ns/docbook varlistentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varlistentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varlistentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varlistentry instance.
func (me *XsdGoPkgHasElem_Varlistentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Varlistentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Varlistentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Term struct {
	Term *TxsdMember `xml:"http://docbook.org/ns/docbook term"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Term function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Term instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Term instance.
func (me *XsdGoPkgHasElem_Term) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Term; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Term.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Example struct {
	Example *TxsdExample `xml:"http://docbook.org/ns/docbook example"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Example function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Example instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Example instance.
func (me *XsdGoPkgHasElem_Example) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Example; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Informalexample struct {
	Informalexample *TxsdInformalexample `xml:"http://docbook.org/ns/docbook informalexample"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalexample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalexample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalexample instance.
func (me *XsdGoPkgHasElem_Informalexample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Informalexample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Literallayout struct {
	Literallayout *TxsdLiterallayout `xml:"http://docbook.org/ns/docbook literallayout"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Literallayout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Literallayout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Literallayout instance.
func (me *XsdGoPkgHasElem_Literallayout) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Literallayout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Screenshot struct {
	Screenshot *TxsdScreenshot `xml:"http://docbook.org/ns/docbook screenshot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screenshot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screenshot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screenshot instance.
func (me *XsdGoPkgHasElem_Screenshot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Screenshot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Figure struct {
	Figure *TxsdFigure `xml:"http://docbook.org/ns/docbook figure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Figure instance.
func (me *XsdGoPkgHasElem_Figure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Figure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Informalfigure struct {
	Informalfigure *TxsdInformalfigure `xml:"http://docbook.org/ns/docbook informalfigure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalfigure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalfigure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalfigure instance.
func (me *XsdGoPkgHasElem_Informalfigure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Informalfigure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Inlinemediaobject struct {
	Inlinemediaobject *TxsdInlinemediaobject `xml:"http://docbook.org/ns/docbook inlinemediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Inlinemediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Inlinemediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Inlinemediaobject instance.
func (me *XsdGoPkgHasElem_Inlinemediaobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Inlinemediaobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Videoobject struct {
	Videoobject *TxsdVideoobject `xml:"http://docbook.org/ns/docbook videoobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Videoobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Videoobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Videoobject instance.
func (me *XsdGoPkgHasElem_Videoobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Videoobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Videoobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Audioobject struct {
	Audioobject *TxsdAudioobject `xml:"http://docbook.org/ns/docbook audioobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audioobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audioobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audioobject instance.
func (me *XsdGoPkgHasElem_Audioobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Audioobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Audioobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Imageobject struct {
	Imageobject *TxsdImageobject `xml:"http://docbook.org/ns/docbook imageobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imageobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imageobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imageobject instance.
func (me *XsdGoPkgHasElem_Imageobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Imageobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Imageobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Textobject struct {
	Textobject *TxsdTextobject `xml:"http://docbook.org/ns/docbook textobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Textobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Textobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Textobject instance.
func (me *XsdGoPkgHasElem_Textobject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Textobject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Textobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Videodata struct {
	Videodatas []*TxsdVideodata `xml:"http://docbook.org/ns/docbook videodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Videodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Videodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Videodata instance.
func (me *XsdGoPkgHasElems_Videodata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Videodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Videodatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Audiodata struct {
	Audiodatas []*TxsdAudiodata `xml:"http://docbook.org/ns/docbook audiodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audiodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audiodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audiodata instance.
func (me *XsdGoPkgHasElems_Audiodata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Audiodata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Audiodatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Imagedata struct {
	Imagedatas []*TxsdImagedata `xml:"http://docbook.org/ns/docbook imagedata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imagedata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imagedata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imagedata instance.
func (me *XsdGoPkgHasElems_Imagedata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Imagedata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Imagedatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Textdata struct {
	Textdatas []*TxsdTextdata `xml:"http://docbook.org/ns/docbook textdata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Textdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Textdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Textdata instance.
func (me *XsdGoPkgHasElems_Textdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Textdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Textdatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Caption struct {
	Captions []*TxsdCaption `xml:"http://docbook.org/ns/docbook caption"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Caption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Caption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Caption instance.
func (me *XsdGoPkgHasElems_Caption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Caption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Captions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Address struct {
	Address *TxsdAddress `xml:"http://docbook.org/ns/docbook address"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Street struct {
	Street *TxsdLiteral `xml:"http://docbook.org/ns/docbook street"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Street function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Street instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Street instance.
func (me *XsdGoPkgHasElem_Street) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Street; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Street.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pob struct {
	Pob *TxsdLiteral `xml:"http://docbook.org/ns/docbook pob"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pob function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pob instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pob instance.
func (me *XsdGoPkgHasElem_Pob) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pob; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pob.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Postcode struct {
	Postcode *TxsdLiteral `xml:"http://docbook.org/ns/docbook postcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Postcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Postcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Postcode instance.
func (me *XsdGoPkgHasElem_Postcode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Postcode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Postcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_City struct {
	City *TxsdLiteral `xml:"http://docbook.org/ns/docbook city"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_City instance.
func (me *XsdGoPkgHasElem_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_State struct {
	State *TxsdLiteral `xml:"http://docbook.org/ns/docbook state"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_State instance.
func (me *XsdGoPkgHasElem_State) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_State; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.State.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Country struct {
	Country *TxsdLiteral `xml:"http://docbook.org/ns/docbook country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Country instance.
func (me *XsdGoPkgHasElem_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Phone struct {
	Phone *TxsdLiteral `xml:"http://docbook.org/ns/docbook phone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Phone instance.
func (me *XsdGoPkgHasElem_Phone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Phone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Phone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fax struct {
	Fax *TxsdLiteral `xml:"http://docbook.org/ns/docbook fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Otheraddr struct {
	Otheraddr *TxsdLiteral `xml:"http://docbook.org/ns/docbook otheraddr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Otheraddr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Otheraddr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Otheraddr instance.
func (me *XsdGoPkgHasElem_Otheraddr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Otheraddr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Otheraddr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Affiliation struct {
	Affiliation *TxsdAffiliation `xml:"http://docbook.org/ns/docbook affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Affiliation instance.
func (me *XsdGoPkgHasElem_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Shortaffil struct {
	Shortaffils []*TxsdLiteral `xml:"http://docbook.org/ns/docbook shortaffil"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shortaffil function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shortaffil instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shortaffil instance.
func (me *XsdGoPkgHasElems_Shortaffil) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Shortaffil; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shortaffils {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Jobtitle struct {
	Jobtitle *TxsdLiteral `xml:"http://docbook.org/ns/docbook jobtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Jobtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Jobtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Jobtitle instance.
func (me *XsdGoPkgHasElem_Jobtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Jobtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Orgdiv struct {
	Orgdiv *TxsdOrgdiv `xml:"http://docbook.org/ns/docbook orgdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orgdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orgdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orgdiv instance.
func (me *XsdGoPkgHasElem_Orgdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Orgdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Orgdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Artpagenums struct {
	Artpagenums *TxsdLiteral `xml:"http://docbook.org/ns/docbook artpagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Artpagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Artpagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Artpagenums instance.
func (me *XsdGoPkgHasElem_Artpagenums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Artpagenums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Artpagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Author struct {
	Author *TxsdAuthor `xml:"http://docbook.org/ns/docbook author"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Author instance.
func (me *XsdGoPkgHasElem_Author) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Authorgroup struct {
	Authorgroup *TxsdAuthorgroup `xml:"http://docbook.org/ns/docbook authorgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Authorgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Authorgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Authorgroup instance.
func (me *XsdGoPkgHasElem_Authorgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Authorgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Authorgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Collab struct {
	Collab *TxsdCollab `xml:"http://docbook.org/ns/docbook collab"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Collab function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collab instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collab instance.
func (me *XsdGoPkgHasElem_Collab) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Collab; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Collab.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Authorinitials struct {
	Authorinitials *TxsdLiteral `xml:"http://docbook.org/ns/docbook authorinitials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Authorinitials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Authorinitials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Authorinitials instance.
func (me *XsdGoPkgHasElem_Authorinitials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Authorinitials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Authorinitials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Person struct {
	Person *TxsdPerson `xml:"http://docbook.org/ns/docbook person"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Person function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Person instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Person instance.
func (me *XsdGoPkgHasElem_Person) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Person; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confgroup struct {
	Confgroup *TxsdConfgroup `xml:"http://docbook.org/ns/docbook confgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confgroup instance.
func (me *XsdGoPkgHasElem_Confgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confdates struct {
	Confdates *TxsdLiteral `xml:"http://docbook.org/ns/docbook confdates"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confdates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confdates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confdates instance.
func (me *XsdGoPkgHasElem_Confdates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confdates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confdates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Conftitle struct {
	Conftitle *TxsdLiteral `xml:"http://docbook.org/ns/docbook conftitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Conftitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Conftitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Conftitle instance.
func (me *XsdGoPkgHasElem_Conftitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Conftitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Conftitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confnum struct {
	Confnum *TxsdLiteral `xml:"http://docbook.org/ns/docbook confnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confnum instance.
func (me *XsdGoPkgHasElem_Confnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confsponsor struct {
	Confsponsor *TxsdLiteral `xml:"http://docbook.org/ns/docbook confsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confsponsor instance.
func (me *XsdGoPkgHasElem_Confsponsor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confsponsor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Contractnum struct {
	Contractnum *TxsdLiteral `xml:"http://docbook.org/ns/docbook contractnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contractnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contractnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contractnum instance.
func (me *XsdGoPkgHasElem_Contractnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contractnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contractnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Contractsponsor struct {
	Contractsponsor *TxsdLiteral `xml:"http://docbook.org/ns/docbook contractsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contractsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contractsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contractsponsor instance.
func (me *XsdGoPkgHasElem_Contractsponsor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contractsponsor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contractsponsor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Copyright struct {
	Copyright *TxsdCopyright `xml:"http://docbook.org/ns/docbook copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Copyright function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Copyright instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Copyright instance.
func (me *XsdGoPkgHasElem_Copyright) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Copyright; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Copyright.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Year struct {
	Year *TxsdLiteral `xml:"http://docbook.org/ns/docbook year"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Year instance.
func (me *XsdGoPkgHasElem_Year) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Holder struct {
	Holder *TxsdLiteral `xml:"http://docbook.org/ns/docbook holder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Holder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Holder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Holder instance.
func (me *XsdGoPkgHasElem_Holder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Holder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Holder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cover struct {
	Cover *TxsdCover `xml:"http://docbook.org/ns/docbook cover"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cover instance.
func (me *XsdGoPkgHasElem_Cover) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cover; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cover.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Edition struct {
	Edition *TxsdLiteral `xml:"http://docbook.org/ns/docbook edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Edition instance.
func (me *XsdGoPkgHasElem_Edition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Editor struct {
	Editor *TxsdAuthor `xml:"http://docbook.org/ns/docbook editor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Editor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Editor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Editor instance.
func (me *XsdGoPkgHasElem_Editor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Editor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Biblioid struct {
	Biblioid *TxsdBiblioid `xml:"http://docbook.org/ns/docbook biblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioid instance.
func (me *XsdGoPkgHasElem_Biblioid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Biblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Biblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Citebiblioid struct {
	Citebiblioid *TxsdCitebiblioid `xml:"http://docbook.org/ns/docbook citebiblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citebiblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citebiblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citebiblioid instance.
func (me *XsdGoPkgHasElem_Citebiblioid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Citebiblioid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliosource struct {
	Bibliosource *TxsdBibliosource `xml:"http://docbook.org/ns/docbook bibliosource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliosource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliosource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliosource instance.
func (me *XsdGoPkgHasElem_Bibliosource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliosource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliosource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliorelation struct {
	Bibliorelation *TxsdBibliorelation `xml:"http://docbook.org/ns/docbook bibliorelation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliorelation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliorelation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliorelation instance.
func (me *XsdGoPkgHasElem_Bibliorelation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliorelation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliorelation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliocoverage struct {
	Bibliocoverage *TxsdBibliocoverage `xml:"http://docbook.org/ns/docbook bibliocoverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliocoverage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliocoverage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliocoverage instance.
func (me *XsdGoPkgHasElem_Bibliocoverage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliocoverage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliocoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Legalnotice struct {
	Legalnotice *TxsdLegalnotice `xml:"http://docbook.org/ns/docbook legalnotice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Legalnotice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Legalnotice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Legalnotice instance.
func (me *XsdGoPkgHasElem_Legalnotice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Legalnotice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Legalnotice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Othercredit struct {
	Othercredit *TxsdOthercredit `xml:"http://docbook.org/ns/docbook othercredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Othercredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Othercredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Othercredit instance.
func (me *XsdGoPkgHasElem_Othercredit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Othercredit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Othercredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pagenums struct {
	Pagenums *TxsdLiteral `xml:"http://docbook.org/ns/docbook pagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pagenums instance.
func (me *XsdGoPkgHasElem_Pagenums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pagenums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pagenums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Contrib struct {
	Contrib *TxsdLiteral `xml:"http://docbook.org/ns/docbook contrib"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contrib function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contrib instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contrib instance.
func (me *XsdGoPkgHasElem_Contrib) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contrib; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contrib.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Honorific struct {
	Honorific *TxsdLiteral `xml:"http://docbook.org/ns/docbook honorific"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Honorific function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Honorific instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Honorific instance.
func (me *XsdGoPkgHasElem_Honorific) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Honorific; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Honorific.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Firstname struct {
	Firstname *TxsdLiteral `xml:"http://docbook.org/ns/docbook firstname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Firstname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Firstname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Firstname instance.
func (me *XsdGoPkgHasElem_Firstname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Firstname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Firstname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Surname struct {
	Surname *TxsdLiteral `xml:"http://docbook.org/ns/docbook surname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Surname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Surname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Surname instance.
func (me *XsdGoPkgHasElem_Surname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Surname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Surname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Lineage struct {
	Lineage *TxsdLiteral `xml:"http://docbook.org/ns/docbook lineage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lineage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lineage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lineage instance.
func (me *XsdGoPkgHasElem_Lineage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lineage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lineage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Othername struct {
	Othername *TxsdLiteral `xml:"http://docbook.org/ns/docbook othername"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Othername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Othername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Othername instance.
func (me *XsdGoPkgHasElem_Othername) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Othername; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Othername.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Printhistory struct {
	Printhistory *TxsdPrinthistory `xml:"http://docbook.org/ns/docbook printhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Printhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Printhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Printhistory instance.
func (me *XsdGoPkgHasElem_Printhistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Printhistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Printhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pubdate struct {
	Pubdate *TxsdDate `xml:"http://docbook.org/ns/docbook pubdate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pubdate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pubdate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pubdate instance.
func (me *XsdGoPkgHasElem_Pubdate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pubdate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pubdate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Publisher struct {
	Publisher *TxsdPublisher `xml:"http://docbook.org/ns/docbook publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publisher instance.
func (me *XsdGoPkgHasElem_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Releaseinfo struct {
	Releaseinfo *TxsdLiteral `xml:"http://docbook.org/ns/docbook releaseinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Releaseinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Releaseinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Releaseinfo instance.
func (me *XsdGoPkgHasElem_Releaseinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Releaseinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Releaseinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Revhistory struct {
	Revhistory *TxsdRevhistory `xml:"http://docbook.org/ns/docbook revhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revhistory instance.
func (me *XsdGoPkgHasElem_Revhistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Revhistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Revision struct {
	Revision *TxsdRevision `xml:"http://docbook.org/ns/docbook revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revision instance.
func (me *XsdGoPkgHasElem_Revision) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Revision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Revision.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Revnumber struct {
	Revnumbers []*TxsdLiteral `xml:"http://docbook.org/ns/docbook revnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revnumber instance.
func (me *XsdGoPkgHasElems_Revnumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Revnumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revnumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Revremark struct {
	Revremarks []*TxsdLiteral `xml:"http://docbook.org/ns/docbook revremark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revremark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revremark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revremark instance.
func (me *XsdGoPkgHasElems_Revremark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Revremark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revremarks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Revdescription struct {
	Revdescriptions []*TxsdRevdescription `xml:"http://docbook.org/ns/docbook revdescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revdescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revdescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revdescription instance.
func (me *XsdGoPkgHasElems_Revdescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Revdescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revdescriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seriesvolnums struct {
	Seriesvolnums *TxsdSeriesvolnums `xml:"http://docbook.org/ns/docbook seriesvolnums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seriesvolnums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seriesvolnums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seriesvolnums instance.
func (me *XsdGoPkgHasElem_Seriesvolnums) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seriesvolnums; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seriesvolnums.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Volumenum struct {
	Volumenum *TxsdLiteral `xml:"http://docbook.org/ns/docbook volumenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Volumenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Volumenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Volumenum instance.
func (me *XsdGoPkgHasElem_Volumenum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Volumenum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Volumenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Issuenum struct {
	Issuenum *TxsdLiteral `xml:"http://docbook.org/ns/docbook issuenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Issuenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Issuenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Issuenum instance.
func (me *XsdGoPkgHasElem_Issuenum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Issuenum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issuenum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Package struct {
	Package *TxsdLiteral `xml:"http://docbook.org/ns/docbook package"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Package function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Package instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Package instance.
func (me *XsdGoPkgHasElem_Package) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Package; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Email struct {
	Email *TxsdLiteral `xml:"http://docbook.org/ns/docbook email"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Lineannotation struct {
	Lineannotation *TxsdLiteral `xml:"http://docbook.org/ns/docbook lineannotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lineannotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lineannotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lineannotation instance.
func (me *XsdGoPkgHasElem_Lineannotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lineannotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lineannotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Replaceable struct {
	Replaceable *TxsdReplaceable `xml:"http://docbook.org/ns/docbook replaceable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Replaceable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Replaceable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Replaceable instance.
func (me *XsdGoPkgHasElem_Replaceable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Replaceable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Uri struct {
	Uri *TxsdUri `xml:"http://docbook.org/ns/docbook uri"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Uri function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Uri instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Uri instance.
func (me *XsdGoPkgHasElem_Uri) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Uri; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Citation struct {
	Citation *TxsdCitation `xml:"http://docbook.org/ns/docbook citation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citation instance.
func (me *XsdGoPkgHasElem_Citation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Citation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Citerefentry struct {
	Citerefentry *TxsdCiterefentry `xml:"http://docbook.org/ns/docbook citerefentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citerefentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citerefentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citerefentry instance.
func (me *XsdGoPkgHasElem_Citerefentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Citerefentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refentrytitle struct {
	Refentrytitles []*TxsdRefentrytitle `xml:"http://docbook.org/ns/docbook refentrytitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refentrytitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refentrytitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refentrytitle instance.
func (me *XsdGoPkgHasElems_Refentrytitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refentrytitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refentrytitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Manvolnum struct {
	Manvolnums []*TxsdLiteral `xml:"http://docbook.org/ns/docbook manvolnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Manvolnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Manvolnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Manvolnum instance.
func (me *XsdGoPkgHasElems_Manvolnum) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Manvolnum; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Manvolnums {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Citetitle struct {
	Citetitle *TxsdCitetitle `xml:"http://docbook.org/ns/docbook citetitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citetitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citetitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citetitle instance.
func (me *XsdGoPkgHasElem_Citetitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Citetitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Emphasis struct {
	Emphasis *TxsdEmphasis `xml:"http://docbook.org/ns/docbook emphasis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Emphasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Emphasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Emphasis instance.
func (me *XsdGoPkgHasElem_Emphasis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Emphasis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Foreignphrase struct {
	Foreignphrase *TxsdForeignphrase `xml:"http://docbook.org/ns/docbook foreignphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Foreignphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Foreignphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Foreignphrase instance.
func (me *XsdGoPkgHasElem_Foreignphrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Foreignphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Quote struct {
	Quote *TxsdQuote `xml:"http://docbook.org/ns/docbook quote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Quote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Quote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Quote instance.
func (me *XsdGoPkgHasElem_Quote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Quote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subscript struct {
	Subscript *TxsdSubscript `xml:"http://docbook.org/ns/docbook subscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subscript instance.
func (me *XsdGoPkgHasElem_Subscript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Superscript struct {
	Superscript *TxsdSuperscript `xml:"http://docbook.org/ns/docbook superscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Superscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Superscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Superscript instance.
func (me *XsdGoPkgHasElem_Superscript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Superscript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Trademark struct {
	Trademark *TxsdTrademark `xml:"http://docbook.org/ns/docbook trademark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Trademark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Trademark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Trademark instance.
func (me *XsdGoPkgHasElem_Trademark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Trademark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Wordasword struct {
	Wordasword *TxsdLiteral `xml:"http://docbook.org/ns/docbook wordasword"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Wordasword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Wordasword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Wordasword instance.
func (me *XsdGoPkgHasElem_Wordasword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Wordasword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Footnoteref struct {
	Footnoteref *TxsdCoref `xml:"http://docbook.org/ns/docbook footnoteref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Footnoteref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Footnoteref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Footnoteref instance.
func (me *XsdGoPkgHasElem_Footnoteref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Footnoteref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Xref struct {
	Xref *TxsdXref `xml:"http://docbook.org/ns/docbook xref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xref instance.
func (me *XsdGoPkgHasElem_Xref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Xref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Link struct {
	Link *TxsdLink `xml:"http://docbook.org/ns/docbook link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Link instance.
func (me *XsdGoPkgHasElem_Link) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Link; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Olink struct {
	Olink *TxsdOlink `xml:"http://docbook.org/ns/docbook olink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Olink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Olink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Olink instance.
func (me *XsdGoPkgHasElem_Olink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Olink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Anchor struct {
	Anchor *TxsdAnchor `xml:"http://docbook.org/ns/docbook anchor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Anchor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Anchor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Anchor instance.
func (me *XsdGoPkgHasElem_Anchor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Anchor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Status_XsdtString_ struct {
	Status xsdt.String `xml:"http://docbook.org/ns/docbook status,attr"`
}

type TxsdPrimaryie struct {
	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Productnumber
}

//	If the WalkHandlers.TxsdPrimaryie function is not nil (ie. was set by outside code), calls it with this TxsdPrimaryie instance as the single argument. Then calls the Walk() method on 99/102 embed(s) and 0/0 field(s) belonging to this TxsdPrimaryie instance.
func (me *TxsdPrimaryie) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrimaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Primaryie struct {
	Primaryie *TxsdPrimaryie `xml:"http://docbook.org/ns/docbook primaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Primaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Primaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Primaryie instance.
func (me *XsdGoPkgHasElem_Primaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Primaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Primaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tertiaryie struct {
	Tertiaryies []*TxsdPrimaryie `xml:"http://docbook.org/ns/docbook tertiaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tertiaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tertiaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tertiaryie instance.
func (me *XsdGoPkgHasElems_Tertiaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tertiaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tertiaryies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Secondaryie struct {
	Secondaryies []*TxsdPrimaryie `xml:"http://docbook.org/ns/docbook secondaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Secondaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Secondaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Secondaryie instance.
func (me *XsdGoPkgHasElems_Secondaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Secondaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Secondaryies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Seealsoie struct {
	Seealsoies []*TxsdPrimaryie `xml:"http://docbook.org/ns/docbook seealsoie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seealsoie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seealsoie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seealsoie instance.
func (me *XsdGoPkgHasElems_Seealsoie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seealsoie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Seealsoies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Seeie struct {
	Seeies []*TxsdTitle `xml:"http://docbook.org/ns/docbook seeie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seeie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seeie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seeie instance.
func (me *XsdGoPkgHasElems_Seeie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Seeie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Seeies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndexentry struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Secondaryie

	XsdGoPkgHasElems_Seealsoie

	XsdGoPkgHasElems_Seeie

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Primaryie

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Tertiaryie
}

//	If the WalkHandlers.TxsdIndexentry function is not nil (ie. was set by outside code), calls it with this TxsdIndexentry instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdIndexentry instance.
func (me *TxsdIndexentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndexentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Primaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tertiaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Secondaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Seealsoie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Seeie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Indexentry struct {
	Indexentries []*TxsdIndexentry `xml:"http://docbook.org/ns/docbook indexentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexentry instance.
func (me *XsdGoPkgHasElems_Indexentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Indexentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indexentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndexdiv struct {
	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElem_Segmentedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Msgset
}

//	If the WalkHandlers.TxsdIndexdiv function is not nil (ie. was set by outside code), calls it with this TxsdIndexdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdIndexdiv instance.
func (me *TxsdIndexdiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndexdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Indexdiv struct {
	Indexdivs []*TxsdIndexdiv `xml:"http://docbook.org/ns/docbook indexdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexdiv instance.
func (me *XsdGoPkgHasElems_Indexdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Indexdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indexdivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSetindex struct {
	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Indexdiv

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalexample
}

//	If the WalkHandlers.TxsdSetindex function is not nil (ie. was set by outside code), calls it with this TxsdSetindex instance as the single argument. Then calls the Walk() method on 61/67 embed(s) and 0/0 field(s) belonging to this TxsdSetindex instance.
func (me *TxsdSetindex) Walk() (err error) {
	if fn := WalkHandlers.TxsdSetindex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Setindex struct {
	Setindex *TxsdSetindex `xml:"http://docbook.org/ns/docbook setindex"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Setindex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Setindex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Setindex instance.
func (me *XsdGoPkgHasElem_Setindex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Setindex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Setindex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBibliodiv struct {
	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Programlistingco
}

//	If the WalkHandlers.TxsdBibliodiv function is not nil (ie. was set by outside code), calls it with this TxsdBibliodiv instance as the single argument. Then calls the Walk() method on 61/66 embed(s) and 0/0 field(s) belonging to this TxsdBibliodiv instance.
func (me *TxsdBibliodiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliodiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomixed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliodiv struct {
	Bibliodivs []*TxsdBibliodiv `xml:"http://docbook.org/ns/docbook bibliodiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliodiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliodiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliodiv instance.
func (me *XsdGoPkgHasElems_Bibliodiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliodiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliodivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBibliography struct {
	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Bibliodiv

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenshot
}

//	If the WalkHandlers.TxsdBibliography function is not nil (ie. was set by outside code), calls it with this TxsdBibliography instance as the single argument. Then calls the Walk() method on 62/67 embed(s) and 0/0 field(s) belonging to this TxsdBibliography instance.
func (me *TxsdBibliography) Walk() (err error) {
	if fn := WalkHandlers.TxsdBibliography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliodiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliomixed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliography struct {
	Bibliography *TxsdBibliography `xml:"http://docbook.org/ns/docbook bibliography"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliography instance.
func (me *XsdGoPkgHasElem_Bibliography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlossdiv struct {
	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph
}

//	If the WalkHandlers.TxsdGlossdiv function is not nil (ie. was set by outside code), calls it with this TxsdGlossdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdGlossdiv instance.
func (me *TxsdGlossdiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossdiv struct {
	Glossdivs []*TxsdGlossdiv `xml:"http://docbook.org/ns/docbook glossdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossdiv instance.
func (me *XsdGoPkgHasElems_Glossdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossdivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlossary struct {
	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElem_Bibliography

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Glossdiv

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdGlossary function is not nil (ie. was set by outside code), calls it with this TxsdGlossary instance as the single argument. Then calls the Walk() method on 62/67 embed(s) and 0/0 field(s) belonging to this TxsdGlossary instance.
func (me *TxsdGlossary) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlossary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glossary struct {
	Glossaries []*TxsdGlossary `xml:"http://docbook.org/ns/docbook glossary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossary instance.
func (me *XsdGoPkgHasElems_Glossary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glossary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glossaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAcknowledgements struct {
	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdAcknowledgements function is not nil (ie. was set by outside code), calls it with this TxsdAcknowledgements instance as the single argument. Then calls the Walk() method on 59/64 embed(s) and 0/0 field(s) belonging to this TxsdAcknowledgements instance.
func (me *TxsdAcknowledgements) Walk() (err error) {
	if fn := WalkHandlers.TxsdAcknowledgements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Acknowledgements struct {
	Acknowledgementses []*TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook acknowledgements"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Acknowledgements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Acknowledgements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Acknowledgements instance.
func (me *XsdGoPkgHasElems_Acknowledgements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Acknowledgements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Acknowledgementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refdescriptor struct {
	Refdescriptor *TxsdTitle `xml:"http://docbook.org/ns/docbook refdescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refdescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refdescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refdescriptor instance.
func (me *XsdGoPkgHasElem_Refdescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refdescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refdescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefclass struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Application

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdRefclass function is not nil (ie. was set by outside code), calls it with this TxsdRefclass instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdRefclass instance.
func (me *TxsdRefclass) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refclass struct {
	Refclasses []*TxsdRefclass `xml:"http://docbook.org/ns/docbook refclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refclass instance.
func (me *XsdGoPkgHasElems_Refclass) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refclasses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refpurpose struct {
	Refpurpose *TxsdTitle `xml:"http://docbook.org/ns/docbook refpurpose"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refpurpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refpurpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refpurpose instance.
func (me *XsdGoPkgHasElem_Refpurpose) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refpurpose; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refpurpose.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refname struct {
	Refnames []*TxsdTitle `xml:"http://docbook.org/ns/docbook refname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refname instance.
func (me *XsdGoPkgHasElems_Refname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefnamediv struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Refdescriptor

	XsdGoPkgHasElems_Refclass

	XsdGoPkgHasElem_Refpurpose

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Refname
}

//	If the WalkHandlers.TxsdRefnamediv function is not nil (ie. was set by outside code), calls it with this TxsdRefnamediv instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRefnamediv instance.
func (me *TxsdRefnamediv) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefnamediv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Refdescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Refpurpose.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refnamediv struct {
	Refnamedivs []*TxsdRefnamediv `xml:"http://docbook.org/ns/docbook refnamediv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refnamediv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refnamediv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refnamediv instance.
func (me *XsdGoPkgHasElems_Refnamediv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refnamediv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refnamedivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refsect3 struct {
	Refsect3s []*TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook refsect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect3 instance.
func (me *XsdGoPkgHasElems_Refsect3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refsect3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refsect3s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefsect2 struct {
	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Refsect3

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdRefsect2 function is not nil (ie. was set by outside code), calls it with this TxsdRefsect2 instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsect2 instance.
func (me *TxsdRefsect2) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefsect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsect3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refsect2 struct {
	Refsect2s []*TxsdRefsect2 `xml:"http://docbook.org/ns/docbook refsect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect2 instance.
func (me *XsdGoPkgHasElems_Refsect2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refsect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refsect2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefsect1 struct {
	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Refsect2

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Variablelist
}

//	If the WalkHandlers.TxsdRefsect1 function is not nil (ie. was set by outside code), calls it with this TxsdRefsect1 instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsect1 instance.
func (me *TxsdRefsect1) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefsect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsect2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refsect1 struct {
	Refsect1s []*TxsdRefsect1 `xml:"http://docbook.org/ns/docbook refsect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect1 instance.
func (me *XsdGoPkgHasElems_Refsect1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refsect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refsect1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefmiscinfoClass xsdt.Token

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "manual".
func (me TxsdRefmiscinfoClass) IsManual() bool { return me == "manual" }

//	Since TxsdRefmiscinfoClass is just a simple String type, this merely returns the current string value.
func (me TxsdRefmiscinfoClass) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdRefmiscinfoClass's alias type xsdt.Token.
func (me TxsdRefmiscinfoClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "software".
func (me TxsdRefmiscinfoClass) IsSoftware() bool { return me == "software" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "sectdesc".
func (me TxsdRefmiscinfoClass) IsSectdesc() bool { return me == "sectdesc" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "other".
func (me TxsdRefmiscinfoClass) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "version".
func (me TxsdRefmiscinfoClass) IsVersion() bool { return me == "version" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "source".
func (me TxsdRefmiscinfoClass) IsSource() bool { return me == "source" }

//	Since TxsdRefmiscinfoClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRefmiscinfoClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdRefmiscinfoClass_ struct {
	Class TxsdRefmiscinfoClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdRefmiscinfo struct {
	XsdGoPkgHasAttr_Class_TxsdRefmiscinfoClass_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Otherclass_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdRefmiscinfo function is not nil (ie. was set by outside code), calls it with this TxsdRefmiscinfo instance as the single argument. Then calls the Walk() method on 15/20 embed(s) and 0/0 field(s) belonging to this TxsdRefmiscinfo instance.
func (me *TxsdRefmiscinfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefmiscinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refmiscinfo struct {
	Refmiscinfos []*TxsdRefmiscinfo `xml:"http://docbook.org/ns/docbook refmiscinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refmiscinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refmiscinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refmiscinfo instance.
func (me *XsdGoPkgHasElems_Refmiscinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refmiscinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refmiscinfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefmeta struct {
	XsdGoPkgHasElem_Refentrytitle

	XsdGoPkgHasElems_Refmiscinfo

	XsdGoPkgHasElem_Manvolnum

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdRefmeta function is not nil (ie. was set by outside code), calls it with this TxsdRefmeta instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRefmeta instance.
func (me *TxsdRefmeta) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefmeta; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Refentrytitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refmiscinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Manvolnum.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refmeta struct {
	Refmeta *TxsdRefmeta `xml:"http://docbook.org/ns/docbook refmeta"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refmeta function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refmeta instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refmeta instance.
func (me *XsdGoPkgHasElem_Refmeta) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refmeta; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refmeta.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefsection struct {
	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Simpara
}

//	If the WalkHandlers.TxsdRefsection function is not nil (ie. was set by outside code), calls it with this TxsdRefsection instance as the single argument. Then calls the Walk() method on 59/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsection instance.
func (me *TxsdRefsection) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefsection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refsection struct {
	Refsections []*TxsdRefsection `xml:"http://docbook.org/ns/docbook refsection"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsection instance.
func (me *XsdGoPkgHasElems_Refsection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refsection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refsections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefsynopsisdiv struct {
	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Refsect2

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Figure
}

//	If the WalkHandlers.TxsdRefsynopsisdiv function is not nil (ie. was set by outside code), calls it with this TxsdRefsynopsisdiv instance as the single argument. Then calls the Walk() method on 61/64 embed(s) and 0/0 field(s) belonging to this TxsdRefsynopsisdiv instance.
func (me *TxsdRefsynopsisdiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefsynopsisdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsect2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refsynopsisdiv struct {
	Refsynopsisdiv *TxsdRefsynopsisdiv `xml:"http://docbook.org/ns/docbook refsynopsisdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsynopsisdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsynopsisdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsynopsisdiv instance.
func (me *XsdGoPkgHasElem_Refsynopsisdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refsynopsisdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refsynopsisdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRefentry struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Refsect1

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElem_Refmeta

	XsdGoPkgHasElem_Refsynopsisdiv

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Refnamediv

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdRefentry function is not nil (ie. was set by outside code), calls it with this TxsdRefentry instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdRefentry instance.
func (me *TxsdRefentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdRefentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Refmeta.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Refsynopsisdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refnamediv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refsect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refentry struct {
	Refentries []*TxsdRefentry `xml:"http://docbook.org/ns/docbook refentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refentry instance.
func (me *XsdGoPkgHasElems_Refentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTocentry struct {
	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Author

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Code

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Interfacename
}

//	If the WalkHandlers.TxsdTocentry function is not nil (ie. was set by outside code), calls it with this TxsdTocentry instance as the single argument. Then calls the Walk() method on 99/103 embed(s) and 0/0 field(s) belonging to this TxsdTocentry instance.
func (me *TxsdTocentry) Walk() (err error) {
	if fn := WalkHandlers.TxsdTocentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Glossterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Initializer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Uri.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Inlinemediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citetitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Type.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Editor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Foreignphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interfacename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trademark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Emphasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Shortcut.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citebiblioid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Superscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Replaceable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Wordasword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Olink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Personname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Exceptionname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Quote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citerefentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Alt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Org.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnoteref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Footnote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Phrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orgname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Person.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Jobtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Abbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Package.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subscript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Varname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Citation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tocentry struct {
	Tocentries []*TxsdTocentry `xml:"http://docbook.org/ns/docbook tocentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tocentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tocentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tocentry instance.
func (me *XsdGoPkgHasElems_Tocentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tocentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tocentries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTocdiv struct {
	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tocdiv

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Tocentry

	XsdGoPkgHasElems_Epigraph
}

//	If the WalkHandlers.TxsdTocdiv function is not nil (ie. was set by outside code), calls it with this TxsdTocdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdTocdiv instance.
func (me *TxsdTocdiv) Walk() (err error) {
	if fn := WalkHandlers.TxsdTocdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tocentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tocdiv struct {
	Tocdivs []*TxsdTocdiv `xml:"http://docbook.org/ns/docbook tocdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tocdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tocdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tocdiv instance.
func (me *XsdGoPkgHasElems_Tocdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tocdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tocdivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdToc struct {
	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Tocdiv

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Tocentry

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Blockquote
}

//	If the WalkHandlers.TxsdToc function is not nil (ie. was set by outside code), calls it with this TxsdToc instance as the single argument. Then calls the Walk() method on 60/63 embed(s) and 0/0 field(s) belonging to this TxsdToc instance.
func (me *TxsdToc) Walk() (err error) {
	if fn := WalkHandlers.TxsdToc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tocdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tocentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Toc struct {
	Tocs []*TxsdToc `xml:"http://docbook.org/ns/docbook toc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Toc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Toc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Toc instance.
func (me *XsdGoPkgHasElems_Toc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Toc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tocs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Simplesect struct {
	Simplesects []*TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook simplesect"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplesect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplesect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplesect instance.
func (me *XsdGoPkgHasElems_Simplesect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Simplesect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Simplesects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bibliography struct {
	Bibliographies []*TxsdBibliography `xml:"http://docbook.org/ns/docbook bibliography"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliography instance.
func (me *XsdGoPkgHasElems_Bibliography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bibliography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bibliographies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndex struct {
	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Segmentedlist

	XsdGoPkgHasElems_Indexdiv

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure
}

//	If the WalkHandlers.TxsdIndex function is not nil (ie. was set by outside code), calls it with this TxsdIndex instance as the single argument. Then calls the Walk() method on 61/67 embed(s) and 0/0 field(s) belonging to this TxsdIndex instance.
func (me *TxsdIndex) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Index struct {
	Indexs []*TxsdIndex `xml:"http://docbook.org/ns/docbook index"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Index function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Index instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Index instance.
func (me *XsdGoPkgHasElems_Index) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Index; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indexs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSection struct {
	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Index

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdSection function is not nil (ie. was set by outside code), calls it with this TxsdSection instance as the single argument. Then calls the Walk() method on 65/71 embed(s) and 0/0 field(s) belonging to this TxsdSection instance.
func (me *TxsdSection) Walk() (err error) {
	if fn := WalkHandlers.TxsdSection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Section struct {
	Sections []*TxsdSection `xml:"http://docbook.org/ns/docbook section"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Section instance.
func (me *XsdGoPkgHasElems_Section) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSect5 struct {
	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simplelist
}

//	If the WalkHandlers.TxsdSect5 function is not nil (ie. was set by outside code), calls it with this TxsdSect5 instance as the single argument. Then calls the Walk() method on 64/69 embed(s) and 0/0 field(s) belonging to this TxsdSect5 instance.
func (me *TxsdSect5) Walk() (err error) {
	if fn := WalkHandlers.TxsdSect5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sect5 struct {
	Sect5s []*TxsdSect5 `xml:"http://docbook.org/ns/docbook sect5"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect5 instance.
func (me *XsdGoPkgHasElems_Sect5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sect5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sect5s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSect4 struct {
	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Sect5

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdSect4 function is not nil (ie. was set by outside code), calls it with this TxsdSect4 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect4 instance.
func (me *TxsdSect4) Walk() (err error) {
	if fn := WalkHandlers.TxsdSect4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sect4 struct {
	Sect4s []*TxsdSect4 `xml:"http://docbook.org/ns/docbook sect4"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect4 instance.
func (me *XsdGoPkgHasElems_Sect4) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sect4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sect4s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSect3 struct {
	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Sect4

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orderedlist
}

//	If the WalkHandlers.TxsdSect3 function is not nil (ie. was set by outside code), calls it with this TxsdSect3 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect3 instance.
func (me *TxsdSect3) Walk() (err error) {
	if fn := WalkHandlers.TxsdSect3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect4.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sect3 struct {
	Sect3s []*TxsdSect3 `xml:"http://docbook.org/ns/docbook sect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect3 instance.
func (me *XsdGoPkgHasElems_Sect3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sect3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sect3s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSect2 struct {
	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Sect3

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSect2 function is not nil (ie. was set by outside code), calls it with this TxsdSect2 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect2 instance.
func (me *TxsdSect2) Walk() (err error) {
	if fn := WalkHandlers.TxsdSect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sect2 struct {
	Sect2s []*TxsdSect2 `xml:"http://docbook.org/ns/docbook sect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect2 instance.
func (me *XsdGoPkgHasElems_Sect2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sect2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSect1 struct {
	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Sect2

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdSect1 function is not nil (ie. was set by outside code), calls it with this TxsdSect1 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect1 instance.
func (me *TxsdSect1) Walk() (err error) {
	if fn := WalkHandlers.TxsdSect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sect1 struct {
	Sect1s []*TxsdSect1 `xml:"http://docbook.org/ns/docbook sect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect1 instance.
func (me *XsdGoPkgHasElems_Sect1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sect1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPartintro struct {
	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Section

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalexample
}

//	If the WalkHandlers.TxsdPartintro function is not nil (ie. was set by outside code), calls it with this TxsdPartintro instance as the single argument. Then calls the Walk() method on 63/68 embed(s) and 0/0 field(s) belonging to this TxsdPartintro instance.
func (me *TxsdPartintro) Walk() (err error) {
	if fn := WalkHandlers.TxsdPartintro; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Partintro struct {
	Partintro *TxsdPartintro `xml:"http://docbook.org/ns/docbook partintro"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Partintro function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Partintro instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Partintro instance.
func (me *XsdGoPkgHasElem_Partintro) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Partintro; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Partintro.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReference struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Partintro

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Refentry
}

//	If the WalkHandlers.TxsdReference function is not nil (ie. was set by outside code), calls it with this TxsdReference instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdReference instance.
func (me *TxsdReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Partintro.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reference struct {
	References []*TxsdReference `xml:"http://docbook.org/ns/docbook reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Colophon struct {
	Colophons []*TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook colophon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colophon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colophon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colophon instance.
func (me *XsdGoPkgHasElems_Colophon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Colophon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colophons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Dedication struct {
	Dedications []*TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook dedication"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Dedication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Dedication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Dedication instance.
func (me *XsdGoPkgHasElems_Dedication) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Dedication; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Dedications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAppendix struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Bibliolist
}

//	If the WalkHandlers.TxsdAppendix function is not nil (ie. was set by outside code), calls it with this TxsdAppendix instance as the single argument. Then calls the Walk() method on 67/72 embed(s) and 0/0 field(s) belonging to this TxsdAppendix instance.
func (me *TxsdAppendix) Walk() (err error) {
	if fn := WalkHandlers.TxsdAppendix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Appendix struct {
	Appendixs []*TxsdAppendix `xml:"http://docbook.org/ns/docbook appendix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Appendix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Appendix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Appendix instance.
func (me *XsdGoPkgHasElems_Appendix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Appendix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Appendixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Chapter struct {
	Chapters []*TxsdAppendix `xml:"http://docbook.org/ns/docbook chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Chapter instance.
func (me *XsdGoPkgHasElems_Chapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Chapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Chapters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Preface struct {
	Prefaces []*TxsdAppendix `xml:"http://docbook.org/ns/docbook preface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Preface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Preface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Preface instance.
func (me *XsdGoPkgHasElems_Preface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Preface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Prefaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdArticleClass xsdt.Token

//	Returns true if the value of this enumerated TxsdArticleClass is "faq".
func (me TxsdArticleClass) IsFaq() bool { return me == "faq" }

//	Since TxsdArticleClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdArticleClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdArticleClass is "journalarticle".
func (me TxsdArticleClass) IsJournalarticle() bool { return me == "journalarticle" }

//	Returns true if the value of this enumerated TxsdArticleClass is "specification".
func (me TxsdArticleClass) IsSpecification() bool { return me == "specification" }

//	Returns true if the value of this enumerated TxsdArticleClass is "techreport".
func (me TxsdArticleClass) IsTechreport() bool { return me == "techreport" }

//	Returns true if the value of this enumerated TxsdArticleClass is "whitepaper".
func (me TxsdArticleClass) IsWhitepaper() bool { return me == "whitepaper" }

//	Since TxsdArticleClass is just a simple String type, this merely returns the current string value.
func (me TxsdArticleClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdArticleClass is "productsheet".
func (me TxsdArticleClass) IsProductsheet() bool { return me == "productsheet" }

//	This convenience method just performs a simple type conversion to TxsdArticleClass's alias type xsdt.Token.
func (me TxsdArticleClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Class_TxsdArticleClass_ struct {
	Class TxsdArticleClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdArticle struct {
	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Acknowledgements

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Class_TxsdArticleClass_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Itemizedlist
}

//	If the WalkHandlers.TxsdArticle function is not nil (ie. was set by outside code), calls it with this TxsdArticle instance as the single argument. Then calls the Walk() method on 70/76 embed(s) and 0/0 field(s) belonging to this TxsdArticle instance.
func (me *TxsdArticle) Walk() (err error) {
	if fn := WalkHandlers.TxsdArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Anchor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acknowledgements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalexample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Revhistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Literallayout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Para.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bridgehead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Blockquote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Variablelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formalpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Epigraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colophon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Segmentedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Example.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simplelist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Procedure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Mediaobject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Simpara.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Programlisting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Itemizedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screenshot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Screen.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Orderedlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalfigure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Appendix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sidebar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Article struct {
	Articles []*TxsdArticle `xml:"http://docbook.org/ns/docbook article"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Article instance.
func (me *XsdGoPkgHasElems_Article) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Articles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPart struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElem_Partintro

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Preface

	XsdGoPkgHasElems_Article

	XsdGoPkgHasElems_Acknowledgements

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Dedication

	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.TxsdPart function is not nil (ie. was set by outside code), calls it with this TxsdPart instance as the single argument. Then calls the Walk() method on 18/23 embed(s) and 0/0 field(s) belonging to this TxsdPart instance.
func (me *TxsdPart) Walk() (err error) {
	if fn := WalkHandlers.TxsdPart; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Chapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Partintro.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Preface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acknowledgements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colophon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Dedication.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Appendix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Part struct {
	Parts []*TxsdPart `xml:"http://docbook.org/ns/docbook part"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Part function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Part instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Part instance.
func (me *XsdGoPkgHasElems_Part) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Part; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Parts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBook struct {
	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Part

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Preface

	XsdGoPkgHasElems_Article

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Dedication

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Acknowledgements

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Info
}

//	If the WalkHandlers.TxsdBook function is not nil (ie. was set by outside code), calls it with this TxsdBook instance as the single argument. Then calls the Walk() method on 17/22 embed(s) and 0/0 field(s) belonging to this TxsdBook instance.
func (me *TxsdBook) Walk() (err error) {
	if fn := WalkHandlers.TxsdBook; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Bibliography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Acknowledgements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Appendix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Chapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Part.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colophon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Preface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Dedication.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Book struct {
	Books []*TxsdBook `xml:"http://docbook.org/ns/docbook book"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Book instance.
func (me *XsdGoPkgHasElems_Book) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Books {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Toc struct {
	Toc *TxsdToc `xml:"http://docbook.org/ns/docbook toc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Toc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Toc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Toc instance.
func (me *XsdGoPkgHasElem_Toc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Toc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSet struct {
	XsdGoPkgHasElems_Set

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElem_Setindex

	XsdGoPkgHasElems_Book

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Toc

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdSet function is not nil (ie. was set by outside code), calls it with this TxsdSet instance as the single argument. Then calls the Walk() method on 7/13 embed(s) and 0/0 field(s) belonging to this TxsdSet instance.
func (me *TxsdSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Setindex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Toc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Info.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Titleabbrev.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Set struct {
	Sets []*TxsdSet `xml:"http://docbook.org/ns/docbook set"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Set instance.
func (me *XsdGoPkgHasElems_Set) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Set; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Set struct {
	Set *TxsdSet `xml:"http://docbook.org/ns/docbook set"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Set instance.
func (me *XsdGoPkgHasElem_Set) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Set; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Set.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Book struct {
	Book *TxsdBook `xml:"http://docbook.org/ns/docbook book"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Book instance.
func (me *XsdGoPkgHasElem_Book) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Dedication struct {
	Dedication *TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook dedication"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Dedication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Dedication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Dedication instance.
func (me *XsdGoPkgHasElem_Dedication) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Dedication; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dedication.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Acknowledgements struct {
	Acknowledgements *TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook acknowledgements"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Acknowledgements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Acknowledgements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Acknowledgements instance.
func (me *XsdGoPkgHasElem_Acknowledgements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Acknowledgements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Acknowledgements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Colophon struct {
	Colophon *TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook colophon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colophon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colophon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colophon instance.
func (me *XsdGoPkgHasElem_Colophon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Colophon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Colophon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Appendix struct {
	Appendix *TxsdAppendix `xml:"http://docbook.org/ns/docbook appendix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Appendix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Appendix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Appendix instance.
func (me *XsdGoPkgHasElem_Appendix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Appendix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Appendix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Chapter struct {
	Chapter *TxsdAppendix `xml:"http://docbook.org/ns/docbook chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Chapter instance.
func (me *XsdGoPkgHasElem_Chapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Chapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Chapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Part struct {
	Part *TxsdPart `xml:"http://docbook.org/ns/docbook part"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Part function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Part instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Part instance.
func (me *XsdGoPkgHasElem_Part) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Part; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Part.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Preface struct {
	Preface *TxsdAppendix `xml:"http://docbook.org/ns/docbook preface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Preface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Preface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Preface instance.
func (me *XsdGoPkgHasElem_Preface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Preface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Preface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Partintro struct {
	Partintros []*TxsdPartintro `xml:"http://docbook.org/ns/docbook partintro"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Partintro function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Partintro instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Partintro instance.
func (me *XsdGoPkgHasElems_Partintro) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Partintro; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Partintros {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Section struct {
	Section *TxsdSection `xml:"http://docbook.org/ns/docbook section"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Section instance.
func (me *XsdGoPkgHasElem_Section) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Simplesect struct {
	Simplesect *TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook simplesect"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplesect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplesect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplesect instance.
func (me *XsdGoPkgHasElem_Simplesect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Simplesect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Simplesect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Article struct {
	Article *TxsdArticle `xml:"http://docbook.org/ns/docbook article"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Article instance.
func (me *XsdGoPkgHasElem_Article) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Annotation struct {
	Annotation *TxsdAnnotation `xml:"http://docbook.org/ns/docbook annotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Annotation instance.
func (me *XsdGoPkgHasElem_Annotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Annotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Extendedlink struct {
	Extendedlink *TxsdExtendedlink `xml:"http://docbook.org/ns/docbook extendedlink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extendedlink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extendedlink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extendedlink instance.
func (me *XsdGoPkgHasElem_Extendedlink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extendedlink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extendedlink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Locator struct {
	Locator *TxsdLocator `xml:"http://docbook.org/ns/docbook locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Locator instance.
func (me *XsdGoPkgHasElem_Locator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Locator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Locator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Arc struct {
	Arc *TxsdArc `xml:"http://docbook.org/ns/docbook arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arc instance.
func (me *XsdGoPkgHasElem_Arc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Arc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Arc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sect1 struct {
	Sect1 *TxsdSect1 `xml:"http://docbook.org/ns/docbook sect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect1 instance.
func (me *XsdGoPkgHasElem_Sect1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sect2 struct {
	Sect2 *TxsdSect2 `xml:"http://docbook.org/ns/docbook sect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect2 instance.
func (me *XsdGoPkgHasElem_Sect2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sect2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sect3 struct {
	Sect3 *TxsdSect3 `xml:"http://docbook.org/ns/docbook sect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect3 instance.
func (me *XsdGoPkgHasElem_Sect3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sect3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sect3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sect4 struct {
	Sect4 *TxsdSect4 `xml:"http://docbook.org/ns/docbook sect4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect4 instance.
func (me *XsdGoPkgHasElem_Sect4) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sect4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sect4.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sect5 struct {
	Sect5 *TxsdSect5 `xml:"http://docbook.org/ns/docbook sect5"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect5 instance.
func (me *XsdGoPkgHasElem_Sect5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sect5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sect5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TxsdReference `xml:"http://docbook.org/ns/docbook reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refentry struct {
	Refentry *TxsdRefentry `xml:"http://docbook.org/ns/docbook refentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refentry instance.
func (me *XsdGoPkgHasElem_Refentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refmeta struct {
	Refmetas []*TxsdRefmeta `xml:"http://docbook.org/ns/docbook refmeta"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refmeta function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refmeta instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refmeta instance.
func (me *XsdGoPkgHasElems_Refmeta) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refmeta; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refmetas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refmiscinfo struct {
	Refmiscinfo *TxsdRefmiscinfo `xml:"http://docbook.org/ns/docbook refmiscinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refmiscinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refmiscinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refmiscinfo instance.
func (me *XsdGoPkgHasElem_Refmiscinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refmiscinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refmiscinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refnamediv struct {
	Refnamediv *TxsdRefnamediv `xml:"http://docbook.org/ns/docbook refnamediv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refnamediv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refnamediv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refnamediv instance.
func (me *XsdGoPkgHasElem_Refnamediv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refnamediv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refnamediv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refdescriptor struct {
	Refdescriptors []*TxsdTitle `xml:"http://docbook.org/ns/docbook refdescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refdescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refdescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refdescriptor instance.
func (me *XsdGoPkgHasElems_Refdescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refdescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refdescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refname struct {
	Refname *TxsdTitle `xml:"http://docbook.org/ns/docbook refname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refname instance.
func (me *XsdGoPkgHasElem_Refname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refpurpose struct {
	Refpurposes []*TxsdTitle `xml:"http://docbook.org/ns/docbook refpurpose"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refpurpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refpurpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refpurpose instance.
func (me *XsdGoPkgHasElems_Refpurpose) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refpurpose; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refpurposes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refclass struct {
	Refclass *TxsdRefclass `xml:"http://docbook.org/ns/docbook refclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refclass instance.
func (me *XsdGoPkgHasElem_Refclass) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Refsynopsisdiv struct {
	Refsynopsisdivs []*TxsdRefsynopsisdiv `xml:"http://docbook.org/ns/docbook refsynopsisdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsynopsisdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsynopsisdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsynopsisdiv instance.
func (me *XsdGoPkgHasElems_Refsynopsisdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Refsynopsisdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Refsynopsisdivs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refsection struct {
	Refsection *TxsdRefsection `xml:"http://docbook.org/ns/docbook refsection"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsection instance.
func (me *XsdGoPkgHasElem_Refsection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refsection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refsection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refsect1 struct {
	Refsect1 *TxsdRefsect1 `xml:"http://docbook.org/ns/docbook refsect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect1 instance.
func (me *XsdGoPkgHasElem_Refsect1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refsect1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refsect1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refsect2 struct {
	Refsect2 *TxsdRefsect2 `xml:"http://docbook.org/ns/docbook refsect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect2 instance.
func (me *XsdGoPkgHasElem_Refsect2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refsect2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refsect2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Refsect3 struct {
	Refsect3 *TxsdAcknowledgements `xml:"http://docbook.org/ns/docbook refsect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect3 instance.
func (me *XsdGoPkgHasElem_Refsect3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Refsect3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Refsect3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glosslist struct {
	Glosslist *TxsdGlosslist `xml:"http://docbook.org/ns/docbook glosslist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glosslist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glosslist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glosslist instance.
func (me *XsdGoPkgHasElem_Glosslist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glosslist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glosslist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossentry struct {
	Glossentry *TxsdGlossentry `xml:"http://docbook.org/ns/docbook glossentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossentry instance.
func (me *XsdGoPkgHasElem_Glossentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glossentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossdef struct {
	Glossdef *TxsdGlossdef `xml:"http://docbook.org/ns/docbook glossdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossdef instance.
func (me *XsdGoPkgHasElem_Glossdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glossdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Glosssee struct {
	Glosssees []*TxsdGlossseealso `xml:"http://docbook.org/ns/docbook glosssee"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glosssee function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glosssee instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glosssee instance.
func (me *XsdGoPkgHasElems_Glosssee) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Glosssee; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glosssees {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossseealso struct {
	Glossseealso *TxsdGlossseealso `xml:"http://docbook.org/ns/docbook glossseealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossseealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossseealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossseealso instance.
func (me *XsdGoPkgHasElem_Glossseealso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossseealso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glossseealso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Firstterm struct {
	Firstterm *TxsdFirstterm `xml:"http://docbook.org/ns/docbook firstterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Firstterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Firstterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Firstterm instance.
func (me *XsdGoPkgHasElem_Firstterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Firstterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Firstterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossary struct {
	Glossary *TxsdGlossary `xml:"http://docbook.org/ns/docbook glossary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossary instance.
func (me *XsdGoPkgHasElem_Glossary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glossary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Glossdiv struct {
	Glossdiv *TxsdGlossdiv `xml:"http://docbook.org/ns/docbook glossdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossdiv instance.
func (me *XsdGoPkgHasElem_Glossdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Glossdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glossdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Termdef struct {
	Termdef *TxsdTermdef `xml:"http://docbook.org/ns/docbook termdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Termdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Termdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Termdef instance.
func (me *XsdGoPkgHasElem_Termdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Termdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Termdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Biblioentry struct {
	Biblioentry *TxsdBiblioentry `xml:"http://docbook.org/ns/docbook biblioentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioentry instance.
func (me *XsdGoPkgHasElem_Biblioentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Biblioentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Biblioentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliomixed struct {
	Bibliomixed *TxsdBibliomixed `xml:"http://docbook.org/ns/docbook bibliomixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomixed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomixed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomixed instance.
func (me *XsdGoPkgHasElem_Bibliomixed) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliomixed; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliomixed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Biblioset struct {
	Biblioset *TxsdBiblioset `xml:"http://docbook.org/ns/docbook biblioset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioset instance.
func (me *XsdGoPkgHasElem_Biblioset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Biblioset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Biblioset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliomset struct {
	Bibliomset *TxsdBibliomset `xml:"http://docbook.org/ns/docbook bibliomset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomset instance.
func (me *XsdGoPkgHasElem_Bibliomset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliomset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliomset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliomisc struct {
	Bibliomisc *TxsdLiteral `xml:"http://docbook.org/ns/docbook bibliomisc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomisc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomisc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomisc instance.
func (me *XsdGoPkgHasElem_Bibliomisc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliomisc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliomisc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliodiv struct {
	Bibliodiv *TxsdBibliodiv `xml:"http://docbook.org/ns/docbook bibliodiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliodiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliodiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliodiv instance.
func (me *XsdGoPkgHasElem_Bibliodiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliodiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliodiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bibliolist struct {
	Bibliolist *TxsdBibliolist `xml:"http://docbook.org/ns/docbook bibliolist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliolist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliolist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliolist instance.
func (me *XsdGoPkgHasElem_Bibliolist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bibliolist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bibliolist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Biblioref struct {
	Biblioref *TxsdBiblioref `xml:"http://docbook.org/ns/docbook biblioref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioref instance.
func (me *XsdGoPkgHasElem_Biblioref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Biblioref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Biblioref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Itermset struct {
	Itermset *TxsdItermset `xml:"http://docbook.org/ns/docbook itermset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Itermset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Itermset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Itermset instance.
func (me *XsdGoPkgHasElem_Itermset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Itermset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Itermset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Indexterm struct {
	Indexterm *TxsdIndexterm `xml:"http://docbook.org/ns/docbook indexterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexterm instance.
func (me *XsdGoPkgHasElem_Indexterm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Indexterm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Indexterm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Primary struct {
	Primaries []*TxsdPrimary `xml:"http://docbook.org/ns/docbook primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Primary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Primary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Primary instance.
func (me *XsdGoPkgHasElems_Primary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Primary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Primaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Secondary struct {
	Secondaries []*TxsdPrimary `xml:"http://docbook.org/ns/docbook secondary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Secondary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Secondary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Secondary instance.
func (me *XsdGoPkgHasElems_Secondary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Secondary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Secondaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tertiary struct {
	Tertiaries []*TxsdPrimary `xml:"http://docbook.org/ns/docbook tertiary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tertiary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tertiary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tertiary instance.
func (me *XsdGoPkgHasElems_Tertiary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tertiary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tertiaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_See struct {
	Sees []*TxsdEmphasis `xml:"http://docbook.org/ns/docbook see"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_See function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_See instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_See instance.
func (me *XsdGoPkgHasElems_See) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_See; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sees {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seealso struct {
	Seealso *TxsdEmphasis `xml:"http://docbook.org/ns/docbook seealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seealso instance.
func (me *XsdGoPkgHasElem_Seealso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seealso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seealso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Index struct {
	Index *TxsdIndex `xml:"http://docbook.org/ns/docbook index"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Index function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Index instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Index instance.
func (me *XsdGoPkgHasElem_Index) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Index; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Index.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Setindex struct {
	Setindexs []*TxsdSetindex `xml:"http://docbook.org/ns/docbook setindex"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Setindex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Setindex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Setindex instance.
func (me *XsdGoPkgHasElems_Setindex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Setindex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setindexs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Indexdiv struct {
	Indexdiv *TxsdIndexdiv `xml:"http://docbook.org/ns/docbook indexdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexdiv instance.
func (me *XsdGoPkgHasElem_Indexdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Indexdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Indexdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Indexentry struct {
	Indexentry *TxsdIndexentry `xml:"http://docbook.org/ns/docbook indexentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexentry instance.
func (me *XsdGoPkgHasElem_Indexentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Indexentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Indexentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Primaryie struct {
	Primaryies []*TxsdPrimaryie `xml:"http://docbook.org/ns/docbook primaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Primaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Primaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Primaryie instance.
func (me *XsdGoPkgHasElems_Primaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Primaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Primaryies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Secondaryie struct {
	Secondaryie *TxsdPrimaryie `xml:"http://docbook.org/ns/docbook secondaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Secondaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Secondaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Secondaryie instance.
func (me *XsdGoPkgHasElem_Secondaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Secondaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Secondaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tertiaryie struct {
	Tertiaryie *TxsdPrimaryie `xml:"http://docbook.org/ns/docbook tertiaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tertiaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tertiaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tertiaryie instance.
func (me *XsdGoPkgHasElem_Tertiaryie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tertiaryie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tertiaryie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seeie struct {
	Seeie *TxsdTitle `xml:"http://docbook.org/ns/docbook seeie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seeie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seeie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seeie instance.
func (me *XsdGoPkgHasElem_Seeie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seeie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seeie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Seealsoie struct {
	Seealsoie *TxsdPrimaryie `xml:"http://docbook.org/ns/docbook seealsoie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seealsoie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seealsoie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seealsoie instance.
func (me *XsdGoPkgHasElem_Seealsoie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Seealsoie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Seealsoie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tocdiv struct {
	Tocdiv *TxsdTocdiv `xml:"http://docbook.org/ns/docbook tocdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tocdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tocdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tocdiv instance.
func (me *XsdGoPkgHasElem_Tocdiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tocdiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tocdiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tocentry struct {
	Tocentry *TxsdTocentry `xml:"http://docbook.org/ns/docbook tocentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tocentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tocentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tocentry instance.
func (me *XsdGoPkgHasElem_Tocentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tocentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tocentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Task struct {
	Task *TxsdTask `xml:"http://docbook.org/ns/docbook task"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Task instance.
func (me *XsdGoPkgHasElem_Task) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Task; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tasksummary struct {
	Tasksummaries []*TxsdSidebar `xml:"http://docbook.org/ns/docbook tasksummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tasksummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tasksummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tasksummary instance.
func (me *XsdGoPkgHasElems_Tasksummary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tasksummary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tasksummaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Taskprerequisites struct {
	Taskprerequisiteses []*TxsdSidebar `xml:"http://docbook.org/ns/docbook taskprerequisites"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Taskprerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Taskprerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Taskprerequisites instance.
func (me *XsdGoPkgHasElems_Taskprerequisites) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Taskprerequisites; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Taskprerequisiteses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Taskrelated struct {
	Taskrelateds []*TxsdSidebar `xml:"http://docbook.org/ns/docbook taskrelated"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Taskrelated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Taskrelated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Taskrelated instance.
func (me *XsdGoPkgHasElems_Taskrelated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Taskrelated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Taskrelateds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Calloutlist struct {
	Calloutlist *TxsdCalloutlist `xml:"http://docbook.org/ns/docbook calloutlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Calloutlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Calloutlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Calloutlist instance.
func (me *XsdGoPkgHasElem_Calloutlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Calloutlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Calloutlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Callout struct {
	Callout *TxsdCallout `xml:"http://docbook.org/ns/docbook callout"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Callout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Callout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Callout instance.
func (me *XsdGoPkgHasElem_Callout) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Callout; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Callout.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Programlistingco struct {
	Programlistingco *TxsdProgramlistingco `xml:"http://docbook.org/ns/docbook programlistingco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Programlistingco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Programlistingco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Programlistingco instance.
func (me *XsdGoPkgHasElem_Programlistingco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Programlistingco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Programlistingco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Areaspec struct {
	Areaspecs []*TxsdAreaspec `xml:"http://docbook.org/ns/docbook areaspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Areaspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Areaspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Areaspec instance.
func (me *XsdGoPkgHasElems_Areaspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Areaspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Areaspecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Area struct {
	Area *TxsdArea `xml:"http://docbook.org/ns/docbook area"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Area instance.
func (me *XsdGoPkgHasElem_Area) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Area; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Area.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Areaset struct {
	Areaset *TxsdAreaset `xml:"http://docbook.org/ns/docbook areaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Areaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Areaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Areaset instance.
func (me *XsdGoPkgHasElem_Areaset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Areaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Areaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Screenco struct {
	Screenco *TxsdScreenco `xml:"http://docbook.org/ns/docbook screenco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screenco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screenco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screenco instance.
func (me *XsdGoPkgHasElem_Screenco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Screenco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Screenco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Imageobjectco struct {
	Imageobjectco *TxsdImageobjectco `xml:"http://docbook.org/ns/docbook imageobjectco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imageobjectco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imageobjectco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imageobjectco instance.
func (me *XsdGoPkgHasElem_Imageobjectco) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Imageobjectco; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Imageobjectco.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Co struct {
	Co *TxsdCo `xml:"http://docbook.org/ns/docbook co"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Co function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Co instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Co instance.
func (me *XsdGoPkgHasElem_Co) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Co; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Co.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Coref struct {
	Coref *TxsdCoref `xml:"http://docbook.org/ns/docbook coref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Coref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Coref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Coref instance.
func (me *XsdGoPkgHasElem_Coref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Coref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Coref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Productionset struct {
	Productionset *TxsdProductionset `xml:"http://docbook.org/ns/docbook productionset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productionset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productionset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productionset instance.
func (me *XsdGoPkgHasElem_Productionset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Productionset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Productionset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Production struct {
	Production *TxsdProduction `xml:"http://docbook.org/ns/docbook production"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Production function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Production instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Production instance.
func (me *XsdGoPkgHasElem_Production) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Production; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Production.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Lhs struct {
	Lhses []*TxsdDate `xml:"http://docbook.org/ns/docbook lhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lhs instance.
func (me *XsdGoPkgHasElems_Lhs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lhs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lhses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Rhs struct {
	Rhses []*TxsdRhs `xml:"http://docbook.org/ns/docbook rhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Rhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rhs instance.
func (me *XsdGoPkgHasElems_Rhs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Rhs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rhses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Nonterminal struct {
	Nonterminal *TxsdNonterminal `xml:"http://docbook.org/ns/docbook nonterminal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nonterminal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nonterminal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nonterminal instance.
func (me *XsdGoPkgHasElem_Nonterminal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Nonterminal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nonterminal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Constraint struct {
	Constraint *TxsdVoid `xml:"http://docbook.org/ns/docbook constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constraint instance.
func (me *XsdGoPkgHasElem_Constraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Constraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Productionrecap struct {
	Productionrecap *TxsdVoid `xml:"http://docbook.org/ns/docbook productionrecap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productionrecap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productionrecap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productionrecap instance.
func (me *XsdGoPkgHasElem_Productionrecap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Productionrecap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Productionrecap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Constraintdef struct {
	Constraintdef *TxsdConstraintdef `xml:"http://docbook.org/ns/docbook constraintdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constraintdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constraintdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constraintdef instance.
func (me *XsdGoPkgHasElem_Constraintdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Constraintdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constraintdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tgroup struct {
	Tgroup *TxsdTgroup `xml:"http://docbook.org/ns/docbook tgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tgroup instance.
func (me *XsdGoPkgHasElem_Tgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Colspec struct {
	Colspec *TxsdColspec `xml:"http://docbook.org/ns/docbook colspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colspec instance.
func (me *XsdGoPkgHasElem_Colspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Colspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Spanspec struct {
	Spanspec *TxsdSpanspec `xml:"http://docbook.org/ns/docbook spanspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Spanspec instance.
func (me *XsdGoPkgHasElem_Spanspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Spanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spanspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Thead struct {
	Theads []*TxsdThead `xml:"http://docbook.org/ns/docbook thead"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Thead instance.
func (me *XsdGoPkgHasElems_Thead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Thead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Theads {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tfoot struct {
	Tfoots []*TxsdTfoot `xml:"http://docbook.org/ns/docbook tfoot"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tfoot instance.
func (me *XsdGoPkgHasElems_Tfoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tfoots {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Row struct {
	Row *TxsdRow `xml:"http://docbook.org/ns/docbook row"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Row instance.
func (me *XsdGoPkgHasElem_Row) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Row; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Entry struct {
	Entry *TxsdEntry `xml:"http://docbook.org/ns/docbook entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Entrytbl struct {
	Entrytbl *TxsdEntrytbl `xml:"http://docbook.org/ns/docbook entrytbl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entrytbl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entrytbl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entrytbl instance.
func (me *XsdGoPkgHasElem_Entrytbl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entrytbl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Entrytbl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Table struct {
	Table *TxsdTable `xml:"http://docbook.org/ns/docbook table"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Table instance.
func (me *XsdGoPkgHasElem_Table) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Table; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Informaltable struct {
	Informaltable *TxsdInformaltable `xml:"http://docbook.org/ns/docbook informaltable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informaltable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informaltable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informaltable instance.
func (me *XsdGoPkgHasElem_Informaltable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Informaltable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Informaltable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Col struct {
	Col *TxsdCol `xml:"http://docbook.org/ns/docbook col"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Col function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Col instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Col instance.
func (me *XsdGoPkgHasElem_Col) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Col; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Col.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Colgroup struct {
	Colgroup *TxsdColgroup `xml:"http://docbook.org/ns/docbook colgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colgroup instance.
func (me *XsdGoPkgHasElem_Colgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Colgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Colgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tr struct {
	Tr *TxsdTr `xml:"http://docbook.org/ns/docbook tr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tr instance.
func (me *XsdGoPkgHasElem_Tr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Th struct {
	Th *TxsdTh `xml:"http://docbook.org/ns/docbook th"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Th function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Th instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Th instance.
func (me *XsdGoPkgHasElem_Th) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Th; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Th.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Td struct {
	Td *TxsdTd `xml:"http://docbook.org/ns/docbook td"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Td function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Td instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Td instance.
func (me *XsdGoPkgHasElem_Td) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Td; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Td.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgset struct {
	Msgset *TxsdMsgset `xml:"http://docbook.org/ns/docbook msgset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgset instance.
func (me *XsdGoPkgHasElem_Msgset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgentry struct {
	Msgentry *TxsdMsgentry `xml:"http://docbook.org/ns/docbook msgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgentry instance.
func (me *XsdGoPkgHasElem_Msgentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Simplemsgentry struct {
	Simplemsgentry *TxsdSimplemsgentry `xml:"http://docbook.org/ns/docbook simplemsgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplemsgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplemsgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplemsgentry instance.
func (me *XsdGoPkgHasElem_Simplemsgentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Simplemsgentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Simplemsgentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msg struct {
	Msg *TxsdMsg `xml:"http://docbook.org/ns/docbook msg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msg instance.
func (me *XsdGoPkgHasElem_Msg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgmain struct {
	Msgmains []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgmain"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgmain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgmain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgmain instance.
func (me *XsdGoPkgHasElems_Msgmain) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgmain; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgmains {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgsub struct {
	Msgsub *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgsub"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgsub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgsub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgsub instance.
func (me *XsdGoPkgHasElem_Msgsub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgsub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgsub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgrel struct {
	Msgrel *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgrel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgrel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgrel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgrel instance.
func (me *XsdGoPkgHasElem_Msgrel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgrel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgrel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msgtext struct {
	Msgtexts []*TxsdMsgtext `xml:"http://docbook.org/ns/docbook msgtext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgtext instance.
func (me *XsdGoPkgHasElems_Msgtext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msgtext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msgtexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msginfo struct {
	Msginfos []*TxsdMsginfo `xml:"http://docbook.org/ns/docbook msginfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msginfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msginfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msginfo instance.
func (me *XsdGoPkgHasElems_Msginfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msginfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msginfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msglevel struct {
	Msglevel *TxsdLiteral `xml:"http://docbook.org/ns/docbook msglevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msglevel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msglevel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msglevel instance.
func (me *XsdGoPkgHasElem_Msglevel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msglevel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msglevel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgorig struct {
	Msgorig *TxsdLiteral `xml:"http://docbook.org/ns/docbook msgorig"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgorig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgorig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgorig instance.
func (me *XsdGoPkgHasElem_Msgorig) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgorig; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgorig.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgaud struct {
	Msgaud *TxsdLiteral `xml:"http://docbook.org/ns/docbook msgaud"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgaud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgaud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgaud instance.
func (me *XsdGoPkgHasElem_Msgaud) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgaud; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgaud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msgexplan struct {
	Msgexplan *TxsdImportant `xml:"http://docbook.org/ns/docbook msgexplan"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgexplan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgexplan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgexplan instance.
func (me *XsdGoPkgHasElem_Msgexplan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msgexplan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msgexplan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Qandaset struct {
	Qandaset *TxsdQandaset `xml:"http://docbook.org/ns/docbook qandaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandaset instance.
func (me *XsdGoPkgHasElem_Qandaset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Qandaset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Qandaset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Qandadiv struct {
	Qandadiv *TxsdQandadiv `xml:"http://docbook.org/ns/docbook qandadiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandadiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandadiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandadiv instance.
func (me *XsdGoPkgHasElem_Qandadiv) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Qandadiv; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Qandadiv.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Qandaentry struct {
	Qandaentry *TxsdQandaentry `xml:"http://docbook.org/ns/docbook qandaentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandaentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandaentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandaentry instance.
func (me *XsdGoPkgHasElem_Qandaentry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Qandaentry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Qandaentry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Question struct {
	Questions []*TxsdQuestion `xml:"http://docbook.org/ns/docbook question"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Question function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Question instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Question instance.
func (me *XsdGoPkgHasElems_Question) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Question; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Questions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Answer struct {
	Answer *TxsdQuestion `xml:"http://docbook.org/ns/docbook answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Answer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Answer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Answer instance.
func (me *XsdGoPkgHasElem_Answer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Answer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Answer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Label struct {
	Labels []*TxsdLiteral `xml:"http://docbook.org/ns/docbook label"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Label instance.
func (me *XsdGoPkgHasElems_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Labels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Equation struct {
	Equation *TxsdEquation `xml:"http://docbook.org/ns/docbook equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Equation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Equation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Equation instance.
func (me *XsdGoPkgHasElem_Equation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Equation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Equation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Informalequation struct {
	Informalequation *TxsdInformalequation `xml:"http://docbook.org/ns/docbook informalequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalequation instance.
func (me *XsdGoPkgHasElem_Informalequation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Informalequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Informalequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Inlineequation struct {
	Inlineequation *TxsdInlineequation `xml:"http://docbook.org/ns/docbook inlineequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Inlineequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Inlineequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Inlineequation instance.
func (me *XsdGoPkgHasElem_Inlineequation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Inlineequation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Inlineequation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Mathphrase struct {
	Mathphrase *TxsdMathphrase `xml:"http://docbook.org/ns/docbook mathphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mathphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mathphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mathphrase instance.
func (me *XsdGoPkgHasElem_Mathphrase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Mathphrase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mathphrase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Markup struct {
	Markup *TxsdLiteral `xml:"http://docbook.org/ns/docbook markup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Markup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Markup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Markup instance.
func (me *XsdGoPkgHasElem_Markup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Markup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Markup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tag struct {
	Tag *TxsdTag `xml:"http://docbook.org/ns/docbook tag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tag instance.
func (me *XsdGoPkgHasElem_Tag) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tag; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Symbol struct {
	Symbol *TxsdSymbol `xml:"http://docbook.org/ns/docbook symbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Symbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Symbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Symbol instance.
func (me *XsdGoPkgHasElem_Symbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Symbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Token struct {
	Token *TxsdLiteral `xml:"http://docbook.org/ns/docbook token"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Token function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Token instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Token instance.
func (me *XsdGoPkgHasElem_Token) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Token; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Literal struct {
	Literal *TxsdLiteral `xml:"http://docbook.org/ns/docbook literal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Literal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Literal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Literal instance.
func (me *XsdGoPkgHasElem_Literal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Literal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Literal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Code struct {
	Code *TxsdCode `xml:"http://docbook.org/ns/docbook code"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Code function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Code instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Code instance.
func (me *XsdGoPkgHasElem_Code) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Code; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Code.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Constant struct {
	Constant *TxsdConstant `xml:"http://docbook.org/ns/docbook constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constant instance.
func (me *XsdGoPkgHasElem_Constant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Constant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Productname struct {
	Productname *TxsdProductname `xml:"http://docbook.org/ns/docbook productname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productname instance.
func (me *XsdGoPkgHasElem_Productname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Productname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Productname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Productnumber struct {
	Productnumber *TxsdLiteral `xml:"http://docbook.org/ns/docbook productnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productnumber instance.
func (me *XsdGoPkgHasElem_Productnumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Productnumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Productnumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Database struct {
	Database *TxsdDatabase `xml:"http://docbook.org/ns/docbook database"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Database function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Database instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Database instance.
func (me *XsdGoPkgHasElem_Database) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Database; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Database.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Application struct {
	Application *TxsdApplication `xml:"http://docbook.org/ns/docbook application"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Application instance.
func (me *XsdGoPkgHasElem_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Hardware struct {
	Hardware *TxsdLiteral `xml:"http://docbook.org/ns/docbook hardware"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Hardware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Hardware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Hardware instance.
func (me *XsdGoPkgHasElem_Hardware) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Hardware; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hardware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guibutton struct {
	Guibutton *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guibutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guibutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guibutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guibutton instance.
func (me *XsdGoPkgHasElem_Guibutton) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guibutton; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guibutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guiicon struct {
	Guiicon *TxsdGuiicon `xml:"http://docbook.org/ns/docbook guiicon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guiicon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guiicon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guiicon instance.
func (me *XsdGoPkgHasElem_Guiicon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guiicon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guiicon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guilabel struct {
	Guilabel *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guilabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guilabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guilabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guilabel instance.
func (me *XsdGoPkgHasElem_Guilabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guilabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guilabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guimenu struct {
	Guimenu *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guimenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guimenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guimenu instance.
func (me *XsdGoPkgHasElem_Guimenu) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guimenu; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guimenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guimenuitem struct {
	Guimenuitem *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenuitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guimenuitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guimenuitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guimenuitem instance.
func (me *XsdGoPkgHasElem_Guimenuitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guimenuitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guimenuitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Guisubmenu struct {
	Guisubmenu *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guisubmenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guisubmenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guisubmenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guisubmenu instance.
func (me *XsdGoPkgHasElem_Guisubmenu) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Guisubmenu; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Guisubmenu.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Menuchoice struct {
	Menuchoice *TxsdMenuchoice `xml:"http://docbook.org/ns/docbook menuchoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Menuchoice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Menuchoice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Menuchoice instance.
func (me *XsdGoPkgHasElem_Menuchoice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Menuchoice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Menuchoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Mousebutton struct {
	Mousebutton *TxsdLiteral `xml:"http://docbook.org/ns/docbook mousebutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mousebutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mousebutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mousebutton instance.
func (me *XsdGoPkgHasElem_Mousebutton) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Mousebutton; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mousebutton.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keycap struct {
	Keycap *TxsdKeycap `xml:"http://docbook.org/ns/docbook keycap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycap instance.
func (me *XsdGoPkgHasElem_Keycap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keycap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keycap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keycode struct {
	Keycode *TxsdLiteral `xml:"http://docbook.org/ns/docbook keycode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycode instance.
func (me *XsdGoPkgHasElem_Keycode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keycode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keycode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keycombo struct {
	Keycombo *TxsdKeycombo `xml:"http://docbook.org/ns/docbook keycombo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycombo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycombo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycombo instance.
func (me *XsdGoPkgHasElem_Keycombo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keycombo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keycombo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keysym struct {
	Keysym *TxsdLiteral `xml:"http://docbook.org/ns/docbook keysym"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keysym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keysym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keysym instance.
func (me *XsdGoPkgHasElem_Keysym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keysym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keysym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Accel struct {
	Accel *TxsdLiteral `xml:"http://docbook.org/ns/docbook accel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Accel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Accel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Accel instance.
func (me *XsdGoPkgHasElem_Accel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Accel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Accel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Prompt struct {
	Prompt *TxsdPrompt `xml:"http://docbook.org/ns/docbook prompt"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Prompt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Prompt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Prompt instance.
func (me *XsdGoPkgHasElem_Prompt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Prompt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Prompt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Envar struct {
	Envar *TxsdLiteral `xml:"http://docbook.org/ns/docbook envar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Envar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Envar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Envar instance.
func (me *XsdGoPkgHasElem_Envar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Envar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Envar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Filename struct {
	Filename *TxsdFilename `xml:"http://docbook.org/ns/docbook filename"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Filename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Filename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Filename instance.
func (me *XsdGoPkgHasElem_Filename) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Filename; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Filename.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Command struct {
	Command *TxsdLiteral `xml:"http://docbook.org/ns/docbook command"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Command function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Command instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Command instance.
func (me *XsdGoPkgHasElem_Command) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Command; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Command.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Computeroutput struct {
	Computeroutput *TxsdComputeroutput `xml:"http://docbook.org/ns/docbook computeroutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Computeroutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Computeroutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Computeroutput instance.
func (me *XsdGoPkgHasElem_Computeroutput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Computeroutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Computeroutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Userinput struct {
	Userinput *TxsdUserinput `xml:"http://docbook.org/ns/docbook userinput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Userinput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Userinput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Userinput instance.
func (me *XsdGoPkgHasElem_Userinput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Userinput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Userinput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cmdsynopsis struct {
	Cmdsynopsis *TxsdCmdsynopsis `xml:"http://docbook.org/ns/docbook cmdsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cmdsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cmdsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cmdsynopsis instance.
func (me *XsdGoPkgHasElem_Cmdsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cmdsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cmdsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Arg struct {
	Arg *TxsdArg `xml:"http://docbook.org/ns/docbook arg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arg instance.
func (me *XsdGoPkgHasElem_Arg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Arg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Arg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Group struct {
	Group *TxsdGroup `xml:"http://docbook.org/ns/docbook group"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Group instance.
func (me *XsdGoPkgHasElem_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sbr struct {
	Sbr *TxsdAnchor `xml:"http://docbook.org/ns/docbook sbr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sbr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sbr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sbr instance.
func (me *XsdGoPkgHasElem_Sbr) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sbr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sbr.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Synopfragment struct {
	Synopfragment *TxsdSynopfragment `xml:"http://docbook.org/ns/docbook synopfragment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopfragment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopfragment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopfragment instance.
func (me *XsdGoPkgHasElem_Synopfragment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Synopfragment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Synopfragment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Synopfragmentref struct {
	Synopfragmentref *TxsdDate `xml:"http://docbook.org/ns/docbook synopfragmentref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopfragmentref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopfragmentref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopfragmentref instance.
func (me *XsdGoPkgHasElem_Synopfragmentref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Synopfragmentref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Synopfragmentref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Synopsis struct {
	Synopsis *TxsdSynopsis `xml:"http://docbook.org/ns/docbook synopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopsis instance.
func (me *XsdGoPkgHasElem_Synopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Synopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Synopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Funcsynopsis struct {
	Funcsynopsis *TxsdFuncsynopsis `xml:"http://docbook.org/ns/docbook funcsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcsynopsis instance.
func (me *XsdGoPkgHasElem_Funcsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Funcsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Funcsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Funcsynopsisinfo struct {
	Funcsynopsisinfo *TxsdFuncsynopsisinfo `xml:"http://docbook.org/ns/docbook funcsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcsynopsisinfo instance.
func (me *XsdGoPkgHasElem_Funcsynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Funcsynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Funcsynopsisinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Funcprototype struct {
	Funcprototype *TxsdFuncprototype `xml:"http://docbook.org/ns/docbook funcprototype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcprototype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcprototype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcprototype instance.
func (me *XsdGoPkgHasElem_Funcprototype) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Funcprototype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Funcprototype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Funcdef struct {
	Funcdefs []*TxsdFuncdef `xml:"http://docbook.org/ns/docbook funcdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcdef instance.
func (me *XsdGoPkgHasElems_Funcdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Funcdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Funcdefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Function struct {
	Function *TxsdLiteral `xml:"http://docbook.org/ns/docbook function"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Function function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Function instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Function instance.
func (me *XsdGoPkgHasElem_Function) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Function; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Function.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Void struct {
	Voids []*TxsdVoid `xml:"http://docbook.org/ns/docbook void"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Void function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Void instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Void instance.
func (me *XsdGoPkgHasElems_Void) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Void; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Voids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Varargs struct {
	Varargses []*TxsdVoid `xml:"http://docbook.org/ns/docbook varargs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varargs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varargs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varargs instance.
func (me *XsdGoPkgHasElems_Varargs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Varargs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Varargses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Paramdef struct {
	Paramdef *TxsdParamdef `xml:"http://docbook.org/ns/docbook paramdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Paramdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Paramdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Paramdef instance.
func (me *XsdGoPkgHasElem_Paramdef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Paramdef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Paramdef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Classsynopsis struct {
	Classsynopsis *TxsdClasssynopsis `xml:"http://docbook.org/ns/docbook classsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Classsynopsis instance.
func (me *XsdGoPkgHasElem_Classsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Classsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Classsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Classsynopsisinfo struct {
	Classsynopsisinfo *TxsdClasssynopsisinfo `xml:"http://docbook.org/ns/docbook classsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Classsynopsisinfo instance.
func (me *XsdGoPkgHasElem_Classsynopsisinfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Classsynopsisinfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Classsynopsisinfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ooclass struct {
	Ooclass *TxsdOoclass `xml:"http://docbook.org/ns/docbook ooclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ooclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ooclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ooclass instance.
func (me *XsdGoPkgHasElem_Ooclass) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ooclass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ooclass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Oointerface struct {
	Oointerface *TxsdOointerface `xml:"http://docbook.org/ns/docbook oointerface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Oointerface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Oointerface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Oointerface instance.
func (me *XsdGoPkgHasElem_Oointerface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Oointerface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Oointerface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ooexception struct {
	Ooexception *TxsdOoexception `xml:"http://docbook.org/ns/docbook ooexception"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ooexception function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ooexception instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ooexception instance.
func (me *XsdGoPkgHasElem_Ooexception) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ooexception; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ooexception.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Modifier struct {
	Modifier *TxsdModifier `xml:"http://docbook.org/ns/docbook modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Modifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Modifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Modifier instance.
func (me *XsdGoPkgHasElem_Modifier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Modifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Modifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fieldsynopsis struct {
	Fieldsynopsis *TxsdFieldsynopsis `xml:"http://docbook.org/ns/docbook fieldsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fieldsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fieldsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fieldsynopsis instance.
func (me *XsdGoPkgHasElem_Fieldsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fieldsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fieldsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Constructorsynopsis struct {
	Constructorsynopsis *TxsdConstructorsynopsis `xml:"http://docbook.org/ns/docbook constructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constructorsynopsis instance.
func (me *XsdGoPkgHasElem_Constructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Constructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Destructorsynopsis struct {
	Destructorsynopsis *TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook destructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Destructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Destructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Destructorsynopsis instance.
func (me *XsdGoPkgHasElem_Destructorsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Destructorsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Destructorsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Methodsynopsis struct {
	Methodsynopsis *TxsdMethodsynopsis `xml:"http://docbook.org/ns/docbook methodsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodsynopsis instance.
func (me *XsdGoPkgHasElem_Methodsynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Methodsynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Methodsynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Methodparam struct {
	Methodparam *TxsdMethodparam `xml:"http://docbook.org/ns/docbook methodparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodparam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodparam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodparam instance.
func (me *XsdGoPkgHasElem_Methodparam) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Methodparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Methodparam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Returnvalue struct {
	Returnvalue *TxsdLiteral `xml:"http://docbook.org/ns/docbook returnvalue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Returnvalue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Returnvalue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Returnvalue instance.
func (me *XsdGoPkgHasElem_Returnvalue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Returnvalue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Returnvalue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Caution struct {
	Caution *TxsdCaution `xml:"http://docbook.org/ns/docbook caution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Caution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Caution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Caution instance.
func (me *XsdGoPkgHasElem_Caution) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Caution; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Caution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Important struct {
	Important *TxsdImportant `xml:"http://docbook.org/ns/docbook important"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Important function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Important instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Important instance.
func (me *XsdGoPkgHasElem_Important) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Important; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Important.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Note struct {
	Note *TxsdNote `xml:"http://docbook.org/ns/docbook note"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Note instance.
func (me *XsdGoPkgHasElem_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tip struct {
	Tip *TxsdTip `xml:"http://docbook.org/ns/docbook tip"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tip instance.
func (me *XsdGoPkgHasElem_Tip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Warning struct {
	Warning *TxsdWarning `xml:"http://docbook.org/ns/docbook warning"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Warning function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Warning instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Warning instance.
func (me *XsdGoPkgHasElem_Warning) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Warning; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Warning.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Errorcode struct {
	Errorcode *TxsdLiteral `xml:"http://docbook.org/ns/docbook errorcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errorcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errorcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errorcode instance.
func (me *XsdGoPkgHasElem_Errorcode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Errorcode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Errorcode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Errorname struct {
	Errorname *TxsdLiteral `xml:"http://docbook.org/ns/docbook errorname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errorname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errorname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errorname instance.
func (me *XsdGoPkgHasElem_Errorname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Errorname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Errorname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Errortext struct {
	Errortext *TxsdLiteral `xml:"http://docbook.org/ns/docbook errortext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errortext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errortext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errortext instance.
func (me *XsdGoPkgHasElem_Errortext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Errortext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Errortext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Errortype struct {
	Errortype *TxsdErrortype `xml:"http://docbook.org/ns/docbook errortype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errortype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errortype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errortype instance.
func (me *XsdGoPkgHasElem_Errortype) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Errortype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Errortype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Systemitem struct {
	Systemitem *TxsdSystemitem `xml:"http://docbook.org/ns/docbook systemitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Systemitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Systemitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Systemitem instance.
func (me *XsdGoPkgHasElem_Systemitem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Systemitem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Systemitem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Option struct {
	Option *TxsdLiteral `xml:"http://docbook.org/ns/docbook option"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Option instance.
func (me *XsdGoPkgHasElem_Option) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Option; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Optional struct {
	Optional *TxsdLiteral `xml:"http://docbook.org/ns/docbook optional"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Optional function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Optional instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Optional instance.
func (me *XsdGoPkgHasElem_Optional) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Optional; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Optional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Property struct {
	Property *TxsdLiteral `xml:"http://docbook.org/ns/docbook property"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Property instance.
func (me *XsdGoPkgHasElem_Property) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Property; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 972 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 972 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Coref                func(*XsdGoPkgHasElem_Coref, bool) error
	XsdGoPkgHasElem_Contrib              func(*XsdGoPkgHasElem_Contrib, bool) error
	XsdGoPkgHasElems_Annotation          func(*XsdGoPkgHasElems_Annotation, bool) error
	TxsdBiblioentry                      func(*TxsdBiblioentry, bool) error
	TxsdTd                               func(*TxsdTd, bool) error
	XsdGoPkgHasElem_Glossdiv             func(*XsdGoPkgHasElem_Glossdiv, bool) error
	TxsdVarlistentry                     func(*TxsdVarlistentry, bool) error
	XsdGoPkgHasElems_Returnvalue         func(*XsdGoPkgHasElems_Returnvalue, bool) error
	XsdGoPkgHasElems_Honorific           func(*XsdGoPkgHasElems_Honorific, bool) error
	XsdGoPkgHasElem_Glossterm            func(*XsdGoPkgHasElem_Glossterm, bool) error
	XsdGoPkgHasElem_Authorgroup          func(*XsdGoPkgHasElem_Authorgroup, bool) error
	XsdGoPkgHasElems_Publishername       func(*XsdGoPkgHasElems_Publishername, bool) error
	TxsdInformalequation                 func(*TxsdInformalequation, bool) error
	XsdGoPkgHasElem_Segmentedlist        func(*XsdGoPkgHasElem_Segmentedlist, bool) error
	XsdGoPkgHasElem_Simplemsgentry       func(*XsdGoPkgHasElem_Simplemsgentry, bool) error
	XsdGoPkgHasElem_Co                   func(*XsdGoPkgHasElem_Co, bool) error
	XsdGoPkgHasElem_Tertiary             func(*XsdGoPkgHasElem_Tertiary, bool) error
	XsdGoPkgHasElem_Productionset        func(*XsdGoPkgHasElem_Productionset, bool) error
	XsdGoPkgHasElems_Caution             func(*XsdGoPkgHasElems_Caution, bool) error
	TxsdSect3                            func(*TxsdSect3, bool) error
	XsdGoPkgHasElem_Audiodata            func(*XsdGoPkgHasElem_Audiodata, bool) error
	XsdGoPkgHasElem_Superscript          func(*XsdGoPkgHasElem_Superscript, bool) error
	XsdGoPkgHasElems_Confgroup           func(*XsdGoPkgHasElems_Confgroup, bool) error
	XsdGoPkgHasElems_Pubdate             func(*XsdGoPkgHasElems_Pubdate, bool) error
	XsdGoPkgHasElem_Section              func(*XsdGoPkgHasElem_Section, bool) error
	XsdGoPkgHasElems_Msgtext             func(*XsdGoPkgHasElems_Msgtext, bool) error
	XsdGoPkgHasElems_Printhistory        func(*XsdGoPkgHasElems_Printhistory, bool) error
	XsdGoPkgHasElems_Tocdiv              func(*XsdGoPkgHasElems_Tocdiv, bool) error
	TxsdOointerface                      func(*TxsdOointerface, bool) error
	XsdGoPkgHasElems_Term                func(*XsdGoPkgHasElems_Term, bool) error
	XsdGoPkgHasElem_Lineage              func(*XsdGoPkgHasElem_Lineage, bool) error
	TxsdProductname                      func(*TxsdProductname, bool) error
	XsdGoPkgHasElem_Void                 func(*XsdGoPkgHasElem_Void, bool) error
	XsdGoPkgHasElem_Programlistingco     func(*XsdGoPkgHasElem_Programlistingco, bool) error
	XsdGoPkgHasElem_Areaspec             func(*XsdGoPkgHasElem_Areaspec, bool) error
	XsdGoPkgHasElems_Funcsynopsis        func(*XsdGoPkgHasElems_Funcsynopsis, bool) error
	XsdGoPkgHasElem_Alt                  func(*XsdGoPkgHasElem_Alt, bool) error
	TxsdInformaltable                    func(*TxsdInformaltable, bool) error
	XsdGoPkgHasElems_Funcdef             func(*XsdGoPkgHasElems_Funcdef, bool) error
	XsdGoPkgHasElem_Title                func(*XsdGoPkgHasElem_Title, bool) error
	TxsdAudiodata                        func(*TxsdAudiodata, bool) error
	XsdGoPkgHasElems_Section             func(*XsdGoPkgHasElems_Section, bool) error
	XsdGoPkgHasElem_Literallayout        func(*XsdGoPkgHasElem_Literallayout, bool) error
	XsdGoPkgHasElems_Productnumber       func(*XsdGoPkgHasElems_Productnumber, bool) error
	TxsdGlossdiv                         func(*TxsdGlossdiv, bool) error
	XsdGoPkgHasElems_Epigraph            func(*XsdGoPkgHasElems_Epigraph, bool) error
	XsdGoPkgHasElems_Issuenum            func(*XsdGoPkgHasElems_Issuenum, bool) error
	XsdGoPkgHasElem_Othername            func(*XsdGoPkgHasElem_Othername, bool) error
	XsdGoPkgHasElem_Callout              func(*XsdGoPkgHasElem_Callout, bool) error
	XsdGoPkgHasElems_Colspec             func(*XsdGoPkgHasElems_Colspec, bool) error
	TxsdSubject                          func(*TxsdSubject, bool) error
	TxsdGlossseealso                     func(*TxsdGlossseealso, bool) error
	XsdGoPkgHasElems_Refsection          func(*XsdGoPkgHasElems_Refsection, bool) error
	XsdGoPkgHasElems_Destructorsynopsis  func(*XsdGoPkgHasElems_Destructorsynopsis, bool) error
	XsdGoPkgHasElem_Note                 func(*XsdGoPkgHasElem_Note, bool) error
	XsdGoPkgHasElem_Confgroup            func(*XsdGoPkgHasElem_Confgroup, bool) error
	XsdGoPkgHasElems_Table               func(*XsdGoPkgHasElems_Table, bool) error
	XsdGoPkgHasElems_Superscript         func(*XsdGoPkgHasElems_Superscript, bool) error
	XsdGoPkgHasElems_Biblioref           func(*XsdGoPkgHasElems_Biblioref, bool) error
	TxsdFormalpara                       func(*TxsdFormalpara, bool) error
	TxsdMsginfo                          func(*TxsdMsginfo, bool) error
	TxsdConstant                         func(*TxsdConstant, bool) error
	XsdGoPkgHasElems_Keyword             func(*XsdGoPkgHasElems_Keyword, bool) error
	XsdGoPkgHasElem_Mousebutton          func(*XsdGoPkgHasElem_Mousebutton, bool) error
	XsdGoPkgHasElem_Citerefentry         func(*XsdGoPkgHasElem_Citerefentry, bool) error
	XsdGoPkgHasElems_Keywordset          func(*XsdGoPkgHasElems_Keywordset, bool) error
	TxsdLocator                          func(*TxsdLocator, bool) error
	TxsdMethodsynopsis                   func(*TxsdMethodsynopsis, bool) error
	XsdGoPkgHasElem_Volumenum            func(*XsdGoPkgHasElem_Volumenum, bool) error
	TxsdErrortype                        func(*TxsdErrortype, bool) error
	XsdGoPkgHasElems_Subtitle            func(*XsdGoPkgHasElems_Subtitle, bool) error
	XsdGoPkgHasElems_Sect4               func(*XsdGoPkgHasElems_Sect4, bool) error
	XsdGoPkgHasElems_Revhistory          func(*XsdGoPkgHasElems_Revhistory, bool) error
	XsdGoPkgHasElem_Epigraph             func(*XsdGoPkgHasElem_Epigraph, bool) error
	XsdGoPkgHasElem_Tocdiv               func(*XsdGoPkgHasElem_Tocdiv, bool) error
	XsdGoPkgHasElems_Confdates           func(*XsdGoPkgHasElems_Confdates, bool) error
	XsdGoPkgHasElems_Xref                func(*XsdGoPkgHasElems_Xref, bool) error
	XsdGoPkgHasElems_Revremark           func(*XsdGoPkgHasElems_Revremark, bool) error
	XsdGoPkgHasElems_Refclass            func(*XsdGoPkgHasElems_Refclass, bool) error
	XsdGoPkgHasElems_Primaryie           func(*XsdGoPkgHasElems_Primaryie, bool) error
	XsdGoPkgHasElem_Menuchoice           func(*XsdGoPkgHasElem_Menuchoice, bool) error
	XsdGoPkgHasElems_Email               func(*XsdGoPkgHasElems_Email, bool) error
	XsdGoPkgHasElem_Msgset               func(*XsdGoPkgHasElem_Msgset, bool) error
	XsdGoPkgHasElems_Methodparam         func(*XsdGoPkgHasElems_Methodparam, bool) error
	XsdGoPkgHasElems_Address             func(*XsdGoPkgHasElems_Address, bool) error
	TxsdGlosslist                        func(*TxsdGlosslist, bool) error
	XsdGoPkgHasElems_Copyright           func(*XsdGoPkgHasElems_Copyright, bool) error
	XsdGoPkgHasElems_Revision            func(*XsdGoPkgHasElems_Revision, bool) error
	TxsdRefsect2                         func(*TxsdRefsect2, bool) error
	XsdGoPkgHasElem_Inlinemediaobject    func(*XsdGoPkgHasElem_Inlinemediaobject, bool) error
	XsdGoPkgHasElems_Database            func(*XsdGoPkgHasElems_Database, bool) error
	XsdGoPkgHasElems_Errortype           func(*XsdGoPkgHasElems_Errortype, bool) error
	XsdGoPkgHasElem_Orderedlist          func(*XsdGoPkgHasElem_Orderedlist, bool) error
	XsdGoPkgHasElems_Msgaud              func(*XsdGoPkgHasElems_Msgaud, bool) error
	TxsdAreaset                          func(*TxsdAreaset, bool) error
	TxsdSet                              func(*TxsdSet, bool) error
	TxsdExceptionname                    func(*TxsdExceptionname, bool) error
	TxsdClasssynopsisinfo                func(*TxsdClasssynopsisinfo, bool) error
	XsdGoPkgHasElem_Returnvalue          func(*XsdGoPkgHasElem_Returnvalue, bool) error
	TxsdDate                             func(*TxsdDate, bool) error
	XsdGoPkgHasElems_Primary             func(*XsdGoPkgHasElems_Primary, bool) error
	XsdGoPkgHasElems_Hardware            func(*XsdGoPkgHasElems_Hardware, bool) error
	XsdGoPkgHasElems_Dedication          func(*XsdGoPkgHasElems_Dedication, bool) error
	XsdGoPkgHasElem_Property             func(*XsdGoPkgHasElem_Property, bool) error
	XsdGoPkgHasElems_Paramdef            func(*XsdGoPkgHasElems_Paramdef, bool) error
	XsdGoPkgHasElems_Secondary           func(*XsdGoPkgHasElems_Secondary, bool) error
	XsdGoPkgHasElems_Ooclass             func(*XsdGoPkgHasElems_Ooclass, bool) error
	TxsdTocdiv                           func(*TxsdTocdiv, bool) error
	XsdGoPkgHasElems_Literallayout       func(*XsdGoPkgHasElems_Literallayout, bool) error
	XsdGoPkgHasElems_Exceptionname       func(*XsdGoPkgHasElems_Exceptionname, bool) error
	TxsdOrg                              func(*TxsdOrg, bool) error
	XsdGoPkgHasElem_Taskprerequisites    func(*XsdGoPkgHasElem_Taskprerequisites, bool) error
	XsdGoPkgHasElem_Term                 func(*XsdGoPkgHasElem_Term, bool) error
	TxsdBiblioset                        func(*TxsdBiblioset, bool) error
	XsdGoPkgHasElems_Msg                 func(*XsdGoPkgHasElems_Msg, bool) error
	XsdGoPkgHasElems_Varargs             func(*XsdGoPkgHasElems_Varargs, bool) error
	TxsdBlockquote                       func(*TxsdBlockquote, bool) error
	XsdGoPkgHasElems_State               func(*XsdGoPkgHasElems_State, bool) error
	XsdGoPkgHasElems_Mousebutton         func(*XsdGoPkgHasElems_Mousebutton, bool) error
	XsdGoPkgHasElem_Constraint           func(*XsdGoPkgHasElem_Constraint, bool) error
	TxsdAbbrev                           func(*TxsdAbbrev, bool) error
	XsdGoPkgHasElems_Citebiblioid        func(*XsdGoPkgHasElems_Citebiblioid, bool) error
	XsdGoPkgHasElems_Firstname           func(*XsdGoPkgHasElems_Firstname, bool) error
	TxsdGlossentry                       func(*TxsdGlossentry, bool) error
	XsdGoPkgHasElems_Citerefentry        func(*XsdGoPkgHasElems_Citerefentry, bool) error
	XsdGoPkgHasElems_Glosslist           func(*XsdGoPkgHasElems_Glosslist, bool) error
	XsdGoPkgHasElems_Othercredit         func(*XsdGoPkgHasElems_Othercredit, bool) error
	XsdGoPkgHasElems_Cover               func(*XsdGoPkgHasElems_Cover, bool) error
	XsdGoPkgHasElem_Xref                 func(*XsdGoPkgHasElem_Xref, bool) error
	TxsdConstraintdef                    func(*TxsdConstraintdef, bool) error
	TxsdReplaceable                      func(*TxsdReplaceable, bool) error
	XsdGoPkgHasElem_Confsponsor          func(*XsdGoPkgHasElem_Confsponsor, bool) error
	XsdGoPkgHasElems_Informaltable       func(*XsdGoPkgHasElems_Informaltable, bool) error
	TxsdConfgroup                        func(*TxsdConfgroup, bool) error
	XsdGoPkgHasElems_Toc                 func(*XsdGoPkgHasElems_Toc, bool) error
	XsdGoPkgHasElems_Link                func(*XsdGoPkgHasElems_Link, bool) error
	XsdGoPkgHasElem_Refentry             func(*XsdGoPkgHasElem_Refentry, bool) error
	XsdGoPkgHasElem_Constraintdef        func(*XsdGoPkgHasElem_Constraintdef, bool) error
	XsdGoPkgHasElem_Shortaffil           func(*XsdGoPkgHasElem_Shortaffil, bool) error
	XsdGoPkgHasElem_Extendedlink         func(*XsdGoPkgHasElem_Extendedlink, bool) error
	XsdGoPkgHasElem_Listitem             func(*XsdGoPkgHasElem_Listitem, bool) error
	XsdGoPkgHasElem_Revision             func(*XsdGoPkgHasElem_Revision, bool) error
	XsdGoPkgHasElems_Footnoteref         func(*XsdGoPkgHasElems_Footnoteref, bool) error
	XsdGoPkgHasElems_Seg                 func(*XsdGoPkgHasElems_Seg, bool) error
	XsdGoPkgHasElems_Lineannotation      func(*XsdGoPkgHasElems_Lineannotation, bool) error
	TxsdCover                            func(*TxsdCover, bool) error
	XsdGoPkgHasElem_Computeroutput       func(*XsdGoPkgHasElem_Computeroutput, bool) error
	XsdGoPkgHasElems_Refsynopsisdiv      func(*XsdGoPkgHasElems_Refsynopsisdiv, bool) error
	XsdGoPkgHasElems_Locator             func(*XsdGoPkgHasElems_Locator, bool) error
	XsdGoPkgHasElem_Bibliomset           func(*XsdGoPkgHasElem_Bibliomset, bool) error
	TxsdLink                             func(*TxsdLink, bool) error
	XsdGoPkgHasElems_Artpagenums         func(*XsdGoPkgHasElems_Artpagenums, bool) error
	XsdGoPkgHasElem_Postcode             func(*XsdGoPkgHasElem_Postcode, bool) error
	XsdGoPkgHasElem_Refsect1             func(*XsdGoPkgHasElem_Refsect1, bool) error
	XsdGoPkgHasElems_Pagenums            func(*XsdGoPkgHasElems_Pagenums, bool) error
	XsdGoPkgHasElem_Appendix             func(*XsdGoPkgHasElem_Appendix, bool) error
	XsdGoPkgHasElems_Subscript           func(*XsdGoPkgHasElems_Subscript, bool) error
	TxsdAddress                          func(*TxsdAddress, bool) error
	TxsdQandaset                         func(*TxsdQandaset, bool) error
	TxsdKeycombo                         func(*TxsdKeycombo, bool) error
	XsdGoPkgHasElem_Sect3                func(*XsdGoPkgHasElem_Sect3, bool) error
	TxsdGuiicon                          func(*TxsdGuiicon, bool) error
	TxsdPrinthistory                     func(*TxsdPrinthistory, bool) error
	XsdGoPkgHasElem_Caption              func(*XsdGoPkgHasElem_Caption, bool) error
	XsdGoPkgHasElem_Constructorsynopsis  func(*XsdGoPkgHasElem_Constructorsynopsis, bool) error
	TxsdScreenco                         func(*TxsdScreenco, bool) error
	XsdGoPkgHasElem_Stepalternatives     func(*XsdGoPkgHasElem_Stepalternatives, bool) error
	TxsdProgramlisting                   func(*TxsdProgramlisting, bool) error
	XsdGoPkgHasElem_Itemizedlist         func(*XsdGoPkgHasElem_Itemizedlist, bool) error
	XsdGoPkgHasElems_Msgsub              func(*XsdGoPkgHasElems_Msgsub, bool) error
	XsdGoPkgHasElems_Initializer         func(*XsdGoPkgHasElems_Initializer, bool) error
	XsdGoPkgHasElem_Subscript            func(*XsdGoPkgHasElem_Subscript, bool) error
	XsdGoPkgHasElem_Glossdef             func(*XsdGoPkgHasElem_Glossdef, bool) error
	TxsdBiblioref                        func(*TxsdBiblioref, bool) error
	XsdGoPkgHasElem_Revnumber            func(*XsdGoPkgHasElem_Revnumber, bool) error
	TxsdSystemitem                       func(*TxsdSystemitem, bool) error
	XsdGoPkgHasElem_Confnum              func(*XsdGoPkgHasElem_Confnum, bool) error
	XsdGoPkgHasElems_Glosssee            func(*XsdGoPkgHasElems_Glosssee, bool) error
	XsdGoPkgHasElem_Prompt               func(*XsdGoPkgHasElem_Prompt, bool) error
	XsdGoPkgHasElem_Label                func(*XsdGoPkgHasElem_Label, bool) error
	XsdGoPkgHasElem_Issuenum             func(*XsdGoPkgHasElem_Issuenum, bool) error
	TxsdSeglistitem                      func(*TxsdSeglistitem, bool) error
	XsdGoPkgHasElems_Type                func(*XsdGoPkgHasElems_Type, bool) error
	TxsdRefsynopsisdiv                   func(*TxsdRefsynopsisdiv, bool) error
	XsdGoPkgHasElems_Seglistitem         func(*XsdGoPkgHasElems_Seglistitem, bool) error
	XsdGoPkgHasElems_Appendix            func(*XsdGoPkgHasElems_Appendix, bool) error
	XsdGoPkgHasElems_Arg                 func(*XsdGoPkgHasElems_Arg, bool) error
	XsdGoPkgHasElem_Envar                func(*XsdGoPkgHasElem_Envar, bool) error
	TxsdConstructorsynopsis              func(*TxsdConstructorsynopsis, bool) error
	XsdGoPkgHasElems_Indexentry          func(*XsdGoPkgHasElems_Indexentry, bool) error
	TxsdMember                           func(*TxsdMember, bool) error
	XsdGoPkgHasElems_Confnum             func(*XsdGoPkgHasElems_Confnum, bool) error
	XsdGoPkgHasElems_Synopsis            func(*XsdGoPkgHasElems_Synopsis, bool) error
	XsdGoPkgHasElems_Tasksummary         func(*XsdGoPkgHasElems_Tasksummary, bool) error
	TxsdArea                             func(*TxsdArea, bool) error
	XsdGoPkgHasElems_Country             func(*XsdGoPkgHasElems_Country, bool) error
	XsdGoPkgHasElems_Year                func(*XsdGoPkgHasElems_Year, bool) error
	TxsdBibliography                     func(*TxsdBibliography, bool) error
	XsdGoPkgHasElem_Bibliolist           func(*XsdGoPkgHasElem_Bibliolist, bool) error
	XsdGoPkgHasElem_Taskrelated          func(*XsdGoPkgHasElem_Taskrelated, bool) error
	XsdGoPkgHasElem_Msgmain              func(*XsdGoPkgHasElem_Msgmain, bool) error
	TxsdRow                              func(*TxsdRow, bool) error
	TxsdCmdsynopsis                      func(*TxsdCmdsynopsis, bool) error
	XsdGoPkgHasElem_Keysym               func(*XsdGoPkgHasElem_Keysym, bool) error
	XsdGoPkgHasElem_Glosssee             func(*XsdGoPkgHasElem_Glosssee, bool) error
	XsdGoPkgHasElems_Biblioentry         func(*XsdGoPkgHasElems_Biblioentry, bool) error
	XsdGoPkgHasElem_Msgsub               func(*XsdGoPkgHasElem_Msgsub, bool) error
	TxsdClasssynopsis                    func(*TxsdClasssynopsis, bool) error
	TxsdBibliodiv                        func(*TxsdBibliodiv, bool) error
	XsdGoPkgHasElems_Orgname             func(*XsdGoPkgHasElems_Orgname, bool) error
	XsdGoPkgHasElems_Glossdef            func(*XsdGoPkgHasElems_Glossdef, bool) error
	XsdGoPkgHasElem_Firstname            func(*XsdGoPkgHasElem_Firstname, bool) error
	XsdGoPkgHasElems_Jobtitle            func(*XsdGoPkgHasElems_Jobtitle, bool) error
	TxsdEquation                         func(*TxsdEquation, bool) error
	TxsdParamdef                         func(*TxsdParamdef, bool) error
	XsdGoPkgHasElems_Msgrel              func(*XsdGoPkgHasElems_Msgrel, bool) error
	XsdGoPkgHasElems_Keysym              func(*XsdGoPkgHasElems_Keysym, bool) error
	XsdGoPkgHasElem_Phone                func(*XsdGoPkgHasElem_Phone, bool) error
	XsdGoPkgHasElem_Biblioref            func(*XsdGoPkgHasElem_Biblioref, bool) error
	XsdGoPkgHasElems_Audiodata           func(*XsdGoPkgHasElems_Audiodata, bool) error
	TxsdAnnotation                       func(*TxsdAnnotation, bool) error
	TxsdThead                            func(*TxsdThead, bool) error
	XsdGoPkgHasElems_Coref               func(*XsdGoPkgHasElems_Coref, bool) error
	TxsdTgroup                           func(*TxsdTgroup, bool) error
	XsdGoPkgHasElem_Fax                  func(*XsdGoPkgHasElem_Fax, bool) error
	XsdGoPkgHasElem_Replaceable          func(*XsdGoPkgHasElem_Replaceable, bool) error
	XsdGoPkgHasElems_Td                  func(*XsdGoPkgHasElems_Td, bool) error
	XsdGoPkgHasElems_Abbrev              func(*XsdGoPkgHasElems_Abbrev, bool) error
	XsdGoPkgHasElems_Subject             func(*XsdGoPkgHasElems_Subject, bool) error
	XsdGoPkgHasElems_Msgmain             func(*XsdGoPkgHasElems_Msgmain, bool) error
	XsdGoPkgHasElem_Filename             func(*XsdGoPkgHasElem_Filename, bool) error
	TxsdAudioobject                      func(*TxsdAudioobject, bool) error
	XsdGoPkgHasElem_Refentrytitle        func(*XsdGoPkgHasElem_Refentrytitle, bool) error
	XsdGoPkgHasElem_Attribution          func(*XsdGoPkgHasElem_Attribution, bool) error
	TxsdCitation                         func(*TxsdCitation, bool) error
	XsdGoPkgHasElem_Tbody                func(*XsdGoPkgHasElem_Tbody, bool) error
	XsdGoPkgHasElem_Anchor               func(*XsdGoPkgHasElem_Anchor, bool) error
	XsdGoPkgHasElems_Optional            func(*XsdGoPkgHasElems_Optional, bool) error
	TxsdCitetitle                        func(*TxsdCitetitle, bool) error
	TxsdRefentrytitle                    func(*TxsdRefentrytitle, bool) error
	XsdGoPkgHasElems_Seeie               func(*XsdGoPkgHasElems_Seeie, bool) error
	XsdGoPkgHasElems_Tertiary            func(*XsdGoPkgHasElems_Tertiary, bool) error
	XsdGoPkgHasElem_Acronym              func(*XsdGoPkgHasElem_Acronym, bool) error
	XsdGoPkgHasElems_Biblioset           func(*XsdGoPkgHasElems_Biblioset, bool) error
	XsdGoPkgHasElem_Substeps             func(*XsdGoPkgHasElem_Substeps, bool) error
	XsdGoPkgHasElem_Type                 func(*XsdGoPkgHasElem_Type, bool) error
	XsdGoPkgHasElem_Code                 func(*XsdGoPkgHasElem_Code, bool) error
	TxsdPhrase                           func(*TxsdPhrase, bool) error
	TxsdEntrytbl                         func(*TxsdEntrytbl, bool) error
	TxsdTr                               func(*TxsdTr, bool) error
	XsdGoPkgHasElem_Arg                  func(*XsdGoPkgHasElem_Arg, bool) error
	TxsdClassname                        func(*TxsdClassname, bool) error
	XsdGoPkgHasElems_Classname           func(*XsdGoPkgHasElems_Classname, bool) error
	XsdGoPkgHasElem_Hardware             func(*XsdGoPkgHasElem_Hardware, bool) error
	XsdGoPkgHasElems_Informalfigure      func(*XsdGoPkgHasElems_Informalfigure, bool) error
	XsdGoPkgHasElems_Thead               func(*XsdGoPkgHasElems_Thead, bool) error
	XsdGoPkgHasElems_Edition             func(*XsdGoPkgHasElems_Edition, bool) error
	TxsdOrgname                          func(*TxsdOrgname, bool) error
	XsdGoPkgHasElem_Interfacename        func(*XsdGoPkgHasElem_Interfacename, bool) error
	XsdGoPkgHasElems_Colgroup            func(*XsdGoPkgHasElems_Colgroup, bool) error
	XsdGoPkgHasElems_Area                func(*XsdGoPkgHasElems_Area, bool) error
	XsdGoPkgHasElem_Tr                   func(*XsdGoPkgHasElem_Tr, bool) error
	XsdGoPkgHasElem_Contractnum          func(*XsdGoPkgHasElem_Contractnum, bool) error
	XsdGoPkgHasElem_Setindex             func(*XsdGoPkgHasElem_Setindex, bool) error
	XsdGoPkgHasElems_Legalnotice         func(*XsdGoPkgHasElems_Legalnotice, bool) error
	XsdGoPkgHasElems_Quote               func(*XsdGoPkgHasElems_Quote, bool) error
	XsdGoPkgHasElem_Termdef              func(*XsdGoPkgHasElem_Termdef, bool) error
	XsdGoPkgHasElems_Guilabel            func(*XsdGoPkgHasElems_Guilabel, bool) error
	XsdGoPkgHasElems_Conftitle           func(*XsdGoPkgHasElems_Conftitle, bool) error
	XsdGoPkgHasElems_Synopfragmentref    func(*XsdGoPkgHasElems_Synopfragmentref, bool) error
	XsdGoPkgHasElems_Msgorig             func(*XsdGoPkgHasElems_Msgorig, bool) error
	TxsdOrderedlist                      func(*TxsdOrderedlist, bool) error
	XsdGoPkgHasElems_City                func(*XsdGoPkgHasElems_City, bool) error
	XsdGoPkgHasElems_Refnamediv          func(*XsdGoPkgHasElems_Refnamediv, bool) error
	TxsdMenuchoice                       func(*TxsdMenuchoice, bool) error
	XsdGoPkgHasElems_Code                func(*XsdGoPkgHasElems_Code, bool) error
	TxsdProduction                       func(*TxsdProduction, bool) error
	XsdGoPkgHasElems_Formalpara          func(*XsdGoPkgHasElems_Formalpara, bool) error
	XsdGoPkgHasElem_Option               func(*XsdGoPkgHasElem_Option, bool) error
	TxsdNonterminal                      func(*TxsdNonterminal, bool) error
	TxsdSegmentedlist                    func(*TxsdSegmentedlist, bool) error
	XsdGoPkgHasElem_Guiicon              func(*XsdGoPkgHasElem_Guiicon, bool) error
	XsdGoPkgHasElem_Blockquote           func(*XsdGoPkgHasElem_Blockquote, bool) error
	TxsdMediaobject                      func(*TxsdMediaobject, bool) error
	XsdGoPkgHasElem_Bibliomixed          func(*XsdGoPkgHasElem_Bibliomixed, bool) error
	XsdGoPkgHasElems_Computeroutput      func(*XsdGoPkgHasElems_Computeroutput, bool) error
	XsdGoPkgHasElem_Textobject           func(*XsdGoPkgHasElem_Textobject, bool) error
	XsdGoPkgHasElem_Remark               func(*XsdGoPkgHasElem_Remark, bool) error
	TxsdImportant                        func(*TxsdImportant, bool) error
	TxsdTbody                            func(*TxsdTbody, bool) error
	XsdGoPkgHasElems_Trademark           func(*XsdGoPkgHasElems_Trademark, bool) error
	XsdGoPkgHasElems_Application         func(*XsdGoPkgHasElems_Application, bool) error
	TxsdAppendix                         func(*TxsdAppendix, bool) error
	TxsdTip                              func(*TxsdTip, bool) error
	TxsdCoref                            func(*TxsdCoref, bool) error
	XsdGoPkgHasElems_Qandadiv            func(*XsdGoPkgHasElems_Qandadiv, bool) error
	XsdGoPkgHasElems_Index               func(*XsdGoPkgHasElems_Index, bool) error
	XsdGoPkgHasElem_Seg                  func(*XsdGoPkgHasElem_Seg, bool) error
	XsdGoPkgHasElem_Mathphrase           func(*XsdGoPkgHasElem_Mathphrase, bool) error
	TxsdAcknowledgements                 func(*TxsdAcknowledgements, bool) error
	XsdGoPkgHasElems_Sect3               func(*XsdGoPkgHasElems_Sect3, bool) error
	XsdGoPkgHasElem_Warning              func(*XsdGoPkgHasElem_Warning, bool) error
	XsdGoPkgHasElems_Indexterm           func(*XsdGoPkgHasElems_Indexterm, bool) error
	XsdGoPkgHasElem_Area                 func(*XsdGoPkgHasElem_Area, bool) error
	XsdGoPkgHasElem_Programlisting       func(*XsdGoPkgHasElem_Programlisting, bool) error
	XsdGoPkgHasElem_Toc                  func(*XsdGoPkgHasElem_Toc, bool) error
	XsdGoPkgHasElems_Person              func(*XsdGoPkgHasElems_Person, bool) error
	XsdGoPkgHasElems_Seriesvolnums       func(*XsdGoPkgHasElems_Seriesvolnums, bool) error
	TxsdAttribution                      func(*TxsdAttribution, bool) error
	XsdGoPkgHasElems_Important           func(*XsdGoPkgHasElems_Important, bool) error
	XsdGoPkgHasElem_Errorcode            func(*XsdGoPkgHasElem_Errorcode, bool) error
	XsdGoPkgHasElems_Holder              func(*XsdGoPkgHasElems_Holder, bool) error
	TxsdMsgset                           func(*TxsdMsgset, bool) error
	XsdGoPkgHasElems_Qandaset            func(*XsdGoPkgHasElems_Qandaset, bool) error
	TxsdMsg                              func(*TxsdMsg, bool) error
	XsdGoPkgHasElem_Org                  func(*XsdGoPkgHasElem_Org, bool) error
	XsdGoPkgHasElems_Authorinitials      func(*XsdGoPkgHasElems_Authorinitials, bool) error
	XsdGoPkgHasElems_Areaspec            func(*XsdGoPkgHasElems_Areaspec, bool) error
	XsdGoPkgHasElem_Guisubmenu           func(*XsdGoPkgHasElem_Guisubmenu, bool) error
	XsdGoPkgHasElems_Keycap              func(*XsdGoPkgHasElems_Keycap, bool) error
	XsdGoPkgHasElem_Videoobject          func(*XsdGoPkgHasElem_Videoobject, bool) error
	TxsdQandaentry                       func(*TxsdQandaentry, bool) error
	TxsdEntry                            func(*TxsdEntry, bool) error
	XsdGoPkgHasElem_Phrase               func(*XsdGoPkgHasElem_Phrase, bool) error
	XsdGoPkgHasElem_Seealso              func(*XsdGoPkgHasElem_Seealso, bool) error
	XsdGoPkgHasElem_Msglevel             func(*XsdGoPkgHasElem_Msglevel, bool) error
	TxsdListitem                         func(*TxsdListitem, bool) error
	XsdGoPkgHasElem_Entrytbl             func(*XsdGoPkgHasElem_Entrytbl, bool) error
	TxsdInformalexample                  func(*TxsdInformalexample, bool) error
	XsdGoPkgHasElem_Itermset             func(*XsdGoPkgHasElem_Itermset, bool) error
	TxsdTh                               func(*TxsdTh, bool) error
	XsdGoPkgHasElem_Seeie                func(*XsdGoPkgHasElem_Seeie, bool) error
	XsdGoPkgHasElem_Step                 func(*XsdGoPkgHasElem_Step, bool) error
	XsdGoPkgHasElem_Methodparam          func(*XsdGoPkgHasElem_Methodparam, bool) error
	XsdGoPkgHasElems_Uri                 func(*XsdGoPkgHasElems_Uri, bool) error
	XsdGoPkgHasElem_Copyright            func(*XsdGoPkgHasElem_Copyright, bool) error
	XsdGoPkgHasElem_See                  func(*XsdGoPkgHasElem_See, bool) error
	XsdGoPkgHasElem_Msgorig              func(*XsdGoPkgHasElem_Msgorig, bool) error
	XsdGoPkgHasElems_Cmdsynopsis         func(*XsdGoPkgHasElems_Cmdsynopsis, bool) error
	XsdGoPkgHasElems_Bibliomset          func(*XsdGoPkgHasElems_Bibliomset, bool) error
	TxsdLiteral                          func(*TxsdLiteral, bool) error
	XsdGoPkgHasElems_Rhs                 func(*XsdGoPkgHasElems_Rhs, bool) error
	XsdGoPkgHasElems_Shortcut            func(*XsdGoPkgHasElems_Shortcut, bool) error
	XsdGoPkgHasElem_Msgentry             func(*XsdGoPkgHasElem_Msgentry, bool) error
	TxsdFootnote                         func(*TxsdFootnote, bool) error
	TxsdColgroup                         func(*TxsdColgroup, bool) error
	XsdGoPkgHasElems_Reference           func(*XsdGoPkgHasElems_Reference, bool) error
	XsdGoPkgHasElems_Info                func(*XsdGoPkgHasElems_Info, bool) error
	XsdGoPkgHasElems_Shortaffil          func(*XsdGoPkgHasElems_Shortaffil, bool) error
	XsdGoPkgHasElems_Refpurpose          func(*XsdGoPkgHasElems_Refpurpose, bool) error
	XsdGoPkgHasElem_Simplelist           func(*XsdGoPkgHasElem_Simplelist, bool) error
	XsdGoPkgHasElems_Personname          func(*XsdGoPkgHasElems_Personname, bool) error
	XsdGoPkgHasElems_Extendedlink        func(*XsdGoPkgHasElems_Extendedlink, bool) error
	XsdGoPkgHasElem_Citetitle            func(*XsdGoPkgHasElem_Citetitle, bool) error
	TxsdIndexentry                       func(*TxsdIndexentry, bool) error
	XsdGoPkgHasElems_Seealso             func(*XsdGoPkgHasElems_Seealso, bool) error
	XsdGoPkgHasElem_Collab               func(*XsdGoPkgHasElem_Collab, bool) error
	XsdGoPkgHasElems_Th                  func(*XsdGoPkgHasElems_Th, bool) error
	XsdGoPkgHasElems_Guimenuitem         func(*XsdGoPkgHasElems_Guimenuitem, bool) error
	XsdGoPkgHasElems_Lineage             func(*XsdGoPkgHasElems_Lineage, bool) error
	TxsdPart                             func(*TxsdPart, bool) error
	XsdGoPkgHasElems_Calloutlist         func(*XsdGoPkgHasElems_Calloutlist, bool) error
	TxsdSynopfragment                    func(*TxsdSynopfragment, bool) error
	XsdGoPkgHasElems_Bibliocoverage      func(*XsdGoPkgHasElems_Bibliocoverage, bool) error
	XsdGoPkgHasElems_Fieldsynopsis       func(*XsdGoPkgHasElems_Fieldsynopsis, bool) error
	XsdGoPkgHasElem_Synopfragmentref     func(*XsdGoPkgHasElem_Synopfragmentref, bool) error
	XsdGoPkgHasElem_Index                func(*XsdGoPkgHasElem_Index, bool) error
	TxsdEpigraph                         func(*TxsdEpigraph, bool) error
	TxsdForeignphrase                    func(*TxsdForeignphrase, bool) error
	XsdGoPkgHasElem_Keycombo             func(*XsdGoPkgHasElem_Keycombo, bool) error
	TxsdComputeroutput                   func(*TxsdComputeroutput, bool) error
	XsdGoPkgHasElem_Uri                  func(*XsdGoPkgHasElem_Uri, bool) error
	XsdGoPkgHasElem_Colophon             func(*XsdGoPkgHasElem_Colophon, bool) error
	XsdGoPkgHasElems_Affiliation         func(*XsdGoPkgHasElems_Affiliation, bool) error
	TxsdImageobjectco                    func(*TxsdImageobjectco, bool) error
	XsdGoPkgHasElems_Envar               func(*XsdGoPkgHasElems_Envar, bool) error
	TxsdCiterefentry                     func(*TxsdCiterefentry, bool) error
	TxsdFuncprototype                    func(*TxsdFuncprototype, bool) error
	XsdGoPkgHasElems_Msgexplan           func(*XsdGoPkgHasElems_Msgexplan, bool) error
	XsdGoPkgHasElem_Glosslist            func(*XsdGoPkgHasElem_Glosslist, bool) error
	TxsdAnchor                           func(*TxsdAnchor, bool) error
	XsdGoPkgHasElems_Qandaentry          func(*XsdGoPkgHasElems_Qandaentry, bool) error
	TxsdFieldsynopsis                    func(*TxsdFieldsynopsis, bool) error
	XsdGoPkgHasElems_Constructorsynopsis func(*XsdGoPkgHasElems_Constructorsynopsis, bool) error
	TxsdSeriesvolnums                    func(*TxsdSeriesvolnums, bool) error
	XsdGoPkgHasElem_Entry                func(*XsdGoPkgHasElem_Entry, bool) error
	XsdGoPkgHasElem_Colgroup             func(*XsdGoPkgHasElem_Colgroup, bool) error
	XsdGoPkgHasElems_Methodsynopsis      func(*XsdGoPkgHasElems_Methodsynopsis, bool) error
	TxsdDestructorsynopsis               func(*TxsdDestructorsynopsis, bool) error
	TxsdXref                             func(*TxsdXref, bool) error
	XsdGoPkgHasElem_Bibliodiv            func(*XsdGoPkgHasElem_Bibliodiv, bool) error
	TxsdParameter                        func(*TxsdParameter, bool) error
	XsdGoPkgHasElem_Part                 func(*XsdGoPkgHasElem_Part, bool) error
	XsdGoPkgHasElem_Qandadiv             func(*XsdGoPkgHasElem_Qandadiv, bool) error
	XsdGoPkgHasElems_Glossary            func(*XsdGoPkgHasElems_Glossary, bool) error
	XsdGoPkgHasElems_Procedure           func(*XsdGoPkgHasElems_Procedure, bool) error
	XsdGoPkgHasElems_Replaceable         func(*XsdGoPkgHasElems_Replaceable, bool) error
	XsdGoPkgHasElem_Informalequation     func(*XsdGoPkgHasElem_Informalequation, bool) error
	XsdGoPkgHasElem_Address              func(*XsdGoPkgHasElem_Address, bool) error
	TxsdScreenshot                       func(*TxsdScreenshot, bool) error
	TxsdKeycap                           func(*TxsdKeycap, bool) error
	XsdGoPkgHasElem_Sect4                func(*XsdGoPkgHasElem_Sect4, bool) error
	XsdGoPkgHasElem_Personblurb          func(*XsdGoPkgHasElem_Personblurb, bool) error
	XsdGoPkgHasElem_Sidebar              func(*XsdGoPkgHasElem_Sidebar, bool) error
	XsdGoPkgHasElem_Tgroup               func(*XsdGoPkgHasElem_Tgroup, bool) error
	XsdGoPkgHasElems_Bridgehead          func(*XsdGoPkgHasElems_Bridgehead, bool) error
	XsdGoPkgHasElem_Edition              func(*XsdGoPkgHasElem_Edition, bool) error
	TxsdAuthorgroup                      func(*TxsdAuthorgroup, bool) error
	XsdGoPkgHasElems_Co                  func(*XsdGoPkgHasElems_Co, bool) error
	XsdGoPkgHasElem_Indexdiv             func(*XsdGoPkgHasElem_Indexdiv, bool) error
	TxsdTag                              func(*TxsdTag, bool) error
	XsdGoPkgHasElems_Ooexception         func(*XsdGoPkgHasElems_Ooexception, bool) error
	XsdGoPkgHasElems_Phrase              func(*XsdGoPkgHasElems_Phrase, bool) error
	XsdGoPkgHasElem_Td                   func(*XsdGoPkgHasElem_Td, bool) error
	TxsdTermdef                          func(*TxsdTermdef, bool) error
	TxsdBibliomset                       func(*TxsdBibliomset, bool) error
	TxsdVariablelist                     func(*TxsdVariablelist, bool) error
	XsdGoPkgHasElem_Indexterm            func(*XsdGoPkgHasElem_Indexterm, bool) error
	XsdGoPkgHasElem_Lhs                  func(*XsdGoPkgHasElem_Lhs, bool) error
	XsdGoPkgHasElem_Acknowledgements     func(*XsdGoPkgHasElem_Acknowledgements, bool) error
	XsdGoPkgHasElem_Bibliography         func(*XsdGoPkgHasElem_Bibliography, bool) error
	TxsdTextdata                         func(*TxsdTextdata, bool) error
	XsdGoPkgHasElem_Symbol               func(*XsdGoPkgHasElem_Symbol, bool) error
	XsdGoPkgHasElems_Row                 func(*XsdGoPkgHasElems_Row, bool) error
	TxsdRefnamediv                       func(*TxsdRefnamediv, bool) error
	XsdGoPkgHasElems_Variablelist        func(*XsdGoPkgHasElems_Variablelist, bool) error
	XsdGoPkgHasElem_Informalfigure       func(*XsdGoPkgHasElem_Informalfigure, bool) error
	TxsdShortcut                         func(*TxsdShortcut, bool) error
	TxsdArticle                          func(*TxsdArticle, bool) error
	XsdGoPkgHasElem_Reference            func(*XsdGoPkgHasElem_Reference, bool) error
	XsdGoPkgHasElems_Inlineequation      func(*XsdGoPkgHasElems_Inlineequation, bool) error
	TxsdTocentry                         func(*TxsdTocentry, bool) error
	XsdGoPkgHasElem_Biblioentry          func(*XsdGoPkgHasElem_Biblioentry, bool) error
	XsdGoPkgHasElems_Tfoot               func(*XsdGoPkgHasElems_Tfoot, bool) error
	XsdGoPkgHasElems_Audioobject         func(*XsdGoPkgHasElems_Audioobject, bool) error
	XsdGoPkgHasElem_Emphasis             func(*XsdGoPkgHasElem_Emphasis, bool) error
	XsdGoPkgHasElems_Secondaryie         func(*XsdGoPkgHasElems_Secondaryie, bool) error
	TxsdPrimary                          func(*TxsdPrimary, bool) error
	XsdGoPkgHasElem_Seealsoie            func(*XsdGoPkgHasElem_Seealsoie, bool) error
	XsdGoPkgHasElem_Funcsynopsisinfo     func(*XsdGoPkgHasElem_Funcsynopsisinfo, bool) error
	XsdGoPkgHasElem_Info                 func(*XsdGoPkgHasElem_Info, bool) error
	XsdGoPkgHasElem_Citation             func(*XsdGoPkgHasElem_Citation, bool) error
	XsdGoPkgHasElems_Remark              func(*XsdGoPkgHasElems_Remark, bool) error
	XsdGoPkgHasElems_Example             func(*XsdGoPkgHasElems_Example, bool) error
	XsdGoPkgHasElem_Screen               func(*XsdGoPkgHasElem_Screen, bool) error
	XsdGoPkgHasElem_Exceptionname        func(*XsdGoPkgHasElem_Exceptionname, bool) error
	TxsdSetindex                         func(*TxsdSetindex, bool) error
	TxsdCo                               func(*TxsdCo, bool) error
	TxsdRefsect1                         func(*TxsdRefsect1, bool) error
	XsdGoPkgHasElems_Mathphrase          func(*XsdGoPkgHasElems_Mathphrase, bool) error
	XsdGoPkgHasElems_Msgset              func(*XsdGoPkgHasElems_Msgset, bool) error
	XsdGoPkgHasElem_Releaseinfo          func(*XsdGoPkgHasElem_Releaseinfo, bool) error
	XsdGoPkgHasElems_Para                func(*XsdGoPkgHasElems_Para, bool) error
	XsdGoPkgHasElems_Refmeta             func(*XsdGoPkgHasElems_Refmeta, bool) error
	TxsdAreaspec                         func(*TxsdAreaspec, bool) error
	XsdGoPkgHasElem_Refsynopsisdiv       func(*XsdGoPkgHasElem_Refsynopsisdiv, bool) error
	TxsdSubscript                        func(*TxsdSubscript, bool) error
	XsdGoPkgHasElem_Classsynopsisinfo    func(*XsdGoPkgHasElem_Classsynopsisinfo, bool) error
	XsdGoPkgHasElem_Keywordset           func(*XsdGoPkgHasElem_Keywordset, bool) error
	XsdGoPkgHasElem_Informalexample      func(*XsdGoPkgHasElem_Informalexample, bool) error
	XsdGoPkgHasElems_Interfacename       func(*XsdGoPkgHasElems_Interfacename, bool) error
	XsdGoPkgHasElem_Qandaset             func(*XsdGoPkgHasElem_Qandaset, bool) error
	XsdGoPkgHasElem_Surname              func(*XsdGoPkgHasElem_Surname, bool) error
	XsdGoPkgHasElems_Glossdiv            func(*XsdGoPkgHasElems_Glossdiv, bool) error
	XsdGoPkgHasElems_Errorname           func(*XsdGoPkgHasElems_Errorname, bool) error
	XsdGoPkgHasElem_Abbrev               func(*XsdGoPkgHasElem_Abbrev, bool) error
	TxsdBibliolist                       func(*TxsdBibliolist, bool) error
	XsdGoPkgHasCdata                     func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_Important            func(*XsdGoPkgHasElem_Important, bool) error
	TxsdSimplemsgentry                   func(*TxsdSimplemsgentry, bool) error
	XsdGoPkgHasElem_Guimenu              func(*XsdGoPkgHasElem_Guimenu, bool) error
	XsdGoPkgHasElems_Bibliosource        func(*XsdGoPkgHasElems_Bibliosource, bool) error
	XsdGoPkgHasElem_Paramdef             func(*XsdGoPkgHasElem_Paramdef, bool) error
	XsdGoPkgHasElems_Areaset             func(*XsdGoPkgHasElems_Areaset, bool) error
	XsdGoPkgHasElems_Guimenu             func(*XsdGoPkgHasElems_Guimenu, bool) error
	TxsdIndex                            func(*TxsdIndex, bool) error
	XsdGoPkgHasElem_Areaset              func(*XsdGoPkgHasElem_Areaset, bool) error
	XsdGoPkgHasElem_Seriesvolnums        func(*XsdGoPkgHasElem_Seriesvolnums, bool) error
	XsdGoPkgHasElem_Msgtext              func(*XsdGoPkgHasElem_Msgtext, bool) error
	XsdGoPkgHasElem_Funcprototype        func(*XsdGoPkgHasElem_Funcprototype, bool) error
	XsdGoPkgHasElem_Affiliation          func(*XsdGoPkgHasElem_Affiliation, bool) error
	XsdGoPkgHasElems_Productionrecap     func(*XsdGoPkgHasElems_Productionrecap, bool) error
	XsdGoPkgHasElem_Refpurpose           func(*XsdGoPkgHasElem_Refpurpose, bool) error
	XsdGoPkgHasElems_Bibliodiv           func(*XsdGoPkgHasElems_Bibliodiv, bool) error
	XsdGoPkgHasElem_Contractsponsor      func(*XsdGoPkgHasElem_Contractsponsor, bool) error
	XsdGoPkgHasElem_Sect2                func(*XsdGoPkgHasElem_Sect2, bool) error
	XsdGoPkgHasElem_Sect5                func(*XsdGoPkgHasElem_Sect5, bool) error
	TxsdRefentry                         func(*TxsdRefentry, bool) error
	TxsdAuthor                           func(*TxsdAuthor, bool) error
	XsdGoPkgHasElem_Footnote             func(*XsdGoPkgHasElem_Footnote, bool) error
	XsdGoPkgHasElem_Colspec              func(*XsdGoPkgHasElem_Colspec, bool) error
	TxsdUserinput                        func(*TxsdUserinput, bool) error
	XsdGoPkgHasElem_Constant             func(*XsdGoPkgHasElem_Constant, bool) error
	TxsdPersonblurb                      func(*TxsdPersonblurb, bool) error
	XsdGoPkgHasElems_Confsponsor         func(*XsdGoPkgHasElems_Confsponsor, bool) error
	XsdGoPkgHasElems_Title               func(*XsdGoPkgHasElems_Title, bool) error
	XsdGoPkgHasElems_Emphasis            func(*XsdGoPkgHasElems_Emphasis, bool) error
	TxsdCallout                          func(*TxsdCallout, bool) error
	XsdGoPkgHasElems_Attribution         func(*XsdGoPkgHasElems_Attribution, bool) error
	TxsdSubjectset                       func(*TxsdSubjectset, bool) error
	XsdGoPkgHasElem_Holder               func(*XsdGoPkgHasElem_Holder, bool) error
	XsdGoPkgHasElem_Book                 func(*XsdGoPkgHasElem_Book, bool) error
	XsdGoPkgHasElem_Article              func(*XsdGoPkgHasElem_Article, bool) error
	XsdGoPkgHasElem_Printhistory         func(*XsdGoPkgHasElem_Printhistory, bool) error
	XsdGoPkgHasElem_Ooexception          func(*XsdGoPkgHasElem_Ooexception, bool) error
	XsdGoPkgHasElems_Subjectset          func(*XsdGoPkgHasElems_Subjectset, bool) error
	XsdGoPkgHasElem_Imageobjectco        func(*XsdGoPkgHasElem_Imageobjectco, bool) error
	XsdGoPkgHasElem_Glossseealso         func(*XsdGoPkgHasElem_Glossseealso, bool) error
	XsdGoPkgHasElem_Footnoteref          func(*XsdGoPkgHasElem_Footnoteref, bool) error
	XsdGoPkgHasElems_Glossseealso        func(*XsdGoPkgHasElems_Glossseealso, bool) error
	XsdGoPkgHasElem_Ooclass              func(*XsdGoPkgHasElem_Ooclass, bool) error
	XsdGoPkgHasElem_Para                 func(*XsdGoPkgHasElem_Para, bool) error
	TxsdMethodparam                      func(*TxsdMethodparam, bool) error
	XsdGoPkgHasElem_Methodsynopsis       func(*XsdGoPkgHasElem_Methodsynopsis, bool) error
	XsdGoPkgHasElems_Book                func(*XsdGoPkgHasElems_Book, bool) error
	TxsdReference                        func(*TxsdReference, bool) error
	XsdGoPkgHasElem_Editor               func(*XsdGoPkgHasElem_Editor, bool) error
	XsdGoPkgHasElem_Guibutton            func(*XsdGoPkgHasElem_Guibutton, bool) error
	XsdGoPkgHasElems_Funcparams          func(*XsdGoPkgHasElems_Funcparams, bool) error
	TxsdItermset                         func(*TxsdItermset, bool) error
	XsdGoPkgHasElems_Sect2               func(*XsdGoPkgHasElems_Sect2, bool) error
	TxsdArc                              func(*TxsdArc, bool) error
	TxsdRevdescription                   func(*TxsdRevdescription, bool) error
	XsdGoPkgHasElem_Subtitle             func(*XsdGoPkgHasElem_Subtitle, bool) error
	XsdGoPkgHasElem_Personname           func(*XsdGoPkgHasElem_Personname, bool) error
	XsdGoPkgHasElem_Package              func(*XsdGoPkgHasElem_Package, bool) error
	XsdGoPkgHasElems_Subjectterm         func(*XsdGoPkgHasElems_Subjectterm, bool) error
	XsdGoPkgHasElem_Table                func(*XsdGoPkgHasElem_Table, bool) error
	XsdGoPkgHasElem_Varargs              func(*XsdGoPkgHasElem_Varargs, bool) error
	TxsdRemark                           func(*TxsdRemark, bool) error
	XsdGoPkgHasElem_Person               func(*XsdGoPkgHasElem_Person, bool) error
	XsdGoPkgHasElem_City                 func(*XsdGoPkgHasElem_City, bool) error
	TxsdUri                              func(*TxsdUri, bool) error
	XsdGoPkgHasElems_Informalequation    func(*XsdGoPkgHasElems_Informalequation, bool) error
	XsdGoPkgHasElems_Manvolnum           func(*XsdGoPkgHasElems_Manvolnum, bool) error
	XsdGoPkgHasElems_Foreignphrase       func(*XsdGoPkgHasElems_Foreignphrase, bool) error
	TxsdFuncdef                          func(*TxsdFuncdef, bool) error
	XsdGoPkgHasElems_Entry               func(*XsdGoPkgHasElems_Entry, bool) error
	TxsdDatabase                         func(*TxsdDatabase, bool) error
	XsdGoPkgHasElems_Seealsoie           func(*XsdGoPkgHasElems_Seealsoie, bool) error
	XsdGoPkgHasElem_Secondaryie          func(*XsdGoPkgHasElem_Secondaryie, bool) error
	XsdGoPkgHasElem_Bibliosource         func(*XsdGoPkgHasElem_Bibliosource, bool) error
	XsdGoPkgHasElem_Trademark            func(*XsdGoPkgHasElem_Trademark, bool) error
	TxsdPartintro                        func(*TxsdPartintro, bool) error
	XsdGoPkgHasElems_Equation            func(*XsdGoPkgHasElems_Equation, bool) error
	XsdGoPkgHasElems_Parameter           func(*XsdGoPkgHasElems_Parameter, bool) error
	XsdGoPkgHasElems_Indexdiv            func(*XsdGoPkgHasElems_Indexdiv, bool) error
	XsdGoPkgHasElem_Literal              func(*XsdGoPkgHasElem_Literal, bool) error
	TxsdItemizedlist                     func(*TxsdItemizedlist, bool) error
	TxsdGlossterm                        func(*TxsdGlossterm, bool) error
	XsdGoPkgHasElem_Imagedata            func(*XsdGoPkgHasElem_Imagedata, bool) error
	XsdGoPkgHasElems_Acknowledgements    func(*XsdGoPkgHasElems_Acknowledgements, bool) error
	TxsdSimplelist                       func(*TxsdSimplelist, bool) error
	XsdGoPkgHasElems_Set                 func(*XsdGoPkgHasElems_Set, bool) error
	TxsdExample                          func(*TxsdExample, bool) error
	TxsdInlineequation                   func(*TxsdInlineequation, bool) error
	TxsdSect1                            func(*TxsdSect1, bool) error
	XsdGoPkgHasElem_Dedication           func(*XsdGoPkgHasElem_Dedication, bool) error
	XsdGoPkgHasElems_Tgroup              func(*XsdGoPkgHasElems_Tgroup, bool) error
	XsdGoPkgHasElems_Function            func(*XsdGoPkgHasElems_Function, bool) error
	TxsdInformalfigure                   func(*TxsdInformalfigure, bool) error
	XsdGoPkgHasElem_Country              func(*XsdGoPkgHasElem_Country, bool) error
	XsdGoPkgHasElem_Pob                  func(*XsdGoPkgHasElem_Pob, bool) error
	TxsdOoexception                      func(*TxsdOoexception, bool) error
	TxsdRevision                         func(*TxsdRevision, bool) error
	TxsdAffiliation                      func(*TxsdAffiliation, bool) error
	TxsdPersonname                       func(*TxsdPersonname, bool) error
	TxsdCopyright                        func(*TxsdCopyright, bool) error
	XsdGoPkgHasElem_Calloutlist          func(*XsdGoPkgHasElem_Calloutlist, bool) error
	XsdGoPkgHasElems_Token               func(*XsdGoPkgHasElems_Token, bool) error
	XsdGoPkgHasElems_Olink               func(*XsdGoPkgHasElems_Olink, bool) error
	TxsdSimpara                          func(*TxsdSimpara, bool) error
	XsdGoPkgHasElem_Cover                func(*XsdGoPkgHasElem_Cover, bool) error
	XsdGoPkgHasElem_Errortext            func(*XsdGoPkgHasElem_Errortext, bool) error
	XsdGoPkgHasElems_Pob                 func(*XsdGoPkgHasElems_Pob, bool) error
	XsdGoPkgHasElems_Oointerface         func(*XsdGoPkgHasElems_Oointerface, bool) error
	XsdGoPkgHasElem_Msgaud               func(*XsdGoPkgHasElem_Msgaud, bool) error
	TxsdMathphrase                       func(*TxsdMathphrase, bool) error
	XsdGoPkgHasElems_Funcprototype       func(*XsdGoPkgHasElems_Funcprototype, bool) error
	XsdGoPkgHasElem_Annotation           func(*XsdGoPkgHasElem_Annotation, bool) error
	XsdGoPkgHasElems_Screenco            func(*XsdGoPkgHasElems_Screenco, bool) error
	XsdGoPkgHasElems_Classsynopsisinfo   func(*XsdGoPkgHasElems_Classsynopsisinfo, bool) error
	XsdGoPkgHasElem_Biblioid             func(*XsdGoPkgHasElem_Biblioid, bool) error
	TxsdFuncsynopsisinfo                 func(*TxsdFuncsynopsisinfo, bool) error
	XsdGoPkgHasElems_Segmentedlist       func(*XsdGoPkgHasElems_Segmentedlist, bool) error
	TxsdBibliomixed                      func(*TxsdBibliomixed, bool) error
	XsdGoPkgHasElem_Example              func(*XsdGoPkgHasElem_Example, bool) error
	XsdGoPkgHasElem_Indexentry           func(*XsdGoPkgHasElem_Indexentry, bool) error
	XsdGoPkgHasElem_Secondary            func(*XsdGoPkgHasElem_Secondary, bool) error
	XsdGoPkgHasElems_Firstterm           func(*XsdGoPkgHasElems_Firstterm, bool) error
	XsdGoPkgHasElem_Subjectterm          func(*XsdGoPkgHasElem_Subjectterm, bool) error
	TxsdNote                             func(*TxsdNote, bool) error
	XsdGoPkgHasElem_Textdata             func(*XsdGoPkgHasElem_Textdata, bool) error
	XsdGoPkgHasElem_Errorname            func(*XsdGoPkgHasElem_Errorname, bool) error
	XsdGoPkgHasElems_Varlistentry        func(*XsdGoPkgHasElems_Varlistentry, bool) error
	XsdGoPkgHasElem_Guimenuitem          func(*XsdGoPkgHasElem_Guimenuitem, bool) error
	XsdGoPkgHasElem_Author               func(*XsdGoPkgHasElem_Author, bool) error
	TxsdGlossary                         func(*TxsdGlossary, bool) error
	TxsdBridgehead                       func(*TxsdBridgehead, bool) error
	XsdGoPkgHasElems_Entrytbl            func(*XsdGoPkgHasElems_Entrytbl, bool) error
	XsdGoPkgHasElem_Task                 func(*XsdGoPkgHasElem_Task, bool) error
	XsdGoPkgHasElems_Chapter             func(*XsdGoPkgHasElems_Chapter, bool) error
	XsdGoPkgHasElem_Caution              func(*XsdGoPkgHasElem_Caution, bool) error
	XsdGoPkgHasElem_Glossary             func(*XsdGoPkgHasElem_Glossary, bool) error
	XsdGoPkgHasElems_Callout             func(*XsdGoPkgHasElems_Callout, bool) error
	XsdGoPkgHasElems_Screenshot          func(*XsdGoPkgHasElems_Screenshot, bool) error
	XsdGoPkgHasElem_Synopfragment        func(*XsdGoPkgHasElem_Synopfragment, bool) error
	XsdGoPkgHasElem_Function             func(*XsdGoPkgHasElem_Function, bool) error
	TxsdInfo                             func(*TxsdInfo, bool) error
	TxsdImageobject                      func(*TxsdImageobject, bool) error
	XsdGoPkgHasElems_Keycombo            func(*XsdGoPkgHasElems_Keycombo, bool) error
	XsdGoPkgHasElem_Answer               func(*XsdGoPkgHasElem_Answer, bool) error
	XsdGoPkgHasElems_Simplesect          func(*XsdGoPkgHasElems_Simplesect, bool) error
	XsdGoPkgHasElems_Productname         func(*XsdGoPkgHasElems_Productname, bool) error
	XsdGoPkgHasElems_Prompt              func(*XsdGoPkgHasElems_Prompt, bool) error
	TxsdTrademark                        func(*TxsdTrademark, bool) error
	XsdGoPkgHasElem_Row                  func(*XsdGoPkgHasElem_Row, bool) error
	TxsdOrgdiv                           func(*TxsdOrgdiv, bool) error
	XsdGoPkgHasElem_Refnamediv           func(*XsdGoPkgHasElem_Refnamediv, bool) error
	XsdGoPkgHasElems_Editor              func(*XsdGoPkgHasElems_Editor, bool) error
	XsdGoPkgHasElem_Productionrecap      func(*XsdGoPkgHasElem_Productionrecap, bool) error
	XsdGoPkgHasElem_Citebiblioid         func(*XsdGoPkgHasElem_Citebiblioid, bool) error
	TxsdRevhistory                       func(*TxsdRevhistory, bool) error
	TxsdSect2                            func(*TxsdSect2, bool) error
	XsdGoPkgHasElems_Constraintdef       func(*XsdGoPkgHasElems_Constraintdef, bool) error
	XsdGoPkgHasElem_Col                  func(*XsdGoPkgHasElem_Col, bool) error
	TxsdRefsection                       func(*TxsdRefsection, bool) error
	XsdGoPkgHasElems_Answer              func(*XsdGoPkgHasElems_Answer, bool) error
	TxsdTfoot                            func(*TxsdTfoot, bool) error
	XsdGoPkgHasElem_Revremark            func(*XsdGoPkgHasElem_Revremark, bool) error
	XsdGoPkgHasElems_Guisubmenu          func(*XsdGoPkgHasElems_Guisubmenu, bool) error
	XsdGoPkgHasElem_Primaryie            func(*XsdGoPkgHasElem_Primaryie, bool) error
	TxsdVideodata                        func(*TxsdVideodata, bool) error
	XsdGoPkgHasElems_Article             func(*XsdGoPkgHasElems_Article, bool) error
	XsdGoPkgHasElem_Productnumber        func(*XsdGoPkgHasElem_Productnumber, bool) error
	TxsdSynopsis                         func(*TxsdSynopsis, bool) error
	XsdGoPkgHasElem_Userinput            func(*XsdGoPkgHasElem_Userinput, bool) error
	TxsdGuimenuitem                      func(*TxsdGuimenuitem, bool) error
	XsdGoPkgHasElems_Fax                 func(*XsdGoPkgHasElems_Fax, bool) error
	XsdGoPkgHasElems_Programlisting      func(*XsdGoPkgHasElems_Programlisting, bool) error
	XsdGoPkgHasElem_Keyword              func(*XsdGoPkgHasElem_Keyword, bool) error
	XsdGoPkgHasElem_Database             func(*XsdGoPkgHasElem_Database, bool) error
	XsdGoPkgHasElem_Refclass             func(*XsdGoPkgHasElem_Refclass, bool) error
	XsdGoPkgHasElems_Refmiscinfo         func(*XsdGoPkgHasElems_Refmiscinfo, bool) error
	XsdGoPkgHasElem_Funcsynopsis         func(*XsdGoPkgHasElem_Funcsynopsis, bool) error
	XsdGoPkgHasElem_Classsynopsis        func(*XsdGoPkgHasElem_Classsynopsis, bool) error
	XsdGoPkgHasElem_Primary              func(*XsdGoPkgHasElem_Primary, bool) error
	XsdGoPkgHasElems_Production          func(*XsdGoPkgHasElems_Production, bool) error
	XsdGoPkgHasElem_Productname          func(*XsdGoPkgHasElem_Productname, bool) error
	XsdGoPkgHasElem_Cmdsynopsis          func(*XsdGoPkgHasElem_Cmdsynopsis, bool) error
	XsdGoPkgHasElems_Revdescription      func(*XsdGoPkgHasElems_Revdescription, bool) error
	TxsdTitle                            func(*TxsdTitle, bool) error
	XsdGoPkgHasElems_Constraint          func(*XsdGoPkgHasElems_Constraint, bool) error
	XsdGoPkgHasElems_Systemitem          func(*XsdGoPkgHasElems_Systemitem, bool) error
	XsdGoPkgHasElem_Year                 func(*XsdGoPkgHasElem_Year, bool) error
	TxsdCitebiblioid                     func(*TxsdCitebiblioid, bool) error
	TxsdToc                              func(*TxsdToc, bool) error
	TxsdRefmiscinfo                      func(*TxsdRefmiscinfo, bool) error
	XsdGoPkgHasElem_Initializer          func(*XsdGoPkgHasElem_Initializer, bool) error
	XsdGoPkgHasElems_Orderedlist         func(*XsdGoPkgHasElems_Orderedlist, bool) error
	TxsdAlt                              func(*TxsdAlt, bool) error
	TxsdSect5                            func(*TxsdSect5, bool) error
	XsdGoPkgHasElems_Simplemsgentry      func(*XsdGoPkgHasElems_Simplemsgentry, bool) error
	XsdGoPkgHasElems_Anchor              func(*XsdGoPkgHasElems_Anchor, bool) error
	TxsdVoid                             func(*TxsdVoid, bool) error
	XsdGoPkgHasElems_Synopfragment       func(*XsdGoPkgHasElems_Synopfragment, bool) error
	XsdGoPkgHasElems_Errortext           func(*XsdGoPkgHasElems_Errortext, bool) error
	XsdGoPkgHasElems_Videoobject         func(*XsdGoPkgHasElems_Videoobject, bool) error
	XsdGoPkgHasElem_Funcdef              func(*XsdGoPkgHasElem_Funcdef, bool) error
	XsdGoPkgHasElems_Alt                 func(*XsdGoPkgHasElems_Alt, bool) error
	XsdGoPkgHasElems_Option              func(*XsdGoPkgHasElems_Option, bool) error
	XsdGoPkgHasElems_Contrib             func(*XsdGoPkgHasElems_Contrib, bool) error
	XsdGoPkgHasElems_Taskprerequisites   func(*XsdGoPkgHasElems_Taskprerequisites, bool) error
	XsdGoPkgHasElem_Tocentry             func(*XsdGoPkgHasElem_Tocentry, bool) error
	TxsdArg                              func(*TxsdArg, bool) error
	XsdGoPkgHasElems_Inlinemediaobject   func(*XsdGoPkgHasElems_Inlinemediaobject, bool) error
	TxsdMsgentry                         func(*TxsdMsgentry, bool) error
	XsdGoPkgHasElems_Personblurb         func(*XsdGoPkgHasElems_Personblurb, bool) error
	XsdGoPkgHasElem_Email                func(*XsdGoPkgHasElem_Email, bool) error
	XsdGoPkgHasElems_Refentry            func(*XsdGoPkgHasElems_Refentry, bool) error
	XsdGoPkgHasElem_Set                  func(*XsdGoPkgHasElem_Set, bool) error
	XsdGoPkgHasElems_Refname             func(*XsdGoPkgHasElems_Refname, bool) error
	XsdGoPkgHasElems_Userinput           func(*XsdGoPkgHasElems_Userinput, bool) error
	XsdGoPkgHasElems_Videodata           func(*XsdGoPkgHasElems_Videodata, bool) error
	TxsdSymbol                           func(*TxsdSymbol, bool) error
	XsdGoPkgHasElem_Bibliorelation       func(*XsdGoPkgHasElem_Bibliorelation, bool) error
	XsdGoPkgHasElem_Abstract             func(*XsdGoPkgHasElem_Abstract, bool) error
	XsdGoPkgHasElem_Subjectset           func(*XsdGoPkgHasElem_Subjectset, bool) error
	XsdGoPkgHasElems_Tbody               func(*XsdGoPkgHasElems_Tbody, bool) error
	XsdGoPkgHasElem_Confdates            func(*XsdGoPkgHasElem_Confdates, bool) error
	XsdGoPkgHasElems_Postcode            func(*XsdGoPkgHasElems_Postcode, bool) error
	XsdGoPkgHasElem_Variablelist         func(*XsdGoPkgHasElem_Variablelist, bool) error
	XsdGoPkgHasElem_Equation             func(*XsdGoPkgHasElem_Equation, bool) error
	XsdGoPkgHasElem_Honorific            func(*XsdGoPkgHasElem_Honorific, bool) error
	XsdGoPkgHasElems_Tip                 func(*XsdGoPkgHasElems_Tip, bool) error
	TxsdSect4                            func(*TxsdSect4, bool) error
	XsdGoPkgHasElems_Tr                  func(*XsdGoPkgHasElems_Tr, bool) error
	XsdGoPkgHasElem_Informaltable        func(*XsdGoPkgHasElem_Informaltable, bool) error
	TxsdEmphasis                         func(*TxsdEmphasis, bool) error
	XsdGoPkgHasElem_Systemitem           func(*XsdGoPkgHasElem_Systemitem, bool) error
	XsdGoPkgHasElems_Funcsynopsisinfo    func(*XsdGoPkgHasElems_Funcsynopsisinfo, bool) error
	XsdGoPkgHasElems_Bibliolist          func(*XsdGoPkgHasElems_Bibliolist, bool) error
	XsdGoPkgHasElem_Legalnotice          func(*XsdGoPkgHasElem_Legalnotice, bool) error
	XsdGoPkgHasElems_Informalexample     func(*XsdGoPkgHasElems_Informalexample, bool) error
	XsdGoPkgHasElems_Othername           func(*XsdGoPkgHasElems_Othername, bool) error
	XsdGoPkgHasElem_Destructorsynopsis   func(*XsdGoPkgHasElem_Destructorsynopsis, bool) error
	XsdGoPkgHasElem_Pubdate              func(*XsdGoPkgHasElem_Pubdate, bool) error
	TxsdCollab                           func(*TxsdCollab, bool) error
	XsdGoPkgHasElems_Partintro           func(*XsdGoPkgHasElems_Partintro, bool) error
	XsdGoPkgHasElem_Lineannotation       func(*XsdGoPkgHasElem_Lineannotation, bool) error
	XsdGoPkgHasElem_Oointerface          func(*XsdGoPkgHasElem_Oointerface, bool) error
	XsdGoPkgHasElems_Segtitle            func(*XsdGoPkgHasElems_Segtitle, bool) error
	XsdGoPkgHasElems_Classsynopsis       func(*XsdGoPkgHasElems_Classsynopsis, bool) error
	XsdGoPkgHasElems_Programlistingco    func(*XsdGoPkgHasElems_Programlistingco, bool) error
	XsdGoPkgHasElems_Simpara             func(*XsdGoPkgHasElems_Simpara, bool) error
	XsdGoPkgHasElems_Preface             func(*XsdGoPkgHasElems_Preface, bool) error
	XsdGoPkgHasElems_Col                 func(*XsdGoPkgHasElems_Col, bool) error
	XsdGoPkgHasElems_Listitem            func(*XsdGoPkgHasElems_Listitem, bool) error
	TxsdExtendedlink                     func(*TxsdExtendedlink, bool) error
	TxsdPrimaryie                        func(*TxsdPrimaryie, bool) error
	XsdGoPkgHasElems_Methodname          func(*XsdGoPkgHasElems_Methodname, bool) error
	XsdGoPkgHasElem_Simpara              func(*XsdGoPkgHasElem_Simpara, bool) error
	XsdGoPkgHasElem_Varlistentry         func(*XsdGoPkgHasElem_Varlistentry, bool) error
	XsdGoPkgHasElem_Shortcut             func(*XsdGoPkgHasElem_Shortcut, bool) error
	XsdGoPkgHasElem_Funcparams           func(*XsdGoPkgHasElem_Funcparams, bool) error
	XsdGoPkgHasElem_Preface              func(*XsdGoPkgHasElem_Preface, bool) error
	XsdGoPkgHasElems_Property            func(*XsdGoPkgHasElems_Property, bool) error
	TxsdOoclass                          func(*TxsdOoclass, bool) error
	XsdGoPkgHasElems_Command             func(*XsdGoPkgHasElems_Command, bool) error
	TxsdApplication                      func(*TxsdApplication, bool) error
	XsdGoPkgHasElems_Sidebar             func(*XsdGoPkgHasElems_Sidebar, bool) error
	XsdGoPkgHasElem_Msgexplan            func(*XsdGoPkgHasElem_Msgexplan, bool) error
	XsdGoPkgHasElem_Revhistory           func(*XsdGoPkgHasElem_Revhistory, bool) error
	XsdGoPkgHasElems_Spanspec            func(*XsdGoPkgHasElems_Spanspec, bool) error
	XsdGoPkgHasElem_Keycode              func(*XsdGoPkgHasElem_Keycode, bool) error
	XsdGoPkgHasElems_Authorgroup         func(*XsdGoPkgHasElems_Authorgroup, bool) error
	TxsdScreen                           func(*TxsdScreen, bool) error
	XsdGoPkgHasElems_Termdef             func(*XsdGoPkgHasElems_Termdef, bool) error
	XsdGoPkgHasElem_Procedure            func(*XsdGoPkgHasElem_Procedure, bool) error
	XsdGoPkgHasElems_Step                func(*XsdGoPkgHasElems_Step, bool) error
	TxsdColspec                          func(*TxsdColspec, bool) error
	XsdGoPkgHasElem_Segtitle             func(*XsdGoPkgHasElem_Segtitle, bool) error
	XsdGoPkgHasElem_Glossentry           func(*XsdGoPkgHasElem_Glossentry, bool) error
	TxsdSubsteps                         func(*TxsdSubsteps, bool) error
	XsdGoPkgHasElem_Authorinitials       func(*XsdGoPkgHasElem_Authorinitials, bool) error
	XsdGoPkgHasElem_Keycap               func(*XsdGoPkgHasElem_Keycap, bool) error
	XsdGoPkgHasElems_Sbr                 func(*XsdGoPkgHasElems_Sbr, bool) error
	XsdGoPkgHasElem_Thead                func(*XsdGoPkgHasElem_Thead, bool) error
	XsdGoPkgHasElem_Mediaobject          func(*XsdGoPkgHasElem_Mediaobject, bool) error
	XsdGoPkgHasElems_Msginfo             func(*XsdGoPkgHasElems_Msginfo, bool) error
	XsdGoPkgHasElems_Textdata            func(*XsdGoPkgHasElems_Textdata, bool) error
	XsdGoPkgHasElem_Partintro            func(*XsdGoPkgHasElem_Partintro, bool) error
	XsdGoPkgHasElem_Tasksummary          func(*XsdGoPkgHasElem_Tasksummary, bool) error
	XsdGoPkgHasElem_Othercredit          func(*XsdGoPkgHasElem_Othercredit, bool) error
	XsdGoPkgHasElems_Caption             func(*XsdGoPkgHasElems_Caption, bool) error
	XsdGoPkgHasElem_Bibliocoverage       func(*XsdGoPkgHasElem_Bibliocoverage, bool) error
	XsdGoPkgHasElems_Textobject          func(*XsdGoPkgHasElems_Textobject, bool) error
	TxsdIndexterm                        func(*TxsdIndexterm, bool) error
	TxsdBibliosource                     func(*TxsdBibliosource, bool) error
	TxsdStep                             func(*TxsdStep, bool) error
	XsdGoPkgHasElems_Footnote            func(*XsdGoPkgHasElems_Footnote, bool) error
	XsdGoPkgHasElem_Subject              func(*XsdGoPkgHasElem_Subject, bool) error
	TxsdSuperscript                      func(*TxsdSuperscript, bool) error
	XsdGoPkgHasElems_Menuchoice          func(*XsdGoPkgHasElems_Menuchoice, bool) error
	TxsdGroup                            func(*TxsdGroup, bool) error
	XsdGoPkgHasElem_Msgrel               func(*XsdGoPkgHasElem_Msgrel, bool) error
	XsdGoPkgHasElem_Application          func(*XsdGoPkgHasElem_Application, bool) error
	TxsdQandadiv                         func(*TxsdQandadiv, bool) error
	XsdGoPkgHasElems_Tag                 func(*XsdGoPkgHasElems_Tag, bool) error
	XsdGoPkgHasElem_Formalpara           func(*XsdGoPkgHasElem_Formalpara, bool) error
	XsdGoPkgHasElems_Itermset            func(*XsdGoPkgHasElems_Itermset, bool) error
	XsdGoPkgHasElems_Filename            func(*XsdGoPkgHasElems_Filename, bool) error
	XsdGoPkgHasElem_Methodname           func(*XsdGoPkgHasElem_Methodname, bool) error
	XsdGoPkgHasElems_Glossterm           func(*XsdGoPkgHasElems_Glossterm, bool) error
	XsdGoPkgHasElem_Production           func(*XsdGoPkgHasElem_Production, bool) error
	TxsdProcedure                        func(*TxsdProcedure, bool) error
	XsdGoPkgHasElems_Date                func(*XsdGoPkgHasElems_Date, bool) error
	TxsdPara                             func(*TxsdPara, bool) error
	XsdGoPkgHasElems_Refsect2            func(*XsdGoPkgHasElems_Refsect2, bool) error
	XsdGoPkgHasElem_Firstterm            func(*XsdGoPkgHasElem_Firstterm, bool) error
	XsdGoPkgHasElem_Refmiscinfo          func(*XsdGoPkgHasElem_Refmiscinfo, bool) error
	XsdGoPkgHasElems_Refentrytitle       func(*XsdGoPkgHasElems_Refentrytitle, bool) error
	XsdGoPkgHasElem_Tip                  func(*XsdGoPkgHasElem_Tip, bool) error
	TxsdMsgtext                          func(*TxsdMsgtext, bool) error
	XsdGoPkgHasElems_Otheraddr           func(*XsdGoPkgHasElems_Otheraddr, bool) error
	XsdGoPkgHasElems_Varname             func(*XsdGoPkgHasElems_Varname, bool) error
	XsdGoPkgHasElem_Refsect3             func(*XsdGoPkgHasElem_Refsect3, bool) error
	XsdGoPkgHasElems_Imagedata           func(*XsdGoPkgHasElems_Imagedata, bool) error
	XsdGoPkgHasElems_Lhs                 func(*XsdGoPkgHasElems_Lhs, bool) error
	XsdGoPkgHasElems_Label               func(*XsdGoPkgHasElems_Label, bool) error
	TxsdIndexdiv                         func(*TxsdIndexdiv, bool) error
	TxsdLegalnotice                      func(*TxsdLegalnotice, bool) error
	XsdGoPkgHasElem_Biblioset            func(*XsdGoPkgHasElem_Biblioset, bool) error
	XsdGoPkgHasElems_Package             func(*XsdGoPkgHasElems_Package, bool) error
	TxsdCol                              func(*TxsdCol, bool) error
	XsdGoPkgHasElems_Street              func(*XsdGoPkgHasElems_Street, bool) error
	XsdGoPkgHasElem_Refmeta              func(*XsdGoPkgHasElem_Refmeta, bool) error
	XsdGoPkgHasElems_Stepalternatives    func(*XsdGoPkgHasElems_Stepalternatives, bool) error
	TxsdCaution                          func(*TxsdCaution, bool) error
	XsdGoPkgHasElem_Markup               func(*XsdGoPkgHasElem_Markup, bool) error
	XsdGoPkgHasElems_Bibliomisc          func(*XsdGoPkgHasElems_Bibliomisc, bool) error
	XsdGoPkgHasElems_Literal             func(*XsdGoPkgHasElems_Literal, bool) error
	XsdGoPkgHasElems_Markup              func(*XsdGoPkgHasElems_Markup, bool) error
	XsdGoPkgHasElem_Bridgehead           func(*XsdGoPkgHasElem_Bridgehead, bool) error
	XsdGoPkgHasElem_Tfoot                func(*XsdGoPkgHasElem_Tfoot, bool) error
	XsdGoPkgHasElems_Tocentry            func(*XsdGoPkgHasElems_Tocentry, bool) error
	XsdGoPkgHasElem_Qandaentry           func(*XsdGoPkgHasElem_Qandaentry, bool) error
	XsdGoPkgHasElems_Imageobject         func(*XsdGoPkgHasElems_Imageobject, bool) error
	XsdGoPkgHasElems_Org                 func(*XsdGoPkgHasElems_Org, bool) error
	TxsdSection                          func(*TxsdSection, bool) error
	XsdGoPkgHasElem_Command              func(*XsdGoPkgHasElem_Command, bool) error
	TxsdRhs                              func(*TxsdRhs, bool) error
	XsdGoPkgHasElems_Collab              func(*XsdGoPkgHasElems_Collab, bool) error
	XsdGoPkgHasElem_Inlineequation       func(*XsdGoPkgHasElem_Inlineequation, bool) error
	XsdGoPkgHasElem_Foreignphrase        func(*XsdGoPkgHasElem_Foreignphrase, bool) error
	TxsdCode                             func(*TxsdCode, bool) error
	XsdGoPkgHasElems_Itemizedlist        func(*XsdGoPkgHasElems_Itemizedlist, bool) error
	TxsdGlossdef                         func(*TxsdGlossdef, bool) error
	XsdGoPkgHasElem_Th                   func(*XsdGoPkgHasElem_Th, bool) error
	XsdGoPkgHasElem_Rhs                  func(*XsdGoPkgHasElem_Rhs, bool) error
	XsdGoPkgHasElems_Colophon            func(*XsdGoPkgHasElems_Colophon, bool) error
	XsdGoPkgHasElem_Refname              func(*XsdGoPkgHasElem_Refname, bool) error
	XsdGoPkgHasElems_Msglevel            func(*XsdGoPkgHasElems_Msglevel, bool) error
	XsdGoPkgHasElem_Manvolnum            func(*XsdGoPkgHasElem_Manvolnum, bool) error
	TxsdFigure                           func(*TxsdFigure, bool) error
	XsdGoPkgHasElem_Chapter              func(*XsdGoPkgHasElem_Chapter, bool) error
	XsdGoPkgHasElems_Productionset       func(*XsdGoPkgHasElems_Productionset, bool) error
	XsdGoPkgHasElems_Contractsponsor     func(*XsdGoPkgHasElems_Contractsponsor, bool) error
	XsdGoPkgHasElems_Refsect3            func(*XsdGoPkgHasElems_Refsect3, bool) error
	TxsdFilename                         func(*TxsdFilename, bool) error
	XsdGoPkgHasElem_Publisher            func(*XsdGoPkgHasElem_Publisher, bool) error
	XsdGoPkgHasElem_Figure               func(*XsdGoPkgHasElem_Figure, bool) error
	XsdGoPkgHasElem_Tertiaryie           func(*XsdGoPkgHasElem_Tertiaryie, bool) error
	XsdGoPkgHasElems_Tertiaryie          func(*XsdGoPkgHasElems_Tertiaryie, bool) error
	XsdGoPkgHasElems_Author              func(*XsdGoPkgHasElems_Author, bool) error
	XsdGoPkgHasElem_Imageobject          func(*XsdGoPkgHasElem_Imageobject, bool) error
	XsdGoPkgHasElem_Accel                func(*XsdGoPkgHasElem_Accel, bool) error
	TxsdCaption                          func(*TxsdCaption, bool) error
	XsdGoPkgHasElem_Sbr                  func(*XsdGoPkgHasElem_Sbr, bool) error
	XsdGoPkgHasElems_Screen              func(*XsdGoPkgHasElems_Screen, bool) error
	XsdGoPkgHasElems_Question            func(*XsdGoPkgHasElems_Question, bool) error
	XsdGoPkgHasElems_Surname             func(*XsdGoPkgHasElems_Surname, bool) error
	TxsdRefmeta                          func(*TxsdRefmeta, bool) error
	XsdGoPkgHasElems_Wordasword          func(*XsdGoPkgHasElems_Wordasword, bool) error
	XsdGoPkgHasElem_Street               func(*XsdGoPkgHasElem_Street, bool) error
	XsdGoPkgHasElems_Refdescriptor       func(*XsdGoPkgHasElems_Refdescriptor, bool) error
	TxsdProductionset                    func(*TxsdProductionset, bool) error
	XsdGoPkgHasElems_Note                func(*XsdGoPkgHasElems_Note, bool) error
	XsdGoPkgHasElem_Olink                func(*XsdGoPkgHasElem_Olink, bool) error
	XsdGoPkgHasElems_Bibliorelation      func(*XsdGoPkgHasElems_Bibliorelation, bool) error
	XsdGoPkgHasElem_Synopsis             func(*XsdGoPkgHasElem_Synopsis, bool) error
	TxsdPublisher                        func(*TxsdPublisher, bool) error
	XsdGoPkgHasElem_Simplesect           func(*XsdGoPkgHasElem_Simplesect, bool) error
	XsdGoPkgHasElem_Revdescription       func(*XsdGoPkgHasElem_Revdescription, bool) error
	XsdGoPkgHasElems_Substeps            func(*XsdGoPkgHasElems_Substeps, bool) error
	XsdGoPkgHasElems_Constant            func(*XsdGoPkgHasElems_Constant, bool) error
	TxsdKeywordset                       func(*TxsdKeywordset, bool) error
	XsdGoPkgHasElem_Audioobject          func(*XsdGoPkgHasElem_Audioobject, bool) error
	XsdGoPkgHasElems_Taskrelated         func(*XsdGoPkgHasElems_Taskrelated, bool) error
	XsdGoPkgHasElem_Refsection           func(*XsdGoPkgHasElem_Refsection, bool) error
	TxsdBook                             func(*TxsdBook, bool) error
	XsdGoPkgHasElems_Sect5               func(*XsdGoPkgHasElems_Sect5, bool) error
	XsdGoPkgHasElems_Refsect1            func(*XsdGoPkgHasElems_Refsect1, bool) error
	TxsdAbstract                         func(*TxsdAbstract, bool) error
	XsdGoPkgHasElem_Tag                  func(*XsdGoPkgHasElem_Tag, bool) error
	XsdGoPkgHasElem_Conftitle            func(*XsdGoPkgHasElem_Conftitle, bool) error
	XsdGoPkgHasElems_Task                func(*XsdGoPkgHasElems_Task, bool) error
	XsdGoPkgHasElem_Spanspec             func(*XsdGoPkgHasElem_Spanspec, bool) error
	XsdGoPkgHasElem_Classname            func(*XsdGoPkgHasElem_Classname, bool) error
	TxsdPrompt                           func(*TxsdPrompt, bool) error
	XsdGoPkgHasElem_Msginfo              func(*XsdGoPkgHasElem_Msginfo, bool) error
	TxsdProgramlistingco                 func(*TxsdProgramlistingco, bool) error
	XsdGoPkgHasElems_Blockquote          func(*XsdGoPkgHasElems_Blockquote, bool) error
	XsdGoPkgHasElems_Abstract            func(*XsdGoPkgHasElems_Abstract, bool) error
	XsdGoPkgHasElems_Simplelist          func(*XsdGoPkgHasElems_Simplelist, bool) error
	TxsdImagedata                        func(*TxsdImagedata, bool) error
	XsdGoPkgHasElem_Parameter            func(*XsdGoPkgHasElem_Parameter, bool) error
	XsdGoPkgHasElem_Videodata            func(*XsdGoPkgHasElem_Videodata, bool) error
	XsdGoPkgHasElems_Accel               func(*XsdGoPkgHasElems_Accel, bool) error
	TxsdSpanspec                         func(*TxsdSpanspec, bool) error
	XsdGoPkgHasElem_Refsect2             func(*XsdGoPkgHasElem_Refsect2, bool) error
	XsdGoPkgHasElem_Titleabbrev          func(*XsdGoPkgHasElem_Titleabbrev, bool) error
	TxsdVideoobject                      func(*TxsdVideoobject, bool) error
	XsdGoPkgHasElems_Biblioid            func(*XsdGoPkgHasElems_Biblioid, bool) error
	XsdGoPkgHasElems_Member              func(*XsdGoPkgHasElems_Member, bool) error
	XsdGoPkgHasElem_Bibliomisc           func(*XsdGoPkgHasElem_Bibliomisc, bool) error
	TxsdCalloutlist                      func(*TxsdCalloutlist, bool) error
	TxsdFirstterm                        func(*TxsdFirstterm, bool) error
	XsdGoPkgHasElems_Void                func(*XsdGoPkgHasElems_Void, bool) error
	XsdGoPkgHasElems_Part                func(*XsdGoPkgHasElems_Part, bool) error
	TxsdFuncsynopsis                     func(*TxsdFuncsynopsis, bool) error
	XsdGoPkgHasElems_Modifier            func(*XsdGoPkgHasElems_Modifier, bool) error
	TxsdTask                             func(*TxsdTask, bool) error
	XsdGoPkgHasElems_Arc                 func(*XsdGoPkgHasElems_Arc, bool) error
	XsdGoPkgHasElem_Question             func(*XsdGoPkgHasElem_Question, bool) error
	XsdGoPkgHasElems_Acronym             func(*XsdGoPkgHasElems_Acronym, bool) error
	TxsdInlinemediaobject                func(*TxsdInlinemediaobject, bool) error
	TxsdTextobject                       func(*TxsdTextobject, bool) error
	TxsdBiblioid                         func(*TxsdBiblioid, bool) error
	XsdGoPkgHasElem_Publishername        func(*XsdGoPkgHasElem_Publishername, bool) error
	XsdGoPkgHasElems_Symbol              func(*XsdGoPkgHasElems_Symbol, bool) error
	XsdGoPkgHasElem_Jobtitle             func(*XsdGoPkgHasElem_Jobtitle, bool) error
	XsdGoPkgHasElem_Orgdiv               func(*XsdGoPkgHasElem_Orgdiv, bool) error
	XsdGoPkgHasElem_Orgname              func(*XsdGoPkgHasElem_Orgname, bool) error
	XsdGoPkgHasElem_Artpagenums          func(*XsdGoPkgHasElem_Artpagenums, bool) error
	XsdGoPkgHasElem_Screenshot           func(*XsdGoPkgHasElem_Screenshot, bool) error
	XsdGoPkgHasElem_Wordasword           func(*XsdGoPkgHasElem_Wordasword, bool) error
	XsdGoPkgHasElem_Modifier             func(*XsdGoPkgHasElem_Modifier, bool) error
	XsdGoPkgHasElems_Figure              func(*XsdGoPkgHasElems_Figure, bool) error
	TxsdQuote                            func(*TxsdQuote, bool) error
	XsdGoPkgHasElems_Revnumber           func(*XsdGoPkgHasElems_Revnumber, bool) error
	XsdGoPkgHasElem_Date                 func(*XsdGoPkgHasElem_Date, bool) error
	XsdGoPkgHasElems_Contractnum         func(*XsdGoPkgHasElems_Contractnum, bool) error
	TxsdPerson                           func(*TxsdPerson, bool) error
	XsdGoPkgHasElems_Guiicon             func(*XsdGoPkgHasElems_Guiicon, bool) error
	TxsdOthercredit                      func(*TxsdOthercredit, bool) error
	TxsdRefclass                         func(*TxsdRefclass, bool) error
	XsdGoPkgHasElem_Varname              func(*XsdGoPkgHasElem_Varname, bool) error
	XsdGoPkgHasElems_Nonterminal         func(*XsdGoPkgHasElems_Nonterminal, bool) error
	XsdGoPkgHasElem_Seglistitem          func(*XsdGoPkgHasElem_Seglistitem, bool) error
	XsdGoPkgHasElem_Link                 func(*XsdGoPkgHasElem_Link, bool) error
	XsdGoPkgHasElem_Token                func(*XsdGoPkgHasElem_Token, bool) error
	XsdGoPkgHasElem_State                func(*XsdGoPkgHasElem_State, bool) error
	TxsdLiterallayout                    func(*TxsdLiterallayout, bool) error
	TxsdSidebar                          func(*TxsdSidebar, bool) error
	XsdGoPkgHasElem_Nonterminal          func(*XsdGoPkgHasElem_Nonterminal, bool) error
	XsdGoPkgHasElems_Citetitle           func(*XsdGoPkgHasElems_Citetitle, bool) error
	XsdGoPkgHasElems_Keycode             func(*XsdGoPkgHasElems_Keycode, bool) error
	XsdGoPkgHasElems_Sect1               func(*XsdGoPkgHasElems_Sect1, bool) error
	XsdGoPkgHasElems_Titleabbrev         func(*XsdGoPkgHasElems_Titleabbrev, bool) error
	TxsdWarning                          func(*TxsdWarning, bool) error
	XsdGoPkgHasElem_Screenco             func(*XsdGoPkgHasElem_Screenco, bool) error
	XsdGoPkgHasElems_Group               func(*XsdGoPkgHasElems_Group, bool) error
	XsdGoPkgHasElem_Guilabel             func(*XsdGoPkgHasElem_Guilabel, bool) error
	XsdGoPkgHasElem_Optional             func(*XsdGoPkgHasElem_Optional, bool) error
	XsdGoPkgHasElems_Volumenum           func(*XsdGoPkgHasElems_Volumenum, bool) error
	XsdGoPkgHasElems_Publisher           func(*XsdGoPkgHasElems_Publisher, bool) error
	XsdGoPkgHasElems_Errorcode           func(*XsdGoPkgHasElems_Errorcode, bool) error
	XsdGoPkgHasElems_Releaseinfo         func(*XsdGoPkgHasElems_Releaseinfo, bool) error
	XsdGoPkgHasElem_Otheraddr            func(*XsdGoPkgHasElem_Otheraddr, bool) error
	XsdGoPkgHasElems_Bibliomixed         func(*XsdGoPkgHasElems_Bibliomixed, bool) error
	XsdGoPkgHasElem_Member               func(*XsdGoPkgHasElem_Member, bool) error
	XsdGoPkgHasElems_Setindex            func(*XsdGoPkgHasElems_Setindex, bool) error
	XsdGoPkgHasElem_Arc                  func(*XsdGoPkgHasElem_Arc, bool) error
	XsdGoPkgHasElem_Sect1                func(*XsdGoPkgHasElem_Sect1, bool) error
	XsdGoPkgHasElems_See                 func(*XsdGoPkgHasElems_See, bool) error
	TxsdMsgmain                          func(*TxsdMsgmain, bool) error
	XsdGoPkgHasElem_Errortype            func(*XsdGoPkgHasElem_Errortype, bool) error
	TxsdStepalternatives                 func(*TxsdStepalternatives, bool) error
	XsdGoPkgHasElem_Locator              func(*XsdGoPkgHasElem_Locator, bool) error
	TxsdQuestion                         func(*TxsdQuestion, bool) error
	XsdGoPkgHasElems_Imageobjectco       func(*XsdGoPkgHasElems_Imageobjectco, bool) error
	TxsdTable                            func(*TxsdTable, bool) error
	XsdGoPkgHasElems_Warning             func(*XsdGoPkgHasElems_Warning, bool) error
	XsdGoPkgHasElem_Quote                func(*XsdGoPkgHasElem_Quote, bool) error
	XsdGoPkgHasElem_Group                func(*XsdGoPkgHasElem_Group, bool) error
	XsdGoPkgHasElem_Refdescriptor        func(*XsdGoPkgHasElem_Refdescriptor, bool) error
	XsdGoPkgHasElems_Citation            func(*XsdGoPkgHasElems_Citation, bool) error
	XsdGoPkgHasElems_Glossentry          func(*XsdGoPkgHasElems_Glossentry, bool) error
	XsdGoPkgHasElem_Msg                  func(*XsdGoPkgHasElem_Msg, bool) error
	TxsdOlink                            func(*TxsdOlink, bool) error
	XsdGoPkgHasElems_Guibutton           func(*XsdGoPkgHasElems_Guibutton, bool) error
	XsdGoPkgHasElem_Pagenums             func(*XsdGoPkgHasElem_Pagenums, bool) error
	TxsdBibliocoverage                   func(*TxsdBibliocoverage, bool) error
	XsdGoPkgHasElems_Orgdiv              func(*XsdGoPkgHasElems_Orgdiv, bool) error
	XsdGoPkgHasElems_Phone               func(*XsdGoPkgHasElems_Phone, bool) error
	XsdGoPkgHasElems_Bibliography        func(*XsdGoPkgHasElems_Bibliography, bool) error
	TxsdBibliorelation                   func(*TxsdBibliorelation, bool) error
	XsdGoPkgHasElems_Msgentry            func(*XsdGoPkgHasElems_Msgentry, bool) error
	TxsdModifier                         func(*TxsdModifier, bool) error
	XsdGoPkgHasElems_Mediaobject         func(*XsdGoPkgHasElems_Mediaobject, bool) error
	XsdGoPkgHasElem_Fieldsynopsis        func(*XsdGoPkgHasElem_Fieldsynopsis, bool) error
}
