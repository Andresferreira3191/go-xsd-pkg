//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docbook.org/xml/5.0/xsd/docbook.xsd
package go_Docbook

import (
	xlink "github.com/metaleap/go-xsd-pkg/docbook.org/xml/5.0/xsd/xlink.xsd_go"
	xml "github.com/metaleap/go-xsd-pkg/docbook.org/xml/5.0/xsd/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Audience_XsdtString_ struct {
	Audience xsdt.String `xml:"http://docbook.org/ns/docbook audience,attr"`
}

type XsdGoPkgHasAttr_Annotations_XsdtString_ struct {
	Annotations xsdt.String `xml:"http://docbook.org/ns/docbook annotations,attr"`
}

type TxsdDbCommonAttributesDir xsdt.Token

//	Since TxsdDbCommonAttributesDir is just a simple String type, this merely returns the current string value.
func (me TxsdDbCommonAttributesDir) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdDbCommonAttributesDir's alias type xsdt.Token.
func (me TxsdDbCommonAttributesDir) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "lro".
func (me TxsdDbCommonAttributesDir) IsLro() bool { return me == "lro" }

//	Since TxsdDbCommonAttributesDir is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDbCommonAttributesDir) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "ltr".
func (me TxsdDbCommonAttributesDir) IsLtr() bool { return me == "ltr" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "rlo".
func (me TxsdDbCommonAttributesDir) IsRlo() bool { return me == "rlo" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesDir is "rtl".
func (me TxsdDbCommonAttributesDir) IsRtl() bool { return me == "rtl" }

type XsdGoPkgHasAttr_Dir_TxsdDbCommonAttributesDir_ struct {
	Dir TxsdDbCommonAttributesDir `xml:"http://docbook.org/ns/docbook dir,attr"`
}

type XsdGoPkgHasAttr_Arch_XsdtString_ struct {
	Arch xsdt.String `xml:"http://docbook.org/ns/docbook arch,attr"`
}

type XsdGoPkgHasAttr_Userlevel_XsdtString_ struct {
	Userlevel xsdt.String `xml:"http://docbook.org/ns/docbook userlevel,attr"`
}

type XsdGoPkgHasAttr_Remap_XsdtString_ struct {
	Remap xsdt.String `xml:"http://docbook.org/ns/docbook remap,attr"`
}

type XsdGoPkgHasAttr_Conformance_XsdtString_ struct {
	Conformance xsdt.String `xml:"http://docbook.org/ns/docbook conformance,attr"`
}

type XsdGoPkgHasAttr_Wordsize_XsdtString_ struct {
	Wordsize xsdt.String `xml:"http://docbook.org/ns/docbook wordsize,attr"`
}

type XsdGoPkgHasAttr_Os_XsdtString_ struct {
	Os xsdt.String `xml:"http://docbook.org/ns/docbook os,attr"`
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"http://docbook.org/ns/docbook version,attr"`
}

type TxsdDbCommonAttributesRevisionflag xsdt.Token

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "changed".
func (me TxsdDbCommonAttributesRevisionflag) IsChanged() bool { return me == "changed" }

//	Since TxsdDbCommonAttributesRevisionflag is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDbCommonAttributesRevisionflag) SetFromString(s string) {
	(*xsdt.Token)(me).SetFromString(s)
}

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "deleted".
func (me TxsdDbCommonAttributesRevisionflag) IsDeleted() bool { return me == "deleted" }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "added".
func (me TxsdDbCommonAttributesRevisionflag) IsAdded() bool { return me == "added" }

//	This convenience method just performs a simple type conversion to TxsdDbCommonAttributesRevisionflag's alias type xsdt.Token.
func (me TxsdDbCommonAttributesRevisionflag) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdDbCommonAttributesRevisionflag is "off".
func (me TxsdDbCommonAttributesRevisionflag) IsOff() bool { return me == "off" }

//	Since TxsdDbCommonAttributesRevisionflag is just a simple String type, this merely returns the current string value.
func (me TxsdDbCommonAttributesRevisionflag) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Revisionflag_TxsdDbCommonAttributesRevisionflag_ struct {
	Revisionflag TxsdDbCommonAttributesRevisionflag `xml:"http://docbook.org/ns/docbook revisionflag,attr"`
}

type XsdGoPkgHasAttr_Revision_XsdtString_ struct {
	Revision xsdt.String `xml:"http://docbook.org/ns/docbook revision,attr"`
}

type XsdGoPkgHasAttr_Condition_XsdtString_ struct {
	Condition xsdt.String `xml:"http://docbook.org/ns/docbook condition,attr"`
}

type XsdGoPkgHasAttr_Xreflabel_XsdtString_ struct {
	Xreflabel xsdt.String `xml:"http://docbook.org/ns/docbook xreflabel,attr"`
}

type XsdGoPkgHasAttr_Security_XsdtString_ struct {
	Security xsdt.String `xml:"http://docbook.org/ns/docbook security,attr"`
}

type XsdGoPkgHasAttr_Vendor_XsdtString_ struct {
	Vendor xsdt.String `xml:"http://docbook.org/ns/docbook vendor,attr"`
}

type XsdGoPkgHasAtts_DbCommonAttributes struct {
	XsdGoPkgHasAttr_Remap_XsdtString_

	XsdGoPkgHasAttr_Conformance_XsdtString_

	XsdGoPkgHasAttr_Wordsize_XsdtString_

	XsdGoPkgHasAttr_Os_XsdtString_

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_Revisionflag_TxsdDbCommonAttributesRevisionflag_

	XsdGoPkgHasAttr_Revision_XsdtString_

	XsdGoPkgHasAttr_Condition_XsdtString_

	XsdGoPkgHasAttr_Xreflabel_XsdtString_

	XsdGoPkgHasAttr_Security_XsdtString_

	XsdGoPkgHasAttr_Vendor_XsdtString_

	xml.XsdGoPkgHasAttr_Base

	XsdGoPkgHasAttr_Audience_XsdtString_

	XsdGoPkgHasAttr_Annotations_XsdtString_

	XsdGoPkgHasAttr_Dir_TxsdDbCommonAttributesDir_

	xml.XsdGoPkgHasAttr_Id

	XsdGoPkgHasAttr_Arch_XsdtString_

	XsdGoPkgHasAttr_Userlevel_XsdtString_
}

type XsdGoPkgHasAttr_Linkend_XsdtIdref_ struct {
	Linkend xsdt.Idref `xml:"http://docbook.org/ns/docbook linkend,attr"`
}

type XsdGoPkgHasAtts_DbCommonLinkingAttributes struct {
	xlink.XsdGoPkgHasAttr_Actuate

	xlink.XsdGoPkgHasAttr_Href

	xlink.XsdGoPkgHasAttr_Type

	xlink.XsdGoPkgHasAttr_Show

	xlink.XsdGoPkgHasAttr_Title

	xlink.XsdGoPkgHasAttr_Role

	XsdGoPkgHasAttr_Linkend_XsdtIdref_

	xlink.XsdGoPkgHasAttr_Arcrole
}

type XsdGoPkgHasAttr_Zone_XsdtIdrefs_ struct {
	Zone xsdt.Idrefs `xml:"http://docbook.org/ns/docbook zone,attr"`
}

type XsdGoPkgHasAttr_Role_XsdtString_ struct {
	Role xsdt.String `xml:"http://docbook.org/ns/docbook role,attr"`
}

type XsdGoPkgHasAttr_Pagenum_XsdtString_ struct {
	Pagenum xsdt.String `xml:"http://docbook.org/ns/docbook pagenum,attr"`
}

type TxsdIndextermClass xsdt.Token

//	Returns true if the value of this enumerated TxsdIndextermClass is "endofrange".
func (me TxsdIndextermClass) IsEndofrange() bool { return me == "endofrange" }

//	Since TxsdIndextermClass is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermClass) String() string { return xsdt.Token(me).String() }

//	Since TxsdIndextermClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdIndextermClass is "singular".
func (me TxsdIndextermClass) IsSingular() bool { return me == "singular" }

//	This convenience method just performs a simple type conversion to TxsdIndextermClass's alias type xsdt.Token.
func (me TxsdIndextermClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdIndextermClass is "startofrange".
func (me TxsdIndextermClass) IsStartofrange() bool { return me == "startofrange" }

type XsdGoPkgHasAttr_Class_TxsdIndextermClass_ struct {
	Class TxsdIndextermClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Width_XsdtString_ struct {
	Width xsdt.String `xml:"http://docbook.org/ns/docbook width,attr"`
}

type TxsdImagedataAlign xsdt.Token

//	Returns true if the value of this enumerated TxsdImagedataAlign is "left".
func (me TxsdImagedataAlign) IsLeft() bool { return me == "left" }

//	This convenience method just performs a simple type conversion to TxsdImagedataAlign's alias type xsdt.Token.
func (me TxsdImagedataAlign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdImagedataAlign is "center".
func (me TxsdImagedataAlign) IsCenter() bool { return me == "center" }

//	Returns true if the value of this enumerated TxsdImagedataAlign is "right".
func (me TxsdImagedataAlign) IsRight() bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdImagedataAlign is "justify".
func (me TxsdImagedataAlign) IsJustify() bool { return me == "justify" }

//	Returns true if the value of this enumerated TxsdImagedataAlign is "char".
func (me TxsdImagedataAlign) IsChar() bool { return me == "char" }

//	Since TxsdImagedataAlign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdImagedataAlign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdImagedataAlign is just a simple String type, this merely returns the current string value.
func (me TxsdImagedataAlign) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Align_TxsdImagedataAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Entityref_XsdtEntity_ struct {
	Entityref xsdt.Entity `xml:"http://docbook.org/ns/docbook entityref,attr"`
}

type XsdGoPkgHasAttr_Depth_XsdtString_ struct {
	Depth xsdt.String `xml:"http://docbook.org/ns/docbook depth,attr"`
}

type XsdGoPkgHasAttr_Format_XsdtString_ struct {
	Format xsdt.String `xml:"http://docbook.org/ns/docbook format,attr"`
}

type XsdGoPkgHasAttr_Linkends_XsdtIdrefs_ struct {
	Linkends xsdt.Idrefs `xml:"http://docbook.org/ns/docbook linkends,attr"`
}

type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	Label xsdt.String `xml:"http://docbook.org/ns/docbook label,attr"`
}

type TxsdCo struct {
	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdCo function is not nil (ie. was set by outside code), calls it with this TxsdCo instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdCo instance.
func (me *TxsdCo) Walk() {
	fn := WalkHandlers.TxsdCo
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Co struct {
	Cos []*TxsdCo `xml:"http://docbook.org/ns/docbook co"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Co function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Co instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Co instance.
func (me *XsdGoPkgHasElems_Co) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Co
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Xrefstyle_XsdtString_ struct {
	Xrefstyle xsdt.String `xml:"http://docbook.org/ns/docbook xrefstyle,attr"`
}

type XsdGoPkgHasAttr_Endterm_XsdtIdref_ struct {
	Endterm xsdt.Idref `xml:"http://docbook.org/ns/docbook endterm,attr"`
}

type TxsdXref struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_
}

//	If the WalkHandlers.TxsdXref function is not nil (ie. was set by outside code), calls it with this TxsdXref instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdXref instance.
func (me *TxsdXref) Walk() {
	fn := WalkHandlers.TxsdXref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Xref struct {
	Xrefs []*TxsdXref `xml:"http://docbook.org/ns/docbook xref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xref instance.
func (me *XsdGoPkgHasElems_Xref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Xref
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Xrefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAnchor struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdAnchor function is not nil (ie. was set by outside code), calls it with this TxsdAnchor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdAnchor instance.
func (me *TxsdAnchor) Walk() {
	fn := WalkHandlers.TxsdAnchor
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Anchor struct {
	Anchors []*TxsdAnchor `xml:"http://docbook.org/ns/docbook anchor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Anchor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Anchor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Anchor instance.
func (me *XsdGoPkgHasElems_Anchor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Anchor
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Anchors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_End_XsdtNmtoken_ struct {
	End xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook end,attr"`
}

type XsdGoPkgHasAttr_Units_XsdtNmtoken_ struct {
	Units xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook units,attr"`
}

type XsdGoPkgHasAttr_Begin_XsdtNmtoken_ struct {
	Begin xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook begin,attr"`
}

type TxsdBiblioref struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_End_XsdtNmtoken_

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasAttr_Units_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Begin_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdBiblioref function is not nil (ie. was set by outside code), calls it with this TxsdBiblioref instance as the single argument. Then calls the Walk() method on 0/8 embed(s) and 0/0 field(s) belonging to this TxsdBiblioref instance.
func (me *TxsdBiblioref) Walk() {
	fn := WalkHandlers.TxsdBiblioref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Biblioref struct {
	Bibliorefs []*TxsdBiblioref `xml:"http://docbook.org/ns/docbook biblioref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioref instance.
func (me *XsdGoPkgHasElems_Biblioref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Biblioref
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliorefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Alt struct {
	Alts []*TxsdAlt `xml:"http://docbook.org/ns/docbook alt"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Alt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Alt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Alt instance.
func (me *XsdGoPkgHasElems_Alt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Alt
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasCdata
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSurname struct {
	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdSurname function is not nil (ie. was set by outside code), calls it with this TxsdSurname instance as the single argument. Then calls the Walk() method on 5/18 embed(s) and 0/0 field(s) belonging to this TxsdSurname instance.
func (me *TxsdSurname) Walk() {
	fn := WalkHandlers.TxsdSurname
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Surname struct {
	Surnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook surname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Surname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Surname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Surname instance.
func (me *XsdGoPkgHasElems_Surname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Surname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Surnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Firstname struct {
	Firstnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook firstname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Firstname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Firstname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Firstname instance.
func (me *XsdGoPkgHasElems_Firstname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Firstname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Firstnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Honorific struct {
	Honorifics []*TxsdSurname `xml:"http://docbook.org/ns/docbook honorific"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Honorific function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Honorific instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Honorific instance.
func (me *XsdGoPkgHasElems_Honorific) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Honorific
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Honorifics {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Lineage struct {
	Lineages []*TxsdSurname `xml:"http://docbook.org/ns/docbook lineage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lineage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lineage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lineage instance.
func (me *XsdGoPkgHasElems_Lineage) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Lineage
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Lineages {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Othername struct {
	Othernames []*TxsdSurname `xml:"http://docbook.org/ns/docbook othername"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Othername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Othername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Othername instance.
func (me *XsdGoPkgHasElems_Othername) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Othername
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Othernames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPersonname struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Surname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Firstname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Honorific

	XsdGoPkgHasElems_Lineage

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Othername

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdPersonname function is not nil (ie. was set by outside code), calls it with this TxsdPersonname instance as the single argument. Then calls the Walk() method on 10/23 embed(s) and 0/0 field(s) belonging to this TxsdPersonname instance.
func (me *TxsdPersonname) Walk() {
	fn := WalkHandlers.TxsdPersonname
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Firstname.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Honorific.Walk()
	me.XsdGoPkgHasElems_Lineage.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Othername.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Surname.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Personname struct {
	Personnames []*TxsdPersonname `xml:"http://docbook.org/ns/docbook personname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Personname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Personname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Personname instance.
func (me *XsdGoPkgHasElems_Personname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Personname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Personnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Initializer struct {
	Initializers []*TxsdSurname `xml:"http://docbook.org/ns/docbook initializer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Initializer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Initializer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Initializer instance.
func (me *XsdGoPkgHasElems_Initializer) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Initializer
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Initializers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Literal struct {
	Literals []*TxsdSurname `xml:"http://docbook.org/ns/docbook literal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Literal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Literal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Literal instance.
func (me *XsdGoPkgHasElems_Literal) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Literal
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Literals {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Function struct {
	Functions []*TxsdSurname `xml:"http://docbook.org/ns/docbook function"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Function function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Function instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Function instance.
func (me *XsdGoPkgHasElems_Function) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Function
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Functions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Envar struct {
	Envars []*TxsdSurname `xml:"http://docbook.org/ns/docbook envar"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Envar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Envar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Envar instance.
func (me *XsdGoPkgHasElems_Envar) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Envar
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Envars {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdParameterClass xsdt.Token

//	Since TxsdParameterClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdParameterClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdParameterClass's alias type xsdt.Token.
func (me TxsdParameterClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdParameterClass is "option".
func (me TxsdParameterClass) IsOption() bool { return me == "option" }

//	Returns true if the value of this enumerated TxsdParameterClass is "command".
func (me TxsdParameterClass) IsCommand() bool { return me == "command" }

//	Returns true if the value of this enumerated TxsdParameterClass is "function".
func (me TxsdParameterClass) IsFunction() bool { return me == "function" }

//	Since TxsdParameterClass is just a simple String type, this merely returns the current string value.
func (me TxsdParameterClass) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Class_TxsdParameterClass_ struct {
	Class TxsdParameterClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdParameter struct {
	XsdGoPkgHasAttr_Class_TxsdParameterClass_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdParameter function is not nil (ie. was set by outside code), calls it with this TxsdParameter instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdParameter instance.
func (me *TxsdParameter) Walk() {
	fn := WalkHandlers.TxsdParameter
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Parameter struct {
	Parameters []*TxsdParameter `xml:"http://docbook.org/ns/docbook parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Parameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Parameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Parameter instance.
func (me *XsdGoPkgHasElems_Parameter) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Parameter
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Parameters {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Accel struct {
	Accels []*TxsdSurname `xml:"http://docbook.org/ns/docbook accel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Accel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Accel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Accel instance.
func (me *XsdGoPkgHasElems_Accel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Accel
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Accels {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGuimenuitem struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Accel
}

//	If the WalkHandlers.TxsdGuimenuitem function is not nil (ie. was set by outside code), calls it with this TxsdGuimenuitem instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdGuimenuitem instance.
func (me *TxsdGuimenuitem) Walk() {
	fn := WalkHandlers.TxsdGuimenuitem
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guimenuitem struct {
	Guimenuitems []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenuitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guimenuitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guimenuitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guimenuitem instance.
func (me *XsdGoPkgHasElems_Guimenuitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guimenuitem
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guimenuitems {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guisubmenu struct {
	Guisubmenus []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guisubmenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guisubmenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guisubmenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guisubmenu instance.
func (me *XsdGoPkgHasElems_Guisubmenu) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guisubmenu
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guisubmenus {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guimenu struct {
	Guimenus []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guimenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guimenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guimenu instance.
func (me *XsdGoPkgHasElems_Guimenu) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guimenu
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guimenus {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guilabel struct {
	Guilabels []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guilabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guilabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guilabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guilabel instance.
func (me *XsdGoPkgHasElems_Guilabel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guilabel
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guilabels {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guiicon struct {
	Guiicons []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guiicon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guiicon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guiicon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guiicon instance.
func (me *XsdGoPkgHasElems_Guiicon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guiicon
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guiicons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Guibutton struct {
	Guibuttons []*TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guibutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Guibutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Guibutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Guibutton instance.
func (me *XsdGoPkgHasElems_Guibutton) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Guibutton
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Guibuttons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdKeycapFunction xsdt.Token

//	Returns true if the value of this enumerated TxsdKeycapFunction is "space".
func (me TxsdKeycapFunction) IsSpace() bool { return me == "space" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "right".
func (me TxsdKeycapFunction) IsRight() bool { return me == "right" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "alt".
func (me TxsdKeycapFunction) IsAlt() bool { return me == "alt" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "left".
func (me TxsdKeycapFunction) IsLeft() bool { return me == "left" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "end".
func (me TxsdKeycapFunction) IsEnd() bool { return me == "end" }

//	Since TxsdKeycapFunction is just a simple String type, this merely returns the current string value.
func (me TxsdKeycapFunction) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "command".
func (me TxsdKeycapFunction) IsCommand() bool { return me == "command" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "pageup".
func (me TxsdKeycapFunction) IsPageup() bool { return me == "pageup" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "up".
func (me TxsdKeycapFunction) IsUp() bool { return me == "up" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "shift".
func (me TxsdKeycapFunction) IsShift() bool { return me == "shift" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "home".
func (me TxsdKeycapFunction) IsHome() bool { return me == "home" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "escape".
func (me TxsdKeycapFunction) IsEscape() bool { return me == "escape" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "delete".
func (me TxsdKeycapFunction) IsDelete() bool { return me == "delete" }

//	Since TxsdKeycapFunction is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdKeycapFunction) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "enter".
func (me TxsdKeycapFunction) IsEnter() bool { return me == "enter" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "pagedown".
func (me TxsdKeycapFunction) IsPagedown() bool { return me == "pagedown" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "meta".
func (me TxsdKeycapFunction) IsMeta() bool { return me == "meta" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "insert".
func (me TxsdKeycapFunction) IsInsert() bool { return me == "insert" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "backspace".
func (me TxsdKeycapFunction) IsBackspace() bool { return me == "backspace" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "down".
func (me TxsdKeycapFunction) IsDown() bool { return me == "down" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "other".
func (me TxsdKeycapFunction) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "option".
func (me TxsdKeycapFunction) IsOption() bool { return me == "option" }

//	This convenience method just performs a simple type conversion to TxsdKeycapFunction's alias type xsdt.Token.
func (me TxsdKeycapFunction) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "control".
func (me TxsdKeycapFunction) IsControl() bool { return me == "control" }

//	Returns true if the value of this enumerated TxsdKeycapFunction is "tab".
func (me TxsdKeycapFunction) IsTab() bool { return me == "tab" }

type XsdGoPkgHasAttr_Function_TxsdKeycapFunction_ struct {
	Function TxsdKeycapFunction `xml:"http://docbook.org/ns/docbook function,attr"`
}

type XsdGoPkgHasAttr_Otherfunction_XsdtString_ struct {
	Otherfunction xsdt.String `xml:"http://docbook.org/ns/docbook otherfunction,attr"`
}

type TxsdKeycap struct {
	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Otherfunction_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Function_TxsdKeycapFunction_
}

//	If the WalkHandlers.TxsdKeycap function is not nil (ie. was set by outside code), calls it with this TxsdKeycap instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdKeycap instance.
func (me *TxsdKeycap) Walk() {
	fn := WalkHandlers.TxsdKeycap
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keycap struct {
	Keycaps []*TxsdKeycap `xml:"http://docbook.org/ns/docbook keycap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycap instance.
func (me *XsdGoPkgHasElems_Keycap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keycap
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keycaps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Mousebutton struct {
	Mousebuttons []*TxsdSurname `xml:"http://docbook.org/ns/docbook mousebutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mousebutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mousebutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mousebutton instance.
func (me *XsdGoPkgHasElems_Mousebutton) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Mousebutton
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Mousebuttons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keysym struct {
	Keysyms []*TxsdSurname `xml:"http://docbook.org/ns/docbook keysym"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keysym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keysym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keysym instance.
func (me *XsdGoPkgHasElems_Keysym) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keysym
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keysyms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Otheraction_XsdtString_ struct {
	Otheraction xsdt.String `xml:"http://docbook.org/ns/docbook otheraction,attr"`
}

type TxsdKeycomboAction xsdt.Token

//	Returns true if the value of this enumerated TxsdKeycomboAction is "seq".
func (me TxsdKeycomboAction) IsSeq() bool { return me == "seq" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "simul".
func (me TxsdKeycomboAction) IsSimul() bool { return me == "simul" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "other".
func (me TxsdKeycomboAction) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "click".
func (me TxsdKeycomboAction) IsClick() bool { return me == "click" }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "double-click".
func (me TxsdKeycomboAction) IsDoubleClick() bool { return me == "double-click" }

//	This convenience method just performs a simple type conversion to TxsdKeycomboAction's alias type xsdt.Token.
func (me TxsdKeycomboAction) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdKeycomboAction is just a simple String type, this merely returns the current string value.
func (me TxsdKeycomboAction) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdKeycomboAction is "press".
func (me TxsdKeycomboAction) IsPress() bool { return me == "press" }

//	Since TxsdKeycomboAction is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdKeycomboAction) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Action_TxsdKeycomboAction_ struct {
	Action TxsdKeycomboAction `xml:"http://docbook.org/ns/docbook action,attr"`
}

type TxsdKeycombo struct {
	XsdGoPkgHasAttr_Action_TxsdKeycomboAction_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAttr_Otheraction_XsdtString_

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdKeycombo function is not nil (ie. was set by outside code), calls it with this TxsdKeycombo instance as the single argument. Then calls the Walk() method on 3/9 embed(s) and 0/0 field(s) belonging to this TxsdKeycombo instance.
func (me *TxsdKeycombo) Walk() {
	fn := WalkHandlers.TxsdKeycombo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keycombo struct {
	Keycombos []*TxsdKeycombo `xml:"http://docbook.org/ns/docbook keycombo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycombo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycombo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycombo instance.
func (me *XsdGoPkgHasElems_Keycombo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keycombo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keycombos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Action_TxsdShortcutAction_ struct {
	Action TxsdKeycomboAction `xml:"http://docbook.org/ns/docbook action,attr"`
}

type TxsdShortcut struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAttr_Otheraction_XsdtString_

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Action_TxsdShortcutAction_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Keysym
}

//	If the WalkHandlers.TxsdShortcut function is not nil (ie. was set by outside code), calls it with this TxsdShortcut instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdShortcut instance.
func (me *TxsdShortcut) Walk() {
	fn := WalkHandlers.TxsdShortcut
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Shortcut struct {
	Shortcut *TxsdShortcut `xml:"http://docbook.org/ns/docbook shortcut"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Shortcut function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shortcut instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Shortcut instance.
func (me *XsdGoPkgHasElem_Shortcut) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Shortcut
	if fn != nil {
		fn(me, true)
	}
	me.Shortcut.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMenuchoice struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElem_Shortcut

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdMenuchoice function is not nil (ie. was set by outside code), calls it with this TxsdMenuchoice instance as the single argument. Then calls the Walk() method on 7/10 embed(s) and 0/0 field(s) belonging to this TxsdMenuchoice instance.
func (me *TxsdMenuchoice) Walk() {
	fn := WalkHandlers.TxsdMenuchoice
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElem_Shortcut.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Menuchoice struct {
	Menuchoices []*TxsdMenuchoice `xml:"http://docbook.org/ns/docbook menuchoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Menuchoice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Menuchoice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Menuchoice instance.
func (me *XsdGoPkgHasElems_Menuchoice) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Menuchoice
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Menuchoices {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Errorcode struct {
	Errorcodes []*TxsdSurname `xml:"http://docbook.org/ns/docbook errorcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errorcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errorcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errorcode instance.
func (me *XsdGoPkgHasElems_Errorcode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Errorcode
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Errorcodes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Interfacename struct {
	Interfacenames []*TxsdSurname `xml:"http://docbook.org/ns/docbook interfacename"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Interfacename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Interfacename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Interfacename instance.
func (me *XsdGoPkgHasElems_Interfacename) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Interfacename
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Interfacenames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Property struct {
	Properties []*TxsdSurname `xml:"http://docbook.org/ns/docbook property"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Property instance.
func (me *XsdGoPkgHasElems_Property) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Property
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Properties {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Shortcut struct {
	Shortcuts []*TxsdShortcut `xml:"http://docbook.org/ns/docbook shortcut"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shortcut function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shortcut instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shortcut instance.
func (me *XsdGoPkgHasElems_Shortcut) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Shortcut
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Shortcuts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdModifier struct {
	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Phrase

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Xref
}

//	If the WalkHandlers.TxsdModifier function is not nil (ie. was set by outside code), calls it with this TxsdModifier instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdModifier instance.
func (me *TxsdModifier) Walk() {
	fn := WalkHandlers.TxsdModifier
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Modifier struct {
	Modifiers []*TxsdModifier `xml:"http://docbook.org/ns/docbook modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Modifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Modifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Modifier instance.
func (me *XsdGoPkgHasElems_Modifier) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Modifier
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Modifiers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Package struct {
	Packages []*TxsdSurname `xml:"http://docbook.org/ns/docbook package"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Package function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Package instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Package instance.
func (me *XsdGoPkgHasElems_Package) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Package
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Packages {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Exceptionname struct {
	Exceptionname *TxsdSurname `xml:"http://docbook.org/ns/docbook exceptionname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Exceptionname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Exceptionname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Exceptionname instance.
func (me *XsdGoPkgHasElem_Exceptionname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Exceptionname
	if fn != nil {
		fn(me, true)
	}
	me.Exceptionname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOoexception struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Exceptionname
}

//	If the WalkHandlers.TxsdOoexception function is not nil (ie. was set by outside code), calls it with this TxsdOoexception instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOoexception instance.
func (me *TxsdOoexception) Walk() {
	fn := WalkHandlers.TxsdOoexception
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElem_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Ooexception struct {
	Ooexceptions []*TxsdOoexception `xml:"http://docbook.org/ns/docbook ooexception"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ooexception function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ooexception instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ooexception instance.
func (me *XsdGoPkgHasElems_Ooexception) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Ooexception
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Ooexceptions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Classname struct {
	Classname *TxsdSurname `xml:"http://docbook.org/ns/docbook classname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Classname instance.
func (me *XsdGoPkgHasElem_Classname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Classname
	if fn != nil {
		fn(me, true)
	}
	me.Classname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOoclass struct {
	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Classname

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdOoclass function is not nil (ie. was set by outside code), calls it with this TxsdOoclass instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOoclass instance.
func (me *TxsdOoclass) Walk() {
	fn := WalkHandlers.TxsdOoclass
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElem_Classname.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Ooclass struct {
	Ooclasses []*TxsdOoclass `xml:"http://docbook.org/ns/docbook ooclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ooclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ooclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ooclass instance.
func (me *XsdGoPkgHasElems_Ooclass) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Ooclass
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Ooclasses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Errorname struct {
	Errornames []*TxsdSurname `xml:"http://docbook.org/ns/docbook errorname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errorname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errorname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errorname instance.
func (me *XsdGoPkgHasElems_Errorname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Errorname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Errornames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Email struct {
	Emails []*TxsdSurname `xml:"http://docbook.org/ns/docbook email"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Email
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Emails {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Type struct {
	Types []*TxsdSurname `xml:"http://docbook.org/ns/docbook type"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Type function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Type instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Type instance.
func (me *XsdGoPkgHasElems_Type) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Type
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Types {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Varname struct {
	Varnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook varname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varname instance.
func (me *XsdGoPkgHasElems_Varname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Varname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Varnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Returnvalue struct {
	Returnvalues []*TxsdSurname `xml:"http://docbook.org/ns/docbook returnvalue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Returnvalue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Returnvalue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Returnvalue instance.
func (me *XsdGoPkgHasElems_Returnvalue) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Returnvalue
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Returnvalues {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Interfacename struct {
	Interfacename *TxsdSurname `xml:"http://docbook.org/ns/docbook interfacename"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Interfacename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Interfacename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Interfacename instance.
func (me *XsdGoPkgHasElem_Interfacename) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Interfacename
	if fn != nil {
		fn(me, true)
	}
	me.Interfacename.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOointerface struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Interfacename
}

//	If the WalkHandlers.TxsdOointerface function is not nil (ie. was set by outside code), calls it with this TxsdOointerface instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdOointerface instance.
func (me *TxsdOointerface) Walk() {
	fn := WalkHandlers.TxsdOointerface
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElem_Interfacename.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Oointerface struct {
	Oointerfaces []*TxsdOointerface `xml:"http://docbook.org/ns/docbook oointerface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Oointerface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Oointerface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Oointerface instance.
func (me *XsdGoPkgHasElems_Oointerface) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Oointerface
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Oointerfaces {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Methodname struct {
	Methodnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook methodname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodname instance.
func (me *XsdGoPkgHasElems_Methodname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Methodname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Methodnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Language_XsdtString_ struct {
	Language xsdt.String `xml:"http://docbook.org/ns/docbook language,attr"`
}

type XsdGoPkgHasElems_Exceptionname struct {
	Exceptionnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook exceptionname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Exceptionname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Exceptionname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Exceptionname instance.
func (me *XsdGoPkgHasElems_Exceptionname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Exceptionname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Exceptionnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Classname struct {
	Classnames []*TxsdSurname `xml:"http://docbook.org/ns/docbook classname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classname instance.
func (me *XsdGoPkgHasElems_Classname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Classname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Classnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCode struct {
	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Classname
}

//	If the WalkHandlers.TxsdCode function is not nil (ie. was set by outside code), calls it with this TxsdCode instance as the single argument. Then calls the Walk() method on 19/33 embed(s) and 0/0 field(s) belonging to this TxsdCode instance.
func (me *TxsdCode) Walk() {
	fn := WalkHandlers.TxsdCode
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Code struct {
	Codes []*TxsdCode `xml:"http://docbook.org/ns/docbook code"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Code function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Code instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Code instance.
func (me *XsdGoPkgHasElems_Code) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Code
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Codes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Manvolnum struct {
	Manvolnum *TxsdSurname `xml:"http://docbook.org/ns/docbook manvolnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Manvolnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Manvolnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Manvolnum instance.
func (me *XsdGoPkgHasElem_Manvolnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Manvolnum
	if fn != nil {
		fn(me, true)
	}
	me.Manvolnum.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Label_XsdtNmtoken_ struct {
	Label xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook label,attr"`
}

type XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_ struct {
	Otherunits xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherunits,attr"`
}

type TxsdAreaUnits xsdt.Token

//	Returns true if the value of this enumerated TxsdAreaUnits is "linecolumnpair".
func (me TxsdAreaUnits) IsLinecolumnpair() bool { return me == "linecolumnpair" }

//	Since TxsdAreaUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAreaUnits) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdAreaUnits's alias type xsdt.Token.
func (me TxsdAreaUnits) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdAreaUnits is just a simple String type, this merely returns the current string value.
func (me TxsdAreaUnits) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdAreaUnits is "calspair".
func (me TxsdAreaUnits) IsCalspair() bool { return me == "calspair" }

//	Returns true if the value of this enumerated TxsdAreaUnits is "linerange".
func (me TxsdAreaUnits) IsLinerange() bool { return me == "linerange" }

//	Returns true if the value of this enumerated TxsdAreaUnits is "linecolumn".
func (me TxsdAreaUnits) IsLinecolumn() bool { return me == "linecolumn" }

//	Returns true if the value of this enumerated TxsdAreaUnits is "other".
func (me TxsdAreaUnits) IsOther() bool { return me == "other" }

type XsdGoPkgHasAttr_Units_TxsdAreaUnits_ struct {
	Units TxsdAreaUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type XsdGoPkgHasAttr_Coords_XsdtString_ struct {
	Coords xsdt.String `xml:"http://docbook.org/ns/docbook coords,attr"`
}

type TxsdArea struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_

	XsdGoPkgHasAttr_Units_TxsdAreaUnits_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasAttr_Coords_XsdtString_
}

//	If the WalkHandlers.TxsdArea function is not nil (ie. was set by outside code), calls it with this TxsdArea instance as the single argument. Then calls the Walk() method on 0/8 embed(s) and 0/0 field(s) belonging to this TxsdArea instance.
func (me *TxsdArea) Walk() {
	fn := WalkHandlers.TxsdArea
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Area struct {
	Areas []*TxsdArea `xml:"http://docbook.org/ns/docbook area"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Area instance.
func (me *XsdGoPkgHasElems_Area) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Area
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Areas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Units_TxsdAreasetUnits_ struct {
	Units TxsdAreaUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type TxsdAreaset struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_

	XsdGoPkgHasElems_Area

	XsdGoPkgHasAttr_Units_TxsdAreasetUnits_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasAttr_Label_XsdtString_
}

//	If the WalkHandlers.TxsdAreaset function is not nil (ie. was set by outside code), calls it with this TxsdAreaset instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdAreaset instance.
func (me *TxsdAreaset) Walk() {
	fn := WalkHandlers.TxsdAreaset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Area.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Areaset struct {
	Areasets []*TxsdAreaset `xml:"http://docbook.org/ns/docbook areaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Areaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Areaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Areaset instance.
func (me *XsdGoPkgHasElems_Areaset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Areaset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Areasets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Units_TxsdAreaspecUnits_ struct {
	Units TxsdAreaUnits `xml:"http://docbook.org/ns/docbook units,attr"`
}

type TxsdAreaspec struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Units_TxsdAreaspecUnits_

	XsdGoPkgHasElems_Area

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Otherunits_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Areaset
}

//	If the WalkHandlers.TxsdAreaspec function is not nil (ie. was set by outside code), calls it with this TxsdAreaspec instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdAreaspec instance.
func (me *TxsdAreaspec) Walk() {
	fn := WalkHandlers.TxsdAreaspec
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Area.Walk()
	me.XsdGoPkgHasElems_Areaset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Areaspec struct {
	Areaspec *TxsdAreaspec `xml:"http://docbook.org/ns/docbook areaspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Areaspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Areaspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Areaspec instance.
func (me *XsdGoPkgHasElem_Areaspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Areaspec
	if fn != nil {
		fn(me, true)
	}
	me.Areaspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Mediaobject struct {
	Mediaobject *TxsdMediaobject `xml:"http://docbook.org/ns/docbook mediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Mediaobject instance.
func (me *XsdGoPkgHasElem_Mediaobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Mediaobject
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSymbolClass xsdt.Token

//	Since TxsdSymbolClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSymbolClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdSymbolClass is "limit".
func (me TxsdSymbolClass) IsLimit() bool { return me == "limit" }

//	This convenience method just performs a simple type conversion to TxsdSymbolClass's alias type xsdt.Token.
func (me TxsdSymbolClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdSymbolClass is just a simple String type, this merely returns the current string value.
func (me TxsdSymbolClass) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Class_TxsdSymbolClass_ struct {
	Class TxsdSymbolClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdSymbol struct {
	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Class_TxsdSymbolClass_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdSymbol function is not nil (ie. was set by outside code), calls it with this TxsdSymbol instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdSymbol instance.
func (me *TxsdSymbol) Walk() {
	fn := WalkHandlers.TxsdSymbol
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Symbol struct {
	Symbols []*TxsdSymbol `xml:"http://docbook.org/ns/docbook symbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Symbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Symbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Symbol instance.
func (me *XsdGoPkgHasElems_Symbol) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Symbol
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Symbols {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Jobtitle struct {
	Jobtitles []*TxsdSurname `xml:"http://docbook.org/ns/docbook jobtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Jobtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Jobtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Jobtitle instance.
func (me *XsdGoPkgHasElems_Jobtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Jobtitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Jobtitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFilenameClass xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdFilenameClass's alias type xsdt.Token.
func (me TxsdFilenameClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdFilenameClass is "partition".
func (me TxsdFilenameClass) IsPartition() bool { return me == "partition" }

//	Since TxsdFilenameClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFilenameClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdFilenameClass is "directory".
func (me TxsdFilenameClass) IsDirectory() bool { return me == "directory" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "extension".
func (me TxsdFilenameClass) IsExtension() bool { return me == "extension" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "symlink".
func (me TxsdFilenameClass) IsSymlink() bool { return me == "symlink" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "libraryfile".
func (me TxsdFilenameClass) IsLibraryfile() bool { return me == "libraryfile" }

//	Returns true if the value of this enumerated TxsdFilenameClass is "headerfile".
func (me TxsdFilenameClass) IsHeaderfile() bool { return me == "headerfile" }

//	Since TxsdFilenameClass is just a simple String type, this merely returns the current string value.
func (me TxsdFilenameClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdFilenameClass is "devicefile".
func (me TxsdFilenameClass) IsDevicefile() bool { return me == "devicefile" }

type XsdGoPkgHasAttr_Class_TxsdFilenameClass_ struct {
	Class TxsdFilenameClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Path_XsdtString_ struct {
	Path xsdt.String `xml:"http://docbook.org/ns/docbook path,attr"`
}

type TxsdFilename struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Class_TxsdFilenameClass_

	XsdGoPkgHasAttr_Path_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdFilename function is not nil (ie. was set by outside code), calls it with this TxsdFilename instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdFilename instance.
func (me *TxsdFilename) Walk() {
	fn := WalkHandlers.TxsdFilename
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Filename struct {
	Filenames []*TxsdFilename `xml:"http://docbook.org/ns/docbook filename"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Filename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Filename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Filename instance.
func (me *XsdGoPkgHasElems_Filename) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Filename
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Filenames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Def_XsdtString_ struct {
	Def xsdt.String `xml:"http://docbook.org/ns/docbook def,attr"`
}

type TxsdNonterminal struct {
	XsdGoPkgHasAttr_Def_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdNonterminal function is not nil (ie. was set by outside code), calls it with this TxsdNonterminal instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdNonterminal instance.
func (me *TxsdNonterminal) Walk() {
	fn := WalkHandlers.TxsdNonterminal
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Nonterminal struct {
	Nonterminals []*TxsdNonterminal `xml:"http://docbook.org/ns/docbook nonterminal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nonterminal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nonterminal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nonterminal instance.
func (me *XsdGoPkgHasElems_Nonterminal) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Nonterminal
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Nonterminals {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFootnoteref struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Label_XsdtString_
}

//	If the WalkHandlers.TxsdFootnoteref function is not nil (ie. was set by outside code), calls it with this TxsdFootnoteref instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdFootnoteref instance.
func (me *TxsdFootnoteref) Walk() {
	fn := WalkHandlers.TxsdFootnoteref
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Footnoteref struct {
	Footnoterefs []*TxsdFootnoteref `xml:"http://docbook.org/ns/docbook footnoteref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Footnoteref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Footnoteref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Footnoteref instance.
func (me *XsdGoPkgHasElems_Footnoteref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Footnoteref
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Footnoterefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPrompt struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdPrompt function is not nil (ie. was set by outside code), calls it with this TxsdPrompt instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdPrompt instance.
func (me *TxsdPrompt) Walk() {
	fn := WalkHandlers.TxsdPrompt
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Prompt struct {
	Prompts []*TxsdPrompt `xml:"http://docbook.org/ns/docbook prompt"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Prompt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Prompt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Prompt instance.
func (me *XsdGoPkgHasElems_Prompt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Prompt
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Prompts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTagClass xsdt.Token

//	Returns true if the value of this enumerated TxsdTagClass is "emptytag".
func (me TxsdTagClass) IsEmptytag() bool { return me == "emptytag" }

//	Returns true if the value of this enumerated TxsdTagClass is "element".
func (me TxsdTagClass) IsElement() bool { return me == "element" }

//	Returns true if the value of this enumerated TxsdTagClass is "endtag".
func (me TxsdTagClass) IsEndtag() bool { return me == "endtag" }

//	Returns true if the value of this enumerated TxsdTagClass is "numcharref".
func (me TxsdTagClass) IsNumcharref() bool { return me == "numcharref" }

//	Returns true if the value of this enumerated TxsdTagClass is "attribute".
func (me TxsdTagClass) IsAttribute() bool { return me == "attribute" }

//	Returns true if the value of this enumerated TxsdTagClass is "comment".
func (me TxsdTagClass) IsComment() bool { return me == "comment" }

//	Returns true if the value of this enumerated TxsdTagClass is "paramentity".
func (me TxsdTagClass) IsParamentity() bool { return me == "paramentity" }

//	This convenience method just performs a simple type conversion to TxsdTagClass's alias type xsdt.Token.
func (me TxsdTagClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTagClass is "localname".
func (me TxsdTagClass) IsLocalname() bool { return me == "localname" }

//	Returns true if the value of this enumerated TxsdTagClass is "namespace".
func (me TxsdTagClass) IsNamespace() bool { return me == "namespace" }

//	Returns true if the value of this enumerated TxsdTagClass is "xmlpi".
func (me TxsdTagClass) IsXmlpi() bool { return me == "xmlpi" }

//	Returns true if the value of this enumerated TxsdTagClass is "pi".
func (me TxsdTagClass) IsPi() bool { return me == "pi" }

//	Since TxsdTagClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTagClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTagClass is "starttag".
func (me TxsdTagClass) IsStarttag() bool { return me == "starttag" }

//	Returns true if the value of this enumerated TxsdTagClass is "genentity".
func (me TxsdTagClass) IsGenentity() bool { return me == "genentity" }

//	Returns true if the value of this enumerated TxsdTagClass is "prefix".
func (me TxsdTagClass) IsPrefix() bool { return me == "prefix" }

//	Returns true if the value of this enumerated TxsdTagClass is "attvalue".
func (me TxsdTagClass) IsAttvalue() bool { return me == "attvalue" }

//	Since TxsdTagClass is just a simple String type, this merely returns the current string value.
func (me TxsdTagClass) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Class_TxsdTagClass_ struct {
	Class TxsdTagClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Namespace_XsdtString_ struct {
	Namespace xsdt.String `xml:"http://docbook.org/ns/docbook namespace,attr"`
}

type TxsdTag struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Class_TxsdTagClass_

	XsdGoPkgHasAttr_Namespace_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdTag function is not nil (ie. was set by outside code), calls it with this TxsdTag instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdTag instance.
func (me *TxsdTag) Walk() {
	fn := WalkHandlers.TxsdTag
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tag struct {
	Tags []*TxsdTag `xml:"http://docbook.org/ns/docbook tag"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tag instance.
func (me *XsdGoPkgHasElems_Tag) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tag
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tags {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Class_TxsdConstantClass_ struct {
	Class TxsdSymbolClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdConstant struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Class_TxsdConstantClass_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdConstant function is not nil (ie. was set by outside code), calls it with this TxsdConstant instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdConstant instance.
func (me *TxsdConstant) Walk() {
	fn := WalkHandlers.TxsdConstant
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Constant struct {
	Constants []*TxsdConstant `xml:"http://docbook.org/ns/docbook constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constant instance.
func (me *XsdGoPkgHasElems_Constant) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Constant
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Constants {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Token struct {
	Tokens []*TxsdSurname `xml:"http://docbook.org/ns/docbook token"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Token function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Token instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Token instance.
func (me *XsdGoPkgHasElems_Token) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Token
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tokens {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Command struct {
	Commands []*TxsdSurname `xml:"http://docbook.org/ns/docbook command"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Command function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Command instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Command instance.
func (me *XsdGoPkgHasElems_Command) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Command
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Commands {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Option struct {
	Options []*TxsdSurname `xml:"http://docbook.org/ns/docbook option"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Option instance.
func (me *XsdGoPkgHasElems_Option) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Option
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Options {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://docbook.org/ns/docbook type,attr"`
}

type TxsdUri struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor
}

//	If the WalkHandlers.TxsdUri function is not nil (ie. was set by outside code), calls it with this TxsdUri instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdUri instance.
func (me *TxsdUri) Walk() {
	fn := WalkHandlers.TxsdUri
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Uri struct {
	Uris []*TxsdUri `xml:"http://docbook.org/ns/docbook uri"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Uri function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Uri instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Uri instance.
func (me *XsdGoPkgHasElems_Uri) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Uri
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Uris {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Optional struct {
	Optionals []*TxsdSurname `xml:"http://docbook.org/ns/docbook optional"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Optional function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Optional instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Optional instance.
func (me *XsdGoPkgHasElems_Optional) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Optional
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Optionals {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSystemitemClass xsdt.Token

//	Returns true if the value of this enumerated TxsdSystemitemClass is "protocol".
func (me TxsdSystemitemClass) IsProtocol() bool { return me == "protocol" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "domainname".
func (me TxsdSystemitemClass) IsDomainname() bool { return me == "domainname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "server".
func (me TxsdSystemitemClass) IsServer() bool { return me == "server" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "resource".
func (me TxsdSystemitemClass) IsResource() bool { return me == "resource" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "library".
func (me TxsdSystemitemClass) IsLibrary() bool { return me == "library" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "osname".
func (me TxsdSystemitemClass) IsOsname() bool { return me == "osname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "etheraddress".
func (me TxsdSystemitemClass) IsEtheraddress() bool { return me == "etheraddress" }

//	Since TxsdSystemitemClass is just a simple String type, this merely returns the current string value.
func (me TxsdSystemitemClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "username".
func (me TxsdSystemitemClass) IsUsername() bool { return me == "username" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "process".
func (me TxsdSystemitemClass) IsProcess() bool { return me == "process" }

//	Since TxsdSystemitemClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSystemitemClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "service".
func (me TxsdSystemitemClass) IsService() bool { return me == "service" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "fqdomainname".
func (me TxsdSystemitemClass) IsFqdomainname() bool { return me == "fqdomainname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "filesystem".
func (me TxsdSystemitemClass) IsFilesystem() bool { return me == "filesystem" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "daemon".
func (me TxsdSystemitemClass) IsDaemon() bool { return me == "daemon" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "eventhandler".
func (me TxsdSystemitemClass) IsEventhandler() bool { return me == "eventhandler" }

//	This convenience method just performs a simple type conversion to TxsdSystemitemClass's alias type xsdt.Token.
func (me TxsdSystemitemClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "newsgroup".
func (me TxsdSystemitemClass) IsNewsgroup() bool { return me == "newsgroup" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "netmask".
func (me TxsdSystemitemClass) IsNetmask() bool { return me == "netmask" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "ipaddress".
func (me TxsdSystemitemClass) IsIpaddress() bool { return me == "ipaddress" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "groupname".
func (me TxsdSystemitemClass) IsGroupname() bool { return me == "groupname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "event".
func (me TxsdSystemitemClass) IsEvent() bool { return me == "event" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "systemname".
func (me TxsdSystemitemClass) IsSystemname() bool { return me == "systemname" }

//	Returns true if the value of this enumerated TxsdSystemitemClass is "macro".
func (me TxsdSystemitemClass) IsMacro() bool { return me == "macro" }

type XsdGoPkgHasAttr_Class_TxsdSystemitemClass_ struct {
	Class TxsdSystemitemClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdSystemitem struct {
	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Class_TxsdSystemitemClass_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdSystemitem function is not nil (ie. was set by outside code), calls it with this TxsdSystemitem instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TxsdSystemitem instance.
func (me *TxsdSystemitem) Walk() {
	fn := WalkHandlers.TxsdSystemitem
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Systemitem struct {
	Systemitems []*TxsdSystemitem `xml:"http://docbook.org/ns/docbook systemitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Systemitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Systemitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Systemitem instance.
func (me *XsdGoPkgHasElems_Systemitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Systemitem
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Systemitems {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Markup struct {
	Markups []*TxsdSurname `xml:"http://docbook.org/ns/docbook markup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Markup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Markup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Markup instance.
func (me *XsdGoPkgHasElems_Markup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Markup
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Markups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdComputeroutput struct {
	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdComputeroutput function is not nil (ie. was set by outside code), calls it with this TxsdComputeroutput instance as the single argument. Then calls the Walk() method on 26/41 embed(s) and 0/0 field(s) belonging to this TxsdComputeroutput instance.
func (me *TxsdComputeroutput) Walk() {
	fn := WalkHandlers.TxsdComputeroutput
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Computeroutput struct {
	Computeroutputs []*TxsdComputeroutput `xml:"http://docbook.org/ns/docbook computeroutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Computeroutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Computeroutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Computeroutput instance.
func (me *XsdGoPkgHasElems_Computeroutput) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Computeroutput
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Computeroutputs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdUserinput struct {
	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Option

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Parameter
}

//	If the WalkHandlers.TxsdUserinput function is not nil (ie. was set by outside code), calls it with this TxsdUserinput instance as the single argument. Then calls the Walk() method on 40/55 embed(s) and 0/0 field(s) belonging to this TxsdUserinput instance.
func (me *TxsdUserinput) Walk() {
	fn := WalkHandlers.TxsdUserinput
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Userinput struct {
	Userinputs []*TxsdUserinput `xml:"http://docbook.org/ns/docbook userinput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Userinput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Userinput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Userinput instance.
func (me *XsdGoPkgHasElems_Userinput) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Userinput
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Userinputs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Coref struct {
	Corefs []*TxsdFootnoteref `xml:"http://docbook.org/ns/docbook coref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Coref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Coref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Coref instance.
func (me *XsdGoPkgHasElems_Coref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Coref
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Corefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Contrib struct {
	Contribs []*TxsdSurname `xml:"http://docbook.org/ns/docbook contrib"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contrib function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contrib instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contrib instance.
func (me *XsdGoPkgHasElems_Contrib) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Contrib
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Contribs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Personname struct {
	Personname *TxsdPersonname `xml:"http://docbook.org/ns/docbook personname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Personname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Personname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Personname instance.
func (me *XsdGoPkgHasElem_Personname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Personname
	if fn != nil {
		fn(me, true)
	}
	me.Personname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Postcode struct {
	Postcodes []*TxsdSurname `xml:"http://docbook.org/ns/docbook postcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Postcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Postcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Postcode instance.
func (me *XsdGoPkgHasElems_Postcode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Postcode
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Postcodes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Country struct {
	Countries []*TxsdSurname `xml:"http://docbook.org/ns/docbook country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Country instance.
func (me *XsdGoPkgHasElems_Country) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Country
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Countries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_State struct {
	States []*TxsdSurname `xml:"http://docbook.org/ns/docbook state"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_State instance.
func (me *XsdGoPkgHasElems_State) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_State
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.States {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Otheraddr struct {
	Otheraddrs []*TxsdSurname `xml:"http://docbook.org/ns/docbook otheraddr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Otheraddr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Otheraddr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Otheraddr instance.
func (me *XsdGoPkgHasElems_Otheraddr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Otheraddr
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Otheraddrs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Phone struct {
	Phones []*TxsdSurname `xml:"http://docbook.org/ns/docbook phone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Phone instance.
func (me *XsdGoPkgHasElems_Phone) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Phone
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Phones {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_City struct {
	Cities []*TxsdSurname `xml:"http://docbook.org/ns/docbook city"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_City instance.
func (me *XsdGoPkgHasElems_City) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_City
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cities {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAddressLinenumbering xsdt.Token

//	Since TxsdAddressLinenumbering is just a simple String type, this merely returns the current string value.
func (me TxsdAddressLinenumbering) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdAddressLinenumbering is "numbered".
func (me TxsdAddressLinenumbering) IsNumbered() bool { return me == "numbered" }

//	This convenience method just performs a simple type conversion to TxsdAddressLinenumbering's alias type xsdt.Token.
func (me TxsdAddressLinenumbering) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdAddressLinenumbering is "unnumbered".
func (me TxsdAddressLinenumbering) IsUnnumbered() bool { return me == "unnumbered" }

//	Since TxsdAddressLinenumbering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAddressLinenumbering) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Linenumbering_TxsdAddressLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdAddressContinuation xsdt.Token

//	Since TxsdAddressContinuation is just a simple String type, this merely returns the current string value.
func (me TxsdAddressContinuation) String() string { return xsdt.Token(me).String() }

//	Since TxsdAddressContinuation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAddressContinuation) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdAddressContinuation's alias type xsdt.Token.
func (me TxsdAddressContinuation) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdAddressContinuation is "restarts".
func (me TxsdAddressContinuation) IsRestarts() bool { return me == "restarts" }

//	Returns true if the value of this enumerated TxsdAddressContinuation is "continues".
func (me TxsdAddressContinuation) IsContinues() bool { return me == "continues" }

type XsdGoPkgHasAttr_Continuation_TxsdAddressContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasElems_Street struct {
	Streets []*TxsdSurname `xml:"http://docbook.org/ns/docbook street"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Street function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Street instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Street instance.
func (me *XsdGoPkgHasElems_Street) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Street
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Streets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_ struct {
	Startinglinenumber xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook startinglinenumber,attr"`
}

type XsdGoPkgHasElems_Pob struct {
	Pobs []*TxsdSurname `xml:"http://docbook.org/ns/docbook pob"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pob function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pob instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pob instance.
func (me *XsdGoPkgHasElems_Pob) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Pob
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Pobs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []*TxsdSurname `xml:"http://docbook.org/ns/docbook fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Fax
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Faxs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAddress struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Otheraddr

	XsdGoPkgHasElems_Phone

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_City

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Linenumbering_TxsdAddressLinenumbering_

	XsdGoPkgHasAttr_Continuation_TxsdAddressContinuation_

	XsdGoPkgHasElems_Street

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Pob

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Fax

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Postcode

	XsdGoPkgHasElems_Country

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_State
}

//	If the WalkHandlers.TxsdAddress function is not nil (ie. was set by outside code), calls it with this TxsdAddress instance as the single argument. Then calls the Walk() method on 17/35 embed(s) and 0/0 field(s) belonging to this TxsdAddress instance.
func (me *TxsdAddress) Walk() {
	fn := WalkHandlers.TxsdAddress
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Pob.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Fax.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Postcode.Walk()
	me.XsdGoPkgHasElems_Country.Walk()
	me.XsdGoPkgHasElems_State.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Otheraddr.Walk()
	me.XsdGoPkgHasElems_Phone.Walk()
	me.XsdGoPkgHasElems_City.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Street.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TxsdAddress `xml:"http://docbook.org/ns/docbook address"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Address
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Addresses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOrgnameClass xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdOrgnameClass's alias type xsdt.Token.
func (me TxsdOrgnameClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "informal".
func (me TxsdOrgnameClass) IsInformal() bool { return me == "informal" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "corporation".
func (me TxsdOrgnameClass) IsCorporation() bool { return me == "corporation" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "nonprofit".
func (me TxsdOrgnameClass) IsNonprofit() bool { return me == "nonprofit" }

//	Since TxsdOrgnameClass is just a simple String type, this merely returns the current string value.
func (me TxsdOrgnameClass) String() string { return xsdt.Token(me).String() }

//	Since TxsdOrgnameClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrgnameClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "other".
func (me TxsdOrgnameClass) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdOrgnameClass is "consortium".
func (me TxsdOrgnameClass) IsConsortium() bool { return me == "consortium" }

type XsdGoPkgHasAttr_Class_TxsdOrgnameClass_ struct {
	Class TxsdOrgnameClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Otherclass_XsdtString_ struct {
	Otherclass xsdt.String `xml:"http://docbook.org/ns/docbook otherclass,attr"`
}

type TxsdOrgname struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Class_TxsdOrgnameClass_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Otherclass_XsdtString_

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor
}

//	If the WalkHandlers.TxsdOrgname function is not nil (ie. was set by outside code), calls it with this TxsdOrgname instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdOrgname instance.
func (me *TxsdOrgname) Walk() {
	fn := WalkHandlers.TxsdOrgname
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Orgname struct {
	Orgname *TxsdOrgname `xml:"http://docbook.org/ns/docbook orgname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orgname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orgname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orgname instance.
func (me *XsdGoPkgHasElem_Orgname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Orgname
	if fn != nil {
		fn(me, true)
	}
	me.Orgname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAuthor struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Email

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Contrib
}

//	If the WalkHandlers.TxsdAuthor function is not nil (ie. was set by outside code), calls it with this TxsdAuthor instance as the single argument. Then calls the Walk() method on 6/12 embed(s) and 0/0 field(s) belonging to this TxsdAuthor instance.
func (me *TxsdAuthor) Walk() {
	fn := WalkHandlers.TxsdAuthor
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Contrib.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElem_Orgname.Walk()
	me.XsdGoPkgHasElem_Personname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Author struct {
	Authors []*TxsdAuthor `xml:"http://docbook.org/ns/docbook author"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Author instance.
func (me *XsdGoPkgHasElems_Author) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Author
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Authors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Hardware struct {
	Hardwares []*TxsdSurname `xml:"http://docbook.org/ns/docbook hardware"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Hardware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Hardware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Hardware instance.
func (me *XsdGoPkgHasElems_Hardware) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Hardware
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Hardwares {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Productnumber struct {
	Productnumbers []*TxsdSurname `xml:"http://docbook.org/ns/docbook productnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productnumber instance.
func (me *XsdGoPkgHasElems_Productnumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Productnumber
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Productnumbers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdDatabaseClass xsdt.Token

//	Returns true if the value of this enumerated TxsdDatabaseClass is "table".
func (me TxsdDatabaseClass) IsTable() bool { return me == "table" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "user".
func (me TxsdDatabaseClass) IsUser() bool { return me == "user" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "datatype".
func (me TxsdDatabaseClass) IsDatatype() bool { return me == "datatype" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "view".
func (me TxsdDatabaseClass) IsView() bool { return me == "view" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "record".
func (me TxsdDatabaseClass) IsRecord() bool { return me == "record" }

//	Since TxsdDatabaseClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDatabaseClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "index".
func (me TxsdDatabaseClass) IsIndex() bool { return me == "index" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "foreignkey".
func (me TxsdDatabaseClass) IsForeignkey() bool { return me == "foreignkey" }

//	This convenience method just performs a simple type conversion to TxsdDatabaseClass's alias type xsdt.Token.
func (me TxsdDatabaseClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "key2".
func (me TxsdDatabaseClass) IsKey2() bool { return me == "key2" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "primarykey".
func (me TxsdDatabaseClass) IsPrimarykey() bool { return me == "primarykey" }

//	Since TxsdDatabaseClass is just a simple String type, this merely returns the current string value.
func (me TxsdDatabaseClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "altkey".
func (me TxsdDatabaseClass) IsAltkey() bool { return me == "altkey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "rule".
func (me TxsdDatabaseClass) IsRule() bool { return me == "rule" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "name".
func (me TxsdDatabaseClass) IsName() bool { return me == "name" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "secondarykey".
func (me TxsdDatabaseClass) IsSecondarykey() bool { return me == "secondarykey" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "key1".
func (me TxsdDatabaseClass) IsKey1() bool { return me == "key1" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "constraint".
func (me TxsdDatabaseClass) IsConstraint() bool { return me == "constraint" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "field".
func (me TxsdDatabaseClass) IsField() bool { return me == "field" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "group".
func (me TxsdDatabaseClass) IsGroup() bool { return me == "group" }

//	Returns true if the value of this enumerated TxsdDatabaseClass is "procedure".
func (me TxsdDatabaseClass) IsProcedure() bool { return me == "procedure" }

type XsdGoPkgHasAttr_Class_TxsdDatabaseClass_ struct {
	Class TxsdDatabaseClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdDatabase struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Class_TxsdDatabaseClass_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdDatabase function is not nil (ie. was set by outside code), calls it with this TxsdDatabase instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdDatabase instance.
func (me *TxsdDatabase) Walk() {
	fn := WalkHandlers.TxsdDatabase
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Database struct {
	Databases []*TxsdDatabase `xml:"http://docbook.org/ns/docbook database"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Database function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Database instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Database instance.
func (me *XsdGoPkgHasElems_Database) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Database
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Databases {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Orgname struct {
	Orgnames []*TxsdOrgname `xml:"http://docbook.org/ns/docbook orgname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orgname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orgname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orgname instance.
func (me *XsdGoPkgHasElems_Orgname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Orgname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Orgnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Errortype struct {
	Errortypes []*TxsdSurname `xml:"http://docbook.org/ns/docbook errortype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errortype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errortype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errortype instance.
func (me *XsdGoPkgHasElems_Errortype) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Errortype
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Errortypes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTrademarkClass xsdt.Token

//	Returns true if the value of this enumerated TxsdTrademarkClass is "registered".
func (me TxsdTrademarkClass) IsRegistered() bool { return me == "registered" }

//	Since TxsdTrademarkClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTrademarkClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "service".
func (me TxsdTrademarkClass) IsService() bool { return me == "service" }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "copyright".
func (me TxsdTrademarkClass) IsCopyright() bool { return me == "copyright" }

//	This convenience method just performs a simple type conversion to TxsdTrademarkClass's alias type xsdt.Token.
func (me TxsdTrademarkClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdTrademarkClass is just a simple String type, this merely returns the current string value.
func (me TxsdTrademarkClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTrademarkClass is "trade".
func (me TxsdTrademarkClass) IsTrade() bool { return me == "trade" }

type XsdGoPkgHasAttr_Class_TxsdTrademarkClass_ struct {
	Class TxsdTrademarkClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdTrademark struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Class_TxsdTrademarkClass_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Link
}

//	If the WalkHandlers.TxsdTrademark function is not nil (ie. was set by outside code), calls it with this TxsdTrademark instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdTrademark instance.
func (me *TxsdTrademark) Walk() {
	fn := WalkHandlers.TxsdTrademark
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Trademark struct {
	Trademarks []*TxsdTrademark `xml:"http://docbook.org/ns/docbook trademark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Trademark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Trademark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Trademark instance.
func (me *XsdGoPkgHasElems_Trademark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Trademark
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Trademarks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAcronym struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdAcronym function is not nil (ie. was set by outside code), calls it with this TxsdAcronym instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TxsdAcronym instance.
func (me *TxsdAcronym) Walk() {
	fn := WalkHandlers.TxsdAcronym
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Acronym struct {
	Acronyms []*TxsdAcronym `xml:"http://docbook.org/ns/docbook acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Acronym instance.
func (me *XsdGoPkgHasElems_Acronym) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Acronym
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Acronyms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Errortext struct {
	Errortexts []*TxsdSurname `xml:"http://docbook.org/ns/docbook errortext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errortext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errortext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errortext instance.
func (me *XsdGoPkgHasElems_Errortext) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Errortext
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Errortexts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdDate struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdDate function is not nil (ie. was set by outside code), calls it with this TxsdDate instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdDate instance.
func (me *TxsdDate) Walk() {
	fn := WalkHandlers.TxsdDate
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Date struct {
	Dates []*TxsdDate `xml:"http://docbook.org/ns/docbook date"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Date instance.
func (me *XsdGoPkgHasElems_Date) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Date
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Dates {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOrg struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdOrg function is not nil (ie. was set by outside code), calls it with this TxsdOrg instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdOrg instance.
func (me *TxsdOrg) Walk() {
	fn := WalkHandlers.TxsdOrg
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElem_Orgname.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Org struct {
	Orgs []*TxsdOrg `xml:"http://docbook.org/ns/docbook org"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Org function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Org instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Org instance.
func (me *XsdGoPkgHasElems_Org) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Org
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Orgs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCitebiblioidClass xsdt.Token

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "uri".
func (me TxsdCitebiblioidClass) IsUri() bool { return me == "uri" }

//	Since TxsdCitebiblioidClass is just a simple String type, this merely returns the current string value.
func (me TxsdCitebiblioidClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "issn".
func (me TxsdCitebiblioidClass) IsIssn() bool { return me == "issn" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "doi".
func (me TxsdCitebiblioidClass) IsDoi() bool { return me == "doi" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "pubsnumber".
func (me TxsdCitebiblioidClass) IsPubsnumber() bool { return me == "pubsnumber" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "isrn".
func (me TxsdCitebiblioidClass) IsIsrn() bool { return me == "isrn" }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "libraryofcongress".
func (me TxsdCitebiblioidClass) IsLibraryofcongress() bool { return me == "libraryofcongress" }

//	This convenience method just performs a simple type conversion to TxsdCitebiblioidClass's alias type xsdt.Token.
func (me TxsdCitebiblioidClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "other".
func (me TxsdCitebiblioidClass) IsOther() bool { return me == "other" }

//	Since TxsdCitebiblioidClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCitebiblioidClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdCitebiblioidClass is "isbn".
func (me TxsdCitebiblioidClass) IsIsbn() bool { return me == "isbn" }

type XsdGoPkgHasAttr_Class_TxsdCitebiblioidClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_ struct {
	Otherclass xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherclass,attr"`
}

type TxsdCitebiblioid struct {
	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Class_TxsdCitebiblioidClass_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdCitebiblioid function is not nil (ie. was set by outside code), calls it with this TxsdCitebiblioid instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdCitebiblioid instance.
func (me *TxsdCitebiblioid) Walk() {
	fn := WalkHandlers.TxsdCitebiblioid
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Citebiblioid struct {
	Citebiblioids []*TxsdCitebiblioid `xml:"http://docbook.org/ns/docbook citebiblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citebiblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citebiblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citebiblioid instance.
func (me *XsdGoPkgHasElems_Citebiblioid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Citebiblioid
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Citebiblioids {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Baseform_XsdtString_ struct {
	Baseform xsdt.String `xml:"http://docbook.org/ns/docbook baseform,attr"`
}

type TxsdApplicationClass xsdt.Token

//	Returns true if the value of this enumerated TxsdApplicationClass is "software".
func (me TxsdApplicationClass) IsSoftware() bool { return me == "software" }

//	This convenience method just performs a simple type conversion to TxsdApplicationClass's alias type xsdt.Token.
func (me TxsdApplicationClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdApplicationClass is "hardware".
func (me TxsdApplicationClass) IsHardware() bool { return me == "hardware" }

//	Since TxsdApplicationClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdApplicationClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdApplicationClass is just a simple String type, this merely returns the current string value.
func (me TxsdApplicationClass) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Class_TxsdApplicationClass_ struct {
	Class TxsdApplicationClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdApplication struct {
	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Class_TxsdApplicationClass_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdApplication function is not nil (ie. was set by outside code), calls it with this TxsdApplication instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdApplication instance.
func (me *TxsdApplication) Walk() {
	fn := WalkHandlers.TxsdApplication
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Application struct {
	Applications []*TxsdApplication `xml:"http://docbook.org/ns/docbook application"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Application instance.
func (me *XsdGoPkgHasElems_Application) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Application
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Applications {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Abbrev struct {
	Abbrevs []*TxsdAcronym `xml:"http://docbook.org/ns/docbook abbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abbrev instance.
func (me *XsdGoPkgHasElems_Abbrev) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Abbrev
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Abbrevs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGlossterm struct {
	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Olink
}

//	If the WalkHandlers.TxsdGlossterm function is not nil (ie. was set by outside code), calls it with this TxsdGlossterm instance as the single argument. Then calls the Walk() method on 73/103 embed(s) and 0/0 field(s) belonging to this TxsdGlossterm instance.
func (me *TxsdGlossterm) Walk() {
	fn := WalkHandlers.TxsdGlossterm
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossterm struct {
	Glossterms []*TxsdGlossterm `xml:"http://docbook.org/ns/docbook glossterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossterm instance.
func (me *XsdGoPkgHasElems_Glossterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossterm
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossterms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCitetitlePubwork xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdCitetitlePubwork's alias type xsdt.Token.
func (me TxsdCitetitlePubwork) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdCitetitlePubwork is just a simple String type, this merely returns the current string value.
func (me TxsdCitetitlePubwork) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "emailmessage".
func (me TxsdCitetitlePubwork) IsEmailmessage() bool { return me == "emailmessage" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "journal".
func (me TxsdCitetitlePubwork) IsJournal() bool { return me == "journal" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "article".
func (me TxsdCitetitlePubwork) IsArticle() bool { return me == "article" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "chapter".
func (me TxsdCitetitlePubwork) IsChapter() bool { return me == "chapter" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "set".
func (me TxsdCitetitlePubwork) IsSet() bool { return me == "set" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "refentry".
func (me TxsdCitetitlePubwork) IsRefentry() bool { return me == "refentry" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "webpage".
func (me TxsdCitetitlePubwork) IsWebpage() bool { return me == "webpage" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "cdrom".
func (me TxsdCitetitlePubwork) IsCdrom() bool { return me == "cdrom" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "manuscript".
func (me TxsdCitetitlePubwork) IsManuscript() bool { return me == "manuscript" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "newsposting".
func (me TxsdCitetitlePubwork) IsNewsposting() bool { return me == "newsposting" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "section".
func (me TxsdCitetitlePubwork) IsSection() bool { return me == "section" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "wiki".
func (me TxsdCitetitlePubwork) IsWiki() bool { return me == "wiki" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "book".
func (me TxsdCitetitlePubwork) IsBook() bool { return me == "book" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "dvd".
func (me TxsdCitetitlePubwork) IsDvd() bool { return me == "dvd" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "part".
func (me TxsdCitetitlePubwork) IsPart() bool { return me == "part" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "bbs".
func (me TxsdCitetitlePubwork) IsBbs() bool { return me == "bbs" }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "series".
func (me TxsdCitetitlePubwork) IsSeries() bool { return me == "series" }

//	Since TxsdCitetitlePubwork is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCitetitlePubwork) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdCitetitlePubwork is "gopher".
func (me TxsdCitetitlePubwork) IsGopher() bool { return me == "gopher" }

type XsdGoPkgHasAttr_Pubwork_TxsdCitetitlePubwork_ struct {
	Pubwork TxsdCitetitlePubwork `xml:"http://docbook.org/ns/docbook pubwork,attr"`
}

type TxsdCitetitle struct {
	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasAttr_Pubwork_TxsdCitetitlePubwork_

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Org
}

//	If the WalkHandlers.TxsdCitetitle function is not nil (ie. was set by outside code), calls it with this TxsdCitetitle instance as the single argument. Then calls the Walk() method on 74/103 embed(s) and 0/0 field(s) belonging to this TxsdCitetitle instance.
func (me *TxsdCitetitle) Walk() {
	fn := WalkHandlers.TxsdCitetitle
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Citetitle struct {
	Citetitles []*TxsdCitetitle `xml:"http://docbook.org/ns/docbook citetitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citetitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citetitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citetitle instance.
func (me *XsdGoPkgHasElems_Citetitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Citetitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Citetitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdQuote struct {
	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdQuote function is not nil (ie. was set by outside code), calls it with this TxsdQuote instance as the single argument. Then calls the Walk() method on 75/102 embed(s) and 0/0 field(s) belonging to this TxsdQuote instance.
func (me *TxsdQuote) Walk() {
	fn := WalkHandlers.TxsdQuote
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Quote struct {
	Quotes []*TxsdQuote `xml:"http://docbook.org/ns/docbook quote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Quote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Quote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Quote instance.
func (me *XsdGoPkgHasElems_Quote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Quote
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Quotes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCitation struct {
	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Application
}

//	If the WalkHandlers.TxsdCitation function is not nil (ie. was set by outside code), calls it with this TxsdCitation instance as the single argument. Then calls the Walk() method on 76/102 embed(s) and 0/0 field(s) belonging to this TxsdCitation instance.
func (me *TxsdCitation) Walk() {
	fn := WalkHandlers.TxsdCitation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Citation struct {
	Citations []*TxsdCitation `xml:"http://docbook.org/ns/docbook citation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citation instance.
func (me *XsdGoPkgHasElems_Citation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Citation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Citations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOrgdiv struct {
	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guiicon
}

//	If the WalkHandlers.TxsdOrgdiv function is not nil (ie. was set by outside code), calls it with this TxsdOrgdiv instance as the single argument. Then calls the Walk() method on 77/102 embed(s) and 0/0 field(s) belonging to this TxsdOrgdiv instance.
func (me *TxsdOrgdiv) Walk() {
	fn := WalkHandlers.TxsdOrgdiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Orgdiv struct {
	Orgdivs []*TxsdOrgdiv `xml:"http://docbook.org/ns/docbook orgdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orgdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orgdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orgdiv instance.
func (me *XsdGoPkgHasElems_Orgdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Orgdiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Orgdivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Shortaffil struct {
	Shortaffil *TxsdSurname `xml:"http://docbook.org/ns/docbook shortaffil"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Shortaffil function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shortaffil instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Shortaffil instance.
func (me *XsdGoPkgHasElem_Shortaffil) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Shortaffil
	if fn != nil {
		fn(me, true)
	}
	me.Shortaffil.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Org struct {
	Org *TxsdOrg `xml:"http://docbook.org/ns/docbook org"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Org function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Org instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Org instance.
func (me *XsdGoPkgHasElem_Org) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Org
	if fn != nil {
		fn(me, true)
	}
	me.Org.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAffiliation struct {
	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasElem_Shortaffil

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Org
}

//	If the WalkHandlers.TxsdAffiliation function is not nil (ie. was set by outside code), calls it with this TxsdAffiliation instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdAffiliation instance.
func (me *TxsdAffiliation) Walk() {
	fn := WalkHandlers.TxsdAffiliation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Orgdiv.Walk()
	me.XsdGoPkgHasElem_Shortaffil.Walk()
	me.XsdGoPkgHasElem_Org.Walk()
	me.XsdGoPkgHasElem_Orgname.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Affiliation struct {
	Affiliations []*TxsdAffiliation `xml:"http://docbook.org/ns/docbook affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Affiliation instance.
func (me *XsdGoPkgHasElems_Affiliation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Affiliation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Affiliations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdEditor struct {
	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Contrib

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasElems_Uri
}

//	If the WalkHandlers.TxsdEditor function is not nil (ie. was set by outside code), calls it with this TxsdEditor instance as the single argument. Then calls the Walk() method on 8/12 embed(s) and 0/0 field(s) belonging to this TxsdEditor instance.
func (me *TxsdEditor) Walk() {
	fn := WalkHandlers.TxsdEditor
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Contrib.Walk()
	me.XsdGoPkgHasElem_Personname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElem_Orgname.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Affiliation.Walk()
	me.XsdGoPkgHasElems_Orgdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Editor struct {
	Editors []*TxsdEditor `xml:"http://docbook.org/ns/docbook editor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Editor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Editor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Editor instance.
func (me *XsdGoPkgHasElems_Editor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Editor
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Editors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSubtitle struct {
	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Author

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdSubtitle function is not nil (ie. was set by outside code), calls it with this TxsdSubtitle instance as the single argument. Then calls the Walk() method on 78/102 embed(s) and 0/0 field(s) belonging to this TxsdSubtitle instance.
func (me *TxsdSubtitle) Walk() {
	fn := WalkHandlers.TxsdSubtitle
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Subtitle struct {
	Subtitles []*TxsdSubtitle `xml:"http://docbook.org/ns/docbook subtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subtitle instance.
func (me *XsdGoPkgHasElems_Subtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Subtitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Subtitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Title struct {
	Titles []*TxsdTitle `xml:"http://docbook.org/ns/docbook title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Title instance.
func (me *XsdGoPkgHasElems_Title) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Title
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdScreenshot struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Mediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subtitle
}

//	If the WalkHandlers.TxsdScreenshot function is not nil (ie. was set by outside code), calls it with this TxsdScreenshot instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdScreenshot instance.
func (me *TxsdScreenshot) Walk() {
	fn := WalkHandlers.TxsdScreenshot
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Screenshot struct {
	Screenshots []*TxsdScreenshot `xml:"http://docbook.org/ns/docbook screenshot"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screenshot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screenshot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screenshot instance.
func (me *XsdGoPkgHasElems_Screenshot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Screenshot
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Screenshots {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Width_XsdtNmtoken_ struct {
	Width xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook width,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdProgramlistingContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasElems_Info struct {
	Infos []*TxsdInfo `xml:"http://docbook.org/ns/docbook info"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Info function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Info instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Info instance.
func (me *XsdGoPkgHasElems_Info) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Info
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Linenumbering_TxsdProgramlistingLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type XsdGoPkgHasElems_Lineannotation struct {
	Lineannotations []*TxsdSurname `xml:"http://docbook.org/ns/docbook lineannotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lineannotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lineannotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lineannotation instance.
func (me *XsdGoPkgHasElems_Lineannotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Lineannotation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Lineannotations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Encoding_XsdtString_ struct {
	Encoding xsdt.String `xml:"http://docbook.org/ns/docbook encoding,attr"`
}

type XsdGoPkgHasAttr_Fileref_XsdtString_ struct {
	Fileref xsdt.String `xml:"http://docbook.org/ns/docbook fileref,attr"`
}

type TxsdTextdata struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Encoding_XsdtString_
}

//	If the WalkHandlers.TxsdTextdata function is not nil (ie. was set by outside code), calls it with this TxsdTextdata instance as the single argument. Then calls the Walk() method on 0/7 embed(s) and 0/0 field(s) belonging to this TxsdTextdata instance.
func (me *TxsdTextdata) Walk() {
	fn := WalkHandlers.TxsdTextdata
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Textdata struct {
	Textdata *TxsdTextdata `xml:"http://docbook.org/ns/docbook textdata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Textdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Textdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Textdata instance.
func (me *XsdGoPkgHasElem_Textdata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Textdata
	if fn != nil {
		fn(me, true)
	}
	me.Textdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Programlisting struct {
	Programlistings []*TxsdProgramlisting `xml:"http://docbook.org/ns/docbook programlisting"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Programlisting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Programlisting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Programlisting instance.
func (me *XsdGoPkgHasElems_Programlisting) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Programlisting
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAttribution struct {
	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Person

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdAttribution function is not nil (ie. was set by outside code), calls it with this TxsdAttribution instance as the single argument. Then calls the Walk() method on 8/22 embed(s) and 0/0 field(s) belonging to this TxsdAttribution instance.
func (me *TxsdAttribution) Walk() {
	fn := WalkHandlers.TxsdAttribution
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Attribution struct {
	Attribution *TxsdAttribution `xml:"http://docbook.org/ns/docbook attribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Attribution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Attribution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Attribution instance.
func (me *XsdGoPkgHasElem_Attribution) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Attribution
	if fn != nil {
		fn(me, true)
	}
	me.Attribution.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Type struct {
	Type *TxsdSurname `xml:"http://docbook.org/ns/docbook type"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Type function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Type instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Type instance.
func (me *XsdGoPkgHasElem_Type) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Type
	if fn != nil {
		fn(me, true)
	}
	me.Type.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Initializer struct {
	Initializer *TxsdSurname `xml:"http://docbook.org/ns/docbook initializer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Initializer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Initializer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Initializer instance.
func (me *XsdGoPkgHasElem_Initializer) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Initializer
	if fn != nil {
		fn(me, true)
	}
	me.Initializer.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Varname struct {
	Varname *TxsdSurname `xml:"http://docbook.org/ns/docbook varname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varname instance.
func (me *XsdGoPkgHasElem_Varname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Varname
	if fn != nil {
		fn(me, true)
	}
	me.Varname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFieldsynopsis struct {
	XsdGoPkgHasElem_Varname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElem_Type

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElem_Initializer
}

//	If the WalkHandlers.TxsdFieldsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdFieldsynopsis instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdFieldsynopsis instance.
func (me *TxsdFieldsynopsis) Walk() {
	fn := WalkHandlers.TxsdFieldsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Type.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElem_Initializer.Walk()
	me.XsdGoPkgHasElem_Varname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Fieldsynopsis struct {
	Fieldsynopsises []*TxsdFieldsynopsis `xml:"http://docbook.org/ns/docbook fieldsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fieldsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fieldsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fieldsynopsis instance.
func (me *XsdGoPkgHasElems_Fieldsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Fieldsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Fieldsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Funcparams struct {
	Funcparamses []*TxsdSurname `xml:"http://docbook.org/ns/docbook funcparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcparams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcparams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcparams instance.
func (me *XsdGoPkgHasElems_Funcparams) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Funcparams
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Funcparamses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdParamdefChoice xsdt.Token

//	Since TxsdParamdefChoice is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdParamdefChoice) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdParamdefChoice's alias type xsdt.Token.
func (me TxsdParamdefChoice) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdParamdefChoice is just a simple String type, this merely returns the current string value.
func (me TxsdParamdefChoice) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdParamdefChoice is "opt".
func (me TxsdParamdefChoice) IsOpt() bool { return me == "opt" }

//	Returns true if the value of this enumerated TxsdParamdefChoice is "req".
func (me TxsdParamdefChoice) IsReq() bool { return me == "req" }

type XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt struct {
	Choice TxsdParamdefChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt) ChoiceDefault() TxsdParamdefChoice {
	return TxsdParamdefChoice("opt")
}

type TxsdParamdef struct {
	XsdGoPkgHasAttr_Choice_TxsdParamdefChoice_Opt

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Funcparams

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Parameter
}

//	If the WalkHandlers.TxsdParamdef function is not nil (ie. was set by outside code), calls it with this TxsdParamdef instance as the single argument. Then calls the Walk() method on 9/23 embed(s) and 0/0 field(s) belonging to this TxsdParamdef instance.
func (me *TxsdParamdef) Walk() {
	fn := WalkHandlers.TxsdParamdef
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Funcparams.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Paramdef struct {
	Paramdefs []*TxsdParamdef `xml:"http://docbook.org/ns/docbook paramdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Paramdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Paramdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Paramdef instance.
func (me *XsdGoPkgHasElems_Paramdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Paramdef
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Paramdefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdVoid struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdVoid function is not nil (ie. was set by outside code), calls it with this TxsdVoid instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdVoid instance.
func (me *TxsdVoid) Walk() {
	fn := WalkHandlers.TxsdVoid
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Void struct {
	Void *TxsdVoid `xml:"http://docbook.org/ns/docbook void"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Void function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Void instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Void instance.
func (me *XsdGoPkgHasElem_Void) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Void
	if fn != nil {
		fn(me, true)
	}
	me.Void.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Varargs struct {
	Varargs *TxsdVoid `xml:"http://docbook.org/ns/docbook varargs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varargs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varargs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varargs instance.
func (me *XsdGoPkgHasElem_Varargs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Varargs
	if fn != nil {
		fn(me, true)
	}
	me.Varargs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFuncdef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdFuncdef function is not nil (ie. was set by outside code), calls it with this TxsdFuncdef instance as the single argument. Then calls the Walk() method on 7/20 embed(s) and 0/0 field(s) belonging to this TxsdFuncdef instance.
func (me *TxsdFuncdef) Walk() {
	fn := WalkHandlers.TxsdFuncdef
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Funcdef struct {
	Funcdef *TxsdFuncdef `xml:"http://docbook.org/ns/docbook funcdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcdef instance.
func (me *XsdGoPkgHasElem_Funcdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Funcdef
	if fn != nil {
		fn(me, true)
	}
	me.Funcdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFuncprototype struct {
	XsdGoPkgHasElem_Varargs

	XsdGoPkgHasElem_Funcdef

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Paramdef

	XsdGoPkgHasElem_Void

	XsdGoPkgHasElems_Modifier
}

//	If the WalkHandlers.TxsdFuncprototype function is not nil (ie. was set by outside code), calls it with this TxsdFuncprototype instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdFuncprototype instance.
func (me *TxsdFuncprototype) Walk() {
	fn := WalkHandlers.TxsdFuncprototype
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Paramdef.Walk()
	me.XsdGoPkgHasElem_Void.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElem_Varargs.Walk()
	me.XsdGoPkgHasElem_Funcdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Funcprototype struct {
	Funcprototypes []*TxsdFuncprototype `xml:"http://docbook.org/ns/docbook funcprototype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcprototype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcprototype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcprototype instance.
func (me *XsdGoPkgHasElems_Funcprototype) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Funcprototype
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Funcprototypes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Continuation_TxsdFuncsynopsisinfoContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdFuncsynopsisinfoLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdFuncsynopsisinfo struct {
	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Date

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasAttr_Continuation_TxsdFuncsynopsisinfoContinuation_

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasAttr_Linenumbering_TxsdFuncsynopsisinfoLinenumbering_

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Exceptionname

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Coref
}

//	If the WalkHandlers.TxsdFuncsynopsisinfo function is not nil (ie. was set by outside code), calls it with this TxsdFuncsynopsisinfo instance as the single argument. Then calls the Walk() method on 81/111 embed(s) and 0/0 field(s) belonging to this TxsdFuncsynopsisinfo instance.
func (me *TxsdFuncsynopsisinfo) Walk() {
	fn := WalkHandlers.TxsdFuncsynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Funcsynopsisinfo struct {
	Funcsynopsisinfos []*TxsdFuncsynopsisinfo `xml:"http://docbook.org/ns/docbook funcsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcsynopsisinfo instance.
func (me *XsdGoPkgHasElems_Funcsynopsisinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Funcsynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Funcsynopsisinfos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFuncsynopsis struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Funcprototype

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Funcsynopsisinfo

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdFuncsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdFuncsynopsis instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFuncsynopsis instance.
func (me *TxsdFuncsynopsis) Walk() {
	fn := WalkHandlers.TxsdFuncsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Funcprototype.Walk()
	me.XsdGoPkgHasElems_Funcsynopsisinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Funcsynopsis struct {
	Funcsynopsises []*TxsdFuncsynopsis `xml:"http://docbook.org/ns/docbook funcsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcsynopsis instance.
func (me *XsdGoPkgHasElems_Funcsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Funcsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Funcsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdClasssynopsisClass xsdt.Token

//	Since TxsdClasssynopsisClass is just a simple String type, this merely returns the current string value.
func (me TxsdClasssynopsisClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdClasssynopsisClass is "class".
func (me TxsdClasssynopsisClass) IsClass() bool { return me == "class" }

//	Since TxsdClasssynopsisClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdClasssynopsisClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdClasssynopsisClass's alias type xsdt.Token.
func (me TxsdClasssynopsisClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdClasssynopsisClass is "interface".
func (me TxsdClasssynopsisClass) IsInterface() bool { return me == "interface" }

type XsdGoPkgHasAttr_Class_TxsdClasssynopsisClass_ struct {
	Class TxsdClasssynopsisClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasElem_Methodname struct {
	Methodname *TxsdSurname `xml:"http://docbook.org/ns/docbook methodname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodname instance.
func (me *XsdGoPkgHasElem_Methodname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Methodname
	if fn != nil {
		fn(me, true)
	}
	me.Methodname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Parameter struct {
	Parameter *TxsdParameter `xml:"http://docbook.org/ns/docbook parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Parameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Parameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Parameter instance.
func (me *XsdGoPkgHasElem_Parameter) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Parameter
	if fn != nil {
		fn(me, true)
	}
	me.Parameter.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMethodparamRep xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdMethodparamRep's alias type xsdt.Token.
func (me TxsdMethodparamRep) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdMethodparamRep is "repeat".
func (me TxsdMethodparamRep) IsRepeat() bool { return me == "repeat" }

//	Returns true if the value of this enumerated TxsdMethodparamRep is "norepeat".
func (me TxsdMethodparamRep) IsNorepeat() bool { return me == "norepeat" }

//	Since TxsdMethodparamRep is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMethodparamRep) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdMethodparamRep is just a simple String type, this merely returns the current string value.
func (me TxsdMethodparamRep) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type TxsdMethodparamChoice xsdt.Token

//	Since TxsdMethodparamChoice is just a simple String type, this merely returns the current string value.
func (me TxsdMethodparamChoice) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "plain".
func (me TxsdMethodparamChoice) IsPlain() bool { return me == "plain" }

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "req".
func (me TxsdMethodparamChoice) IsReq() bool { return me == "req" }

//	Returns true if the value of this enumerated TxsdMethodparamChoice is "opt".
func (me TxsdMethodparamChoice) IsOpt() bool { return me == "opt" }

//	Since TxsdMethodparamChoice is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMethodparamChoice) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdMethodparamChoice's alias type xsdt.Token.
func (me TxsdMethodparamChoice) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "req"
func (me XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("req")
}

type XsdGoPkgHasElem_Funcparams struct {
	Funcparams *TxsdSurname `xml:"http://docbook.org/ns/docbook funcparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcparams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcparams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcparams instance.
func (me *XsdGoPkgHasElem_Funcparams) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Funcparams
	if fn != nil {
		fn(me, true)
	}
	me.Funcparams.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMethodparam struct {
	XsdGoPkgHasElem_Initializer

	XsdGoPkgHasAttr_Rep_TxsdMethodparamRep_Norepeat

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Choice_TxsdMethodparamChoice_Req

	XsdGoPkgHasElem_Funcparams

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Parameter

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Modifier
}

//	If the WalkHandlers.TxsdMethodparam function is not nil (ie. was set by outside code), calls it with this TxsdMethodparam instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdMethodparam instance.
func (me *TxsdMethodparam) Walk() {
	fn := WalkHandlers.TxsdMethodparam
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Initializer.Walk()
	me.XsdGoPkgHasElem_Funcparams.Walk()
	me.XsdGoPkgHasElem_Parameter.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Methodparam struct {
	Methodparams []*TxsdMethodparam `xml:"http://docbook.org/ns/docbook methodparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodparam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodparam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodparam instance.
func (me *XsdGoPkgHasElems_Methodparam) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Methodparam
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Methodparams {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdDestructorsynopsis struct {
	XsdGoPkgHasElem_Methodname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Methodparam

	XsdGoPkgHasElem_Void

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Language_XsdtString_
}

//	If the WalkHandlers.TxsdDestructorsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdDestructorsynopsis instance as the single argument. Then calls the Walk() method on 5/9 embed(s) and 0/0 field(s) belonging to this TxsdDestructorsynopsis instance.
func (me *TxsdDestructorsynopsis) Walk() {
	fn := WalkHandlers.TxsdDestructorsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Methodname.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Methodparam.Walk()
	me.XsdGoPkgHasElem_Void.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Destructorsynopsis struct {
	Destructorsynopsises []*TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook destructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Destructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Destructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Destructorsynopsis instance.
func (me *XsdGoPkgHasElems_Destructorsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Destructorsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Destructorsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Constructorsynopsis struct {
	Constructorsynopsises []*TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook constructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constructorsynopsis instance.
func (me *XsdGoPkgHasElems_Constructorsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Constructorsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Constructorsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Linenumbering_TxsdClasssynopsisinfoLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdClasssynopsisinfoContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type TxsdClasssynopsisinfo struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasAttr_Linenumbering_TxsdClasssynopsisinfoLinenumbering_

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasAttr_Continuation_TxsdClasssynopsisinfoContinuation_

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Lineannotation

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdClasssynopsisinfo function is not nil (ie. was set by outside code), calls it with this TxsdClasssynopsisinfo instance as the single argument. Then calls the Walk() method on 81/111 embed(s) and 0/0 field(s) belonging to this TxsdClasssynopsisinfo instance.
func (me *TxsdClasssynopsisinfo) Walk() {
	fn := WalkHandlers.TxsdClasssynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Classsynopsisinfo struct {
	Classsynopsisinfos []*TxsdClasssynopsisinfo `xml:"http://docbook.org/ns/docbook classsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classsynopsisinfo instance.
func (me *XsdGoPkgHasElems_Classsynopsisinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Classsynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Classsynopsisinfos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMethodsynopsis struct {
	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Methodname

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Methodparam

	XsdGoPkgHasElem_Void

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Type
}

//	If the WalkHandlers.TxsdMethodsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdMethodsynopsis instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TxsdMethodsynopsis instance.
func (me *TxsdMethodsynopsis) Walk() {
	fn := WalkHandlers.TxsdMethodsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Methodparam.Walk()
	me.XsdGoPkgHasElem_Void.Walk()
	me.XsdGoPkgHasElem_Type.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElem_Methodname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Methodsynopsis struct {
	Methodsynopsises []*TxsdMethodsynopsis `xml:"http://docbook.org/ns/docbook methodsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Methodsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Methodsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Methodsynopsis instance.
func (me *XsdGoPkgHasElems_Methodsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Methodsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Methodsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdClasssynopsis struct {
	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Class_TxsdClasssynopsisClass_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Classsynopsisinfo

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Oointerface
}

//	If the WalkHandlers.TxsdClasssynopsis function is not nil (ie. was set by outside code), calls it with this TxsdClasssynopsis instance as the single argument. Then calls the Walk() method on 8/13 embed(s) and 0/0 field(s) belonging to this TxsdClasssynopsis instance.
func (me *TxsdClasssynopsis) Walk() {
	fn := WalkHandlers.TxsdClasssynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsisinfo.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Classsynopsis struct {
	Classsynopsises []*TxsdClasssynopsis `xml:"http://docbook.org/ns/docbook classsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Classsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Classsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Classsynopsis instance.
func (me *XsdGoPkgHasElems_Classsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Classsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Classsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Member struct {
	Members []*TxsdSubtitle `xml:"http://docbook.org/ns/docbook member"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Member function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Member instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Member instance.
func (me *XsdGoPkgHasElems_Member) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Member
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Members {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Columns_XsdtNmtoken_ struct {
	Columns xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook columns,attr"`
}

type TxsdSimplelistType xsdt.Token

//	Returns true if the value of this enumerated TxsdSimplelistType is "inline".
func (me TxsdSimplelistType) IsInline() bool { return me == "inline" }

//	This convenience method just performs a simple type conversion to TxsdSimplelistType's alias type xsdt.Token.
func (me TxsdSimplelistType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdSimplelistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSimplelistType) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdSimplelistType is just a simple String type, this merely returns the current string value.
func (me TxsdSimplelistType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdSimplelistType is "horiz".
func (me TxsdSimplelistType) IsHoriz() bool { return me == "horiz" }

//	Returns true if the value of this enumerated TxsdSimplelistType is "vert".
func (me TxsdSimplelistType) IsVert() bool { return me == "vert" }

type XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert struct {
	Type TxsdSimplelistType `xml:"http://docbook.org/ns/docbook type,attr"`
}

//	Returns the default value for Type -- "vert"
func (me XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert) TypeDefault() TxsdSimplelistType {
	return TxsdSimplelistType("vert")
}

type TxsdSimplelist struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Columns_XsdtNmtoken_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Type_TxsdSimplelistType_Vert

	XsdGoPkgHasElems_Member
}

//	If the WalkHandlers.TxsdSimplelist function is not nil (ie. was set by outside code), calls it with this TxsdSimplelist instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSimplelist instance.
func (me *TxsdSimplelist) Walk() {
	fn := WalkHandlers.TxsdSimplelist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Member.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Simplelist struct {
	Simplelists []*TxsdSimplelist `xml:"http://docbook.org/ns/docbook simplelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplelist instance.
func (me *XsdGoPkgHasElems_Simplelist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Simplelist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Simplelists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sbr struct {
	Sbrs []*TxsdAnchor `xml:"http://docbook.org/ns/docbook sbr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sbr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sbr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sbr instance.
func (me *XsdGoPkgHasElems_Sbr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sbr
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sbrs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("opt")
}

type XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat struct {
	Rep TxsdMethodparamRep `xml:"http://docbook.org/ns/docbook rep,attr"`
}

//	Returns the default value for Rep -- "norepeat"
func (me XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat) RepDefault() TxsdMethodparamRep {
	return TxsdMethodparamRep("norepeat")
}

type XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt struct {
	Choice TxsdMethodparamChoice `xml:"http://docbook.org/ns/docbook choice,attr"`
}

//	Returns the default value for Choice -- "opt"
func (me XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt) ChoiceDefault() TxsdMethodparamChoice {
	return TxsdMethodparamChoice("opt")
}

type XsdGoPkgHasElems_Synopfragmentref struct {
	Synopfragmentrefs []*TxsdDate `xml:"http://docbook.org/ns/docbook synopfragmentref"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopfragmentref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopfragmentref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopfragmentref instance.
func (me *XsdGoPkgHasElems_Synopfragmentref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Synopfragmentref
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Synopfragmentrefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdArg struct {
	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Choice_TxsdArgChoice_Opt

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasElems_Group

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Synopfragmentref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Option

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Rep_TxsdArgRep_Norepeat

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdArg function is not nil (ie. was set by outside code), calls it with this TxsdArg instance as the single argument. Then calls the Walk() method on 8/25 embed(s) and 0/0 field(s) belonging to this TxsdArg instance.
func (me *TxsdArg) Walk() {
	fn := WalkHandlers.TxsdArg
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Sbr.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Synopfragmentref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Arg struct {
	Args []*TxsdArg `xml:"http://docbook.org/ns/docbook arg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arg instance.
func (me *XsdGoPkgHasElems_Arg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Arg
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Args {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGroup struct {
	XsdGoPkgHasAttr_Rep_TxsdGroupRep_Norepeat

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasAttr_Choice_TxsdGroupChoice_Opt

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Synopfragmentref

	XsdGoPkgHasElems_Group
}

//	If the WalkHandlers.TxsdGroup function is not nil (ie. was set by outside code), calls it with this TxsdGroup instance as the single argument. Then calls the Walk() method on 4/11 embed(s) and 0/0 field(s) belonging to this TxsdGroup instance.
func (me *TxsdGroup) Walk() {
	fn := WalkHandlers.TxsdGroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Arg.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Synopfragmentref.Walk()
	me.XsdGoPkgHasElems_Sbr.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Group struct {
	Groups []*TxsdGroup `xml:"http://docbook.org/ns/docbook group"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Group instance.
func (me *XsdGoPkgHasElems_Group) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Group
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Groups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSynopfragment struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Group

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSynopfragment function is not nil (ie. was set by outside code), calls it with this TxsdSynopfragment instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdSynopfragment instance.
func (me *TxsdSynopfragment) Walk() {
	fn := WalkHandlers.TxsdSynopfragment
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Arg.Walk()
	me.XsdGoPkgHasElems_Group.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Synopfragment struct {
	Synopfragments []*TxsdSynopfragment `xml:"http://docbook.org/ns/docbook synopfragment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopfragment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopfragment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopfragment instance.
func (me *XsdGoPkgHasElems_Synopfragment) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Synopfragment
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Synopfragments {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Sepchar_XsdtString_ struct {
	Sepchar xsdt.String `xml:"http://docbook.org/ns/docbook sepchar,attr"`
}

type XsdGoPkgHasAttr_Cmdlength_XsdtString_ struct {
	Cmdlength xsdt.String `xml:"http://docbook.org/ns/docbook cmdlength,attr"`
}

type TxsdCmdsynopsis struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Synopfragment

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Sepchar_XsdtString_

	XsdGoPkgHasElems_Group

	XsdGoPkgHasElems_Arg

	XsdGoPkgHasAttr_Cmdlength_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasElems_Command

	XsdGoPkgHasAttr_Label_XsdtString_
}

//	If the WalkHandlers.TxsdCmdsynopsis function is not nil (ie. was set by outside code), calls it with this TxsdCmdsynopsis instance as the single argument. Then calls the Walk() method on 5/12 embed(s) and 0/0 field(s) belonging to this TxsdCmdsynopsis instance.
func (me *TxsdCmdsynopsis) Walk() {
	fn := WalkHandlers.TxsdCmdsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Synopfragment.Walk()
	me.XsdGoPkgHasElems_Group.Walk()
	me.XsdGoPkgHasElems_Arg.Walk()
	me.XsdGoPkgHasElems_Sbr.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Cmdsynopsis struct {
	Cmdsynopsises []*TxsdCmdsynopsis `xml:"http://docbook.org/ns/docbook cmdsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cmdsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cmdsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cmdsynopsis instance.
func (me *XsdGoPkgHasElems_Cmdsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Cmdsynopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cmdsynopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSimpara struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Author

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Code
}

//	If the WalkHandlers.TxsdSimpara function is not nil (ie. was set by outside code), calls it with this TxsdSimpara instance as the single argument. Then calls the Walk() method on 79/103 embed(s) and 0/0 field(s) belonging to this TxsdSimpara instance.
func (me *TxsdSimpara) Walk() {
	fn := WalkHandlers.TxsdSimpara
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Simpara struct {
	Simparas []*TxsdSimpara `xml:"http://docbook.org/ns/docbook simpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simpara instance.
func (me *XsdGoPkgHasElems_Simpara) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Simpara
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Simparas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Continuation_TxsdLiterallayoutContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdLiterallayoutLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdLiterallayoutClass xsdt.Token

//	Since TxsdLiterallayoutClass is just a simple String type, this merely returns the current string value.
func (me TxsdLiterallayoutClass) String() string { return xsdt.Token(me).String() }

//	Since TxsdLiterallayoutClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLiterallayoutClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdLiterallayoutClass is "normal".
func (me TxsdLiterallayoutClass) IsNormal() bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdLiterallayoutClass is "monospaced".
func (me TxsdLiterallayoutClass) IsMonospaced() bool { return me == "monospaced" }

//	This convenience method just performs a simple type conversion to TxsdLiterallayoutClass's alias type xsdt.Token.
func (me TxsdLiterallayoutClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Class_TxsdLiterallayoutClass_ struct {
	Class TxsdLiterallayoutClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdLiterallayout struct {
	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Author

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Date

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Type

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAttr_Continuation_TxsdLiterallayoutContinuation_

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Olink

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Linenumbering_TxsdLiterallayoutLinenumbering_

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasAttr_Class_TxsdLiterallayoutClass_

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Foreignphrase
}

//	If the WalkHandlers.TxsdLiterallayout function is not nil (ie. was set by outside code), calls it with this TxsdLiterallayout instance as the single argument. Then calls the Walk() method on 81/112 embed(s) and 0/0 field(s) belonging to this TxsdLiterallayout instance.
func (me *TxsdLiterallayout) Walk() {
	fn := WalkHandlers.TxsdLiterallayout
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Literallayout struct {
	Literallayouts []*TxsdLiterallayout `xml:"http://docbook.org/ns/docbook literallayout"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Literallayout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Literallayout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Literallayout instance.
func (me *XsdGoPkgHasElems_Literallayout) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Literallayout
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Literallayouts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTableRowheader xsdt.Token

//	Since TxsdTableRowheader is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableRowheader) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTableRowheader is "norowheader".
func (me TxsdTableRowheader) IsNorowheader() bool { return me == "norowheader" }

//	Since TxsdTableRowheader is just a simple String type, this merely returns the current string value.
func (me TxsdTableRowheader) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTableRowheader's alias type xsdt.Token.
func (me TxsdTableRowheader) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTableRowheader is "firstcol".
func (me TxsdTableRowheader) IsFirstcol() bool { return me == "firstcol" }

type XsdGoPkgHasAttr_Rowheader_TxsdTableRowheader_ struct {
	Rowheader TxsdTableRowheader `xml:"http://docbook.org/ns/docbook rowheader,attr"`
}

type XsdGoPkgHasAttr_Onclick_XsdtString_ struct {
	Onclick xsdt.String `xml:"http://docbook.org/ns/docbook onclick,attr"`
}

type XsdGoPkgHasAttr_Onmousemove_XsdtString_ struct {
	Onmousemove xsdt.String `xml:"http://docbook.org/ns/docbook onmousemove,attr"`
}

type XsdGoPkgHasAttr_Charoff_XsdtString_ struct {
	Charoff xsdt.String `xml:"http://docbook.org/ns/docbook charoff,attr"`
}

type XsdGoPkgHasAttr_Lang_XsdtString_ struct {
	Lang xsdt.String `xml:"http://docbook.org/ns/docbook lang,attr"`
}

type XsdGoPkgHasAttr_Onkeypress_XsdtString_ struct {
	Onkeypress xsdt.String `xml:"http://docbook.org/ns/docbook onkeypress,attr"`
}

type TxsdColgroupValign xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdColgroupValign's alias type xsdt.Token.
func (me TxsdColgroupValign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdColgroupValign is "middle".
func (me TxsdColgroupValign) IsMiddle() bool { return me == "middle" }

//	Since TxsdColgroupValign is just a simple String type, this merely returns the current string value.
func (me TxsdColgroupValign) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdColgroupValign is "baseline".
func (me TxsdColgroupValign) IsBaseline() bool { return me == "baseline" }

//	Since TxsdColgroupValign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdColgroupValign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdColgroupValign is "bottom".
func (me TxsdColgroupValign) IsBottom() bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdColgroupValign is "top".
func (me TxsdColgroupValign) IsTop() bool { return me == "top" }

type XsdGoPkgHasAttr_Valign_TxsdColgroupValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Onkeydown_XsdtString_ struct {
	Onkeydown xsdt.String `xml:"http://docbook.org/ns/docbook onkeydown,attr"`
}

type XsdGoPkgHasAttr_Class_XsdtString_ struct {
	Class xsdt.String `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Onmouseover_XsdtString_ struct {
	Onmouseover xsdt.String `xml:"http://docbook.org/ns/docbook onmouseover,attr"`
}

type XsdGoPkgHasAttr_Onmouseout_XsdtString_ struct {
	Onmouseout xsdt.String `xml:"http://docbook.org/ns/docbook onmouseout,attr"`
}

type XsdGoPkgHasAttr_Style_XsdtString_ struct {
	Style xsdt.String `xml:"http://docbook.org/ns/docbook style,attr"`
}

type XsdGoPkgHasAttr_Ondblclick_XsdtString_ struct {
	Ondblclick xsdt.String `xml:"http://docbook.org/ns/docbook ondblclick,attr"`
}

type XsdGoPkgHasAttr_Onkeyup_XsdtString_ struct {
	Onkeyup xsdt.String `xml:"http://docbook.org/ns/docbook onkeyup,attr"`
}

type XsdGoPkgHasAttr_Span_XsdtNmtoken_ struct {
	Span xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook span,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdColAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Onmousedown_XsdtString_ struct {
	Onmousedown xsdt.String `xml:"http://docbook.org/ns/docbook onmousedown,attr"`
}

type XsdGoPkgHasAttr_Title_XsdtString_ struct {
	Title xsdt.String `xml:"http://docbook.org/ns/docbook title,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdColValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Onmouseup_XsdtString_ struct {
	Onmouseup xsdt.String `xml:"http://docbook.org/ns/docbook onmouseup,attr"`
}

type XsdGoPkgHasAttr_Char_XsdtString_ struct {
	Char xsdt.String `xml:"http://docbook.org/ns/docbook char,attr"`
}

type TxsdCol struct {
	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Span_XsdtNmtoken_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdColAlign_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdColValign_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_
}

//	If the WalkHandlers.TxsdCol function is not nil (ie. was set by outside code), calls it with this TxsdCol instance as the single argument. Then calls the Walk() method on 0/21 embed(s) and 0/0 field(s) belonging to this TxsdCol instance.
func (me *TxsdCol) Walk() {
	fn := WalkHandlers.TxsdCol
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Col struct {
	Cols []*TxsdCol `xml:"http://docbook.org/ns/docbook col"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Col function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Col instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Col instance.
func (me *XsdGoPkgHasElems_Col) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Col
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cols {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Align_TxsdColgroupAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdColgroup struct {
	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Col

	XsdGoPkgHasAttr_Align_TxsdColgroupAlign_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Span_XsdtNmtoken_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Valign_TxsdColgroupValign_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_
}

//	If the WalkHandlers.TxsdColgroup function is not nil (ie. was set by outside code), calls it with this TxsdColgroup instance as the single argument. Then calls the Walk() method on 1/22 embed(s) and 0/0 field(s) belonging to this TxsdColgroup instance.
func (me *TxsdColgroup) Walk() {
	fn := WalkHandlers.TxsdColgroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Col.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Colgroup struct {
	Colgroups []*TxsdColgroup `xml:"http://docbook.org/ns/docbook colgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colgroup instance.
func (me *XsdGoPkgHasElems_Colgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Colgroup
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Colgroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Cellspacing_XsdtString_ struct {
	Cellspacing xsdt.String `xml:"http://docbook.org/ns/docbook cellspacing,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTrAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasElem_Date struct {
	Date *TxsdDate `xml:"http://docbook.org/ns/docbook date"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Date instance.
func (me *XsdGoPkgHasElem_Date) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Date
	if fn != nil {
		fn(me, true)
	}
	me.Date.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Revremark struct {
	Revremark *TxsdSurname `xml:"http://docbook.org/ns/docbook revremark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revremark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revremark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revremark instance.
func (me *XsdGoPkgHasElem_Revremark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Revremark
	if fn != nil {
		fn(me, true)
	}
	me.Revremark.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Revnumber struct {
	Revnumber *TxsdSurname `xml:"http://docbook.org/ns/docbook revnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revnumber instance.
func (me *XsdGoPkgHasElem_Revnumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Revnumber
	if fn != nil {
		fn(me, true)
	}
	me.Revnumber.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Authorinitials struct {
	Authorinitialses []*TxsdSurname `xml:"http://docbook.org/ns/docbook authorinitials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Authorinitials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Authorinitials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Authorinitials instance.
func (me *XsdGoPkgHasElems_Authorinitials) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Authorinitials
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Authorinitialses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Para struct {
	Paras []*TxsdPara `xml:"http://docbook.org/ns/docbook para"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Para function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Para instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Para instance.
func (me *XsdGoPkgHasElems_Para) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Para
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMathphrase struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdMathphrase function is not nil (ie. was set by outside code), calls it with this TxsdMathphrase instance as the single argument. Then calls the Walk() method on 5/19 embed(s) and 0/0 field(s) belonging to this TxsdMathphrase instance.
func (me *TxsdMathphrase) Walk() {
	fn := WalkHandlers.TxsdMathphrase
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Mathphrase struct {
	Mathphrases []*TxsdMathphrase `xml:"http://docbook.org/ns/docbook mathphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mathphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mathphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mathphrase instance.
func (me *XsdGoPkgHasElems_Mathphrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Mathphrase
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Mathphrases {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Floatstyle_XsdtString_ struct {
	Floatstyle xsdt.String `xml:"http://docbook.org/ns/docbook floatstyle,attr"`
}

type TxsdEquationPgwide xsdt.Token

//	Returns true if the value of this enumerated TxsdEquationPgwide is "0".
func (me TxsdEquationPgwide) Is0() bool { return me == "0" }

//	Since TxsdEquationPgwide is just a simple String type, this merely returns the current string value.
func (me TxsdEquationPgwide) String() string { return xsdt.Token(me).String() }

//	Since TxsdEquationPgwide is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdEquationPgwide) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdEquationPgwide's alias type xsdt.Token.
func (me TxsdEquationPgwide) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdEquationPgwide is "1".
func (me TxsdEquationPgwide) Is1() bool { return me == "1" }

type XsdGoPkgHasAttr_Pgwide_TxsdEquationPgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdEquation struct {
	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Pgwide_TxsdEquationPgwide_

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdEquation function is not nil (ie. was set by outside code), calls it with this TxsdEquation instance as the single argument. Then calls the Walk() method on 2/13 embed(s) and 0/0 field(s) belonging to this TxsdEquation instance.
func (me *TxsdEquation) Walk() {
	fn := WalkHandlers.TxsdEquation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Mathphrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Equation struct {
	Equations []*TxsdEquation `xml:"http://docbook.org/ns/docbook equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Equation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Equation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Equation instance.
func (me *XsdGoPkgHasElems_Equation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Equation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Equations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Rowheader_TxsdInformaltableRowheader_ struct {
	Rowheader TxsdTableRowheader `xml:"http://docbook.org/ns/docbook rowheader,attr"`
}

type XsdGoPkgHasAttr_Nameend_XsdtString_ struct {
	Nameend xsdt.String `xml:"http://docbook.org/ns/docbook nameend,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdSpanspecRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdSpanspecColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Spanname_XsdtString_ struct {
	Spanname xsdt.String `xml:"http://docbook.org/ns/docbook spanname,attr"`
}

type XsdGoPkgHasAttr_Namest_XsdtString_ struct {
	Namest xsdt.String `xml:"http://docbook.org/ns/docbook namest,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdSpanspecAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdSpanspec struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdSpanspecRowsep_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdSpanspecColsep_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdSpanspecAlign_
}

//	If the WalkHandlers.TxsdSpanspec function is not nil (ie. was set by outside code), calls it with this TxsdSpanspec instance as the single argument. Then calls the Walk() method on 0/11 embed(s) and 0/0 field(s) belonging to this TxsdSpanspec instance.
func (me *TxsdSpanspec) Walk() {
	fn := WalkHandlers.TxsdSpanspec
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Spanspec struct {
	Spanspecs []*TxsdSpanspec `xml:"http://docbook.org/ns/docbook spanspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Spanspec instance.
func (me *XsdGoPkgHasElems_Spanspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Spanspec
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Spanspecs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Align_TxsdTheadAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTheadValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdColspecRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdColspecColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Colwidth_XsdtString_ struct {
	Colwidth xsdt.String `xml:"http://docbook.org/ns/docbook colwidth,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdColspecAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Colnum_XsdtNmtoken_ struct {
	Colnum xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook colnum,attr"`
}

type XsdGoPkgHasAttr_Colname_XsdtString_ struct {
	Colname xsdt.String `xml:"http://docbook.org/ns/docbook colname,attr"`
}

type TxsdColspec struct {
	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdColspecColsep_

	XsdGoPkgHasAttr_Colwidth_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Align_TxsdColspecAlign_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Colnum_XsdtNmtoken_

	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdColspecRowsep_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdColspec function is not nil (ie. was set by outside code), calls it with this TxsdColspec instance as the single argument. Then calls the Walk() method on 0/11 embed(s) and 0/0 field(s) belonging to this TxsdColspec instance.
func (me *TxsdColspec) Walk() {
	fn := WalkHandlers.TxsdColspec
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Colspec struct {
	Colspecs []*TxsdColspec `xml:"http://docbook.org/ns/docbook colspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colspec instance.
func (me *XsdGoPkgHasElems_Colspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Colspec
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Colspecs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdThead struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Align_TxsdTheadAlign_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Valign_TxsdTheadValign_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_
}

//	If the WalkHandlers.TxsdThead function is not nil (ie. was set by outside code), calls it with this TxsdThead instance as the single argument. Then calls the Walk() method on 1/24 embed(s) and 0/0 field(s) belonging to this TxsdThead instance.
func (me *TxsdThead) Walk() {
	fn := WalkHandlers.TxsdThead
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Colspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Thead struct {
	Thead *TxsdThead `xml:"http://docbook.org/ns/docbook thead"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Thead instance.
func (me *XsdGoPkgHasElem_Thead) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Thead
	if fn != nil {
		fn(me, true)
	}
	me.Thead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Rowsep_TxsdEntrytblRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdEntrytblAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasElem_Tbody struct {
	Tbody *TxsdTbody `xml:"http://docbook.org/ns/docbook tbody"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Tbody instance.
func (me *XsdGoPkgHasElem_Tbody) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tbody
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Colsep_TxsdEntrytblColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Tgroupstyle_XsdtString_ struct {
	Tgroupstyle xsdt.String `xml:"http://docbook.org/ns/docbook tgroupstyle,attr"`
}

type XsdGoPkgHasAttr_Cols_XsdtNmtoken_ struct {
	Cols xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook cols,attr"`
}

type TxsdEntrytbl struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasElems_Spanspec

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdEntrytblRowsep_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdEntrytblAlign_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasElem_Tbody

	XsdGoPkgHasAttr_Colsep_TxsdEntrytblColsep_

	XsdGoPkgHasAttr_Tgroupstyle_XsdtString_

	XsdGoPkgHasAttr_Cols_XsdtNmtoken_

	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_
}

//	If the WalkHandlers.TxsdEntrytbl function is not nil (ie. was set by outside code), calls it with this TxsdEntrytbl instance as the single argument. Then calls the Walk() method on 4/18 embed(s) and 0/0 field(s) belonging to this TxsdEntrytbl instance.
func (me *TxsdEntrytbl) Walk() {
	fn := WalkHandlers.TxsdEntrytbl
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Colspec.Walk()
	me.XsdGoPkgHasElem_Tbody.Walk()
	me.XsdGoPkgHasElems_Spanspec.Walk()
	me.XsdGoPkgHasElem_Thead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Entrytbl struct {
	Entrytbls []*TxsdEntrytbl `xml:"http://docbook.org/ns/docbook entrytbl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entrytbl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entrytbl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entrytbl instance.
func (me *XsdGoPkgHasElems_Entrytbl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Entrytbl
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Entrytbls {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInformalequation struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdInformalequation function is not nil (ie. was set by outside code), calls it with this TxsdInformalequation instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdInformalequation instance.
func (me *TxsdInformalequation) Walk() {
	fn := WalkHandlers.TxsdInformalequation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Mathphrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Informalequation struct {
	Informalequations []*TxsdInformalequation `xml:"http://docbook.org/ns/docbook informalequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalequation instance.
func (me *XsdGoPkgHasElems_Informalequation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Informalequation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Informalequations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Lhs struct {
	Lhs *TxsdDate `xml:"http://docbook.org/ns/docbook lhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lhs instance.
func (me *XsdGoPkgHasElem_Lhs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Lhs
	if fn != nil {
		fn(me, true)
	}
	me.Lhs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Constraint struct {
	Constraints []*TxsdVoid `xml:"http://docbook.org/ns/docbook constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constraint instance.
func (me *XsdGoPkgHasElems_Constraint) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Constraint
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Constraints {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRhs struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Sbr

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdRhs function is not nil (ie. was set by outside code), calls it with this TxsdRhs instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRhs instance.
func (me *TxsdRhs) Walk() {
	fn := WalkHandlers.TxsdRhs
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Sbr.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Rhs struct {
	Rhs *TxsdRhs `xml:"http://docbook.org/ns/docbook rhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Rhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rhs instance.
func (me *XsdGoPkgHasElem_Rhs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Rhs
	if fn != nil {
		fn(me, true)
	}
	me.Rhs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdProduction struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Lhs

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraint

	XsdGoPkgHasElem_Rhs
}

//	If the WalkHandlers.TxsdProduction function is not nil (ie. was set by outside code), calls it with this TxsdProduction instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdProduction instance.
func (me *TxsdProduction) Walk() {
	fn := WalkHandlers.TxsdProduction
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Lhs.Walk()
	me.XsdGoPkgHasElems_Constraint.Walk()
	me.XsdGoPkgHasElem_Rhs.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Production struct {
	Productions []*TxsdProduction `xml:"http://docbook.org/ns/docbook production"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Production function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Production instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Production instance.
func (me *XsdGoPkgHasElems_Production) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Production
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Productions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Productionrecap struct {
	Productionrecaps []*TxsdVoid `xml:"http://docbook.org/ns/docbook productionrecap"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productionrecap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productionrecap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productionrecap instance.
func (me *XsdGoPkgHasElems_Productionrecap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Productionrecap
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Productionrecaps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdProductionset struct {
	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Productionrecap

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Production

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdProductionset function is not nil (ie. was set by outside code), calls it with this TxsdProductionset instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdProductionset instance.
func (me *TxsdProductionset) Walk() {
	fn := WalkHandlers.TxsdProductionset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Production.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Productionrecap.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Productionset struct {
	Productionsets []*TxsdProductionset `xml:"http://docbook.org/ns/docbook productionset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productionset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productionset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productionset instance.
func (me *XsdGoPkgHasElems_Productionset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Productionset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Productionsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBridgeheadRenderas xsdt.Token

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "other".
func (me TxsdBridgeheadRenderas) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect3".
func (me TxsdBridgeheadRenderas) IsSect3() bool { return me == "sect3" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect5".
func (me TxsdBridgeheadRenderas) IsSect5() bool { return me == "sect5" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect1".
func (me TxsdBridgeheadRenderas) IsSect1() bool { return me == "sect1" }

//	Since TxsdBridgeheadRenderas is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBridgeheadRenderas) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdBridgeheadRenderas's alias type xsdt.Token.
func (me TxsdBridgeheadRenderas) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect4".
func (me TxsdBridgeheadRenderas) IsSect4() bool { return me == "sect4" }

//	Returns true if the value of this enumerated TxsdBridgeheadRenderas is "sect2".
func (me TxsdBridgeheadRenderas) IsSect2() bool { return me == "sect2" }

//	Since TxsdBridgeheadRenderas is just a simple String type, this merely returns the current string value.
func (me TxsdBridgeheadRenderas) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Renderas_TxsdBridgeheadRenderas_ struct {
	Renderas TxsdBridgeheadRenderas `xml:"http://docbook.org/ns/docbook renderas,attr"`
}

type XsdGoPkgHasAttr_Otherrenderas_XsdtNmtoken_ struct {
	Otherrenderas xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherrenderas,attr"`
}

type TxsdBridgehead struct {
	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasAttr_Renderas_TxsdBridgeheadRenderas_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Otherrenderas_XsdtNmtoken_

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Classname
}

//	If the WalkHandlers.TxsdBridgehead function is not nil (ie. was set by outside code), calls it with this TxsdBridgehead instance as the single argument. Then calls the Walk() method on 78/104 embed(s) and 0/0 field(s) belonging to this TxsdBridgehead instance.
func (me *TxsdBridgehead) Walk() {
	fn := WalkHandlers.TxsdBridgehead
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bridgehead struct {
	Bridgeheads []*TxsdBridgehead `xml:"http://docbook.org/ns/docbook bridgehead"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bridgehead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bridgehead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bridgehead instance.
func (me *XsdGoPkgHasElems_Bridgehead) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bridgehead
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bridgeheads {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Align_TxsdEntryAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasElems_Screen struct {
	Screens []*TxsdScreen `xml:"http://docbook.org/ns/docbook screen"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screen function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screen instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screen instance.
func (me *XsdGoPkgHasElems_Screen) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Screen
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Segtitle struct {
	Segtitles []*TxsdSubtitle `xml:"http://docbook.org/ns/docbook segtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Segtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Segtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Segtitle instance.
func (me *XsdGoPkgHasElems_Segtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Segtitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Segtitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seg struct {
	Segs []*TxsdSubtitle `xml:"http://docbook.org/ns/docbook seg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seg instance.
func (me *XsdGoPkgHasElems_Seg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seg
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Segs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSeglistitem struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Seg

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdSeglistitem function is not nil (ie. was set by outside code), calls it with this TxsdSeglistitem instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdSeglistitem instance.
func (me *TxsdSeglistitem) Walk() {
	fn := WalkHandlers.TxsdSeglistitem
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Seg.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seglistitem struct {
	Seglistitems []*TxsdSeglistitem `xml:"http://docbook.org/ns/docbook seglistitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seglistitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seglistitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seglistitem instance.
func (me *XsdGoPkgHasElems_Seglistitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seglistitem
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Seglistitems {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSegmentedlist struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Segtitle

	XsdGoPkgHasElems_Seglistitem

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdSegmentedlist function is not nil (ie. was set by outside code), calls it with this TxsdSegmentedlist instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdSegmentedlist instance.
func (me *TxsdSegmentedlist) Walk() {
	fn := WalkHandlers.TxsdSegmentedlist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Segtitle.Walk()
	me.XsdGoPkgHasElems_Seglistitem.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Segmentedlist struct {
	Segmentedlists []*TxsdSegmentedlist `xml:"http://docbook.org/ns/docbook segmentedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Segmentedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Segmentedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Segmentedlist instance.
func (me *XsdGoPkgHasElems_Segmentedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Segmentedlist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Segmentedlists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Continuation_TxsdSynopsisContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type XsdGoPkgHasAttr_Linenumbering_TxsdSynopsisLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type TxsdSynopsis struct {
	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAttr_Continuation_TxsdSynopsisContinuation_

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Function

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Linenumbering_TxsdSynopsisLinenumbering_

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Application

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Interfacename
}

//	If the WalkHandlers.TxsdSynopsis function is not nil (ie. was set by outside code), calls it with this TxsdSynopsis instance as the single argument. Then calls the Walk() method on 81/112 embed(s) and 0/0 field(s) belonging to this TxsdSynopsis instance.
func (me *TxsdSynopsis) Walk() {
	fn := WalkHandlers.TxsdSynopsis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Synopsis struct {
	Synopsises []*TxsdSynopsis `xml:"http://docbook.org/ns/docbook synopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Synopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Synopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Synopsis instance.
func (me *XsdGoPkgHasElems_Synopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Synopsis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Synopsises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdEpigraph struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElem_Attribution

	XsdGoPkgHasElems_Literallayout
}

//	If the WalkHandlers.TxsdEpigraph function is not nil (ie. was set by outside code), calls it with this TxsdEpigraph instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdEpigraph instance.
func (me *TxsdEpigraph) Walk() {
	fn := WalkHandlers.TxsdEpigraph
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElem_Attribution.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Epigraph struct {
	Epigraphs []*TxsdEpigraph `xml:"http://docbook.org/ns/docbook epigraph"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Epigraph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Epigraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Epigraph instance.
func (me *XsdGoPkgHasElems_Epigraph) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Epigraph
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Epigraphs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdNote struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Classsynopsis
}

//	If the WalkHandlers.TxsdNote function is not nil (ie. was set by outside code), calls it with this TxsdNote instance as the single argument. Then calls the Walk() method on 24/61 embed(s) and 0/0 field(s) belonging to this TxsdNote instance.
func (me *TxsdNote) Walk() {
	fn := WalkHandlers.TxsdNote
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Note struct {
	Notes []*TxsdNote `xml:"http://docbook.org/ns/docbook note"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Note instance.
func (me *XsdGoPkgHasElems_Note) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Note
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Notes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdWarning struct {
	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample
}

//	If the WalkHandlers.TxsdWarning function is not nil (ie. was set by outside code), calls it with this TxsdWarning instance as the single argument. Then calls the Walk() method on 25/61 embed(s) and 0/0 field(s) belonging to this TxsdWarning instance.
func (me *TxsdWarning) Walk() {
	fn := WalkHandlers.TxsdWarning
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Warning struct {
	Warnings []*TxsdWarning `xml:"http://docbook.org/ns/docbook warning"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Warning function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Warning instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Warning instance.
func (me *XsdGoPkgHasElems_Warning) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Warning
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Warnings {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsgtext struct {
	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdMsgtext function is not nil (ie. was set by outside code), calls it with this TxsdMsgtext instance as the single argument. Then calls the Walk() method on 25/58 embed(s) and 0/0 field(s) belonging to this TxsdMsgtext instance.
func (me *TxsdMsgtext) Walk() {
	fn := WalkHandlers.TxsdMsgtext
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgtext struct {
	Msgtext *TxsdMsgtext `xml:"http://docbook.org/ns/docbook msgtext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgtext instance.
func (me *XsdGoPkgHasElem_Msgtext) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgtext
	if fn != nil {
		fn(me, true)
	}
	me.Msgtext.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsgmain struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Msgtext

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdMsgmain function is not nil (ie. was set by outside code), calls it with this TxsdMsgmain instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdMsgmain instance.
func (me *TxsdMsgmain) Walk() {
	fn := WalkHandlers.TxsdMsgmain
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Msgtext.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgmain struct {
	Msgmain *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgmain"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgmain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgmain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgmain instance.
func (me *XsdGoPkgHasElem_Msgmain) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgmain
	if fn != nil {
		fn(me, true)
	}
	me.Msgmain.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgrel struct {
	Msgrels []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgrel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgrel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgrel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgrel instance.
func (me *XsdGoPkgHasElems_Msgrel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgrel
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgrels {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgsub struct {
	Msgsubs []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgsub"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgsub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgsub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgsub instance.
func (me *XsdGoPkgHasElems_Msgsub) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgsub
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgsubs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsg struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msgrel

	XsdGoPkgHasElems_Msgsub

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Msgmain
}

//	If the WalkHandlers.TxsdMsg function is not nil (ie. was set by outside code), calls it with this TxsdMsg instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdMsg instance.
func (me *TxsdMsg) Walk() {
	fn := WalkHandlers.TxsdMsg
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElem_Msgmain.Walk()
	me.XsdGoPkgHasElems_Msgrel.Walk()
	me.XsdGoPkgHasElems_Msgsub.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msg struct {
	Msgs []*TxsdMsg `xml:"http://docbook.org/ns/docbook msg"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msg instance.
func (me *XsdGoPkgHasElems_Msg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msg
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgexplan struct {
	Msgexplans []*TxsdWarning `xml:"http://docbook.org/ns/docbook msgexplan"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgexplan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgexplan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgexplan instance.
func (me *XsdGoPkgHasElems_Msgexplan) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgexplan
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgexplans {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msglevel struct {
	Msglevels []*TxsdSurname `xml:"http://docbook.org/ns/docbook msglevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msglevel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msglevel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msglevel instance.
func (me *XsdGoPkgHasElems_Msglevel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msglevel
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msglevels {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgaud struct {
	Msgauds []*TxsdSurname `xml:"http://docbook.org/ns/docbook msgaud"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgaud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgaud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgaud instance.
func (me *XsdGoPkgHasElems_Msgaud) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgaud
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgauds {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgorig struct {
	Msgorigs []*TxsdSurname `xml:"http://docbook.org/ns/docbook msgorig"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgorig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgorig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgorig instance.
func (me *XsdGoPkgHasElems_Msgorig) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgorig
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgorigs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsginfo struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msglevel

	XsdGoPkgHasElems_Msgaud

	XsdGoPkgHasElems_Msgorig

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdMsginfo function is not nil (ie. was set by outside code), calls it with this TxsdMsginfo instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdMsginfo instance.
func (me *TxsdMsginfo) Walk() {
	fn := WalkHandlers.TxsdMsginfo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Msglevel.Walk()
	me.XsdGoPkgHasElems_Msgaud.Walk()
	me.XsdGoPkgHasElems_Msgorig.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msginfo struct {
	Msginfo *TxsdMsginfo `xml:"http://docbook.org/ns/docbook msginfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msginfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msginfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msginfo instance.
func (me *XsdGoPkgHasElem_Msginfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msginfo
	if fn != nil {
		fn(me, true)
	}
	me.Msginfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsgentry struct {
	XsdGoPkgHasElems_Msgexplan

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Msginfo

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Msg
}

//	If the WalkHandlers.TxsdMsgentry function is not nil (ie. was set by outside code), calls it with this TxsdMsgentry instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdMsgentry instance.
func (me *TxsdMsgentry) Walk() {
	fn := WalkHandlers.TxsdMsgentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Msgexplan.Walk()
	me.XsdGoPkgHasElem_Msginfo.Walk()
	me.XsdGoPkgHasElems_Msg.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgentry struct {
	Msgentries []*TxsdMsgentry `xml:"http://docbook.org/ns/docbook msgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgentry instance.
func (me *XsdGoPkgHasElems_Msgentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Msgorig_XsdtString_ struct {
	Msgorig xsdt.String `xml:"http://docbook.org/ns/docbook msgorig,attr"`
}

type XsdGoPkgHasAttr_Msglevel_XsdtString_ struct {
	Msglevel xsdt.String `xml:"http://docbook.org/ns/docbook msglevel,attr"`
}

type XsdGoPkgHasAttr_Msgaud_XsdtString_ struct {
	Msgaud xsdt.String `xml:"http://docbook.org/ns/docbook msgaud,attr"`
}

type TxsdSimplemsgentry struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Msglevel_XsdtString_

	XsdGoPkgHasAttr_Msgaud_XsdtString_

	XsdGoPkgHasElem_Msgtext

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msgexplan

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Msgorig_XsdtString_
}

//	If the WalkHandlers.TxsdSimplemsgentry function is not nil (ie. was set by outside code), calls it with this TxsdSimplemsgentry instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdSimplemsgentry instance.
func (me *TxsdSimplemsgentry) Walk() {
	fn := WalkHandlers.TxsdSimplemsgentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Msgtext.Walk()
	me.XsdGoPkgHasElems_Msgexplan.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Simplemsgentry struct {
	Simplemsgentries []*TxsdSimplemsgentry `xml:"http://docbook.org/ns/docbook simplemsgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplemsgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplemsgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplemsgentry instance.
func (me *XsdGoPkgHasElems_Simplemsgentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Simplemsgentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Simplemsgentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMsgset struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Msgentry

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Simplemsgentry

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.TxsdMsgset function is not nil (ie. was set by outside code), calls it with this TxsdMsgset instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMsgset instance.
func (me *TxsdMsgset) Walk() {
	fn := WalkHandlers.TxsdMsgset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Msgentry.Walk()
	me.XsdGoPkgHasElems_Simplemsgentry.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgset struct {
	Msgsets []*TxsdMsgset `xml:"http://docbook.org/ns/docbook msgset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgset instance.
func (me *XsdGoPkgHasElems_Msgset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Rowsep_TxsdEntryRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Rotate_TxsdEntryRotate_ struct {
	Rotate TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rotate,attr"`
}

type TxsdEntryValign xsdt.Token

//	Returns true if the value of this enumerated TxsdEntryValign is "top".
func (me TxsdEntryValign) IsTop() bool { return me == "top" }

//	Since TxsdEntryValign is just a simple String type, this merely returns the current string value.
func (me TxsdEntryValign) String() string { return xsdt.Token(me).String() }

//	Since TxsdEntryValign is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdEntryValign) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdEntryValign's alias type xsdt.Token.
func (me TxsdEntryValign) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdEntryValign is "bottom".
func (me TxsdEntryValign) IsBottom() bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdEntryValign is "middle".
func (me TxsdEntryValign) IsMiddle() bool { return me == "middle" }

type XsdGoPkgHasAttr_Valign_TxsdEntryValign_ struct {
	Valign TxsdEntryValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdEntryColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Morerows_XsdtNmtoken_ struct {
	Morerows xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook morerows,attr"`
}

type TxsdEntry struct {
	XsdGoPkgHasAttr_Align_TxsdEntryAlign_

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAttr_Rowsep_TxsdEntryRowsep_

	XsdGoPkgHasAttr_Spanname_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasAttr_Rotate_TxsdEntryRotate_

	XsdGoPkgHasAttr_Nameend_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdEntryValign_

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Person

	XsdGoPkgHasAttr_Colsep_TxsdEntryColsep_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Namest_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAttr_Morerows_XsdtNmtoken_

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Colname_XsdtString_

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Varname
}

//	If the WalkHandlers.TxsdEntry function is not nil (ie. was set by outside code), calls it with this TxsdEntry instance as the single argument. Then calls the Walk() method on 103/165 embed(s) and 0/0 field(s) belonging to this TxsdEntry instance.
func (me *TxsdEntry) Walk() {
	fn := WalkHandlers.TxsdEntry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Entry struct {
	Entries []*TxsdEntry `xml:"http://docbook.org/ns/docbook entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entry instance.
func (me *XsdGoPkgHasElems_Entry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Entry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Entries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Rowsep_TxsdRowRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdRowValign_ struct {
	Valign TxsdEntryValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdRow struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Entry

	XsdGoPkgHasAttr_Rowsep_TxsdRowRowsep_

	XsdGoPkgHasAttr_Valign_TxsdRowValign_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Entrytbl
}

//	If the WalkHandlers.TxsdRow function is not nil (ie. was set by outside code), calls it with this TxsdRow instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdRow instance.
func (me *TxsdRow) Walk() {
	fn := WalkHandlers.TxsdRow
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Entrytbl.Walk()
	me.XsdGoPkgHasElems_Entry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Row struct {
	Rows []*TxsdRow `xml:"http://docbook.org/ns/docbook row"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Row instance.
func (me *XsdGoPkgHasElems_Row) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Row
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Rows {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Valign_TxsdTbodyValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTbodyAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdTbody struct {
	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdTbodyValign_

	XsdGoPkgHasAttr_Align_TxsdTbodyAlign_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_
}

//	If the WalkHandlers.TxsdTbody function is not nil (ie. was set by outside code), calls it with this TxsdTbody instance as the single argument. Then calls the Walk() method on 1/23 embed(s) and 0/0 field(s) belonging to this TxsdTbody instance.
func (me *TxsdTbody) Walk() {
	fn := WalkHandlers.TxsdTbody
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Row.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tbody struct {
	Tbodies []*TxsdTbody `xml:"http://docbook.org/ns/docbook tbody"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tbody instance.
func (me *XsdGoPkgHasElems_Tbody) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tbody
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tbodies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Summary_XsdtString_ struct {
	Summary xsdt.String `xml:"http://docbook.org/ns/docbook summary,attr"`
}

type XsdGoPkgHasAttr_Pgwide_TxsdInformaltablePgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type XsdGoPkgHasAttr_Cellpadding_XsdtString_ struct {
	Cellpadding xsdt.String `xml:"http://docbook.org/ns/docbook cellpadding,attr"`
}

type TxsdInformaltableFrame xsdt.Token

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "box".
func (me TxsdInformaltableFrame) IsBox() bool { return me == "box" }

//	This convenience method just performs a simple type conversion to TxsdInformaltableFrame's alias type xsdt.Token.
func (me TxsdInformaltableFrame) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdInformaltableFrame is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdInformaltableFrame) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "above".
func (me TxsdInformaltableFrame) IsAbove() bool { return me == "above" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "vsides".
func (me TxsdInformaltableFrame) IsVsides() bool { return me == "vsides" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "lhs".
func (me TxsdInformaltableFrame) IsLhs() bool { return me == "lhs" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "top".
func (me TxsdInformaltableFrame) IsTop() bool { return me == "top" }

//	Since TxsdInformaltableFrame is just a simple String type, this merely returns the current string value.
func (me TxsdInformaltableFrame) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "bottom".
func (me TxsdInformaltableFrame) IsBottom() bool { return me == "bottom" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "border".
func (me TxsdInformaltableFrame) IsBorder() bool { return me == "border" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "void".
func (me TxsdInformaltableFrame) IsVoid() bool { return me == "void" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "all".
func (me TxsdInformaltableFrame) IsAll() bool { return me == "all" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "sides".
func (me TxsdInformaltableFrame) IsSides() bool { return me == "sides" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "none".
func (me TxsdInformaltableFrame) IsNone() bool { return me == "none" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "below".
func (me TxsdInformaltableFrame) IsBelow() bool { return me == "below" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "hsides".
func (me TxsdInformaltableFrame) IsHsides() bool { return me == "hsides" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "topbot".
func (me TxsdInformaltableFrame) IsTopbot() bool { return me == "topbot" }

//	Returns true if the value of this enumerated TxsdInformaltableFrame is "rhs".
func (me TxsdInformaltableFrame) IsRhs() bool { return me == "rhs" }

type XsdGoPkgHasAttr_Frame_TxsdInformaltableFrame_ struct {
	Frame TxsdInformaltableFrame `xml:"http://docbook.org/ns/docbook frame,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdInformaltableRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTfootAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdTfootValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdTfoot struct {
	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTfootAlign_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdTfootValign_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_
}

//	If the WalkHandlers.TxsdTfoot function is not nil (ie. was set by outside code), calls it with this TxsdTfoot instance as the single argument. Then calls the Walk() method on 2/24 embed(s) and 0/0 field(s) belonging to this TxsdTfoot instance.
func (me *TxsdTfoot) Walk() {
	fn := WalkHandlers.TxsdTfoot
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Colspec.Walk()
	me.XsdGoPkgHasElems_Row.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tfoot struct {
	Tfoot *TxsdTfoot `xml:"http://docbook.org/ns/docbook tfoot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tfoot instance.
func (me *XsdGoPkgHasElem_Tfoot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tfoot
	if fn != nil {
		fn(me, true)
	}
	me.Tfoot.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInformaltableOrient xsdt.Token

//	Since TxsdInformaltableOrient is just a simple String type, this merely returns the current string value.
func (me TxsdInformaltableOrient) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdInformaltableOrient is "land".
func (me TxsdInformaltableOrient) IsLand() bool { return me == "land" }

//	This convenience method just performs a simple type conversion to TxsdInformaltableOrient's alias type xsdt.Token.
func (me TxsdInformaltableOrient) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdInformaltableOrient is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdInformaltableOrient) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdInformaltableOrient is "port".
func (me TxsdInformaltableOrient) IsPort() bool { return me == "port" }

type XsdGoPkgHasAttr_Orient_TxsdInformaltableOrient_ struct {
	Orient TxsdInformaltableOrient `xml:"http://docbook.org/ns/docbook orient,attr"`
}

type TxsdInformaltableRules xsdt.Token

//	Returns true if the value of this enumerated TxsdInformaltableRules is "all".
func (me TxsdInformaltableRules) IsAll() bool { return me == "all" }

//	Returns true if the value of this enumerated TxsdInformaltableRules is "cols".
func (me TxsdInformaltableRules) IsCols() bool { return me == "cols" }

//	Returns true if the value of this enumerated TxsdInformaltableRules is "rows".
func (me TxsdInformaltableRules) IsRows() bool { return me == "rows" }

//	Since TxsdInformaltableRules is just a simple String type, this merely returns the current string value.
func (me TxsdInformaltableRules) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdInformaltableRules is "none".
func (me TxsdInformaltableRules) IsNone() bool { return me == "none" }

//	Since TxsdInformaltableRules is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdInformaltableRules) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdInformaltableRules's alias type xsdt.Token.
func (me TxsdInformaltableRules) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdInformaltableRules is "groups".
func (me TxsdInformaltableRules) IsGroups() bool { return me == "groups" }

type XsdGoPkgHasAttr_Rules_TxsdInformaltableRules_ struct {
	Rules TxsdInformaltableRules `xml:"http://docbook.org/ns/docbook rules,attr"`
}

type XsdGoPkgHasAttr_Tabstyle_XsdtString_ struct {
	Tabstyle xsdt.String `xml:"http://docbook.org/ns/docbook tabstyle,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdInformaltableColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Border_XsdtNmtoken_ struct {
	Border xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook border,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdTgroupRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdTgroupColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTgroupAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type TxsdTgroup struct {
	XsdGoPkgHasAttr_Colsep_TxsdTgroupColsep_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTgroupAlign_

	XsdGoPkgHasAttr_Cols_XsdtNmtoken_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Tgroupstyle_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Spanspec

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasAttr_Rowsep_TxsdTgroupRowsep_

	XsdGoPkgHasElem_Tbody

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdTgroup function is not nil (ie. was set by outside code), calls it with this TxsdTgroup instance as the single argument. Then calls the Walk() method on 5/15 embed(s) and 0/0 field(s) belonging to this TxsdTgroup instance.
func (me *TxsdTgroup) Walk() {
	fn := WalkHandlers.TxsdTgroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Spanspec.Walk()
	me.XsdGoPkgHasElem_Tfoot.Walk()
	me.XsdGoPkgHasElems_Colspec.Walk()
	me.XsdGoPkgHasElem_Tbody.Walk()
	me.XsdGoPkgHasElem_Thead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tgroup struct {
	Tgroups []*TxsdTgroup `xml:"http://docbook.org/ns/docbook tgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tgroup instance.
func (me *XsdGoPkgHasElems_Tgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tgroup
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tgroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInformaltable struct {
	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Pgwide_TxsdInformaltablePgwide_

	XsdGoPkgHasAttr_Cellpadding_XsdtString_

	XsdGoPkgHasAttr_Frame_TxsdInformaltableFrame_

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdInformaltableRowsep_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Orient_TxsdInformaltableOrient_

	XsdGoPkgHasElems_Col

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Rules_TxsdInformaltableRules_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Tabstyle_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdInformaltableColsep_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Border_XsdtNmtoken_

	XsdGoPkgHasElems_Tgroup

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Colgroup

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Rowheader_TxsdInformaltableRowheader_

	XsdGoPkgHasAttr_Cellspacing_XsdtString_

	XsdGoPkgHasElems_Tbody

	XsdGoPkgHasAttr_Summary_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_
}

//	If the WalkHandlers.TxsdInformaltable function is not nil (ie. was set by outside code), calls it with this TxsdInformaltable instance as the single argument. Then calls the Walk() method on 6/41 embed(s) and 0/0 field(s) belonging to this TxsdInformaltable instance.
func (me *TxsdInformaltable) Walk() {
	fn := WalkHandlers.TxsdInformaltable
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Tbody.Walk()
	me.XsdGoPkgHasElem_Tfoot.Walk()
	me.XsdGoPkgHasElems_Col.Walk()
	me.XsdGoPkgHasElem_Thead.Walk()
	me.XsdGoPkgHasElems_Tgroup.Walk()
	me.XsdGoPkgHasElems_Colgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Informaltable struct {
	Informaltables []*TxsdInformaltable `xml:"http://docbook.org/ns/docbook informaltable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informaltable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informaltable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informaltable instance.
func (me *XsdGoPkgHasElems_Informaltable) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Informaltable
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Informaltables {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOthercreditClass xsdt.Token

//	Returns true if the value of this enumerated TxsdOthercreditClass is "graphicdesigner".
func (me TxsdOthercreditClass) IsGraphicdesigner() bool { return me == "graphicdesigner" }

//	Since TxsdOthercreditClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOthercreditClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "technicaleditor".
func (me TxsdOthercreditClass) IsTechnicaleditor() bool { return me == "technicaleditor" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "other".
func (me TxsdOthercreditClass) IsOther() bool { return me == "other" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "translator".
func (me TxsdOthercreditClass) IsTranslator() bool { return me == "translator" }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "productioneditor".
func (me TxsdOthercreditClass) IsProductioneditor() bool { return me == "productioneditor" }

//	This convenience method just performs a simple type conversion to TxsdOthercreditClass's alias type xsdt.Token.
func (me TxsdOthercreditClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdOthercreditClass is "copyeditor".
func (me TxsdOthercreditClass) IsCopyeditor() bool { return me == "copyeditor" }

//	Since TxsdOthercreditClass is just a simple String type, this merely returns the current string value.
func (me TxsdOthercreditClass) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Class_TxsdOthercreditClass_ struct {
	Class TxsdOthercreditClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdOthercredit struct {
	XsdGoPkgHasElems_Orgdiv

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasAttr_Class_TxsdOthercreditClass_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Orgname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Contrib
}

//	If the WalkHandlers.TxsdOthercredit function is not nil (ie. was set by outside code), calls it with this TxsdOthercredit instance as the single argument. Then calls the Walk() method on 8/14 embed(s) and 0/0 field(s) belonging to this TxsdOthercredit instance.
func (me *TxsdOthercredit) Walk() {
	fn := WalkHandlers.TxsdOthercredit
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Orgdiv.Walk()
	me.XsdGoPkgHasElems_Affiliation.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElem_Personname.Walk()
	me.XsdGoPkgHasElem_Orgname.Walk()
	me.XsdGoPkgHasElems_Contrib.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Othercredit struct {
	Othercredits []*TxsdOthercredit `xml:"http://docbook.org/ns/docbook othercredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Othercredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Othercredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Othercredit instance.
func (me *XsdGoPkgHasElems_Othercredit) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Othercredit
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Othercredits {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Contractsponsor struct {
	Contractsponsors []*TxsdSurname `xml:"http://docbook.org/ns/docbook contractsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contractsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contractsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contractsponsor instance.
func (me *XsdGoPkgHasElems_Contractsponsor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Contractsponsor
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Contractsponsors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Edition struct {
	Editions []*TxsdSurname `xml:"http://docbook.org/ns/docbook edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Edition instance.
func (me *XsdGoPkgHasElems_Edition) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Edition
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Editions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Legalnotice struct {
	Legalnotices []*TxsdWarning `xml:"http://docbook.org/ns/docbook legalnotice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Legalnotice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Legalnotice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Legalnotice instance.
func (me *XsdGoPkgHasElems_Legalnotice) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Legalnotice
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Legalnotices {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPrinthistory struct {
	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdPrinthistory function is not nil (ie. was set by outside code), calls it with this TxsdPrinthistory instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdPrinthistory instance.
func (me *TxsdPrinthistory) Walk() {
	fn := WalkHandlers.TxsdPrinthistory
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Printhistory struct {
	Printhistories []*TxsdPrinthistory `xml:"http://docbook.org/ns/docbook printhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Printhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Printhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Printhistory instance.
func (me *XsdGoPkgHasElems_Printhistory) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Printhistory
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Printhistories {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Volumenum struct {
	Volumenums []*TxsdSurname `xml:"http://docbook.org/ns/docbook volumenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Volumenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Volumenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Volumenum instance.
func (me *XsdGoPkgHasElems_Volumenum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Volumenum
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Volumenums {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Contractnum struct {
	Contractnums []*TxsdSurname `xml:"http://docbook.org/ns/docbook contractnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contractnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contractnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contractnum instance.
func (me *XsdGoPkgHasElems_Contractnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Contractnum
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Contractnums {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Class_TxsdBibliorelationClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type XsdGoPkgHasAttr_Othertype_XsdtNmtoken_ struct {
	Othertype xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook othertype,attr"`
}

type TxsdBibliorelationType xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdBibliorelationType's alias type xsdt.Token.
func (me TxsdBibliorelationType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdBibliorelationType is just a simple String type, this merely returns the current string value.
func (me TxsdBibliorelationType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "replaces".
func (me TxsdBibliorelationType) IsReplaces() bool { return me == "replaces" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "hasformat".
func (me TxsdBibliorelationType) IsHasformat() bool { return me == "hasformat" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isversionof".
func (me TxsdBibliorelationType) IsIsversionof() bool { return me == "isversionof" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isreferencedby".
func (me TxsdBibliorelationType) IsIsreferencedby() bool { return me == "isreferencedby" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isrequiredby".
func (me TxsdBibliorelationType) IsIsrequiredby() bool { return me == "isrequiredby" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "references".
func (me TxsdBibliorelationType) IsReferences() bool { return me == "references" }

//	Since TxsdBibliorelationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliorelationType) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "hasversion".
func (me TxsdBibliorelationType) IsHasversion() bool { return me == "hasversion" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isformatof".
func (me TxsdBibliorelationType) IsIsformatof() bool { return me == "isformatof" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "othertype".
func (me TxsdBibliorelationType) IsOthertype() bool { return me == "othertype" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "haspart".
func (me TxsdBibliorelationType) IsHaspart() bool { return me == "haspart" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "ispartof".
func (me TxsdBibliorelationType) IsIspartof() bool { return me == "ispartof" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "isreplacedby".
func (me TxsdBibliorelationType) IsIsreplacedby() bool { return me == "isreplacedby" }

//	Returns true if the value of this enumerated TxsdBibliorelationType is "requires".
func (me TxsdBibliorelationType) IsRequires() bool { return me == "requires" }

type XsdGoPkgHasAttr_Type_TxsdBibliorelationType_ struct {
	Type TxsdBibliorelationType `xml:"http://docbook.org/ns/docbook type,attr"`
}

type TxsdBibliorelation struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Type_TxsdBibliorelationType_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Class_TxsdBibliorelationClass_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAttr_Othertype_XsdtNmtoken_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdBibliorelation function is not nil (ie. was set by outside code), calls it with this TxsdBibliorelation instance as the single argument. Then calls the Walk() method on 5/22 embed(s) and 0/0 field(s) belonging to this TxsdBibliorelation instance.
func (me *TxsdBibliorelation) Walk() {
	fn := WalkHandlers.TxsdBibliorelation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliorelation struct {
	Bibliorelations []*TxsdBibliorelation `xml:"http://docbook.org/ns/docbook bibliorelation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliorelation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliorelation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliorelation instance.
func (me *XsdGoPkgHasElems_Bibliorelation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliorelation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliorelations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliomisc struct {
	Bibliomiscs []*TxsdSurname `xml:"http://docbook.org/ns/docbook bibliomisc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomisc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomisc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomisc instance.
func (me *XsdGoPkgHasElems_Bibliomisc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliomisc
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliomiscs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Pubdate struct {
	Pubdates []*TxsdDate `xml:"http://docbook.org/ns/docbook pubdate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pubdate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pubdate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pubdate instance.
func (me *XsdGoPkgHasElems_Pubdate) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Pubdate
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Pubdates {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keyword struct {
	Keywords []*TxsdDate `xml:"http://docbook.org/ns/docbook keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keyword instance.
func (me *XsdGoPkgHasElems_Keyword) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keyword
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keywords {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdKeywordset struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Keyword

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdKeywordset function is not nil (ie. was set by outside code), calls it with this TxsdKeywordset instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdKeywordset instance.
func (me *TxsdKeywordset) Walk() {
	fn := WalkHandlers.TxsdKeywordset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Keyword.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keywordset struct {
	Keywordsets []*TxsdKeywordset `xml:"http://docbook.org/ns/docbook keywordset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keywordset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keywordset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keywordset instance.
func (me *XsdGoPkgHasElems_Keywordset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keywordset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keywordsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCollab struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdCollab function is not nil (ie. was set by outside code), calls it with this TxsdCollab instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdCollab instance.
func (me *TxsdCollab) Walk() {
	fn := WalkHandlers.TxsdCollab
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Affiliation.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Collab struct {
	Collabs []*TxsdCollab `xml:"http://docbook.org/ns/docbook collab"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Collab function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collab instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collab instance.
func (me *XsdGoPkgHasElems_Collab) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Collab
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Collabs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdLocator struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	xlink.XsdGoPkgHasAttr_Label

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdLocator function is not nil (ie. was set by outside code), calls it with this TxsdLocator instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdLocator instance.
func (me *TxsdLocator) Walk() {
	fn := WalkHandlers.TxsdLocator
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Locator struct {
	Locators []*TxsdLocator `xml:"http://docbook.org/ns/docbook locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Locator instance.
func (me *XsdGoPkgHasElems_Locator) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Locator
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Locators {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdArc struct {
	xlink.XsdGoPkgHasAttr_To

	xlink.XsdGoPkgHasAttr_From

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdArc function is not nil (ie. was set by outside code), calls it with this TxsdArc instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdArc instance.
func (me *TxsdArc) Walk() {
	fn := WalkHandlers.TxsdArc
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Arc struct {
	Arcs []*TxsdArc `xml:"http://docbook.org/ns/docbook arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arc instance.
func (me *XsdGoPkgHasElems_Arc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Arc
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Arcs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdExtendedlink struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Locator

	XsdGoPkgHasElems_Arc
}

//	If the WalkHandlers.TxsdExtendedlink function is not nil (ie. was set by outside code), calls it with this TxsdExtendedlink instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdExtendedlink instance.
func (me *TxsdExtendedlink) Walk() {
	fn := WalkHandlers.TxsdExtendedlink
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Arc.Walk()
	me.XsdGoPkgHasElems_Locator.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Extendedlink struct {
	Extendedlinks []*TxsdExtendedlink `xml:"http://docbook.org/ns/docbook extendedlink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extendedlink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extendedlink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extendedlink instance.
func (me *XsdGoPkgHasElems_Extendedlink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Extendedlink
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Extendedlinks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAbstract struct {
	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Para
}

//	If the WalkHandlers.TxsdAbstract function is not nil (ie. was set by outside code), calls it with this TxsdAbstract instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TxsdAbstract instance.
func (me *TxsdAbstract) Walk() {
	fn := WalkHandlers.TxsdAbstract
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Abstract struct {
	Abstracts []*TxsdAbstract `xml:"http://docbook.org/ns/docbook abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abstract instance.
func (me *XsdGoPkgHasElems_Abstract) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Abstract
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Abstracts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCover struct {
	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Para
}

//	If the WalkHandlers.TxsdCover function is not nil (ie. was set by outside code), calls it with this TxsdCover instance as the single argument. Then calls the Walk() method on 24/47 embed(s) and 0/0 field(s) belonging to this TxsdCover instance.
func (me *TxsdCover) Walk() {
	fn := WalkHandlers.TxsdCover
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Cover struct {
	Covers []*TxsdCover `xml:"http://docbook.org/ns/docbook cover"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cover instance.
func (me *XsdGoPkgHasElems_Cover) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Cover
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Covers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Othertemporal_XsdtNmtoken_ struct {
	Othertemporal xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook othertemporal,attr"`
}

type TxsdBibliocoverageSpatial xsdt.Token

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "tgn".
func (me TxsdBibliocoverageSpatial) IsTgn() bool { return me == "tgn" }

//	Since TxsdBibliocoverageSpatial is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliocoverageSpatial) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "dcmipoint".
func (me TxsdBibliocoverageSpatial) IsDcmipoint() bool { return me == "dcmipoint" }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "iso3166".
func (me TxsdBibliocoverageSpatial) IsIso3166() bool { return me == "iso3166" }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "otherspatial".
func (me TxsdBibliocoverageSpatial) IsOtherspatial() bool { return me == "otherspatial" }

//	This convenience method just performs a simple type conversion to TxsdBibliocoverageSpatial's alias type xsdt.Token.
func (me TxsdBibliocoverageSpatial) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdBibliocoverageSpatial is just a simple String type, this merely returns the current string value.
func (me TxsdBibliocoverageSpatial) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliocoverageSpatial is "dcmibox".
func (me TxsdBibliocoverageSpatial) IsDcmibox() bool { return me == "dcmibox" }

type XsdGoPkgHasAttr_Spatial_TxsdBibliocoverageSpatial_ struct {
	Spatial TxsdBibliocoverageSpatial `xml:"http://docbook.org/ns/docbook spatial,attr"`
}

type TxsdBibliocoverageTemporal xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdBibliocoverageTemporal's alias type xsdt.Token.
func (me TxsdBibliocoverageTemporal) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdBibliocoverageTemporal is just a simple String type, this merely returns the current string value.
func (me TxsdBibliocoverageTemporal) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "w3c-dtf".
func (me TxsdBibliocoverageTemporal) IsW3CDtf() bool { return me == "w3c-dtf" }

//	Since TxsdBibliocoverageTemporal is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBibliocoverageTemporal) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "dcmiperiod".
func (me TxsdBibliocoverageTemporal) IsDcmiperiod() bool { return me == "dcmiperiod" }

//	Returns true if the value of this enumerated TxsdBibliocoverageTemporal is "othertemporal".
func (me TxsdBibliocoverageTemporal) IsOthertemporal() bool { return me == "othertemporal" }

type XsdGoPkgHasAttr_Temporal_TxsdBibliocoverageTemporal_ struct {
	Temporal TxsdBibliocoverageTemporal `xml:"http://docbook.org/ns/docbook temporal,attr"`
}

type XsdGoPkgHasAttr_Otherspatial_XsdtNmtoken_ struct {
	Otherspatial xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook otherspatial,attr"`
}

type TxsdBibliocoverage struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Spatial_TxsdBibliocoverageSpatial_

	XsdGoPkgHasAttr_Temporal_TxsdBibliocoverageTemporal_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Otherspatial_XsdtNmtoken_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Othertemporal_XsdtNmtoken_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdBibliocoverage function is not nil (ie. was set by outside code), calls it with this TxsdBibliocoverage instance as the single argument. Then calls the Walk() method on 5/22 embed(s) and 0/0 field(s) belonging to this TxsdBibliocoverage instance.
func (me *TxsdBibliocoverage) Walk() {
	fn := WalkHandlers.TxsdBibliocoverage
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliocoverage struct {
	Bibliocoverages []*TxsdBibliocoverage `xml:"http://docbook.org/ns/docbook bibliocoverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliocoverage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliocoverage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliocoverage instance.
func (me *XsdGoPkgHasElems_Bibliocoverage) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliocoverage
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliocoverages {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdItermset struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdItermset function is not nil (ie. was set by outside code), calls it with this TxsdItermset instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdItermset instance.
func (me *TxsdItermset) Walk() {
	fn := WalkHandlers.TxsdItermset
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Itermset struct {
	Itermsets []*TxsdItermset `xml:"http://docbook.org/ns/docbook itermset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Itermset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Itermset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Itermset instance.
func (me *XsdGoPkgHasElems_Itermset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Itermset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Itermsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAuthorgroup struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Othercredit
}

//	If the WalkHandlers.TxsdAuthorgroup function is not nil (ie. was set by outside code), calls it with this TxsdAuthorgroup instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdAuthorgroup instance.
func (me *TxsdAuthorgroup) Walk() {
	fn := WalkHandlers.TxsdAuthorgroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Authorgroup struct {
	Authorgroups []*TxsdAuthorgroup `xml:"http://docbook.org/ns/docbook authorgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Authorgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Authorgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Authorgroup instance.
func (me *XsdGoPkgHasElems_Authorgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Authorgroup
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Authorgroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Class_TxsdBiblioidClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdBiblioid struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Class_TxsdBiblioidClass_
}

//	If the WalkHandlers.TxsdBiblioid function is not nil (ie. was set by outside code), calls it with this TxsdBiblioid instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdBiblioid instance.
func (me *TxsdBiblioid) Walk() {
	fn := WalkHandlers.TxsdBiblioid
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Biblioid struct {
	Biblioids []*TxsdBiblioid `xml:"http://docbook.org/ns/docbook biblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioid instance.
func (me *XsdGoPkgHasElems_Biblioid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Biblioid
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Biblioids {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Releaseinfo struct {
	Releaseinfos []*TxsdSurname `xml:"http://docbook.org/ns/docbook releaseinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Releaseinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Releaseinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Releaseinfo instance.
func (me *XsdGoPkgHasElems_Releaseinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Releaseinfo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Releaseinfos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Pagenums struct {
	Pagenumses []*TxsdSurname `xml:"http://docbook.org/ns/docbook pagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pagenums instance.
func (me *XsdGoPkgHasElems_Pagenums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Pagenums
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Pagenumses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Relation_XsdtString_ struct {
	Relation xsdt.String `xml:"http://docbook.org/ns/docbook relation,attr"`
}

type XsdGoPkgHasElems_Publishername struct {
	Publishernames []*TxsdSurname `xml:"http://docbook.org/ns/docbook publishername"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publishername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publishername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publishername instance.
func (me *XsdGoPkgHasElems_Publishername) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Publishername
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Publishernames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Issuenum struct {
	Issuenums []*TxsdSurname `xml:"http://docbook.org/ns/docbook issuenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Issuenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Issuenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Issuenum instance.
func (me *XsdGoPkgHasElems_Issuenum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Issuenum
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Issuenums {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Publishername struct {
	Publishername *TxsdSurname `xml:"http://docbook.org/ns/docbook publishername"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publishername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publishername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publishername instance.
func (me *XsdGoPkgHasElem_Publishername) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Publishername
	if fn != nil {
		fn(me, true)
	}
	me.Publishername.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPublisher struct {
	XsdGoPkgHasElem_Publishername

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdPublisher function is not nil (ie. was set by outside code), calls it with this TxsdPublisher instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdPublisher instance.
func (me *TxsdPublisher) Walk() {
	fn := WalkHandlers.TxsdPublisher
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElem_Publishername.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Publisher struct {
	Publishers []*TxsdPublisher `xml:"http://docbook.org/ns/docbook publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publisher instance.
func (me *XsdGoPkgHasElems_Publisher) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Publisher
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Publishers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Artpagenums struct {
	Artpagenumses []*TxsdSurname `xml:"http://docbook.org/ns/docbook artpagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Artpagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Artpagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Artpagenums instance.
func (me *XsdGoPkgHasElems_Artpagenums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Artpagenums
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Artpagenumses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Scheme_XsdtNmtoken_ struct {
	Scheme xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook scheme,attr"`
}

type XsdGoPkgHasAttr_Weight_XsdtString_ struct {
	Weight xsdt.String `xml:"http://docbook.org/ns/docbook weight,attr"`
}

type XsdGoPkgHasElems_Subjectterm struct {
	Subjectterms []*TxsdDate `xml:"http://docbook.org/ns/docbook subjectterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subjectterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subjectterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subjectterm instance.
func (me *XsdGoPkgHasElems_Subjectterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Subjectterm
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Subjectterms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSubject struct {
	XsdGoPkgHasElems_Subjectterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Weight_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdSubject function is not nil (ie. was set by outside code), calls it with this TxsdSubject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdSubject instance.
func (me *TxsdSubject) Walk() {
	fn := WalkHandlers.TxsdSubject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Subjectterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Subject struct {
	Subjects []*TxsdSubject `xml:"http://docbook.org/ns/docbook subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subject instance.
func (me *XsdGoPkgHasElems_Subject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Subject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Subjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSubjectset struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Scheme_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdSubjectset function is not nil (ie. was set by outside code), calls it with this TxsdSubjectset instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdSubjectset instance.
func (me *TxsdSubjectset) Walk() {
	fn := WalkHandlers.TxsdSubjectset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Subject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Subjectset struct {
	Subjectsets []*TxsdSubjectset `xml:"http://docbook.org/ns/docbook subjectset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subjectset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subjectset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subjectset instance.
func (me *XsdGoPkgHasElems_Subjectset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Subjectset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Subjectsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Year struct {
	Years []*TxsdSurname `xml:"http://docbook.org/ns/docbook year"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Year instance.
func (me *XsdGoPkgHasElems_Year) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Year
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Years {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Holder struct {
	Holders []*TxsdSurname `xml:"http://docbook.org/ns/docbook holder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Holder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Holder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Holder instance.
func (me *XsdGoPkgHasElems_Holder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Holder
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Holders {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCopyright struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Holder

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Year
}

//	If the WalkHandlers.TxsdCopyright function is not nil (ie. was set by outside code), calls it with this TxsdCopyright instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdCopyright instance.
func (me *TxsdCopyright) Walk() {
	fn := WalkHandlers.TxsdCopyright
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Year.Walk()
	me.XsdGoPkgHasElems_Holder.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Copyright struct {
	Copyrights []*TxsdCopyright `xml:"http://docbook.org/ns/docbook copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Copyright function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Copyright instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Copyright instance.
func (me *XsdGoPkgHasElems_Copyright) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Copyright
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Copyrights {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Class_TxsdBibliosourceClass_ struct {
	Class TxsdCitebiblioidClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdBibliosource struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Otherclass_XsdtNmtoken_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAttr_Class_TxsdBibliosourceClass_

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Subscript
}

//	If the WalkHandlers.TxsdBibliosource function is not nil (ie. was set by outside code), calls it with this TxsdBibliosource instance as the single argument. Then calls the Walk() method on 5/20 embed(s) and 0/0 field(s) belonging to this TxsdBibliosource instance.
func (me *TxsdBibliosource) Walk() {
	fn := WalkHandlers.TxsdBibliosource
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliosource struct {
	Bibliosources []*TxsdBibliosource `xml:"http://docbook.org/ns/docbook bibliosource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliosource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliosource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliosource instance.
func (me *XsdGoPkgHasElems_Bibliosource) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliosource
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliosources {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Confnum struct {
	Confnums []*TxsdSurname `xml:"http://docbook.org/ns/docbook confnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confnum instance.
func (me *XsdGoPkgHasElems_Confnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Confnum
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Confnums {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Confdates struct {
	Confdateses []*TxsdSurname `xml:"http://docbook.org/ns/docbook confdates"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confdates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confdates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confdates instance.
func (me *XsdGoPkgHasElems_Confdates) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Confdates
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Confdateses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Conftitle struct {
	Conftitles []*TxsdSurname `xml:"http://docbook.org/ns/docbook conftitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Conftitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Conftitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Conftitle instance.
func (me *XsdGoPkgHasElems_Conftitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Conftitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Conftitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Confsponsor struct {
	Confsponsors []*TxsdSurname `xml:"http://docbook.org/ns/docbook confsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confsponsor instance.
func (me *XsdGoPkgHasElems_Confsponsor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Confsponsor
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Confsponsors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdConfgroup struct {
	XsdGoPkgHasElems_Conftitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Confsponsor

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Confnum

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Confdates
}

//	If the WalkHandlers.TxsdConfgroup function is not nil (ie. was set by outside code), calls it with this TxsdConfgroup instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdConfgroup instance.
func (me *TxsdConfgroup) Walk() {
	fn := WalkHandlers.TxsdConfgroup
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Confsponsor.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Confnum.Walk()
	me.XsdGoPkgHasElems_Confdates.Walk()
	me.XsdGoPkgHasElems_Conftitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Confgroup struct {
	Confgroups []*TxsdConfgroup `xml:"http://docbook.org/ns/docbook confgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confgroup instance.
func (me *XsdGoPkgHasElems_Confgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Confgroup
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Confgroups {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seriesvolnums struct {
	Seriesvolnumses []*TxsdSurname `xml:"http://docbook.org/ns/docbook seriesvolnums"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seriesvolnums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seriesvolnums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seriesvolnums instance.
func (me *XsdGoPkgHasElems_Seriesvolnums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seriesvolnums
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Seriesvolnumses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBibliomset struct {
	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasAttr_Relation_XsdtString_

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Author
}

//	If the WalkHandlers.TxsdBibliomset function is not nil (ie. was set by outside code), calls it with this TxsdBibliomset instance as the single argument. Then calls the Walk() method on 54/82 embed(s) and 0/0 field(s) belonging to this TxsdBibliomset instance.
func (me *TxsdBibliomset) Walk() {
	fn := WalkHandlers.TxsdBibliomset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Pubdate.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Contractsponsor.Walk()
	me.XsdGoPkgHasElems_Publishername.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Printhistory.Walk()
	me.XsdGoPkgHasElems_Bibliorelation.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Legalnotice.Walk()
	me.XsdGoPkgHasElems_Pagenums.Walk()
	me.XsdGoPkgHasElems_Contractnum.Walk()
	me.XsdGoPkgHasElems_Bibliomisc.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Edition.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Copyright.Walk()
	me.XsdGoPkgHasElems_Bibliocoverage.Walk()
	me.XsdGoPkgHasElems_Keywordset.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Abstract.Walk()
	me.XsdGoPkgHasElems_Biblioid.Walk()
	me.XsdGoPkgHasElems_Collab.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Cover.Walk()
	me.XsdGoPkgHasElems_Issuenum.Walk()
	me.XsdGoPkgHasElems_Authorgroup.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Bibliosource.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Releaseinfo.Walk()
	me.XsdGoPkgHasElems_Confgroup.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Publisher.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Volumenum.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Extendedlink.Walk()
	me.XsdGoPkgHasElems_Seriesvolnums.Walk()
	me.XsdGoPkgHasElems_Itermset.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElems_Artpagenums.Walk()
	me.XsdGoPkgHasElems_Subjectset.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliomset struct {
	Bibliomsets []*TxsdBibliomset `xml:"http://docbook.org/ns/docbook bibliomset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomset instance.
func (me *XsdGoPkgHasElems_Bibliomset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliomset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliomsets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBiblioset struct {
	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Relation_XsdtString_

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.TxsdBiblioset function is not nil (ie. was set by outside code), calls it with this TxsdBiblioset instance as the single argument. Then calls the Walk() method on 50/71 embed(s) and 0/0 field(s) belonging to this TxsdBiblioset instance.
func (me *TxsdBiblioset) Walk() {
	fn := WalkHandlers.TxsdBiblioset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Itermset.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Authorgroup.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioid.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Legalnotice.Walk()
	me.XsdGoPkgHasElems_Releaseinfo.Walk()
	me.XsdGoPkgHasElems_Printhistory.Walk()
	me.XsdGoPkgHasElems_Keywordset.Walk()
	me.XsdGoPkgHasElems_Pagenums.Walk()
	me.XsdGoPkgHasElems_Publishername.Walk()
	me.XsdGoPkgHasElems_Issuenum.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Pubdate.Walk()
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Contractnum.Walk()
	me.XsdGoPkgHasElems_Publisher.Walk()
	me.XsdGoPkgHasElems_Volumenum.Walk()
	me.XsdGoPkgHasElems_Artpagenums.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Edition.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Subjectset.Walk()
	me.XsdGoPkgHasElems_Copyright.Walk()
	me.XsdGoPkgHasElems_Bibliomset.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Seriesvolnums.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Confgroup.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Bibliosource.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Bibliomisc.Walk()
	me.XsdGoPkgHasElems_Collab.Walk()
	me.XsdGoPkgHasElems_Extendedlink.Walk()
	me.XsdGoPkgHasElems_Abstract.Walk()
	me.XsdGoPkgHasElems_Bibliorelation.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElems_Cover.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Bibliocoverage.Walk()
	me.XsdGoPkgHasElems_Contractsponsor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Biblioset struct {
	Bibliosets []*TxsdBiblioset `xml:"http://docbook.org/ns/docbook biblioset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioset instance.
func (me *XsdGoPkgHasElems_Biblioset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Biblioset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliosets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBiblioentry struct {
	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Org

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasElems_Acronym
}

//	If the WalkHandlers.TxsdBiblioentry function is not nil (ie. was set by outside code), calls it with this TxsdBiblioentry instance as the single argument. Then calls the Walk() method on 51/70 embed(s) and 0/0 field(s) belonging to this TxsdBiblioentry instance.
func (me *TxsdBiblioentry) Walk() {
	fn := WalkHandlers.TxsdBiblioentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Publishername.Walk()
	me.XsdGoPkgHasElems_Itermset.Walk()
	me.XsdGoPkgHasElems_Pagenums.Walk()
	me.XsdGoPkgHasElems_Confgroup.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Contractsponsor.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Edition.Walk()
	me.XsdGoPkgHasElems_Legalnotice.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Printhistory.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Volumenum.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Contractnum.Walk()
	me.XsdGoPkgHasElems_Bibliorelation.Walk()
	me.XsdGoPkgHasElems_Bibliomisc.Walk()
	me.XsdGoPkgHasElems_Pubdate.Walk()
	me.XsdGoPkgHasElems_Keywordset.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Biblioset.Walk()
	me.XsdGoPkgHasElems_Cover.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Artpagenums.Walk()
	me.XsdGoPkgHasElems_Bibliomset.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Authorgroup.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Extendedlink.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Abstract.Walk()
	me.XsdGoPkgHasElems_Subjectset.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Bibliocoverage.Walk()
	me.XsdGoPkgHasElems_Biblioid.Walk()
	me.XsdGoPkgHasElems_Copyright.Walk()
	me.XsdGoPkgHasElems_Bibliosource.Walk()
	me.XsdGoPkgHasElems_Seriesvolnums.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Publisher.Walk()
	me.XsdGoPkgHasElems_Collab.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Issuenum.Walk()
	me.XsdGoPkgHasElems_Releaseinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Biblioentry struct {
	Biblioentries []*TxsdBiblioentry `xml:"http://docbook.org/ns/docbook biblioentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Biblioentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Biblioentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Biblioentry instance.
func (me *XsdGoPkgHasElems_Biblioentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Biblioentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Biblioentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBibliomixed struct {
	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Bibliocoverage

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Abstract
}

//	If the WalkHandlers.TxsdBibliomixed function is not nil (ie. was set by outside code), calls it with this TxsdBibliomixed instance as the single argument. Then calls the Walk() method on 52/71 embed(s) and 0/0 field(s) belonging to this TxsdBibliomixed instance.
func (me *TxsdBibliomixed) Walk() {
	fn := WalkHandlers.TxsdBibliomixed
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Confgroup.Walk()
	me.XsdGoPkgHasElems_Biblioset.Walk()
	me.XsdGoPkgHasElems_Itermset.Walk()
	me.XsdGoPkgHasElems_Bibliocoverage.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Seriesvolnums.Walk()
	me.XsdGoPkgHasElems_Extendedlink.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Bibliomset.Walk()
	me.XsdGoPkgHasElems_Edition.Walk()
	me.XsdGoPkgHasElems_Copyright.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Bibliomisc.Walk()
	me.XsdGoPkgHasElems_Issuenum.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Contractsponsor.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Pagenums.Walk()
	me.XsdGoPkgHasElems_Abstract.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Collab.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Publisher.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Publishername.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Biblioid.Walk()
	me.XsdGoPkgHasElems_Bibliorelation.Walk()
	me.XsdGoPkgHasElems_Keywordset.Walk()
	me.XsdGoPkgHasElems_Printhistory.Walk()
	me.XsdGoPkgHasElems_Releaseinfo.Walk()
	me.XsdGoPkgHasElems_Volumenum.Walk()
	me.XsdGoPkgHasElems_Bibliosource.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Legalnotice.Walk()
	me.XsdGoPkgHasElems_Contractnum.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElems_Authorgroup.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Pubdate.Walk()
	me.XsdGoPkgHasElems_Subjectset.Walk()
	me.XsdGoPkgHasElems_Cover.Walk()
	me.XsdGoPkgHasElems_Artpagenums.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliomixed struct {
	Bibliomixeds []*TxsdBibliomixed `xml:"http://docbook.org/ns/docbook bibliomixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliomixed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliomixed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliomixed instance.
func (me *XsdGoPkgHasElems_Bibliomixed) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliomixed
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliomixeds {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBibliolist struct {
	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Task
}

//	If the WalkHandlers.TxsdBibliolist function is not nil (ie. was set by outside code), calls it with this TxsdBibliolist instance as the single argument. Then calls the Walk() method on 30/63 embed(s) and 0/0 field(s) belonging to this TxsdBibliolist instance.
func (me *TxsdBibliolist) Walk() {
	fn := WalkHandlers.TxsdBibliolist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Bibliomixed.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Biblioentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliolist struct {
	Bibliolists []*TxsdBibliolist `xml:"http://docbook.org/ns/docbook bibliolist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliolist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliolist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliolist instance.
func (me *XsdGoPkgHasElems_Bibliolist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliolist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliolists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSidebar struct {
	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdSidebar function is not nil (ie. was set by outside code), calls it with this TxsdSidebar instance as the single argument. Then calls the Walk() method on 29/61 embed(s) and 0/0 field(s) belonging to this TxsdSidebar instance.
func (me *TxsdSidebar) Walk() {
	fn := WalkHandlers.TxsdSidebar
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sidebar struct {
	Sidebars []*TxsdSidebar `xml:"http://docbook.org/ns/docbook sidebar"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sidebar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sidebar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sidebar instance.
func (me *XsdGoPkgHasElems_Sidebar) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sidebar
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sidebars {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCaution struct {
	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Anchor
}

//	If the WalkHandlers.TxsdCaution function is not nil (ie. was set by outside code), calls it with this TxsdCaution instance as the single argument. Then calls the Walk() method on 30/61 embed(s) and 0/0 field(s) belonging to this TxsdCaution instance.
func (me *TxsdCaution) Walk() {
	fn := WalkHandlers.TxsdCaution
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Caution struct {
	Cautions []*TxsdCaution `xml:"http://docbook.org/ns/docbook caution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Caution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Caution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Caution instance.
func (me *XsdGoPkgHasElems_Caution) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Caution
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Cautions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Mark_XsdtNmtoken_ struct {
	Mark xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook mark,attr"`
}

type XsdGoPkgHasAttr_Override_XsdtNmtoken_ struct {
	Override xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook override,attr"`
}

type TxsdListitem struct {
	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAttr_Override_XsdtNmtoken_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Example
}

//	If the WalkHandlers.TxsdListitem function is not nil (ie. was set by outside code), calls it with this TxsdListitem instance as the single argument. Then calls the Walk() method on 30/59 embed(s) and 0/0 field(s) belonging to this TxsdListitem instance.
func (me *TxsdListitem) Walk() {
	fn := WalkHandlers.TxsdListitem
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Listitem struct {
	Listitems []*TxsdListitem `xml:"http://docbook.org/ns/docbook listitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Listitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Listitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Listitem instance.
func (me *XsdGoPkgHasElems_Listitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Listitem
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Listitems {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdItemizedlistSpacing xsdt.Token

//	Returns true if the value of this enumerated TxsdItemizedlistSpacing is "compact".
func (me TxsdItemizedlistSpacing) IsCompact() bool { return me == "compact" }

//	Since TxsdItemizedlistSpacing is just a simple String type, this merely returns the current string value.
func (me TxsdItemizedlistSpacing) String() string { return xsdt.Token(me).String() }

//	Since TxsdItemizedlistSpacing is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdItemizedlistSpacing) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdItemizedlistSpacing's alias type xsdt.Token.
func (me TxsdItemizedlistSpacing) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdItemizedlistSpacing is "normal".
func (me TxsdItemizedlistSpacing) IsNormal() bool { return me == "normal" }

type XsdGoPkgHasAttr_Spacing_TxsdItemizedlistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type TxsdItemizedlist struct {
	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Mark_XsdtNmtoken_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Listitem

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Spacing_TxsdItemizedlistSpacing_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdItemizedlist function is not nil (ie. was set by outside code), calls it with this TxsdItemizedlist instance as the single argument. Then calls the Walk() method on 32/64 embed(s) and 0/0 field(s) belonging to this TxsdItemizedlist instance.
func (me *TxsdItemizedlist) Walk() {
	fn := WalkHandlers.TxsdItemizedlist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Listitem.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Itemizedlist struct {
	Itemizedlists []*TxsdItemizedlist `xml:"http://docbook.org/ns/docbook itemizedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Itemizedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Itemizedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Itemizedlist instance.
func (me *XsdGoPkgHasElems_Itemizedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Itemizedlist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Itemizedlists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCaption struct {
	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalequation
}

//	If the WalkHandlers.TxsdCaption function is not nil (ie. was set by outside code), calls it with this TxsdCaption instance as the single argument. Then calls the Walk() method on 32/73 embed(s) and 0/0 field(s) belonging to this TxsdCaption instance.
func (me *TxsdCaption) Walk() {
	fn := WalkHandlers.TxsdCaption
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Caption struct {
	Caption *TxsdCaption `xml:"http://docbook.org/ns/docbook caption"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Caption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Caption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Caption instance.
func (me *XsdGoPkgHasElem_Caption) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Caption
	if fn != nil {
		fn(me, true)
	}
	me.Caption.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInformalexample struct {
	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simpara
}

//	If the WalkHandlers.TxsdInformalexample function is not nil (ie. was set by outside code), calls it with this TxsdInformalexample instance as the single argument. Then calls the Walk() method on 32/62 embed(s) and 0/0 field(s) belonging to this TxsdInformalexample instance.
func (me *TxsdInformalexample) Walk() {
	fn := WalkHandlers.TxsdInformalexample
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElem_Caption.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Informalexample struct {
	Informalexamples []*TxsdInformalexample `xml:"http://docbook.org/ns/docbook informalexample"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalexample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalexample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalexample instance.
func (me *XsdGoPkgHasElems_Informalexample) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Informalexample
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Informalexamples {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRevdescription struct {
	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdRevdescription function is not nil (ie. was set by outside code), calls it with this TxsdRevdescription instance as the single argument. Then calls the Walk() method on 32/58 embed(s) and 0/0 field(s) belonging to this TxsdRevdescription instance.
func (me *TxsdRevdescription) Walk() {
	fn := WalkHandlers.TxsdRevdescription
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Revdescription struct {
	Revdescription *TxsdRevdescription `xml:"http://docbook.org/ns/docbook revdescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revdescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revdescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revdescription instance.
func (me *XsdGoPkgHasElem_Revdescription) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Revdescription
	if fn != nil {
		fn(me, true)
	}
	me.Revdescription.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRevision struct {
	XsdGoPkgHasElem_Date

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElem_Revremark

	XsdGoPkgHasElem_Revnumber

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElem_Revdescription
}

//	If the WalkHandlers.TxsdRevision function is not nil (ie. was set by outside code), calls it with this TxsdRevision instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdRevision instance.
func (me *TxsdRevision) Walk() {
	fn := WalkHandlers.TxsdRevision
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElem_Revremark.Walk()
	me.XsdGoPkgHasElem_Revnumber.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElem_Revdescription.Walk()
	me.XsdGoPkgHasElem_Date.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Revision struct {
	Revisions []*TxsdRevision `xml:"http://docbook.org/ns/docbook revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revision instance.
func (me *XsdGoPkgHasElems_Revision) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Revision
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Revisions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRevhistory struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Revision

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdRevhistory function is not nil (ie. was set by outside code), calls it with this TxsdRevhistory instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdRevhistory instance.
func (me *TxsdRevhistory) Walk() {
	fn := WalkHandlers.TxsdRevhistory
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Revision.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Revhistory struct {
	Revhistories []*TxsdRevhistory `xml:"http://docbook.org/ns/docbook revhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revhistory instance.
func (me *XsdGoPkgHasElems_Revhistory) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Revhistory
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Revhistories {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTip struct {
	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bridgehead
}

//	If the WalkHandlers.TxsdTip function is not nil (ie. was set by outside code), calls it with this TxsdTip instance as the single argument. Then calls the Walk() method on 34/61 embed(s) and 0/0 field(s) belonging to this TxsdTip instance.
func (me *TxsdTip) Walk() {
	fn := WalkHandlers.TxsdTip
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tip struct {
	Tips []*TxsdTip `xml:"http://docbook.org/ns/docbook tip"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tip instance.
func (me *XsdGoPkgHasElems_Tip) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tip
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tips {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Valign_TxsdTdValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Axis_XsdtString_ struct {
	Axis xsdt.String `xml:"http://docbook.org/ns/docbook axis,attr"`
}

type TxsdTdScope xsdt.Token

//	Since TxsdTdScope is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTdScope) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdTdScope is "colgroup".
func (me TxsdTdScope) IsColgroup() bool { return me == "colgroup" }

//	Returns true if the value of this enumerated TxsdTdScope is "rowgroup".
func (me TxsdTdScope) IsRowgroup() bool { return me == "rowgroup" }

//	This convenience method just performs a simple type conversion to TxsdTdScope's alias type xsdt.Token.
func (me TxsdTdScope) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdTdScope is just a simple String type, this merely returns the current string value.
func (me TxsdTdScope) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdTdScope is "row".
func (me TxsdTdScope) IsRow() bool { return me == "row" }

//	Returns true if the value of this enumerated TxsdTdScope is "col".
func (me TxsdTdScope) IsCol() bool { return me == "col" }

type XsdGoPkgHasAttr_Scope_TxsdTdScope_ struct {
	Scope TxsdTdScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdTdAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Colspan_XsdtNmtoken_ struct {
	Colspan xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook colspan,attr"`
}

type XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_ struct {
	Rowspan xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook rowspan,attr"`
}

type XsdGoPkgHasAttr_Abbr_XsdtString_ struct {
	Abbr xsdt.String `xml:"http://docbook.org/ns/docbook abbr,attr"`
}

type XsdGoPkgHasAttr_Headers_XsdtString_ struct {
	Headers xsdt.String `xml:"http://docbook.org/ns/docbook headers,attr"`
}

type TxsdTd struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAttr_Abbr_XsdtString_

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Headers_XsdtString_

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasAttr_Valign_TxsdTdValign_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAttr_Axis_XsdtString_

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Scope_TxsdTdScope_

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTdAlign_

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Colspan_XsdtNmtoken_

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Constant
}

//	If the WalkHandlers.TxsdTd function is not nil (ie. was set by outside code), calls it with this TxsdTd instance as the single argument. Then calls the Walk() method on 111/175 embed(s) and 0/0 field(s) belonging to this TxsdTd instance.
func (me *TxsdTd) Walk() {
	fn := WalkHandlers.TxsdTd
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Td struct {
	Tds []*TxsdTd `xml:"http://docbook.org/ns/docbook td"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Td function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Td instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Td instance.
func (me *XsdGoPkgHasElems_Td) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Td
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tds {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Align_TxsdThAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdThValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Scope_TxsdThScope_ struct {
	Scope TxsdTdScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type TxsdTh struct {
	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasAttr_Rowspan_XsdtNmtoken_

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Email

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Axis_XsdtString_

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Colspan_XsdtNmtoken_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Align_TxsdThAlign_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasAttr_Valign_TxsdThValign_

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Scope_TxsdThScope_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasAttr_Abbr_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Headers_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Code
}

//	If the WalkHandlers.TxsdTh function is not nil (ie. was set by outside code), calls it with this TxsdTh instance as the single argument. Then calls the Walk() method on 111/175 embed(s) and 0/0 field(s) belonging to this TxsdTh instance.
func (me *TxsdTh) Walk() {
	fn := WalkHandlers.TxsdTh
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Th struct {
	Ths []*TxsdTh `xml:"http://docbook.org/ns/docbook th"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Th function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Th instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Th instance.
func (me *XsdGoPkgHasElems_Th) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Th
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Ths {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Valign_TxsdTrValign_ struct {
	Valign TxsdColgroupValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdTr struct {
	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Charoff_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdTrAlign_

	XsdGoPkgHasAttr_Char_XsdtString_

	XsdGoPkgHasElems_Td

	XsdGoPkgHasElems_Th

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasAttr_Valign_TxsdTrValign_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_
}

//	If the WalkHandlers.TxsdTr function is not nil (ie. was set by outside code), calls it with this TxsdTr instance as the single argument. Then calls the Walk() method on 2/21 embed(s) and 0/0 field(s) belonging to this TxsdTr instance.
func (me *TxsdTr) Walk() {
	fn := WalkHandlers.TxsdTr
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Td.Walk()
	me.XsdGoPkgHasElems_Th.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tr struct {
	Trs []*TxsdTr `xml:"http://docbook.org/ns/docbook tr"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tr instance.
func (me *XsdGoPkgHasElems_Tr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tr
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Trs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Titleabbrev struct {
	Titleabbrev *TxsdTitleabbrev `xml:"http://docbook.org/ns/docbook titleabbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Titleabbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Titleabbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Titleabbrev instance.
func (me *XsdGoPkgHasElem_Titleabbrev) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Titleabbrev
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Orient_TxsdTableOrient_ struct {
	Orient TxsdInformaltableOrient `xml:"http://docbook.org/ns/docbook orient,attr"`
}

type XsdGoPkgHasAttr_Pgwide_TxsdTablePgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type XsdGoPkgHasAttr_Rowsep_TxsdTableRowsep_ struct {
	Rowsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook rowsep,attr"`
}

type XsdGoPkgHasAttr_Frame_TxsdTableFrame_ struct {
	Frame TxsdInformaltableFrame `xml:"http://docbook.org/ns/docbook frame,attr"`
}

type XsdGoPkgHasAttr_Rules_TxsdTableRules_ struct {
	Rules TxsdInformaltableRules `xml:"http://docbook.org/ns/docbook rules,attr"`
}

type XsdGoPkgHasAttr_Shortentry_TxsdTableShortentry_ struct {
	Shortentry TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook shortentry,attr"`
}

type XsdGoPkgHasAttr_Colsep_TxsdTableColsep_ struct {
	Colsep TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook colsep,attr"`
}

type XsdGoPkgHasAttr_Tocentry_TxsdTableTocentry_ struct {
	Tocentry TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook tocentry,attr"`
}

type TxsdTable struct {
	XsdGoPkgHasElem_Caption

	XsdGoPkgHasAttr_Border_XsdtNmtoken_

	XsdGoPkgHasAttr_Class_XsdtString_

	XsdGoPkgHasAttr_Summary_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Tabstyle_XsdtString_

	XsdGoPkgHasAttr_Onmouseup_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Lang_XsdtString_

	XsdGoPkgHasAttr_Orient_TxsdTableOrient_

	XsdGoPkgHasAttr_Pgwide_TxsdTablePgwide_

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasAttr_Cellpadding_XsdtString_

	XsdGoPkgHasAttr_Rowsep_TxsdTableRowsep_

	XsdGoPkgHasAttr_Frame_TxsdTableFrame_

	XsdGoPkgHasAttr_Rules_TxsdTableRules_

	XsdGoPkgHasAttr_Onkeyup_XsdtString_

	XsdGoPkgHasAttr_Style_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAttr_Shortentry_TxsdTableShortentry_

	XsdGoPkgHasElems_Tbody

	XsdGoPkgHasAttr_Onkeypress_XsdtString_

	XsdGoPkgHasAttr_Colsep_TxsdTableColsep_

	XsdGoPkgHasAttr_Onmousemove_XsdtString_

	XsdGoPkgHasElems_Col

	XsdGoPkgHasAttr_Tocentry_TxsdTableTocentry_

	XsdGoPkgHasAttr_Onmousedown_XsdtString_

	XsdGoPkgHasElems_Tgroup

	XsdGoPkgHasAttr_Onkeydown_XsdtString_

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasAttr_Rowheader_TxsdTableRowheader_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Onclick_XsdtString_

	XsdGoPkgHasElems_Colgroup

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Cellspacing_XsdtString_

	XsdGoPkgHasElems_Tr

	XsdGoPkgHasAttr_Onmouseout_XsdtString_

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Onmouseover_XsdtString_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasElem_Title

	XsdGoPkgHasAttr_Ondblclick_XsdtString_

	XsdGoPkgHasElem_Titleabbrev
}

//	If the WalkHandlers.TxsdTable function is not nil (ie. was set by outside code), calls it with this TxsdTable instance as the single argument. Then calls the Walk() method on 9/48 embed(s) and 0/0 field(s) belonging to this TxsdTable instance.
func (me *TxsdTable) Walk() {
	fn := WalkHandlers.TxsdTable
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Tr.Walk()
	me.XsdGoPkgHasElem_Titleabbrev.Walk()
	me.XsdGoPkgHasElem_Caption.Walk()
	me.XsdGoPkgHasElem_Thead.Walk()
	me.XsdGoPkgHasElems_Tbody.Walk()
	me.XsdGoPkgHasElems_Col.Walk()
	me.XsdGoPkgHasElems_Tgroup.Walk()
	me.XsdGoPkgHasElem_Tfoot.Walk()
	me.XsdGoPkgHasElems_Colgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Table struct {
	Tables []*TxsdTable `xml:"http://docbook.org/ns/docbook table"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Table instance.
func (me *XsdGoPkgHasElems_Table) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Table
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tables {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSubstepsPerformance xsdt.Token

//	Returns true if the value of this enumerated TxsdSubstepsPerformance is "optional".
func (me TxsdSubstepsPerformance) IsOptional() bool { return me == "optional" }

//	Since TxsdSubstepsPerformance is just a simple String type, this merely returns the current string value.
func (me TxsdSubstepsPerformance) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdSubstepsPerformance is "required".
func (me TxsdSubstepsPerformance) IsRequired() bool { return me == "required" }

//	Since TxsdSubstepsPerformance is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSubstepsPerformance) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TxsdSubstepsPerformance's alias type xsdt.Token.
func (me TxsdSubstepsPerformance) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Performance_TxsdSubstepsPerformance_ struct {
	Performance TxsdSubstepsPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type TxsdSubsteps struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Step

	XsdGoPkgHasAttr_Performance_TxsdSubstepsPerformance_
}

//	If the WalkHandlers.TxsdSubsteps function is not nil (ie. was set by outside code), calls it with this TxsdSubsteps instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdSubsteps instance.
func (me *TxsdSubsteps) Walk() {
	fn := WalkHandlers.TxsdSubsteps
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Substeps struct {
	Substeps *TxsdSubsteps `xml:"http://docbook.org/ns/docbook substeps"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Substeps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Substeps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Substeps instance.
func (me *XsdGoPkgHasElem_Substeps) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Substeps
	if fn != nil {
		fn(me, true)
	}
	me.Substeps.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Performance_TxsdStepalternativesPerformance_ struct {
	Performance TxsdSubstepsPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type TxsdStepalternatives struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Step

	XsdGoPkgHasAttr_Performance_TxsdStepalternativesPerformance_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdStepalternatives function is not nil (ie. was set by outside code), calls it with this TxsdStepalternatives instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdStepalternatives instance.
func (me *TxsdStepalternatives) Walk() {
	fn := WalkHandlers.TxsdStepalternatives
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Stepalternatives struct {
	Stepalternatives *TxsdStepalternatives `xml:"http://docbook.org/ns/docbook stepalternatives"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Stepalternatives function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Stepalternatives instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Stepalternatives instance.
func (me *XsdGoPkgHasElem_Stepalternatives) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Stepalternatives
	if fn != nil {
		fn(me, true)
	}
	me.Stepalternatives.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Performance_TxsdStepPerformance_ struct {
	Performance TxsdSubstepsPerformance `xml:"http://docbook.org/ns/docbook performance,attr"`
}

type TxsdStep struct {
	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElem_Substeps

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElem_Stepalternatives

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Performance_TxsdStepPerformance_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdStep function is not nil (ie. was set by outside code), calls it with this TxsdStep instance as the single argument. Then calls the Walk() method on 38/64 embed(s) and 0/0 field(s) belonging to this TxsdStep instance.
func (me *TxsdStep) Walk() {
	fn := WalkHandlers.TxsdStep
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElem_Substeps.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElem_Stepalternatives.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Step struct {
	Steps []*TxsdStep `xml:"http://docbook.org/ns/docbook step"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Step function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Step instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Step instance.
func (me *XsdGoPkgHasElems_Step) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Step
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Steps {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdProcedure struct {
	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Step

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdProcedure function is not nil (ie. was set by outside code), calls it with this TxsdProcedure instance as the single argument. Then calls the Walk() method on 37/62 embed(s) and 0/0 field(s) belonging to this TxsdProcedure instance.
func (me *TxsdProcedure) Walk() {
	fn := WalkHandlers.TxsdProcedure
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Step.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Procedure struct {
	Procedures []*TxsdProcedure `xml:"http://docbook.org/ns/docbook procedure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Procedure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Procedure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Procedure instance.
func (me *XsdGoPkgHasElems_Procedure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Procedure
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Procedures {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Listitem struct {
	Listitem *TxsdListitem `xml:"http://docbook.org/ns/docbook listitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Listitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Listitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Listitem instance.
func (me *XsdGoPkgHasElem_Listitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Listitem
	if fn != nil {
		fn(me, true)
	}
	me.Listitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Term struct {
	Terms []*TxsdSubtitle `xml:"http://docbook.org/ns/docbook term"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Term function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Term instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Term instance.
func (me *XsdGoPkgHasElems_Term) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Term
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Terms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdVarlistentry struct {
	XsdGoPkgHasElem_Listitem

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Term

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdVarlistentry function is not nil (ie. was set by outside code), calls it with this TxsdVarlistentry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdVarlistentry instance.
func (me *TxsdVarlistentry) Walk() {
	fn := WalkHandlers.TxsdVarlistentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Term.Walk()
	me.XsdGoPkgHasElem_Listitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Varlistentry struct {
	Varlistentries []*TxsdVarlistentry `xml:"http://docbook.org/ns/docbook varlistentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varlistentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varlistentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varlistentry instance.
func (me *XsdGoPkgHasElems_Varlistentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Varlistentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Varlistentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Spacing_TxsdVariablelistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type XsdGoPkgHasAttr_Termlength_XsdtString_ struct {
	Termlength xsdt.String `xml:"http://docbook.org/ns/docbook termlength,attr"`
}

type TxsdVariablelist struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Varlistentry

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAttr_Spacing_TxsdVariablelistSpacing_

	XsdGoPkgHasAttr_Termlength_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Figure
}

//	If the WalkHandlers.TxsdVariablelist function is not nil (ie. was set by outside code), calls it with this TxsdVariablelist instance as the single argument. Then calls the Walk() method on 38/64 embed(s) and 0/0 field(s) belonging to this TxsdVariablelist instance.
func (me *TxsdVariablelist) Walk() {
	fn := WalkHandlers.TxsdVariablelist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Varlistentry.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Variablelist struct {
	Variablelists []*TxsdVariablelist `xml:"http://docbook.org/ns/docbook variablelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Variablelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Variablelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Variablelist instance.
func (me *XsdGoPkgHasElems_Variablelist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Variablelist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Variablelists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdConstraintdef struct {
	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Note
}

//	If the WalkHandlers.TxsdConstraintdef function is not nil (ie. was set by outside code), calls it with this TxsdConstraintdef instance as the single argument. Then calls the Walk() method on 38/61 embed(s) and 0/0 field(s) belonging to this TxsdConstraintdef instance.
func (me *TxsdConstraintdef) Walk() {
	fn := WalkHandlers.TxsdConstraintdef
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Constraintdef struct {
	Constraintdefs []*TxsdConstraintdef `xml:"http://docbook.org/ns/docbook constraintdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Constraintdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Constraintdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Constraintdef instance.
func (me *XsdGoPkgHasElems_Constraintdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Constraintdef
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Constraintdefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBlockquote struct {
	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElem_Attribution

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdBlockquote function is not nil (ie. was set by outside code), calls it with this TxsdBlockquote instance as the single argument. Then calls the Walk() method on 40/62 embed(s) and 0/0 field(s) belonging to this TxsdBlockquote instance.
func (me *TxsdBlockquote) Walk() {
	fn := WalkHandlers.TxsdBlockquote
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElem_Attribution.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Blockquote struct {
	Blockquotes []*TxsdBlockquote `xml:"http://docbook.org/ns/docbook blockquote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Blockquote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Blockquote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Blockquote instance.
func (me *XsdGoPkgHasElems_Blockquote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Blockquote
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Blockquotes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Label struct {
	Label *TxsdSurname `xml:"http://docbook.org/ns/docbook label"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Label instance.
func (me *XsdGoPkgHasElem_Label) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Label
	if fn != nil {
		fn(me, true)
	}
	me.Label.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdQuestion struct {
	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElem_Label

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Destructorsynopsis
}

//	If the WalkHandlers.TxsdQuestion function is not nil (ie. was set by outside code), calls it with this TxsdQuestion instance as the single argument. Then calls the Walk() method on 40/59 embed(s) and 0/0 field(s) belonging to this TxsdQuestion instance.
func (me *TxsdQuestion) Walk() {
	fn := WalkHandlers.TxsdQuestion
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElem_Label.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Question struct {
	Question *TxsdQuestion `xml:"http://docbook.org/ns/docbook question"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Question function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Question instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Question instance.
func (me *XsdGoPkgHasElem_Question) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Question
	if fn != nil {
		fn(me, true)
	}
	me.Question.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Answer struct {
	Answers []*TxsdQuestion `xml:"http://docbook.org/ns/docbook answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Answer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Answer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Answer instance.
func (me *XsdGoPkgHasElems_Answer) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Answer
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Answers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdQandaentry struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Question

	XsdGoPkgHasElems_Answer

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdQandaentry function is not nil (ie. was set by outside code), calls it with this TxsdQandaentry instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdQandaentry instance.
func (me *TxsdQandaentry) Walk() {
	fn := WalkHandlers.TxsdQandaentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElem_Question.Walk()
	me.XsdGoPkgHasElems_Answer.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Qandaentry struct {
	Qandaentries []*TxsdQandaentry `xml:"http://docbook.org/ns/docbook qandaentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandaentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandaentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandaentry instance.
func (me *XsdGoPkgHasElems_Qandaentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Qandaentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Qandaentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdQandasetDefaultlabel xsdt.Token

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "qanda".
func (me TxsdQandasetDefaultlabel) IsQanda() bool { return me == "qanda" }

//	This convenience method just performs a simple type conversion to TxsdQandasetDefaultlabel's alias type xsdt.Token.
func (me TxsdQandasetDefaultlabel) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "number".
func (me TxsdQandasetDefaultlabel) IsNumber() bool { return me == "number" }

//	Since TxsdQandasetDefaultlabel is just a simple String type, this merely returns the current string value.
func (me TxsdQandasetDefaultlabel) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdQandasetDefaultlabel is "none".
func (me TxsdQandasetDefaultlabel) IsNone() bool { return me == "none" }

//	Since TxsdQandasetDefaultlabel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdQandasetDefaultlabel) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Defaultlabel_TxsdQandasetDefaultlabel_ struct {
	Defaultlabel TxsdQandasetDefaultlabel `xml:"http://docbook.org/ns/docbook defaultlabel,attr"`
}

type TxsdQandadiv struct {
	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Qandaentry

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Qandadiv

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Sidebar
}

//	If the WalkHandlers.TxsdQandadiv function is not nil (ie. was set by outside code), calls it with this TxsdQandadiv instance as the single argument. Then calls the Walk() method on 41/63 embed(s) and 0/0 field(s) belonging to this TxsdQandadiv instance.
func (me *TxsdQandadiv) Walk() {
	fn := WalkHandlers.TxsdQandadiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Qandaentry.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Qandadiv struct {
	Qandadivs []*TxsdQandadiv `xml:"http://docbook.org/ns/docbook qandadiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandadiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandadiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandadiv instance.
func (me *XsdGoPkgHasElems_Qandadiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Qandadiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Qandadivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdQandaset struct {
	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Qandaentry

	XsdGoPkgHasAttr_Defaultlabel_TxsdQandasetDefaultlabel_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Qandadiv

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdQandaset function is not nil (ie. was set by outside code), calls it with this TxsdQandaset instance as the single argument. Then calls the Walk() method on 42/64 embed(s) and 0/0 field(s) belonging to this TxsdQandaset instance.
func (me *TxsdQandaset) Walk() {
	fn := WalkHandlers.TxsdQandaset
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Qandaentry.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Qandadiv.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Qandaset struct {
	Qandasets []*TxsdQandaset `xml:"http://docbook.org/ns/docbook qandaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Qandaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Qandaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Qandaset instance.
func (me *XsdGoPkgHasElems_Qandaset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Qandaset
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Qandasets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Pgwide_TxsdExamplePgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdExample struct {
	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Pgwide_TxsdExamplePgwide_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Bridgehead
}

//	If the WalkHandlers.TxsdExample function is not nil (ie. was set by outside code), calls it with this TxsdExample instance as the single argument. Then calls the Walk() method on 42/66 embed(s) and 0/0 field(s) belonging to this TxsdExample instance.
func (me *TxsdExample) Walk() {
	fn := WalkHandlers.TxsdExample
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElem_Caption.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Example struct {
	Examples []*TxsdExample `xml:"http://docbook.org/ns/docbook example"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Example function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Example instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Example instance.
func (me *XsdGoPkgHasElems_Example) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Example
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Examples {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPara struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Classname
}

//	If the WalkHandlers.TxsdPara function is not nil (ie. was set by outside code), calls it with this TxsdPara instance as the single argument. Then calls the Walk() method on 117/151 embed(s) and 0/0 field(s) belonging to this TxsdPara instance.
func (me *TxsdPara) Walk() {
	fn := WalkHandlers.TxsdPara
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Para struct {
	Para *TxsdPara `xml:"http://docbook.org/ns/docbook para"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Para function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Para instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Para instance.
func (me *XsdGoPkgHasElem_Para) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Para
	if fn != nil {
		fn(me, true)
	}
	me.Para.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFormalpara struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Para
}

//	If the WalkHandlers.TxsdFormalpara function is not nil (ie. was set by outside code), calls it with this TxsdFormalpara instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdFormalpara instance.
func (me *TxsdFormalpara) Walk() {
	fn := WalkHandlers.TxsdFormalpara
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElem_Para.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Formalpara struct {
	Formalparas []*TxsdFormalpara `xml:"http://docbook.org/ns/docbook formalpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Formalpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Formalpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Formalpara instance.
func (me *XsdGoPkgHasElems_Formalpara) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Formalpara
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Formalparas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTasksummary struct {
	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Para
}

//	If the WalkHandlers.TxsdTasksummary function is not nil (ie. was set by outside code), calls it with this TxsdTasksummary instance as the single argument. Then calls the Walk() method on 43/61 embed(s) and 0/0 field(s) belonging to this TxsdTasksummary instance.
func (me *TxsdTasksummary) Walk() {
	fn := WalkHandlers.TxsdTasksummary
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tasksummary struct {
	Tasksummary *TxsdTasksummary `xml:"http://docbook.org/ns/docbook tasksummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tasksummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tasksummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tasksummary instance.
func (me *XsdGoPkgHasElem_Tasksummary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tasksummary
	if fn != nil {
		fn(me, true)
	}
	me.Tasksummary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Taskprerequisites struct {
	Taskprerequisites *TxsdTasksummary `xml:"http://docbook.org/ns/docbook taskprerequisites"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Taskprerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Taskprerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Taskprerequisites instance.
func (me *XsdGoPkgHasElem_Taskprerequisites) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Taskprerequisites
	if fn != nil {
		fn(me, true)
	}
	me.Taskprerequisites.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Taskrelated struct {
	Taskrelated *TxsdTasksummary `xml:"http://docbook.org/ns/docbook taskrelated"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Taskrelated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Taskrelated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Taskrelated instance.
func (me *XsdGoPkgHasElem_Taskrelated) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Taskrelated
	if fn != nil {
		fn(me, true)
	}
	me.Taskrelated.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Procedure struct {
	Procedure *TxsdProcedure `xml:"http://docbook.org/ns/docbook procedure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Procedure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Procedure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Procedure instance.
func (me *XsdGoPkgHasElem_Procedure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Procedure
	if fn != nil {
		fn(me, true)
	}
	me.Procedure.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTask struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Taskrelated

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElem_Procedure

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Tasksummary

	XsdGoPkgHasElem_Taskprerequisites

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdTask function is not nil (ie. was set by outside code), calls it with this TxsdTask instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdTask instance.
func (me *TxsdTask) Walk() {
	fn := WalkHandlers.TxsdTask
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElem_Tasksummary.Walk()
	me.XsdGoPkgHasElem_Taskprerequisites.Walk()
	me.XsdGoPkgHasElem_Taskrelated.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElem_Procedure.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Task struct {
	Tasks []*TxsdTask `xml:"http://docbook.org/ns/docbook task"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Task instance.
func (me *XsdGoPkgHasElems_Task) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Task
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tasks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Phrase struct {
	Phrase *TxsdPhrase `xml:"http://docbook.org/ns/docbook phrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Phrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Phrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Phrase instance.
func (me *XsdGoPkgHasElem_Phrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Phrase
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTextobject struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Textdata

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElem_Phrase

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Blockquote
}

//	If the WalkHandlers.TxsdTextobject function is not nil (ie. was set by outside code), calls it with this TxsdTextobject instance as the single argument. Then calls the Walk() method on 45/61 embed(s) and 0/0 field(s) belonging to this TxsdTextobject instance.
func (me *TxsdTextobject) Walk() {
	fn := WalkHandlers.TxsdTextobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElem_Textdata.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElem_Phrase.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Textobject struct {
	Textobjects []*TxsdTextobject `xml:"http://docbook.org/ns/docbook textobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Textobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Textobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Textobject instance.
func (me *XsdGoPkgHasElems_Textobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Textobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Textobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdProgramlisting struct {
	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasAttr_Continuation_TxsdProgramlistingContinuation_

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Editor

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasAttr_Linenumbering_TxsdProgramlistingLinenumbering_

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Language_XsdtString_
}

//	If the WalkHandlers.TxsdProgramlisting function is not nil (ie. was set by outside code), calls it with this TxsdProgramlisting instance as the single argument. Then calls the Walk() method on 82/112 embed(s) and 0/0 field(s) belonging to this TxsdProgramlisting instance.
func (me *TxsdProgramlisting) Walk() {
	fn := WalkHandlers.TxsdProgramlisting
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Textobject.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Programlisting struct {
	Programlisting *TxsdProgramlisting `xml:"http://docbook.org/ns/docbook programlisting"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Programlisting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Programlisting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Programlisting instance.
func (me *XsdGoPkgHasElem_Programlisting) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Programlisting
	if fn != nil {
		fn(me, true)
	}
	me.Programlisting.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdProgramlistingco struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Programlisting

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdProgramlistingco function is not nil (ie. was set by outside code), calls it with this TxsdProgramlistingco instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdProgramlistingco instance.
func (me *TxsdProgramlistingco) Walk() {
	fn := WalkHandlers.TxsdProgramlistingco
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Areaspec.Walk()
	me.XsdGoPkgHasElem_Programlisting.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Programlistingco struct {
	Programlistingcos []*TxsdProgramlistingco `xml:"http://docbook.org/ns/docbook programlistingco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Programlistingco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Programlistingco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Programlistingco instance.
func (me *XsdGoPkgHasElems_Programlistingco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Programlistingco
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Programlistingcos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Sortas_XsdtString_ struct {
	Sortas xsdt.String `xml:"http://docbook.org/ns/docbook sortas,attr"`
}

type XsdGoPkgHasAttr_Otherterm_XsdtIdref_ struct {
	Otherterm xsdt.Idref `xml:"http://docbook.org/ns/docbook otherterm,attr"`
}

type TxsdGlosssee struct {
	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Command

	XsdGoPkgHasAttr_Otherterm_XsdtIdref_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Database

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Trademark
}

//	If the WalkHandlers.TxsdGlosssee function is not nil (ie. was set by outside code), calls it with this TxsdGlosssee instance as the single argument. Then calls the Walk() method on 78/103 embed(s) and 0/0 field(s) belonging to this TxsdGlosssee instance.
func (me *TxsdGlosssee) Walk() {
	fn := WalkHandlers.TxsdGlosssee
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glosssee struct {
	Glosssee *TxsdGlosssee `xml:"http://docbook.org/ns/docbook glosssee"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glosssee function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glosssee instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glosssee instance.
func (me *XsdGoPkgHasElem_Glosssee) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glosssee
	if fn != nil {
		fn(me, true)
	}
	me.Glosssee.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossterm struct {
	Glossterm *TxsdGlossterm `xml:"http://docbook.org/ns/docbook glossterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossterm instance.
func (me *XsdGoPkgHasElem_Glossterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossterm
	if fn != nil {
		fn(me, true)
	}
	me.Glossterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Abbrev struct {
	Abbrev *TxsdAcronym `xml:"http://docbook.org/ns/docbook abbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abbrev instance.
func (me *XsdGoPkgHasElem_Abbrev) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Abbrev
	if fn != nil {
		fn(me, true)
	}
	me.Abbrev.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossseealso struct {
	Glossseealsos []*TxsdGlosssee `xml:"http://docbook.org/ns/docbook glossseealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossseealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossseealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossseealso instance.
func (me *XsdGoPkgHasElems_Glossseealso) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossseealso
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossseealsos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Subject_XsdtString_ struct {
	Subject xsdt.String `xml:"http://docbook.org/ns/docbook subject,attr"`
}

type TxsdGlossdef struct {
	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Glossseealso

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Subject_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Blockquote
}

//	If the WalkHandlers.TxsdGlossdef function is not nil (ie. was set by outside code), calls it with this TxsdGlossdef instance as the single argument. Then calls the Walk() method on 45/60 embed(s) and 0/0 field(s) belonging to this TxsdGlossdef instance.
func (me *TxsdGlossdef) Walk() {
	fn := WalkHandlers.TxsdGlossdef
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Glossseealso.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossdef struct {
	Glossdefs []*TxsdGlossdef `xml:"http://docbook.org/ns/docbook glossdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossdef instance.
func (me *XsdGoPkgHasElems_Glossdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossdef
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossdefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Acronym struct {
	Acronym *TxsdAcronym `xml:"http://docbook.org/ns/docbook acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Acronym instance.
func (me *XsdGoPkgHasElem_Acronym) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Acronym
	if fn != nil {
		fn(me, true)
	}
	me.Acronym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGlossentry struct {
	XsdGoPkgHasElem_Glosssee

	XsdGoPkgHasElem_Glossterm

	XsdGoPkgHasElem_Abbrev

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glossdef

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Acronym

	XsdGoPkgHasAttr_Sortas_XsdtString_
}

//	If the WalkHandlers.TxsdGlossentry function is not nil (ie. was set by outside code), calls it with this TxsdGlossentry instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdGlossentry instance.
func (me *TxsdGlossentry) Walk() {
	fn := WalkHandlers.TxsdGlossentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Acronym.Walk()
	me.XsdGoPkgHasElem_Glosssee.Walk()
	me.XsdGoPkgHasElem_Glossterm.Walk()
	me.XsdGoPkgHasElem_Abbrev.Walk()
	me.XsdGoPkgHasElems_Glossdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossentry struct {
	Glossentries []*TxsdGlossentry `xml:"http://docbook.org/ns/docbook glossentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossentry instance.
func (me *XsdGoPkgHasElems_Glossentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGlosslist struct {
	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdGlosslist function is not nil (ie. was set by outside code), calls it with this TxsdGlosslist instance as the single argument. Then calls the Walk() method on 46/62 embed(s) and 0/0 field(s) belonging to this TxsdGlosslist instance.
func (me *TxsdGlosslist) Walk() {
	fn := WalkHandlers.TxsdGlosslist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Glossentry.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glosslist struct {
	Glosslists []*TxsdGlosslist `xml:"http://docbook.org/ns/docbook glosslist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glosslist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glosslist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glosslist instance.
func (me *XsdGoPkgHasElems_Glosslist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glosslist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glosslists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Pgwide_TxsdInformalfigurePgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdInformalfigure struct {
	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasAttr_Pgwide_TxsdInformalfigurePgwide_

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdInformalfigure function is not nil (ie. was set by outside code), calls it with this TxsdInformalfigure instance as the single argument. Then calls the Walk() method on 46/63 embed(s) and 0/0 field(s) belonging to this TxsdInformalfigure instance.
func (me *TxsdInformalfigure) Walk() {
	fn := WalkHandlers.TxsdInformalfigure
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElem_Caption.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Informalfigure struct {
	Informalfigures []*TxsdInformalfigure `xml:"http://docbook.org/ns/docbook informalfigure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Informalfigure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Informalfigure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Informalfigure instance.
func (me *XsdGoPkgHasElems_Informalfigure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Informalfigure
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Informalfigures {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdOrderedlistNumeration xsdt.Token

//	Since TxsdOrderedlistNumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrderedlistNumeration) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "lowerroman".
func (me TxsdOrderedlistNumeration) IsLowerroman() bool { return me == "lowerroman" }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "arabic".
func (me TxsdOrderedlistNumeration) IsArabic() bool { return me == "arabic" }

//	This convenience method just performs a simple type conversion to TxsdOrderedlistNumeration's alias type xsdt.Token.
func (me TxsdOrderedlistNumeration) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdOrderedlistNumeration is just a simple String type, this merely returns the current string value.
func (me TxsdOrderedlistNumeration) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "loweralpha".
func (me TxsdOrderedlistNumeration) IsLoweralpha() bool { return me == "loweralpha" }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "upperroman".
func (me TxsdOrderedlistNumeration) IsUpperroman() bool { return me == "upperroman" }

//	Returns true if the value of this enumerated TxsdOrderedlistNumeration is "upperalpha".
func (me TxsdOrderedlistNumeration) IsUpperalpha() bool { return me == "upperalpha" }

type XsdGoPkgHasAttr_Numeration_TxsdOrderedlistNumeration_ struct {
	Numeration TxsdOrderedlistNumeration `xml:"http://docbook.org/ns/docbook numeration,attr"`
}

type XsdGoPkgHasAttr_Startingnumber_XsdtNmtoken_ struct {
	Startingnumber xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook startingnumber,attr"`
}

type XsdGoPkgHasAttr_Spacing_TxsdOrderedlistSpacing_ struct {
	Spacing TxsdItemizedlistSpacing `xml:"http://docbook.org/ns/docbook spacing,attr"`
}

type TxsdOrderedlistInheritnum xsdt.Token

//	Returns true if the value of this enumerated TxsdOrderedlistInheritnum is "inherit".
func (me TxsdOrderedlistInheritnum) IsInherit() bool { return me == "inherit" }

//	Since TxsdOrderedlistInheritnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdOrderedlistInheritnum) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Since TxsdOrderedlistInheritnum is just a simple String type, this merely returns the current string value.
func (me TxsdOrderedlistInheritnum) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdOrderedlistInheritnum is "ignore".
func (me TxsdOrderedlistInheritnum) IsIgnore() bool { return me == "ignore" }

//	This convenience method just performs a simple type conversion to TxsdOrderedlistInheritnum's alias type xsdt.Token.
func (me TxsdOrderedlistInheritnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Inheritnum_TxsdOrderedlistInheritnum_ struct {
	Inheritnum TxsdOrderedlistInheritnum `xml:"http://docbook.org/ns/docbook inheritnum,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdOrderedlistContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type TxsdOrderedlist struct {
	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Inheritnum_TxsdOrderedlistInheritnum_

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasAttr_Continuation_TxsdOrderedlistContinuation_

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Listitem

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Numeration_TxsdOrderedlistNumeration_

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasAttr_Startingnumber_XsdtNmtoken_

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Spacing_TxsdOrderedlistSpacing_
}

//	If the WalkHandlers.TxsdOrderedlist function is not nil (ie. was set by outside code), calls it with this TxsdOrderedlist instance as the single argument. Then calls the Walk() method on 48/67 embed(s) and 0/0 field(s) belonging to this TxsdOrderedlist instance.
func (me *TxsdOrderedlist) Walk() {
	fn := WalkHandlers.TxsdOrderedlist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Listitem.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Orderedlist struct {
	Orderedlists []*TxsdOrderedlist `xml:"http://docbook.org/ns/docbook orderedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Orderedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Orderedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Orderedlist instance.
func (me *XsdGoPkgHasElems_Orderedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Orderedlist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Orderedlists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Pgwide_TxsdFigurePgwide_ struct {
	Pgwide TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook pgwide,attr"`
}

type TxsdFigure struct {
	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Pgwide_TxsdFigurePgwide_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAttr_Floatstyle_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Variablelist
}

//	If the WalkHandlers.TxsdFigure function is not nil (ie. was set by outside code), calls it with this TxsdFigure instance as the single argument. Then calls the Walk() method on 49/65 embed(s) and 0/0 field(s) belonging to this TxsdFigure instance.
func (me *TxsdFigure) Walk() {
	fn := WalkHandlers.TxsdFigure
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElem_Caption.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Figure struct {
	Figures []*TxsdFigure `xml:"http://docbook.org/ns/docbook figure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Figure instance.
func (me *XsdGoPkgHasElems_Figure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Figure
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Figures {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Arearefs_XsdtIdrefs_ struct {
	Arearefs xsdt.Idrefs `xml:"http://docbook.org/ns/docbook arearefs,attr"`
}

type TxsdCallout struct {
	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Arearefs_XsdtIdrefs_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Programlistingco
}

//	If the WalkHandlers.TxsdCallout function is not nil (ie. was set by outside code), calls it with this TxsdCallout instance as the single argument. Then calls the Walk() method on 48/58 embed(s) and 0/0 field(s) belonging to this TxsdCallout instance.
func (me *TxsdCallout) Walk() {
	fn := WalkHandlers.TxsdCallout
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Callout struct {
	Callouts []*TxsdCallout `xml:"http://docbook.org/ns/docbook callout"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Callout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Callout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Callout instance.
func (me *XsdGoPkgHasElems_Callout) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Callout
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Callouts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCalloutlist struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Callout

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Equation
}

//	If the WalkHandlers.TxsdCalloutlist function is not nil (ie. was set by outside code), calls it with this TxsdCalloutlist instance as the single argument. Then calls the Walk() method on 50/62 embed(s) and 0/0 field(s) belonging to this TxsdCalloutlist instance.
func (me *TxsdCalloutlist) Walk() {
	fn := WalkHandlers.TxsdCalloutlist
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Callout.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Calloutlist struct {
	Calloutlists []*TxsdCalloutlist `xml:"http://docbook.org/ns/docbook calloutlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Calloutlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Calloutlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Calloutlist instance.
func (me *XsdGoPkgHasElems_Calloutlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Calloutlist
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Calloutlists {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdImageobjectco struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Imageobject

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElem_Info
}

//	If the WalkHandlers.TxsdImageobjectco function is not nil (ie. was set by outside code), calls it with this TxsdImageobjectco instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdImageobjectco instance.
func (me *TxsdImageobjectco) Walk() {
	fn := WalkHandlers.TxsdImageobjectco
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElem_Areaspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Imageobjectco struct {
	Imageobjectcos []*TxsdImageobjectco `xml:"http://docbook.org/ns/docbook imageobjectco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imageobjectco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imageobjectco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imageobjectco instance.
func (me *XsdGoPkgHasElems_Imageobjectco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Imageobjectco
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Imageobjectcos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Contentwidth_XsdtString_ struct {
	Contentwidth xsdt.String `xml:"http://docbook.org/ns/docbook contentwidth,attr"`
}

type XsdGoPkgHasAttr_Scalefit_TxsdVideodataScalefit_ struct {
	Scalefit TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook scalefit,attr"`
}

type XsdGoPkgHasAttr_Align_TxsdVideodataAlign_ struct {
	Align TxsdImagedataAlign `xml:"http://docbook.org/ns/docbook align,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdVideodataValign_ struct {
	Valign TxsdEntryValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type XsdGoPkgHasAttr_Scale_XsdtNmtoken_ struct {
	Scale xsdt.Nmtoken `xml:"http://docbook.org/ns/docbook scale,attr"`
}

type XsdGoPkgHasAttr_Contentdepth_XsdtString_ struct {
	Contentdepth xsdt.String `xml:"http://docbook.org/ns/docbook contentdepth,attr"`
}

type TxsdVideodata struct {
	XsdGoPkgHasAttr_Contentwidth_XsdtString_

	XsdGoPkgHasAttr_Scalefit_TxsdVideodataScalefit_

	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdVideodataAlign_

	XsdGoPkgHasAttr_Depth_XsdtString_

	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAttr_Valign_TxsdVideodataValign_

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Scale_XsdtNmtoken_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Contentdepth_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdVideodata function is not nil (ie. was set by outside code), calls it with this TxsdVideodata instance as the single argument. Then calls the Walk() method on 0/14 embed(s) and 0/0 field(s) belonging to this TxsdVideodata instance.
func (me *TxsdVideodata) Walk() {
	fn := WalkHandlers.TxsdVideodata
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Videodata struct {
	Videodata *TxsdVideodata `xml:"http://docbook.org/ns/docbook videodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Videodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Videodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Videodata instance.
func (me *XsdGoPkgHasElem_Videodata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Videodata
	if fn != nil {
		fn(me, true)
	}
	me.Videodata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdVideoobject struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElem_Videodata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdVideoobject function is not nil (ie. was set by outside code), calls it with this TxsdVideoobject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdVideoobject instance.
func (me *TxsdVideoobject) Walk() {
	fn := WalkHandlers.TxsdVideoobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Videodata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Videoobject struct {
	Videoobjects []*TxsdVideoobject `xml:"http://docbook.org/ns/docbook videoobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Videoobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Videoobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Videoobject instance.
func (me *XsdGoPkgHasElems_Videoobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Videoobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Videoobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAudiodata struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_
}

//	If the WalkHandlers.TxsdAudiodata function is not nil (ie. was set by outside code), calls it with this TxsdAudiodata instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdAudiodata instance.
func (me *TxsdAudiodata) Walk() {
	fn := WalkHandlers.TxsdAudiodata
	if fn != nil {
		fn(me, true)
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Audiodata struct {
	Audiodata *TxsdAudiodata `xml:"http://docbook.org/ns/docbook audiodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audiodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audiodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audiodata instance.
func (me *XsdGoPkgHasElem_Audiodata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Audiodata
	if fn != nil {
		fn(me, true)
	}
	me.Audiodata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAudioobject struct {
	XsdGoPkgHasElem_Audiodata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info
}

//	If the WalkHandlers.TxsdAudioobject function is not nil (ie. was set by outside code), calls it with this TxsdAudioobject instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdAudioobject instance.
func (me *TxsdAudioobject) Walk() {
	fn := WalkHandlers.TxsdAudioobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Audiodata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Audioobject struct {
	Audioobjects []*TxsdAudioobject `xml:"http://docbook.org/ns/docbook audioobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audioobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audioobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audioobject instance.
func (me *XsdGoPkgHasElems_Audioobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Audioobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Audioobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdMediaobject struct {
	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Videoobject

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElem_Caption

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Audioobject

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Imageobject

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Imageobjectco
}

//	If the WalkHandlers.TxsdMediaobject function is not nil (ie. was set by outside code), calls it with this TxsdMediaobject instance as the single argument. Then calls the Walk() method on 5/11 embed(s) and 0/0 field(s) belonging to this TxsdMediaobject instance.
func (me *TxsdMediaobject) Walk() {
	fn := WalkHandlers.TxsdMediaobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Caption.Walk()
	me.XsdGoPkgHasElems_Audioobject.Walk()
	me.XsdGoPkgHasElems_Imageobjectco.Walk()
	me.XsdGoPkgHasElems_Textobject.Walk()
	me.XsdGoPkgHasElems_Videoobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Mediaobject struct {
	Mediaobjects []*TxsdMediaobject `xml:"http://docbook.org/ns/docbook mediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mediaobject instance.
func (me *XsdGoPkgHasElems_Mediaobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Mediaobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Mediaobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFootnote struct {
	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasAttr_Label_XsdtNmtoken_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Simpara
}

//	If the WalkHandlers.TxsdFootnote function is not nil (ie. was set by outside code), calls it with this TxsdFootnote instance as the single argument. Then calls the Walk() method on 50/59 embed(s) and 0/0 field(s) belonging to this TxsdFootnote instance.
func (me *TxsdFootnote) Walk() {
	fn := WalkHandlers.TxsdFootnote
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Footnote struct {
	Footnotes []*TxsdFootnote `xml:"http://docbook.org/ns/docbook footnote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Footnote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Footnote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Footnote instance.
func (me *XsdGoPkgHasElems_Footnote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Footnote
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Footnotes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefentrytitle struct {
	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Keysym
}

//	If the WalkHandlers.TxsdRefentrytitle function is not nil (ie. was set by outside code), calls it with this TxsdRefentrytitle instance as the single argument. Then calls the Walk() method on 79/102 embed(s) and 0/0 field(s) belonging to this TxsdRefentrytitle instance.
func (me *TxsdRefentrytitle) Walk() {
	fn := WalkHandlers.TxsdRefentrytitle
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refentrytitle struct {
	Refentrytitle *TxsdRefentrytitle `xml:"http://docbook.org/ns/docbook refentrytitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refentrytitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refentrytitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refentrytitle instance.
func (me *XsdGoPkgHasElem_Refentrytitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refentrytitle
	if fn != nil {
		fn(me, true)
	}
	me.Refentrytitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdCiterefentry struct {
	XsdGoPkgHasElem_Refentrytitle

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Manvolnum
}

//	If the WalkHandlers.TxsdCiterefentry function is not nil (ie. was set by outside code), calls it with this TxsdCiterefentry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdCiterefentry instance.
func (me *TxsdCiterefentry) Walk() {
	fn := WalkHandlers.TxsdCiterefentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Manvolnum.Walk()
	me.XsdGoPkgHasElem_Refentrytitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Citerefentry struct {
	Citerefentries []*TxsdCiterefentry `xml:"http://docbook.org/ns/docbook citerefentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Citerefentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Citerefentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Citerefentry instance.
func (me *XsdGoPkgHasElems_Citerefentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Citerefentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Citerefentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdFirstterm struct {
	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Database

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Person

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Computeroutput
}

//	If the WalkHandlers.TxsdFirstterm function is not nil (ie. was set by outside code), calls it with this TxsdFirstterm instance as the single argument. Then calls the Walk() method on 80/103 embed(s) and 0/0 field(s) belonging to this TxsdFirstterm instance.
func (me *TxsdFirstterm) Walk() {
	fn := WalkHandlers.TxsdFirstterm
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Firstterm struct {
	Firstterms []*TxsdFirstterm `xml:"http://docbook.org/ns/docbook firstterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Firstterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Firstterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Firstterm instance.
func (me *XsdGoPkgHasElems_Firstterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Firstterm
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Firstterms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTitleabbrev struct {
	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Citebiblioid
}

//	If the WalkHandlers.TxsdTitleabbrev function is not nil (ie. was set by outside code), calls it with this TxsdTitleabbrev instance as the single argument. Then calls the Walk() method on 81/102 embed(s) and 0/0 field(s) belonging to this TxsdTitleabbrev instance.
func (me *TxsdTitleabbrev) Walk() {
	fn := WalkHandlers.TxsdTitleabbrev
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Titleabbrev struct {
	Titleabbrevs []*TxsdTitleabbrev `xml:"http://docbook.org/ns/docbook titleabbrev"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Titleabbrev function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Titleabbrev instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Titleabbrev instance.
func (me *XsdGoPkgHasElems_Titleabbrev) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Titleabbrev
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Titleabbrevs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPersonblurb struct {
	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Para
}

//	If the WalkHandlers.TxsdPersonblurb function is not nil (ie. was set by outside code), calls it with this TxsdPersonblurb instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TxsdPersonblurb instance.
func (me *TxsdPersonblurb) Walk() {
	fn := WalkHandlers.TxsdPersonblurb
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Personblurb struct {
	Personblurbs []*TxsdPersonblurb `xml:"http://docbook.org/ns/docbook personblurb"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Personblurb function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Personblurb instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Personblurb instance.
func (me *XsdGoPkgHasElems_Personblurb) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Personblurb
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Personblurbs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPerson struct {
	XsdGoPkgHasElems_Affiliation

	XsdGoPkgHasElem_Personname

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Personblurb

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdPerson function is not nil (ie. was set by outside code), calls it with this TxsdPerson instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TxsdPerson instance.
func (me *TxsdPerson) Walk() {
	fn := WalkHandlers.TxsdPerson
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Personblurb.Walk()
	me.XsdGoPkgHasElems_Affiliation.Walk()
	me.XsdGoPkgHasElem_Personname.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Person struct {
	Persons []*TxsdPerson `xml:"http://docbook.org/ns/docbook person"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Person function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Person instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Person instance.
func (me *XsdGoPkgHasElems_Person) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Person
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Persons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTermdef struct {
	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasAttr_Baseform_XsdtString_

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasAttr_Sortas_XsdtString_

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Replaceable
}

//	If the WalkHandlers.TxsdTermdef function is not nil (ie. was set by outside code), calls it with this TxsdTermdef instance as the single argument. Then calls the Walk() method on 82/104 embed(s) and 0/0 field(s) belonging to this TxsdTermdef instance.
func (me *TxsdTermdef) Walk() {
	fn := WalkHandlers.TxsdTermdef
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Termdef struct {
	Termdefs []*TxsdTermdef `xml:"http://docbook.org/ns/docbook termdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Termdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Termdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Termdef instance.
func (me *XsdGoPkgHasElems_Termdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Termdef
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Termdefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPhrase struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Database

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Property
}

//	If the WalkHandlers.TxsdPhrase function is not nil (ie. was set by outside code), calls it with this TxsdPhrase instance as the single argument. Then calls the Walk() method on 83/102 embed(s) and 0/0 field(s) belonging to this TxsdPhrase instance.
func (me *TxsdPhrase) Walk() {
	fn := WalkHandlers.TxsdPhrase
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Phrase struct {
	Phrases []*TxsdPhrase `xml:"http://docbook.org/ns/docbook phrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Phrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Phrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Phrase instance.
func (me *XsdGoPkgHasElems_Phrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Phrase
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Phrases {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSubscript struct {
	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Superscript
}

//	If the WalkHandlers.TxsdSubscript function is not nil (ie. was set by outside code), calls it with this TxsdSubscript instance as the single argument. Then calls the Walk() method on 6/18 embed(s) and 0/0 field(s) belonging to this TxsdSubscript instance.
func (me *TxsdSubscript) Walk() {
	fn := WalkHandlers.TxsdSubscript
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Subscript struct {
	Subscripts []*TxsdSubscript `xml:"http://docbook.org/ns/docbook subscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subscript instance.
func (me *XsdGoPkgHasElems_Subscript) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Subscript
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Subscripts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdKeycode struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdKeycode function is not nil (ie. was set by outside code), calls it with this TxsdKeycode instance as the single argument. Then calls the Walk() method on 7/18 embed(s) and 0/0 field(s) belonging to this TxsdKeycode instance.
func (me *TxsdKeycode) Walk() {
	fn := WalkHandlers.TxsdKeycode
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Keycode struct {
	Keycodes []*TxsdKeycode `xml:"http://docbook.org/ns/docbook keycode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keycode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keycode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keycode instance.
func (me *XsdGoPkgHasElems_Keycode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Keycode
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Keycodes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdLink struct {
	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Type

	XsdGoPkgHasAttr_Endterm_XsdtIdref_

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Parameter
}

//	If the WalkHandlers.TxsdLink function is not nil (ie. was set by outside code), calls it with this TxsdLink instance as the single argument. Then calls the Walk() method on 86/104 embed(s) and 0/0 field(s) belonging to this TxsdLink instance.
func (me *TxsdLink) Walk() {
	fn := WalkHandlers.TxsdLink
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Link struct {
	Links []*TxsdLink `xml:"http://docbook.org/ns/docbook link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Link instance.
func (me *XsdGoPkgHasElems_Link) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Link
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Links {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSuperscript struct {
	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Phrase
}

//	If the WalkHandlers.TxsdSuperscript function is not nil (ie. was set by outside code), calls it with this TxsdSuperscript instance as the single argument. Then calls the Walk() method on 8/18 embed(s) and 0/0 field(s) belonging to this TxsdSuperscript instance.
func (me *TxsdSuperscript) Walk() {
	fn := WalkHandlers.TxsdSuperscript
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Superscript struct {
	Superscripts []*TxsdSuperscript `xml:"http://docbook.org/ns/docbook superscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Superscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Superscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Superscript instance.
func (me *XsdGoPkgHasElems_Superscript) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Superscript
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Superscripts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRemark struct {
	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Biblioref
}

//	If the WalkHandlers.TxsdRemark function is not nil (ie. was set by outside code), calls it with this TxsdRemark instance as the single argument. Then calls the Walk() method on 9/18 embed(s) and 0/0 field(s) belonging to this TxsdRemark instance.
func (me *TxsdRemark) Walk() {
	fn := WalkHandlers.TxsdRemark
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Remark struct {
	Remarks []*TxsdRemark `xml:"http://docbook.org/ns/docbook remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Remark instance.
func (me *XsdGoPkgHasElems_Remark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Remark
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Remarks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdWordasword struct {
	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Link

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdWordasword function is not nil (ie. was set by outside code), calls it with this TxsdWordasword instance as the single argument. Then calls the Walk() method on 10/18 embed(s) and 0/0 field(s) belonging to this TxsdWordasword instance.
func (me *TxsdWordasword) Walk() {
	fn := WalkHandlers.TxsdWordasword
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Wordasword struct {
	Wordaswords []*TxsdWordasword `xml:"http://docbook.org/ns/docbook wordasword"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Wordasword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Wordasword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Wordasword instance.
func (me *XsdGoPkgHasElems_Wordasword) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Wordasword
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Wordaswords {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdForeignphrase struct {
	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Date

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Database

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Indexterm
}

//	If the WalkHandlers.TxsdForeignphrase function is not nil (ie. was set by outside code), calls it with this TxsdForeignphrase instance as the single argument. Then calls the Walk() method on 34/43 embed(s) and 0/0 field(s) belonging to this TxsdForeignphrase instance.
func (me *TxsdForeignphrase) Walk() {
	fn := WalkHandlers.TxsdForeignphrase
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Foreignphrase struct {
	Foreignphrases []*TxsdForeignphrase `xml:"http://docbook.org/ns/docbook foreignphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Foreignphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Foreignphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Foreignphrase instance.
func (me *XsdGoPkgHasElems_Foreignphrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Foreignphrase
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Foreignphrases {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Localinfo_XsdtString_ struct {
	Localinfo xsdt.String `xml:"http://docbook.org/ns/docbook localinfo,attr"`
}

type XsdGoPkgHasAttr_Targetptr_XsdtString_ struct {
	Targetptr xsdt.String `xml:"http://docbook.org/ns/docbook targetptr,attr"`
}

type XsdGoPkgHasAttr_Targetdoc_XsdtString_ struct {
	Targetdoc xsdt.String `xml:"http://docbook.org/ns/docbook targetdoc,attr"`
}

type TxsdOlink struct {
	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Package

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasAttr_Localinfo_XsdtString_

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasAttr_Targetptr_XsdtString_

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasAttr_Xrefstyle_XsdtString_

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasAttr_Targetdoc_XsdtString_

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Errortype
}

//	If the WalkHandlers.TxsdOlink function is not nil (ie. was set by outside code), calls it with this TxsdOlink instance as the single argument. Then calls the Walk() method on 91/106 embed(s) and 0/0 field(s) belonging to this TxsdOlink instance.
func (me *TxsdOlink) Walk() {
	fn := WalkHandlers.TxsdOlink
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Olink struct {
	Olinks []*TxsdOlink `xml:"http://docbook.org/ns/docbook olink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Olink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Olink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Olink instance.
func (me *XsdGoPkgHasElems_Olink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Olink
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Olinks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdReplaceableClass xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdReplaceableClass's alias type xsdt.Token.
func (me TxsdReplaceableClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "parameter".
func (me TxsdReplaceableClass) IsParameter() bool { return me == "parameter" }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "option".
func (me TxsdReplaceableClass) IsOption() bool { return me == "option" }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "function".
func (me TxsdReplaceableClass) IsFunction() bool { return me == "function" }

//	Returns true if the value of this enumerated TxsdReplaceableClass is "command".
func (me TxsdReplaceableClass) IsCommand() bool { return me == "command" }

//	Since TxsdReplaceableClass is just a simple String type, this merely returns the current string value.
func (me TxsdReplaceableClass) String() string { return xsdt.Token(me).String() }

//	Since TxsdReplaceableClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdReplaceableClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdReplaceableClass_ struct {
	Class TxsdReplaceableClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdReplaceable struct {
	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Class_TxsdReplaceableClass_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Xref
}

//	If the WalkHandlers.TxsdReplaceable function is not nil (ie. was set by outside code), calls it with this TxsdReplaceable instance as the single argument. Then calls the Walk() method on 12/20 embed(s) and 0/0 field(s) belonging to this TxsdReplaceable instance.
func (me *TxsdReplaceable) Walk() {
	fn := WalkHandlers.TxsdReplaceable
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Replaceable struct {
	Replaceables []*TxsdReplaceable `xml:"http://docbook.org/ns/docbook replaceable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Replaceable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Replaceable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Replaceable instance.
func (me *XsdGoPkgHasElems_Replaceable) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Replaceable
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Replaceables {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Linenumbering_TxsdScreenLinenumbering_ struct {
	Linenumbering TxsdAddressLinenumbering `xml:"http://docbook.org/ns/docbook linenumbering,attr"`
}

type XsdGoPkgHasAttr_Continuation_TxsdScreenContinuation_ struct {
	Continuation TxsdAddressContinuation `xml:"http://docbook.org/ns/docbook continuation,attr"`
}

type TxsdScreen struct {
	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasAttr_Linenumbering_TxsdScreenLinenumbering_

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAttr_Language_XsdtString_

	XsdGoPkgHasElems_Function

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasAttr_Continuation_TxsdScreenContinuation_

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Info

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Lineannotation

	XsdGoPkgHasElems_Co

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasAttr_Width_XsdtNmtoken_

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasAttr_Startinglinenumber_XsdtNmtoken_

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Annotation
}

//	If the WalkHandlers.TxsdScreen function is not nil (ie. was set by outside code), calls it with this TxsdScreen instance as the single argument. Then calls the Walk() method on 97/112 embed(s) and 0/0 field(s) belonging to this TxsdScreen instance.
func (me *TxsdScreen) Walk() {
	fn := WalkHandlers.TxsdScreen
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Textobject.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Info.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Lineannotation.Walk()
	me.XsdGoPkgHasElems_Co.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Screen struct {
	Screen *TxsdScreen `xml:"http://docbook.org/ns/docbook screen"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screen function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screen instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screen instance.
func (me *XsdGoPkgHasElem_Screen) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Screen
	if fn != nil {
		fn(me, true)
	}
	me.Screen.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdScreenco struct {
	XsdGoPkgHasElem_Screen

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Areaspec

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdScreenco function is not nil (ie. was set by outside code), calls it with this TxsdScreenco instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdScreenco instance.
func (me *TxsdScreenco) Walk() {
	fn := WalkHandlers.TxsdScreenco
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Screen.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElem_Areaspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Screenco struct {
	Screencos []*TxsdScreenco `xml:"http://docbook.org/ns/docbook screenco"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Screenco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Screenco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Screenco instance.
func (me *XsdGoPkgHasElems_Screenco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Screenco
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Screencos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdImportant struct {
	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Itemizedlist
}

//	If the WalkHandlers.TxsdImportant function is not nil (ie. was set by outside code), calls it with this TxsdImportant instance as the single argument. Then calls the Walk() method on 54/61 embed(s) and 0/0 field(s) belonging to this TxsdImportant instance.
func (me *TxsdImportant) Walk() {
	fn := WalkHandlers.TxsdImportant
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Important struct {
	Importants []*TxsdImportant `xml:"http://docbook.org/ns/docbook important"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Important function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Important instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Important instance.
func (me *XsdGoPkgHasElems_Important) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Important
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Importants {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Annotates_XsdtString_ struct {
	Annotates xsdt.String `xml:"http://docbook.org/ns/docbook annotates,attr"`
}

type TxsdAnnotation struct {
	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Annotates_XsdtString_

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Formalpara
}

//	If the WalkHandlers.TxsdAnnotation function is not nil (ie. was set by outside code), calls it with this TxsdAnnotation instance as the single argument. Then calls the Walk() method on 55/61 embed(s) and 0/0 field(s) belonging to this TxsdAnnotation instance.
func (me *TxsdAnnotation) Walk() {
	fn := WalkHandlers.TxsdAnnotation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Annotation struct {
	Annotations []*TxsdAnnotation `xml:"http://docbook.org/ns/docbook annotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Annotation instance.
func (me *XsdGoPkgHasElems_Annotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Annotation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Annotations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInfo struct {
	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Bibliorelation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Contractsponsor

	XsdGoPkgHasElems_Printhistory

	XsdGoPkgHasElems_Confgroup

	XsdGoPkgHasElems_Biblioid

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Releaseinfo

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Extendedlink

	XsdGoPkgHasElems_Biblioset

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Pagenums

	XsdGoPkgHasElems_Volumenum

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Othercredit

	XsdGoPkgHasElems_Pubdate

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Artpagenums

	XsdGoPkgHasElems_Publisher

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Publishername

	XsdGoPkgHasElems_Authorgroup

	XsdGoPkgHasElems_Copyright

	XsdGoPkgHasElems_Subjectset

	XsdGoPkgHasElems_Collab

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Issuenum

	XsdGoPkgHasElems_Legalnotice

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Keywordset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Authorinitials

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Bibliomisc

	XsdGoPkgHasElems_Seriesvolnums

	XsdGoPkgHasElems_Contractnum

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Abstract

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Edition

	XsdGoPkgHasElems_Itermset

	XsdGoPkgHasElems_Bibliomset

	XsdGoPkgHasElems_Cover

	XsdGoPkgHasElems_Bibliosource

	XsdGoPkgHasElems_Bibliocoverage
}

//	If the WalkHandlers.TxsdInfo function is not nil (ie. was set by outside code), calls it with this TxsdInfo instance as the single argument. Then calls the Walk() method on 46/49 embed(s) and 0/0 field(s) belonging to this TxsdInfo instance.
func (me *TxsdInfo) Walk() {
	fn := WalkHandlers.TxsdInfo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Confgroup.Walk()
	me.XsdGoPkgHasElems_Biblioid.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Releaseinfo.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Extendedlink.Walk()
	me.XsdGoPkgHasElems_Biblioset.Walk()
	me.XsdGoPkgHasElems_Pagenums.Walk()
	me.XsdGoPkgHasElems_Volumenum.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Othercredit.Walk()
	me.XsdGoPkgHasElems_Pubdate.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Artpagenums.Walk()
	me.XsdGoPkgHasElems_Publisher.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Publishername.Walk()
	me.XsdGoPkgHasElems_Authorgroup.Walk()
	me.XsdGoPkgHasElems_Copyright.Walk()
	me.XsdGoPkgHasElems_Subjectset.Walk()
	me.XsdGoPkgHasElems_Collab.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Issuenum.Walk()
	me.XsdGoPkgHasElems_Legalnotice.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Keywordset.Walk()
	me.XsdGoPkgHasElems_Authorinitials.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Bibliomisc.Walk()
	me.XsdGoPkgHasElems_Seriesvolnums.Walk()
	me.XsdGoPkgHasElems_Contractnum.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Abstract.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Edition.Walk()
	me.XsdGoPkgHasElems_Itermset.Walk()
	me.XsdGoPkgHasElems_Bibliomset.Walk()
	me.XsdGoPkgHasElems_Cover.Walk()
	me.XsdGoPkgHasElems_Bibliosource.Walk()
	me.XsdGoPkgHasElems_Bibliocoverage.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Bibliorelation.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Contractsponsor.Walk()
	me.XsdGoPkgHasElems_Printhistory.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Info struct {
	Info *TxsdInfo `xml:"http://docbook.org/ns/docbook info"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Info function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Info instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Info instance.
func (me *XsdGoPkgHasElem_Info) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Info
	if fn != nil {
		fn(me, true)
	}
	me.Info.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Scalefit_TxsdImagedataScalefit_ struct {
	Scalefit TxsdEquationPgwide `xml:"http://docbook.org/ns/docbook scalefit,attr"`
}

type XsdGoPkgHasAttr_Valign_TxsdImagedataValign_ struct {
	Valign TxsdEntryValign `xml:"http://docbook.org/ns/docbook valign,attr"`
}

type TxsdImagedata struct {
	XsdGoPkgHasAttr_Fileref_XsdtString_

	XsdGoPkgHasAttr_Contentwidth_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Width_XsdtString_

	XsdGoPkgHasAttr_Align_TxsdImagedataAlign_

	XsdGoPkgHasAttr_Entityref_XsdtEntity_

	XsdGoPkgHasAttr_Depth_XsdtString_

	XsdGoPkgHasAttr_Format_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Contentdepth_XsdtString_

	XsdGoPkgHasAttr_Scalefit_TxsdImagedataScalefit_

	XsdGoPkgHasAttr_Scale_XsdtNmtoken_

	XsdGoPkgHasAttr_Valign_TxsdImagedataValign_
}

//	If the WalkHandlers.TxsdImagedata function is not nil (ie. was set by outside code), calls it with this TxsdImagedata instance as the single argument. Then calls the Walk() method on 1/14 embed(s) and 0/0 field(s) belonging to this TxsdImagedata instance.
func (me *TxsdImagedata) Walk() {
	fn := WalkHandlers.TxsdImagedata
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Info.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Imagedata struct {
	Imagedata *TxsdImagedata `xml:"http://docbook.org/ns/docbook imagedata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imagedata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imagedata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imagedata instance.
func (me *XsdGoPkgHasElem_Imagedata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Imagedata
	if fn != nil {
		fn(me, true)
	}
	me.Imagedata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdImageobject struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Imagedata
}

//	If the WalkHandlers.TxsdImageobject function is not nil (ie. was set by outside code), calls it with this TxsdImageobject instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdImageobject instance.
func (me *TxsdImageobject) Walk() {
	fn := WalkHandlers.TxsdImageobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElem_Imagedata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Imageobject struct {
	Imageobjects []*TxsdImageobject `xml:"http://docbook.org/ns/docbook imageobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imageobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imageobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imageobject instance.
func (me *XsdGoPkgHasElems_Imageobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Imageobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Imageobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInlinemediaobject struct {
	XsdGoPkgHasElems_Imageobjectco

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Textobject

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Videoobject

	XsdGoPkgHasElems_Audioobject

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Imageobject
}

//	If the WalkHandlers.TxsdInlinemediaobject function is not nil (ie. was set by outside code), calls it with this TxsdInlinemediaobject instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TxsdInlinemediaobject instance.
func (me *TxsdInlinemediaobject) Walk() {
	fn := WalkHandlers.TxsdInlinemediaobject
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Imageobject.Walk()
	me.XsdGoPkgHasElems_Imageobjectco.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Textobject.Walk()
	me.XsdGoPkgHasElems_Videoobject.Walk()
	me.XsdGoPkgHasElems_Audioobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Inlinemediaobject struct {
	Inlinemediaobjects []*TxsdInlinemediaobject `xml:"http://docbook.org/ns/docbook inlinemediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Inlinemediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Inlinemediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Inlinemediaobject instance.
func (me *XsdGoPkgHasElems_Inlinemediaobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Inlinemediaobject
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Inlinemediaobjects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdAlt struct {
	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdAlt function is not nil (ie. was set by outside code), calls it with this TxsdAlt instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdAlt instance.
func (me *TxsdAlt) Walk() {
	fn := WalkHandlers.TxsdAlt
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Alt struct {
	Alt *TxsdAlt `xml:"http://docbook.org/ns/docbook alt"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Alt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Alt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Alt instance.
func (me *XsdGoPkgHasElem_Alt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Alt
	if fn != nil {
		fn(me, true)
	}
	me.Alt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdInlineequation struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElem_Alt

	XsdGoPkgHasElems_Mathphrase

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdInlineequation function is not nil (ie. was set by outside code), calls it with this TxsdInlineequation instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdInlineequation instance.
func (me *TxsdInlineequation) Walk() {
	fn := WalkHandlers.TxsdInlineequation
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElem_Alt.Walk()
	me.XsdGoPkgHasElems_Mathphrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Inlineequation struct {
	Inlineequations []*TxsdInlineequation `xml:"http://docbook.org/ns/docbook inlineequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Inlineequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Inlineequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Inlineequation instance.
func (me *XsdGoPkgHasElems_Inlineequation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Inlineequation
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Inlineequations {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdEmphasis struct {
	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Option

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Citerefentry
}

//	If the WalkHandlers.TxsdEmphasis function is not nil (ie. was set by outside code), calls it with this TxsdEmphasis instance as the single argument. Then calls the Walk() method on 96/102 embed(s) and 0/0 field(s) belonging to this TxsdEmphasis instance.
func (me *TxsdEmphasis) Walk() {
	fn := WalkHandlers.TxsdEmphasis
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Emphasis struct {
	Emphasises []*TxsdEmphasis `xml:"http://docbook.org/ns/docbook emphasis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Emphasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Emphasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Emphasis instance.
func (me *XsdGoPkgHasElems_Emphasis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Emphasis
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Emphasises {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSee struct {
	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Editor
}

//	If the WalkHandlers.TxsdSee function is not nil (ie. was set by outside code), calls it with this TxsdSee instance as the single argument. Then calls the Walk() method on 97/102 embed(s) and 0/0 field(s) belonging to this TxsdSee instance.
func (me *TxsdSee) Walk() {
	fn := WalkHandlers.TxsdSee
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Emphasis.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_See struct {
	See *TxsdSee `xml:"http://docbook.org/ns/docbook see"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_See function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_See instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_See instance.
func (me *XsdGoPkgHasElem_See) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_See
	if fn != nil {
		fn(me, true)
	}
	me.See.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seealso struct {
	Seealsos []*TxsdSee `xml:"http://docbook.org/ns/docbook seealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seealso instance.
func (me *XsdGoPkgHasElems_Seealso) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seealso
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Seealsos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdIndextermSignificance xsdt.Token

//	Since TxsdIndextermSignificance is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermSignificance) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdIndextermSignificance is "normal".
func (me TxsdIndextermSignificance) IsNormal() bool { return me == "normal" }

//	Returns true if the value of this enumerated TxsdIndextermSignificance is "preferred".
func (me TxsdIndextermSignificance) IsPreferred() bool { return me == "preferred" }

//	Since TxsdIndextermSignificance is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermSignificance) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdIndextermSignificance's alias type xsdt.Token.
func (me TxsdIndextermSignificance) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Significance_TxsdIndextermSignificance_ struct {
	Significance TxsdIndextermSignificance `xml:"http://docbook.org/ns/docbook significance,attr"`
}

type TxsdSecondary struct {
	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasAttr_Sortas_XsdtString_

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Markup
}

//	If the WalkHandlers.TxsdSecondary function is not nil (ie. was set by outside code), calls it with this TxsdSecondary instance as the single argument. Then calls the Walk() method on 97/103 embed(s) and 0/0 field(s) belonging to this TxsdSecondary instance.
func (me *TxsdSecondary) Walk() {
	fn := WalkHandlers.TxsdSecondary
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Emphasis.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Secondary struct {
	Secondary *TxsdSecondary `xml:"http://docbook.org/ns/docbook secondary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Secondary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Secondary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Secondary instance.
func (me *XsdGoPkgHasElem_Secondary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Secondary
	if fn != nil {
		fn(me, true)
	}
	me.Secondary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tertiary struct {
	Tertiary *TxsdSecondary `xml:"http://docbook.org/ns/docbook tertiary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tertiary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tertiary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tertiary instance.
func (me *XsdGoPkgHasElem_Tertiary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tertiary
	if fn != nil {
		fn(me, true)
	}
	me.Tertiary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Startref_XsdtIdref_ struct {
	Startref xsdt.Idref `xml:"http://docbook.org/ns/docbook startref,attr"`
}

type XsdGoPkgHasElem_Primary struct {
	Primary *TxsdSecondary `xml:"http://docbook.org/ns/docbook primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Primary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Primary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Primary instance.
func (me *XsdGoPkgHasElem_Primary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Primary
	if fn != nil {
		fn(me, true)
	}
	me.Primary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdIndextermScope xsdt.Token

//	Since TxsdIndextermScope is just a simple String type, this merely returns the current string value.
func (me TxsdIndextermScope) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdIndextermScope is "all".
func (me TxsdIndextermScope) IsAll() bool { return me == "all" }

//	Returns true if the value of this enumerated TxsdIndextermScope is "global".
func (me TxsdIndextermScope) IsGlobal() bool { return me == "global" }

//	This convenience method just performs a simple type conversion to TxsdIndextermScope's alias type xsdt.Token.
func (me TxsdIndextermScope) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdIndextermScope is "local".
func (me TxsdIndextermScope) IsLocal() bool { return me == "local" }

//	Since TxsdIndextermScope is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndextermScope) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Scope_TxsdIndextermScope_ struct {
	Scope TxsdIndextermScope `xml:"http://docbook.org/ns/docbook scope,attr"`
}

type TxsdIndexterm struct {
	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElem_Primary

	XsdGoPkgHasAttr_Scope_TxsdIndextermScope_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Zone_XsdtIdrefs_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasAttr_Class_TxsdIndextermClass_

	XsdGoPkgHasElem_See

	XsdGoPkgHasElems_Seealso

	XsdGoPkgHasAttr_Significance_TxsdIndextermSignificance_

	XsdGoPkgHasElem_Secondary

	XsdGoPkgHasElem_Tertiary

	XsdGoPkgHasAttr_Startref_XsdtIdref_
}

//	If the WalkHandlers.TxsdIndexterm function is not nil (ie. was set by outside code), calls it with this TxsdIndexterm instance as the single argument. Then calls the Walk() method on 5/15 embed(s) and 0/0 field(s) belonging to this TxsdIndexterm instance.
func (me *TxsdIndexterm) Walk() {
	fn := WalkHandlers.TxsdIndexterm
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Primary.Walk()
	me.XsdGoPkgHasElem_See.Walk()
	me.XsdGoPkgHasElems_Seealso.Walk()
	me.XsdGoPkgHasElem_Secondary.Walk()
	me.XsdGoPkgHasElem_Tertiary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Indexterm struct {
	Indexterms []*TxsdIndexterm `xml:"http://docbook.org/ns/docbook indexterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexterm instance.
func (me *XsdGoPkgHasElems_Indexterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Indexterm
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Indexterms {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Class_TxsdProductnameClass_ struct {
	Class TxsdTrademarkClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdProductname struct {
	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAttr_Class_TxsdProductnameClass_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdProductname function is not nil (ie. was set by outside code), calls it with this TxsdProductname instance as the single argument. Then calls the Walk() method on 15/19 embed(s) and 0/0 field(s) belonging to this TxsdProductname instance.
func (me *TxsdProductname) Walk() {
	fn := WalkHandlers.TxsdProductname
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Productname struct {
	Productnames []*TxsdProductname `xml:"http://docbook.org/ns/docbook productname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Productname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Productname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Productname instance.
func (me *XsdGoPkgHasElems_Productname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Productname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Productnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTitle struct {
	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Tag
}

//	If the WalkHandlers.TxsdTitle function is not nil (ie. was set by outside code), calls it with this TxsdTitle instance as the single argument. Then calls the Walk() method on 99/102 embed(s) and 0/0 field(s) belonging to this TxsdTitle instance.
func (me *TxsdTitle) Walk() {
	fn := WalkHandlers.TxsdTitle
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Emphasis.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Productname.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Title struct {
	Title *TxsdTitle `xml:"http://docbook.org/ns/docbook title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Title instance.
func (me *XsdGoPkgHasElem_Title) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Title
	if fn != nil {
		fn(me, true)
	}
	me.Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Subtitle struct {
	Subtitle *TxsdSubtitle `xml:"http://docbook.org/ns/docbook subtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subtitle instance.
func (me *XsdGoPkgHasElem_Subtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Subtitle
	if fn != nil {
		fn(me, true)
	}
	me.Subtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Subjectset struct {
	Subjectset *TxsdSubjectset `xml:"http://docbook.org/ns/docbook subjectset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subjectset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subjectset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subjectset instance.
func (me *XsdGoPkgHasElem_Subjectset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Subjectset
	if fn != nil {
		fn(me, true)
	}
	me.Subjectset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Subject struct {
	Subject *TxsdSubject `xml:"http://docbook.org/ns/docbook subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subject instance.
func (me *XsdGoPkgHasElem_Subject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Subject
	if fn != nil {
		fn(me, true)
	}
	me.Subject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Subjectterm struct {
	Subjectterm *TxsdDate `xml:"http://docbook.org/ns/docbook subjectterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subjectterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subjectterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subjectterm instance.
func (me *XsdGoPkgHasElem_Subjectterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Subjectterm
	if fn != nil {
		fn(me, true)
	}
	me.Subjectterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keywordset struct {
	Keywordset *TxsdKeywordset `xml:"http://docbook.org/ns/docbook keywordset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keywordset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keywordset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keywordset instance.
func (me *XsdGoPkgHasElem_Keywordset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keywordset
	if fn != nil {
		fn(me, true)
	}
	me.Keywordset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keyword struct {
	Keyword *TxsdDate `xml:"http://docbook.org/ns/docbook keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keyword instance.
func (me *XsdGoPkgHasElem_Keyword) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keyword
	if fn != nil {
		fn(me, true)
	}
	me.Keyword.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Step struct {
	Step *TxsdStep `xml:"http://docbook.org/ns/docbook step"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Step function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Step instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Step instance.
func (me *XsdGoPkgHasElem_Step) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Step
	if fn != nil {
		fn(me, true)
	}
	me.Step.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Stepalternatives struct {
	Stepalternativeses []*TxsdStepalternatives `xml:"http://docbook.org/ns/docbook stepalternatives"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Stepalternatives function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Stepalternatives instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Stepalternatives instance.
func (me *XsdGoPkgHasElems_Stepalternatives) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Stepalternatives
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Stepalternativeses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Substeps struct {
	Substepses []*TxsdSubsteps `xml:"http://docbook.org/ns/docbook substeps"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Substeps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Substeps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Substeps instance.
func (me *XsdGoPkgHasElems_Substeps) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Substeps
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Substepses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sidebar struct {
	Sidebar *TxsdSidebar `xml:"http://docbook.org/ns/docbook sidebar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sidebar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sidebar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sidebar instance.
func (me *XsdGoPkgHasElem_Sidebar) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sidebar
	if fn != nil {
		fn(me, true)
	}
	me.Sidebar.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Abstract struct {
	Abstract *TxsdAbstract `xml:"http://docbook.org/ns/docbook abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abstract instance.
func (me *XsdGoPkgHasElem_Abstract) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Abstract
	if fn != nil {
		fn(me, true)
	}
	me.Abstract.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Personblurb struct {
	Personblurb *TxsdPersonblurb `xml:"http://docbook.org/ns/docbook personblurb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Personblurb function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Personblurb instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Personblurb instance.
func (me *XsdGoPkgHasElem_Personblurb) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Personblurb
	if fn != nil {
		fn(me, true)
	}
	me.Personblurb.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Blockquote struct {
	Blockquote *TxsdBlockquote `xml:"http://docbook.org/ns/docbook blockquote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Blockquote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Blockquote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Blockquote instance.
func (me *XsdGoPkgHasElem_Blockquote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Blockquote
	if fn != nil {
		fn(me, true)
	}
	me.Blockquote.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Attribution struct {
	Attributions []*TxsdAttribution `xml:"http://docbook.org/ns/docbook attribution"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Attribution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Attribution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Attribution instance.
func (me *XsdGoPkgHasElems_Attribution) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Attribution
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Attributions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bridgehead struct {
	Bridgehead *TxsdBridgehead `xml:"http://docbook.org/ns/docbook bridgehead"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bridgehead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bridgehead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bridgehead instance.
func (me *XsdGoPkgHasElem_Bridgehead) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bridgehead
	if fn != nil {
		fn(me, true)
	}
	me.Bridgehead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Remark struct {
	Remark *TxsdRemark `xml:"http://docbook.org/ns/docbook remark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Remark instance.
func (me *XsdGoPkgHasElem_Remark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Remark
	if fn != nil {
		fn(me, true)
	}
	me.Remark.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Epigraph struct {
	Epigraph *TxsdEpigraph `xml:"http://docbook.org/ns/docbook epigraph"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Epigraph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Epigraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Epigraph instance.
func (me *XsdGoPkgHasElem_Epigraph) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Epigraph
	if fn != nil {
		fn(me, true)
	}
	me.Epigraph.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Footnote struct {
	Footnote *TxsdFootnote `xml:"http://docbook.org/ns/docbook footnote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Footnote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Footnote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Footnote instance.
func (me *XsdGoPkgHasElem_Footnote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Footnote
	if fn != nil {
		fn(me, true)
	}
	me.Footnote.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Formalpara struct {
	Formalpara *TxsdFormalpara `xml:"http://docbook.org/ns/docbook formalpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Formalpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Formalpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Formalpara instance.
func (me *XsdGoPkgHasElem_Formalpara) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Formalpara
	if fn != nil {
		fn(me, true)
	}
	me.Formalpara.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Simpara struct {
	Simpara *TxsdSimpara `xml:"http://docbook.org/ns/docbook simpara"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simpara function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simpara instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simpara instance.
func (me *XsdGoPkgHasElem_Simpara) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Simpara
	if fn != nil {
		fn(me, true)
	}
	me.Simpara.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Itemizedlist struct {
	Itemizedlist *TxsdItemizedlist `xml:"http://docbook.org/ns/docbook itemizedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Itemizedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Itemizedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Itemizedlist instance.
func (me *XsdGoPkgHasElem_Itemizedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Itemizedlist
	if fn != nil {
		fn(me, true)
	}
	me.Itemizedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Orderedlist struct {
	Orderedlist *TxsdOrderedlist `xml:"http://docbook.org/ns/docbook orderedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orderedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orderedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orderedlist instance.
func (me *XsdGoPkgHasElem_Orderedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Orderedlist
	if fn != nil {
		fn(me, true)
	}
	me.Orderedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Segmentedlist struct {
	Segmentedlist *TxsdSegmentedlist `xml:"http://docbook.org/ns/docbook segmentedlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Segmentedlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Segmentedlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Segmentedlist instance.
func (me *XsdGoPkgHasElem_Segmentedlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Segmentedlist
	if fn != nil {
		fn(me, true)
	}
	me.Segmentedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Segtitle struct {
	Segtitle *TxsdSubtitle `xml:"http://docbook.org/ns/docbook segtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Segtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Segtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Segtitle instance.
func (me *XsdGoPkgHasElem_Segtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Segtitle
	if fn != nil {
		fn(me, true)
	}
	me.Segtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seglistitem struct {
	Seglistitem *TxsdSeglistitem `xml:"http://docbook.org/ns/docbook seglistitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seglistitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seglistitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seglistitem instance.
func (me *XsdGoPkgHasElem_Seglistitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seglistitem
	if fn != nil {
		fn(me, true)
	}
	me.Seglistitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seg struct {
	Seg *TxsdSubtitle `xml:"http://docbook.org/ns/docbook seg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seg instance.
func (me *XsdGoPkgHasElem_Seg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seg
	if fn != nil {
		fn(me, true)
	}
	me.Seg.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Simplelist struct {
	Simplelist *TxsdSimplelist `xml:"http://docbook.org/ns/docbook simplelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplelist instance.
func (me *XsdGoPkgHasElem_Simplelist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Simplelist
	if fn != nil {
		fn(me, true)
	}
	me.Simplelist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Member struct {
	Member *TxsdSubtitle `xml:"http://docbook.org/ns/docbook member"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Member function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Member instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Member instance.
func (me *XsdGoPkgHasElem_Member) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Member
	if fn != nil {
		fn(me, true)
	}
	me.Member.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Variablelist struct {
	Variablelist *TxsdVariablelist `xml:"http://docbook.org/ns/docbook variablelist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Variablelist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Variablelist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Variablelist instance.
func (me *XsdGoPkgHasElem_Variablelist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Variablelist
	if fn != nil {
		fn(me, true)
	}
	me.Variablelist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Varlistentry struct {
	Varlistentry *TxsdVarlistentry `xml:"http://docbook.org/ns/docbook varlistentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Varlistentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Varlistentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Varlistentry instance.
func (me *XsdGoPkgHasElem_Varlistentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Varlistentry
	if fn != nil {
		fn(me, true)
	}
	me.Varlistentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Term struct {
	Term *TxsdSubtitle `xml:"http://docbook.org/ns/docbook term"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Term function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Term instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Term instance.
func (me *XsdGoPkgHasElem_Term) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Term
	if fn != nil {
		fn(me, true)
	}
	me.Term.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Example struct {
	Example *TxsdExample `xml:"http://docbook.org/ns/docbook example"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Example function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Example instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Example instance.
func (me *XsdGoPkgHasElem_Example) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Example
	if fn != nil {
		fn(me, true)
	}
	me.Example.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Informalexample struct {
	Informalexample *TxsdInformalexample `xml:"http://docbook.org/ns/docbook informalexample"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalexample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalexample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalexample instance.
func (me *XsdGoPkgHasElem_Informalexample) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Informalexample
	if fn != nil {
		fn(me, true)
	}
	me.Informalexample.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Literallayout struct {
	Literallayout *TxsdLiterallayout `xml:"http://docbook.org/ns/docbook literallayout"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Literallayout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Literallayout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Literallayout instance.
func (me *XsdGoPkgHasElem_Literallayout) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Literallayout
	if fn != nil {
		fn(me, true)
	}
	me.Literallayout.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Screenshot struct {
	Screenshot *TxsdScreenshot `xml:"http://docbook.org/ns/docbook screenshot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screenshot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screenshot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screenshot instance.
func (me *XsdGoPkgHasElem_Screenshot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Screenshot
	if fn != nil {
		fn(me, true)
	}
	me.Screenshot.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Figure struct {
	Figure *TxsdFigure `xml:"http://docbook.org/ns/docbook figure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Figure instance.
func (me *XsdGoPkgHasElem_Figure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Figure
	if fn != nil {
		fn(me, true)
	}
	me.Figure.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Informalfigure struct {
	Informalfigure *TxsdInformalfigure `xml:"http://docbook.org/ns/docbook informalfigure"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalfigure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalfigure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalfigure instance.
func (me *XsdGoPkgHasElem_Informalfigure) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Informalfigure
	if fn != nil {
		fn(me, true)
	}
	me.Informalfigure.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Inlinemediaobject struct {
	Inlinemediaobject *TxsdInlinemediaobject `xml:"http://docbook.org/ns/docbook inlinemediaobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Inlinemediaobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Inlinemediaobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Inlinemediaobject instance.
func (me *XsdGoPkgHasElem_Inlinemediaobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Inlinemediaobject
	if fn != nil {
		fn(me, true)
	}
	me.Inlinemediaobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Videoobject struct {
	Videoobject *TxsdVideoobject `xml:"http://docbook.org/ns/docbook videoobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Videoobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Videoobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Videoobject instance.
func (me *XsdGoPkgHasElem_Videoobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Videoobject
	if fn != nil {
		fn(me, true)
	}
	me.Videoobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Audioobject struct {
	Audioobject *TxsdAudioobject `xml:"http://docbook.org/ns/docbook audioobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audioobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audioobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audioobject instance.
func (me *XsdGoPkgHasElem_Audioobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Audioobject
	if fn != nil {
		fn(me, true)
	}
	me.Audioobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Imageobject struct {
	Imageobject *TxsdImageobject `xml:"http://docbook.org/ns/docbook imageobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imageobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imageobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imageobject instance.
func (me *XsdGoPkgHasElem_Imageobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Imageobject
	if fn != nil {
		fn(me, true)
	}
	me.Imageobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Textobject struct {
	Textobject *TxsdTextobject `xml:"http://docbook.org/ns/docbook textobject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Textobject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Textobject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Textobject instance.
func (me *XsdGoPkgHasElem_Textobject) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Textobject
	if fn != nil {
		fn(me, true)
	}
	me.Textobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Videodata struct {
	Videodatas []*TxsdVideodata `xml:"http://docbook.org/ns/docbook videodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Videodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Videodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Videodata instance.
func (me *XsdGoPkgHasElems_Videodata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Videodata
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Videodatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Audiodata struct {
	Audiodatas []*TxsdAudiodata `xml:"http://docbook.org/ns/docbook audiodata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audiodata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audiodata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audiodata instance.
func (me *XsdGoPkgHasElems_Audiodata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Audiodata
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Audiodatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Imagedata struct {
	Imagedatas []*TxsdImagedata `xml:"http://docbook.org/ns/docbook imagedata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Imagedata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Imagedata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Imagedata instance.
func (me *XsdGoPkgHasElems_Imagedata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Imagedata
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Imagedatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Textdata struct {
	Textdatas []*TxsdTextdata `xml:"http://docbook.org/ns/docbook textdata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Textdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Textdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Textdata instance.
func (me *XsdGoPkgHasElems_Textdata) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Textdata
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Textdatas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Caption struct {
	Captions []*TxsdCaption `xml:"http://docbook.org/ns/docbook caption"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Caption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Caption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Caption instance.
func (me *XsdGoPkgHasElems_Caption) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Caption
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Captions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Address struct {
	Address *TxsdAddress `xml:"http://docbook.org/ns/docbook address"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Address
	if fn != nil {
		fn(me, true)
	}
	me.Address.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Street struct {
	Street *TxsdSurname `xml:"http://docbook.org/ns/docbook street"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Street function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Street instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Street instance.
func (me *XsdGoPkgHasElem_Street) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Street
	if fn != nil {
		fn(me, true)
	}
	me.Street.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Pob struct {
	Pob *TxsdSurname `xml:"http://docbook.org/ns/docbook pob"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pob function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pob instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pob instance.
func (me *XsdGoPkgHasElem_Pob) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Pob
	if fn != nil {
		fn(me, true)
	}
	me.Pob.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Postcode struct {
	Postcode *TxsdSurname `xml:"http://docbook.org/ns/docbook postcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Postcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Postcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Postcode instance.
func (me *XsdGoPkgHasElem_Postcode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Postcode
	if fn != nil {
		fn(me, true)
	}
	me.Postcode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_City struct {
	City *TxsdSurname `xml:"http://docbook.org/ns/docbook city"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_City instance.
func (me *XsdGoPkgHasElem_City) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_City
	if fn != nil {
		fn(me, true)
	}
	me.City.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_State struct {
	State *TxsdSurname `xml:"http://docbook.org/ns/docbook state"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_State instance.
func (me *XsdGoPkgHasElem_State) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_State
	if fn != nil {
		fn(me, true)
	}
	me.State.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Country struct {
	Country *TxsdSurname `xml:"http://docbook.org/ns/docbook country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Country instance.
func (me *XsdGoPkgHasElem_Country) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Country
	if fn != nil {
		fn(me, true)
	}
	me.Country.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Phone struct {
	Phone *TxsdSurname `xml:"http://docbook.org/ns/docbook phone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Phone instance.
func (me *XsdGoPkgHasElem_Phone) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Phone
	if fn != nil {
		fn(me, true)
	}
	me.Phone.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Fax struct {
	Fax *TxsdSurname `xml:"http://docbook.org/ns/docbook fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Fax
	if fn != nil {
		fn(me, true)
	}
	me.Fax.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Otheraddr struct {
	Otheraddr *TxsdSurname `xml:"http://docbook.org/ns/docbook otheraddr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Otheraddr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Otheraddr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Otheraddr instance.
func (me *XsdGoPkgHasElem_Otheraddr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Otheraddr
	if fn != nil {
		fn(me, true)
	}
	me.Otheraddr.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Affiliation struct {
	Affiliation *TxsdAffiliation `xml:"http://docbook.org/ns/docbook affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Affiliation instance.
func (me *XsdGoPkgHasElem_Affiliation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Affiliation
	if fn != nil {
		fn(me, true)
	}
	me.Affiliation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Shortaffil struct {
	Shortaffils []*TxsdSurname `xml:"http://docbook.org/ns/docbook shortaffil"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shortaffil function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shortaffil instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shortaffil instance.
func (me *XsdGoPkgHasElems_Shortaffil) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Shortaffil
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Shortaffils {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Jobtitle struct {
	Jobtitle *TxsdSurname `xml:"http://docbook.org/ns/docbook jobtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Jobtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Jobtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Jobtitle instance.
func (me *XsdGoPkgHasElem_Jobtitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Jobtitle
	if fn != nil {
		fn(me, true)
	}
	me.Jobtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Orgdiv struct {
	Orgdiv *TxsdOrgdiv `xml:"http://docbook.org/ns/docbook orgdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Orgdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Orgdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Orgdiv instance.
func (me *XsdGoPkgHasElem_Orgdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Orgdiv
	if fn != nil {
		fn(me, true)
	}
	me.Orgdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Artpagenums struct {
	Artpagenums *TxsdSurname `xml:"http://docbook.org/ns/docbook artpagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Artpagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Artpagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Artpagenums instance.
func (me *XsdGoPkgHasElem_Artpagenums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Artpagenums
	if fn != nil {
		fn(me, true)
	}
	me.Artpagenums.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Author struct {
	Author *TxsdAuthor `xml:"http://docbook.org/ns/docbook author"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Author instance.
func (me *XsdGoPkgHasElem_Author) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Author
	if fn != nil {
		fn(me, true)
	}
	me.Author.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Authorgroup struct {
	Authorgroup *TxsdAuthorgroup `xml:"http://docbook.org/ns/docbook authorgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Authorgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Authorgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Authorgroup instance.
func (me *XsdGoPkgHasElem_Authorgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Authorgroup
	if fn != nil {
		fn(me, true)
	}
	me.Authorgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Collab struct {
	Collab *TxsdCollab `xml:"http://docbook.org/ns/docbook collab"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Collab function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collab instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collab instance.
func (me *XsdGoPkgHasElem_Collab) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Collab
	if fn != nil {
		fn(me, true)
	}
	me.Collab.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Authorinitials struct {
	Authorinitials *TxsdSurname `xml:"http://docbook.org/ns/docbook authorinitials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Authorinitials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Authorinitials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Authorinitials instance.
func (me *XsdGoPkgHasElem_Authorinitials) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Authorinitials
	if fn != nil {
		fn(me, true)
	}
	me.Authorinitials.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Person struct {
	Person *TxsdPerson `xml:"http://docbook.org/ns/docbook person"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Person function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Person instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Person instance.
func (me *XsdGoPkgHasElem_Person) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Person
	if fn != nil {
		fn(me, true)
	}
	me.Person.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Confgroup struct {
	Confgroup *TxsdConfgroup `xml:"http://docbook.org/ns/docbook confgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confgroup instance.
func (me *XsdGoPkgHasElem_Confgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Confgroup
	if fn != nil {
		fn(me, true)
	}
	me.Confgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Confdates struct {
	Confdates *TxsdSurname `xml:"http://docbook.org/ns/docbook confdates"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confdates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confdates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confdates instance.
func (me *XsdGoPkgHasElem_Confdates) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Confdates
	if fn != nil {
		fn(me, true)
	}
	me.Confdates.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Conftitle struct {
	Conftitle *TxsdSurname `xml:"http://docbook.org/ns/docbook conftitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Conftitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Conftitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Conftitle instance.
func (me *XsdGoPkgHasElem_Conftitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Conftitle
	if fn != nil {
		fn(me, true)
	}
	me.Conftitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Confnum struct {
	Confnum *TxsdSurname `xml:"http://docbook.org/ns/docbook confnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confnum instance.
func (me *XsdGoPkgHasElem_Confnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Confnum
	if fn != nil {
		fn(me, true)
	}
	me.Confnum.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Confsponsor struct {
	Confsponsor *TxsdSurname `xml:"http://docbook.org/ns/docbook confsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confsponsor instance.
func (me *XsdGoPkgHasElem_Confsponsor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Confsponsor
	if fn != nil {
		fn(me, true)
	}
	me.Confsponsor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Contractnum struct {
	Contractnum *TxsdSurname `xml:"http://docbook.org/ns/docbook contractnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contractnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contractnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contractnum instance.
func (me *XsdGoPkgHasElem_Contractnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Contractnum
	if fn != nil {
		fn(me, true)
	}
	me.Contractnum.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Contractsponsor struct {
	Contractsponsor *TxsdSurname `xml:"http://docbook.org/ns/docbook contractsponsor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contractsponsor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contractsponsor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contractsponsor instance.
func (me *XsdGoPkgHasElem_Contractsponsor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Contractsponsor
	if fn != nil {
		fn(me, true)
	}
	me.Contractsponsor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Copyright struct {
	Copyright *TxsdCopyright `xml:"http://docbook.org/ns/docbook copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Copyright function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Copyright instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Copyright instance.
func (me *XsdGoPkgHasElem_Copyright) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Copyright
	if fn != nil {
		fn(me, true)
	}
	me.Copyright.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Year struct {
	Year *TxsdSurname `xml:"http://docbook.org/ns/docbook year"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Year instance.
func (me *XsdGoPkgHasElem_Year) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Year
	if fn != nil {
		fn(me, true)
	}
	me.Year.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Holder struct {
	Holder *TxsdSurname `xml:"http://docbook.org/ns/docbook holder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Holder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Holder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Holder instance.
func (me *XsdGoPkgHasElem_Holder) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Holder
	if fn != nil {
		fn(me, true)
	}
	me.Holder.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Cover struct {
	Cover *TxsdCover `xml:"http://docbook.org/ns/docbook cover"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cover function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cover instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cover instance.
func (me *XsdGoPkgHasElem_Cover) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Cover
	if fn != nil {
		fn(me, true)
	}
	me.Cover.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Edition struct {
	Edition *TxsdSurname `xml:"http://docbook.org/ns/docbook edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Edition instance.
func (me *XsdGoPkgHasElem_Edition) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Edition
	if fn != nil {
		fn(me, true)
	}
	me.Edition.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Editor struct {
	Editor *TxsdEditor `xml:"http://docbook.org/ns/docbook editor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Editor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Editor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Editor instance.
func (me *XsdGoPkgHasElem_Editor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Editor
	if fn != nil {
		fn(me, true)
	}
	me.Editor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Biblioid struct {
	Biblioid *TxsdBiblioid `xml:"http://docbook.org/ns/docbook biblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioid instance.
func (me *XsdGoPkgHasElem_Biblioid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Biblioid
	if fn != nil {
		fn(me, true)
	}
	me.Biblioid.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Citebiblioid struct {
	Citebiblioid *TxsdCitebiblioid `xml:"http://docbook.org/ns/docbook citebiblioid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citebiblioid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citebiblioid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citebiblioid instance.
func (me *XsdGoPkgHasElem_Citebiblioid) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Citebiblioid
	if fn != nil {
		fn(me, true)
	}
	me.Citebiblioid.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliosource struct {
	Bibliosource *TxsdBibliosource `xml:"http://docbook.org/ns/docbook bibliosource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliosource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliosource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliosource instance.
func (me *XsdGoPkgHasElem_Bibliosource) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliosource
	if fn != nil {
		fn(me, true)
	}
	me.Bibliosource.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliorelation struct {
	Bibliorelation *TxsdBibliorelation `xml:"http://docbook.org/ns/docbook bibliorelation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliorelation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliorelation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliorelation instance.
func (me *XsdGoPkgHasElem_Bibliorelation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliorelation
	if fn != nil {
		fn(me, true)
	}
	me.Bibliorelation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliocoverage struct {
	Bibliocoverage *TxsdBibliocoverage `xml:"http://docbook.org/ns/docbook bibliocoverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliocoverage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliocoverage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliocoverage instance.
func (me *XsdGoPkgHasElem_Bibliocoverage) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliocoverage
	if fn != nil {
		fn(me, true)
	}
	me.Bibliocoverage.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Legalnotice struct {
	Legalnotice *TxsdWarning `xml:"http://docbook.org/ns/docbook legalnotice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Legalnotice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Legalnotice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Legalnotice instance.
func (me *XsdGoPkgHasElem_Legalnotice) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Legalnotice
	if fn != nil {
		fn(me, true)
	}
	me.Legalnotice.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Othercredit struct {
	Othercredit *TxsdOthercredit `xml:"http://docbook.org/ns/docbook othercredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Othercredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Othercredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Othercredit instance.
func (me *XsdGoPkgHasElem_Othercredit) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Othercredit
	if fn != nil {
		fn(me, true)
	}
	me.Othercredit.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Pagenums struct {
	Pagenums *TxsdSurname `xml:"http://docbook.org/ns/docbook pagenums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pagenums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pagenums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pagenums instance.
func (me *XsdGoPkgHasElem_Pagenums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Pagenums
	if fn != nil {
		fn(me, true)
	}
	me.Pagenums.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Contrib struct {
	Contrib *TxsdSurname `xml:"http://docbook.org/ns/docbook contrib"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contrib function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contrib instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contrib instance.
func (me *XsdGoPkgHasElem_Contrib) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Contrib
	if fn != nil {
		fn(me, true)
	}
	me.Contrib.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Honorific struct {
	Honorific *TxsdSurname `xml:"http://docbook.org/ns/docbook honorific"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Honorific function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Honorific instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Honorific instance.
func (me *XsdGoPkgHasElem_Honorific) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Honorific
	if fn != nil {
		fn(me, true)
	}
	me.Honorific.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Firstname struct {
	Firstname *TxsdSurname `xml:"http://docbook.org/ns/docbook firstname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Firstname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Firstname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Firstname instance.
func (me *XsdGoPkgHasElem_Firstname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Firstname
	if fn != nil {
		fn(me, true)
	}
	me.Firstname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Surname struct {
	Surname *TxsdSurname `xml:"http://docbook.org/ns/docbook surname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Surname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Surname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Surname instance.
func (me *XsdGoPkgHasElem_Surname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Surname
	if fn != nil {
		fn(me, true)
	}
	me.Surname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Lineage struct {
	Lineage *TxsdSurname `xml:"http://docbook.org/ns/docbook lineage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lineage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lineage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lineage instance.
func (me *XsdGoPkgHasElem_Lineage) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Lineage
	if fn != nil {
		fn(me, true)
	}
	me.Lineage.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Othername struct {
	Othername *TxsdSurname `xml:"http://docbook.org/ns/docbook othername"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Othername function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Othername instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Othername instance.
func (me *XsdGoPkgHasElem_Othername) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Othername
	if fn != nil {
		fn(me, true)
	}
	me.Othername.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Printhistory struct {
	Printhistory *TxsdPrinthistory `xml:"http://docbook.org/ns/docbook printhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Printhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Printhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Printhistory instance.
func (me *XsdGoPkgHasElem_Printhistory) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Printhistory
	if fn != nil {
		fn(me, true)
	}
	me.Printhistory.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Pubdate struct {
	Pubdate *TxsdDate `xml:"http://docbook.org/ns/docbook pubdate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pubdate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pubdate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pubdate instance.
func (me *XsdGoPkgHasElem_Pubdate) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Pubdate
	if fn != nil {
		fn(me, true)
	}
	me.Pubdate.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Publisher struct {
	Publisher *TxsdPublisher `xml:"http://docbook.org/ns/docbook publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publisher instance.
func (me *XsdGoPkgHasElem_Publisher) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Publisher
	if fn != nil {
		fn(me, true)
	}
	me.Publisher.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Releaseinfo struct {
	Releaseinfo *TxsdSurname `xml:"http://docbook.org/ns/docbook releaseinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Releaseinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Releaseinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Releaseinfo instance.
func (me *XsdGoPkgHasElem_Releaseinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Releaseinfo
	if fn != nil {
		fn(me, true)
	}
	me.Releaseinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Revhistory struct {
	Revhistory *TxsdRevhistory `xml:"http://docbook.org/ns/docbook revhistory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revhistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revhistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revhistory instance.
func (me *XsdGoPkgHasElem_Revhistory) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Revhistory
	if fn != nil {
		fn(me, true)
	}
	me.Revhistory.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Revision struct {
	Revision *TxsdRevision `xml:"http://docbook.org/ns/docbook revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Revision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Revision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Revision instance.
func (me *XsdGoPkgHasElem_Revision) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Revision
	if fn != nil {
		fn(me, true)
	}
	me.Revision.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Revnumber struct {
	Revnumbers []*TxsdSurname `xml:"http://docbook.org/ns/docbook revnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revnumber instance.
func (me *XsdGoPkgHasElems_Revnumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Revnumber
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Revnumbers {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Revremark struct {
	Revremarks []*TxsdSurname `xml:"http://docbook.org/ns/docbook revremark"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revremark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revremark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revremark instance.
func (me *XsdGoPkgHasElems_Revremark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Revremark
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Revremarks {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Revdescription struct {
	Revdescriptions []*TxsdRevdescription `xml:"http://docbook.org/ns/docbook revdescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Revdescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Revdescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Revdescription instance.
func (me *XsdGoPkgHasElems_Revdescription) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Revdescription
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Revdescriptions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seriesvolnums struct {
	Seriesvolnums *TxsdSurname `xml:"http://docbook.org/ns/docbook seriesvolnums"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seriesvolnums function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seriesvolnums instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seriesvolnums instance.
func (me *XsdGoPkgHasElem_Seriesvolnums) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seriesvolnums
	if fn != nil {
		fn(me, true)
	}
	me.Seriesvolnums.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Volumenum struct {
	Volumenum *TxsdSurname `xml:"http://docbook.org/ns/docbook volumenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Volumenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Volumenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Volumenum instance.
func (me *XsdGoPkgHasElem_Volumenum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Volumenum
	if fn != nil {
		fn(me, true)
	}
	me.Volumenum.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Issuenum struct {
	Issuenum *TxsdSurname `xml:"http://docbook.org/ns/docbook issuenum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Issuenum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Issuenum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Issuenum instance.
func (me *XsdGoPkgHasElem_Issuenum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Issuenum
	if fn != nil {
		fn(me, true)
	}
	me.Issuenum.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Package struct {
	Package *TxsdSurname `xml:"http://docbook.org/ns/docbook package"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Package function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Package instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Package instance.
func (me *XsdGoPkgHasElem_Package) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Package
	if fn != nil {
		fn(me, true)
	}
	me.Package.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Email struct {
	Email *TxsdSurname `xml:"http://docbook.org/ns/docbook email"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Email
	if fn != nil {
		fn(me, true)
	}
	me.Email.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Lineannotation struct {
	Lineannotation *TxsdSurname `xml:"http://docbook.org/ns/docbook lineannotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lineannotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lineannotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lineannotation instance.
func (me *XsdGoPkgHasElem_Lineannotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Lineannotation
	if fn != nil {
		fn(me, true)
	}
	me.Lineannotation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Replaceable struct {
	Replaceable *TxsdReplaceable `xml:"http://docbook.org/ns/docbook replaceable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Replaceable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Replaceable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Replaceable instance.
func (me *XsdGoPkgHasElem_Replaceable) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Replaceable
	if fn != nil {
		fn(me, true)
	}
	me.Replaceable.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Uri struct {
	Uri *TxsdUri `xml:"http://docbook.org/ns/docbook uri"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Uri function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Uri instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Uri instance.
func (me *XsdGoPkgHasElem_Uri) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Uri
	if fn != nil {
		fn(me, true)
	}
	me.Uri.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Citation struct {
	Citation *TxsdCitation `xml:"http://docbook.org/ns/docbook citation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citation instance.
func (me *XsdGoPkgHasElem_Citation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Citation
	if fn != nil {
		fn(me, true)
	}
	me.Citation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Citerefentry struct {
	Citerefentry *TxsdCiterefentry `xml:"http://docbook.org/ns/docbook citerefentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citerefentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citerefentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citerefentry instance.
func (me *XsdGoPkgHasElem_Citerefentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Citerefentry
	if fn != nil {
		fn(me, true)
	}
	me.Citerefentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refentrytitle struct {
	Refentrytitles []*TxsdRefentrytitle `xml:"http://docbook.org/ns/docbook refentrytitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refentrytitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refentrytitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refentrytitle instance.
func (me *XsdGoPkgHasElems_Refentrytitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refentrytitle
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refentrytitles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Manvolnum struct {
	Manvolnums []*TxsdSurname `xml:"http://docbook.org/ns/docbook manvolnum"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Manvolnum function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Manvolnum instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Manvolnum instance.
func (me *XsdGoPkgHasElems_Manvolnum) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Manvolnum
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Manvolnums {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Citetitle struct {
	Citetitle *TxsdCitetitle `xml:"http://docbook.org/ns/docbook citetitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Citetitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Citetitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Citetitle instance.
func (me *XsdGoPkgHasElem_Citetitle) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Citetitle
	if fn != nil {
		fn(me, true)
	}
	me.Citetitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Emphasis struct {
	Emphasis *TxsdEmphasis `xml:"http://docbook.org/ns/docbook emphasis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Emphasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Emphasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Emphasis instance.
func (me *XsdGoPkgHasElem_Emphasis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Emphasis
	if fn != nil {
		fn(me, true)
	}
	me.Emphasis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Foreignphrase struct {
	Foreignphrase *TxsdForeignphrase `xml:"http://docbook.org/ns/docbook foreignphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Foreignphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Foreignphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Foreignphrase instance.
func (me *XsdGoPkgHasElem_Foreignphrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Foreignphrase
	if fn != nil {
		fn(me, true)
	}
	me.Foreignphrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Quote struct {
	Quote *TxsdQuote `xml:"http://docbook.org/ns/docbook quote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Quote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Quote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Quote instance.
func (me *XsdGoPkgHasElem_Quote) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Quote
	if fn != nil {
		fn(me, true)
	}
	me.Quote.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Subscript struct {
	Subscript *TxsdSubscript `xml:"http://docbook.org/ns/docbook subscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subscript instance.
func (me *XsdGoPkgHasElem_Subscript) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Subscript
	if fn != nil {
		fn(me, true)
	}
	me.Subscript.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Superscript struct {
	Superscript *TxsdSuperscript `xml:"http://docbook.org/ns/docbook superscript"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Superscript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Superscript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Superscript instance.
func (me *XsdGoPkgHasElem_Superscript) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Superscript
	if fn != nil {
		fn(me, true)
	}
	me.Superscript.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Trademark struct {
	Trademark *TxsdTrademark `xml:"http://docbook.org/ns/docbook trademark"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Trademark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Trademark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Trademark instance.
func (me *XsdGoPkgHasElem_Trademark) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Trademark
	if fn != nil {
		fn(me, true)
	}
	me.Trademark.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Wordasword struct {
	Wordasword *TxsdWordasword `xml:"http://docbook.org/ns/docbook wordasword"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Wordasword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Wordasword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Wordasword instance.
func (me *XsdGoPkgHasElem_Wordasword) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Wordasword
	if fn != nil {
		fn(me, true)
	}
	me.Wordasword.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Footnoteref struct {
	Footnoteref *TxsdFootnoteref `xml:"http://docbook.org/ns/docbook footnoteref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Footnoteref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Footnoteref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Footnoteref instance.
func (me *XsdGoPkgHasElem_Footnoteref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Footnoteref
	if fn != nil {
		fn(me, true)
	}
	me.Footnoteref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Xref struct {
	Xref *TxsdXref `xml:"http://docbook.org/ns/docbook xref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xref instance.
func (me *XsdGoPkgHasElem_Xref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Xref
	if fn != nil {
		fn(me, true)
	}
	me.Xref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Link struct {
	Link *TxsdLink `xml:"http://docbook.org/ns/docbook link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Link instance.
func (me *XsdGoPkgHasElem_Link) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Link
	if fn != nil {
		fn(me, true)
	}
	me.Link.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Olink struct {
	Olink *TxsdOlink `xml:"http://docbook.org/ns/docbook olink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Olink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Olink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Olink instance.
func (me *XsdGoPkgHasElem_Olink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Olink
	if fn != nil {
		fn(me, true)
	}
	me.Olink.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Anchor struct {
	Anchor *TxsdAnchor `xml:"http://docbook.org/ns/docbook anchor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Anchor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Anchor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Anchor instance.
func (me *XsdGoPkgHasElem_Anchor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Anchor
	if fn != nil {
		fn(me, true)
	}
	me.Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTocentry struct {
	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Coref

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Author

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Interfacename
}

//	If the WalkHandlers.TxsdTocentry function is not nil (ie. was set by outside code), calls it with this TxsdTocentry instance as the single argument. Then calls the Walk() method on 99/103 embed(s) and 0/0 field(s) belonging to this TxsdTocentry instance.
func (me *TxsdTocentry) Walk() {
	fn := WalkHandlers.TxsdTocentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Emphasis.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Productname.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tocentry struct {
	Tocentries []*TxsdTocentry `xml:"http://docbook.org/ns/docbook tocentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tocentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tocentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tocentry instance.
func (me *XsdGoPkgHasElems_Tocentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tocentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tocentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTocdiv struct {
	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Tocentry

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAttr_Pagenum_XsdtString_

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Tocdiv

	XsdGoPkgHasElems_Orderedlist
}

//	If the WalkHandlers.TxsdTocdiv function is not nil (ie. was set by outside code), calls it with this TxsdTocdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdTocdiv instance.
func (me *TxsdTocdiv) Walk() {
	fn := WalkHandlers.TxsdTocdiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Tocentry.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tocdiv struct {
	Tocdivs []*TxsdTocdiv `xml:"http://docbook.org/ns/docbook tocdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tocdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tocdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tocdiv instance.
func (me *XsdGoPkgHasElems_Tocdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tocdiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tocdivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdToc struct {
	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Tocentry

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Tocdiv

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Itemizedlist
}

//	If the WalkHandlers.TxsdToc function is not nil (ie. was set by outside code), calls it with this TxsdToc instance as the single argument. Then calls the Walk() method on 60/63 embed(s) and 0/0 field(s) belonging to this TxsdToc instance.
func (me *TxsdToc) Walk() {
	fn := WalkHandlers.TxsdToc
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Tocdiv.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Tocentry.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Toc struct {
	Toc *TxsdToc `xml:"http://docbook.org/ns/docbook toc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Toc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Toc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Toc instance.
func (me *XsdGoPkgHasElem_Toc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Toc
	if fn != nil {
		fn(me, true)
	}
	me.Toc.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasAttr_Status_XsdtString_ struct {
	Status xsdt.String `xml:"http://docbook.org/ns/docbook status,attr"`
}

type TxsdColophon struct {
	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Task

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Constructorsynopsis
}

//	If the WalkHandlers.TxsdColophon function is not nil (ie. was set by outside code), calls it with this TxsdColophon instance as the single argument. Then calls the Walk() method on 59/64 embed(s) and 0/0 field(s) belonging to this TxsdColophon instance.
func (me *TxsdColophon) Walk() {
	fn := WalkHandlers.TxsdColophon
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Colophon struct {
	Colophons []*TxsdColophon `xml:"http://docbook.org/ns/docbook colophon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colophon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colophon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colophon instance.
func (me *XsdGoPkgHasElems_Colophon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Colophon
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Colophons {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdTertiaryie struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Accel

	XsdGoPkgHasElems_Trademark

	XsdGoPkgHasElems_Guisubmenu

	XsdGoPkgHasElems_Guibutton

	XsdGoPkgHasElems_Org

	XsdGoPkgHasElems_Literal

	XsdGoPkgHasElems_Wordasword

	XsdGoPkgHasElems_Initializer

	XsdGoPkgHasElems_Ooexception

	XsdGoPkgHasElems_Classname

	XsdGoPkgHasElems_Varname

	XsdGoPkgHasElems_Token

	XsdGoPkgHasElems_Tag

	XsdGoPkgHasElems_Foreignphrase

	XsdGoPkgHasElems_Citebiblioid

	XsdGoPkgHasElems_Oointerface

	XsdGoPkgHasElems_Keycombo

	XsdGoPkgHasElems_Option

	XsdGoPkgHasElems_Personname

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasElems_Returnvalue

	XsdGoPkgHasElems_Function

	XsdGoPkgHasElems_Keycode

	XsdGoPkgHasElems_Termdef

	XsdGoPkgHasElems_Productname

	XsdGoPkgHasElems_Menuchoice

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Orgname

	XsdGoPkgHasElems_Glossterm

	XsdGoPkgHasElems_Emphasis

	XsdGoPkgHasAttr_Linkends_XsdtIdrefs_

	XsdGoPkgHasElems_Errortype

	XsdGoPkgHasElems_Productnumber

	XsdGoPkgHasElems_Modifier

	XsdGoPkgHasElems_Hardware

	XsdGoPkgHasElems_Exceptionname

	XsdGoPkgHasElems_Methodname

	XsdGoPkgHasElems_Database

	XsdGoPkgHasElems_Mousebutton

	XsdGoPkgHasElems_Acronym

	XsdGoPkgHasElems_Constant

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Parameter

	XsdGoPkgHasElems_Keysym

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_Errorname

	XsdGoPkgHasElems_Userinput

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Guimenuitem

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Footnote

	XsdGoPkgHasElems_Editor

	XsdGoPkgHasElems_Citation

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Errorcode

	XsdGoPkgHasElems_Keycap

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Type

	XsdGoPkgHasElems_Guiicon

	XsdGoPkgHasElems_Application

	XsdGoPkgHasElems_Ooclass

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Guilabel

	XsdGoPkgHasElems_Abbrev

	XsdGoPkgHasElems_Inlineequation

	XsdGoPkgHasElems_Date

	XsdGoPkgHasElems_Command

	XsdGoPkgHasElems_Nonterminal

	XsdGoPkgHasElems_Markup

	XsdGoPkgHasElems_Olink

	XsdGoPkgHasElems_Citerefentry

	XsdGoPkgHasElems_Code

	XsdGoPkgHasElems_Package

	XsdGoPkgHasElems_Symbol

	XsdGoPkgHasElems_Prompt

	XsdGoPkgHasElems_Person

	XsdGoPkgHasElems_Citetitle

	XsdGoPkgHasElems_Errortext

	XsdGoPkgHasElems_Optional

	XsdGoPkgHasElems_Author

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Interfacename

	XsdGoPkgHasElems_Computeroutput

	XsdGoPkgHasElems_Jobtitle

	XsdGoPkgHasElems_Filename

	XsdGoPkgHasElems_Footnoteref

	XsdGoPkgHasElems_Guimenu

	XsdGoPkgHasElems_Uri

	XsdGoPkgHasElems_Envar

	XsdGoPkgHasElems_Quote

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Firstterm

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Systemitem

	XsdGoPkgHasElems_Shortcut

	XsdGoPkgHasElems_Coref
}

//	If the WalkHandlers.TxsdTertiaryie function is not nil (ie. was set by outside code), calls it with this TxsdTertiaryie instance as the single argument. Then calls the Walk() method on 99/102 embed(s) and 0/0 field(s) belonging to this TxsdTertiaryie instance.
func (me *TxsdTertiaryie) Walk() {
	fn := WalkHandlers.TxsdTertiaryie
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Firstterm.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Systemitem.Walk()
	me.XsdGoPkgHasElems_Shortcut.Walk()
	me.XsdGoPkgHasElems_Coref.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Accel.Walk()
	me.XsdGoPkgHasElems_Trademark.Walk()
	me.XsdGoPkgHasElems_Guisubmenu.Walk()
	me.XsdGoPkgHasElems_Guibutton.Walk()
	me.XsdGoPkgHasElems_Org.Walk()
	me.XsdGoPkgHasElems_Literal.Walk()
	me.XsdGoPkgHasElems_Wordasword.Walk()
	me.XsdGoPkgHasElems_Initializer.Walk()
	me.XsdGoPkgHasElems_Ooexception.Walk()
	me.XsdGoPkgHasElems_Classname.Walk()
	me.XsdGoPkgHasElems_Varname.Walk()
	me.XsdGoPkgHasElems_Token.Walk()
	me.XsdGoPkgHasElems_Tag.Walk()
	me.XsdGoPkgHasElems_Foreignphrase.Walk()
	me.XsdGoPkgHasElems_Citebiblioid.Walk()
	me.XsdGoPkgHasElems_Oointerface.Walk()
	me.XsdGoPkgHasElems_Keycombo.Walk()
	me.XsdGoPkgHasElems_Option.Walk()
	me.XsdGoPkgHasElems_Personname.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Returnvalue.Walk()
	me.XsdGoPkgHasElems_Function.Walk()
	me.XsdGoPkgHasElems_Keycode.Walk()
	me.XsdGoPkgHasElems_Termdef.Walk()
	me.XsdGoPkgHasElems_Productname.Walk()
	me.XsdGoPkgHasElems_Menuchoice.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Orgname.Walk()
	me.XsdGoPkgHasElems_Glossterm.Walk()
	me.XsdGoPkgHasElems_Emphasis.Walk()
	me.XsdGoPkgHasElems_Errortype.Walk()
	me.XsdGoPkgHasElems_Productnumber.Walk()
	me.XsdGoPkgHasElems_Modifier.Walk()
	me.XsdGoPkgHasElems_Hardware.Walk()
	me.XsdGoPkgHasElems_Exceptionname.Walk()
	me.XsdGoPkgHasElems_Methodname.Walk()
	me.XsdGoPkgHasElems_Database.Walk()
	me.XsdGoPkgHasElems_Mousebutton.Walk()
	me.XsdGoPkgHasElems_Acronym.Walk()
	me.XsdGoPkgHasElems_Constant.Walk()
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Parameter.Walk()
	me.XsdGoPkgHasElems_Keysym.Walk()
	me.XsdGoPkgHasElems_Property.Walk()
	me.XsdGoPkgHasElems_Errorname.Walk()
	me.XsdGoPkgHasElems_Userinput.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Guimenuitem.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Email.Walk()
	me.XsdGoPkgHasElems_Footnote.Walk()
	me.XsdGoPkgHasElems_Editor.Walk()
	me.XsdGoPkgHasElems_Citation.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Errorcode.Walk()
	me.XsdGoPkgHasElems_Keycap.Walk()
	me.XsdGoPkgHasElems_Type.Walk()
	me.XsdGoPkgHasElems_Guiicon.Walk()
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasElems_Ooclass.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Guilabel.Walk()
	me.XsdGoPkgHasElems_Abbrev.Walk()
	me.XsdGoPkgHasElems_Inlineequation.Walk()
	me.XsdGoPkgHasElems_Date.Walk()
	me.XsdGoPkgHasElems_Command.Walk()
	me.XsdGoPkgHasElems_Nonterminal.Walk()
	me.XsdGoPkgHasElems_Markup.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Citerefentry.Walk()
	me.XsdGoPkgHasElems_Code.Walk()
	me.XsdGoPkgHasElems_Package.Walk()
	me.XsdGoPkgHasElems_Symbol.Walk()
	me.XsdGoPkgHasElems_Prompt.Walk()
	me.XsdGoPkgHasElems_Person.Walk()
	me.XsdGoPkgHasElems_Citetitle.Walk()
	me.XsdGoPkgHasElems_Errortext.Walk()
	me.XsdGoPkgHasElems_Optional.Walk()
	me.XsdGoPkgHasElems_Author.Walk()
	me.XsdGoPkgHasElems_Interfacename.Walk()
	me.XsdGoPkgHasElems_Computeroutput.Walk()
	me.XsdGoPkgHasElems_Jobtitle.Walk()
	me.XsdGoPkgHasElems_Filename.Walk()
	me.XsdGoPkgHasElems_Footnoteref.Walk()
	me.XsdGoPkgHasElems_Guimenu.Walk()
	me.XsdGoPkgHasElems_Uri.Walk()
	me.XsdGoPkgHasElems_Envar.Walk()
	me.XsdGoPkgHasElems_Quote.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tertiaryie struct {
	Tertiaryies []*TxsdTertiaryie `xml:"http://docbook.org/ns/docbook tertiaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tertiaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tertiaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tertiaryie instance.
func (me *XsdGoPkgHasElems_Tertiaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tertiaryie
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tertiaryies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Secondaryie struct {
	Secondaryies []*TxsdTertiaryie `xml:"http://docbook.org/ns/docbook secondaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Secondaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Secondaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Secondaryie instance.
func (me *XsdGoPkgHasElems_Secondaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Secondaryie
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Secondaryies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seeie struct {
	Seeies []*TxsdTitle `xml:"http://docbook.org/ns/docbook seeie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seeie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seeie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seeie instance.
func (me *XsdGoPkgHasElems_Seeie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seeie
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Seeies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Seealsoie struct {
	Seealsoies []*TxsdTertiaryie `xml:"http://docbook.org/ns/docbook seealsoie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Seealsoie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Seealsoie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Seealsoie instance.
func (me *XsdGoPkgHasElems_Seealsoie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Seealsoie
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Seealsoies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Primaryie struct {
	Primaryie *TxsdTertiaryie `xml:"http://docbook.org/ns/docbook primaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Primaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Primaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Primaryie instance.
func (me *XsdGoPkgHasElem_Primaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Primaryie
	if fn != nil {
		fn(me, true)
	}
	me.Primaryie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdIndexentry struct {
	XsdGoPkgHasElems_Seealsoie

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Primaryie

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Tertiaryie

	XsdGoPkgHasElems_Secondaryie

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Seeie
}

//	If the WalkHandlers.TxsdIndexentry function is not nil (ie. was set by outside code), calls it with this TxsdIndexentry instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdIndexentry instance.
func (me *TxsdIndexentry) Walk() {
	fn := WalkHandlers.TxsdIndexentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Seeie.Walk()
	me.XsdGoPkgHasElems_Seealsoie.Walk()
	me.XsdGoPkgHasElem_Primaryie.Walk()
	me.XsdGoPkgHasElems_Tertiaryie.Walk()
	me.XsdGoPkgHasElems_Secondaryie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Indexentry struct {
	Indexentries []*TxsdIndexentry `xml:"http://docbook.org/ns/docbook indexentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexentry instance.
func (me *XsdGoPkgHasElems_Indexentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Indexentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Indexentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdIndexdiv struct {
	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElem_Segmentedlist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bridgehead
}

//	If the WalkHandlers.TxsdIndexdiv function is not nil (ie. was set by outside code), calls it with this TxsdIndexdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdIndexdiv instance.
func (me *TxsdIndexdiv) Walk() {
	fn := WalkHandlers.TxsdIndexdiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElem_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Indexentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Indexdiv struct {
	Indexdivs []*TxsdIndexdiv `xml:"http://docbook.org/ns/docbook indexdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indexdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indexdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indexdiv instance.
func (me *XsdGoPkgHasElems_Indexdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Indexdiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Indexdivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdIndex struct {
	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Indexdiv

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElem_Segmentedlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Glosslist
}

//	If the WalkHandlers.TxsdIndex function is not nil (ie. was set by outside code), calls it with this TxsdIndex instance as the single argument. Then calls the Walk() method on 61/67 embed(s) and 0/0 field(s) belonging to this TxsdIndex instance.
func (me *TxsdIndex) Walk() {
	fn := WalkHandlers.TxsdIndex
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Indexdiv.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElem_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Indexentry.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Index struct {
	Indexs []*TxsdIndex `xml:"http://docbook.org/ns/docbook index"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Index function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Index instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Index instance.
func (me *XsdGoPkgHasElems_Index) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Index
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Indexs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefclass struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Application

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Role_XsdtString_
}

//	If the WalkHandlers.TxsdRefclass function is not nil (ie. was set by outside code), calls it with this TxsdRefclass instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdRefclass instance.
func (me *TxsdRefclass) Walk() {
	fn := WalkHandlers.TxsdRefclass
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Application.Walk()
	me.XsdGoPkgHasCdata.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refclass struct {
	Refclasses []*TxsdRefclass `xml:"http://docbook.org/ns/docbook refclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refclass instance.
func (me *XsdGoPkgHasElems_Refclass) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refclass
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refclasses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refpurpose struct {
	Refpurpose *TxsdTitle `xml:"http://docbook.org/ns/docbook refpurpose"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refpurpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refpurpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refpurpose instance.
func (me *XsdGoPkgHasElem_Refpurpose) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refpurpose
	if fn != nil {
		fn(me, true)
	}
	me.Refpurpose.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refname struct {
	Refnames []*TxsdTitle `xml:"http://docbook.org/ns/docbook refname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refname instance.
func (me *XsdGoPkgHasElems_Refname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refname
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refnames {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refdescriptor struct {
	Refdescriptor *TxsdTitle `xml:"http://docbook.org/ns/docbook refdescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refdescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refdescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refdescriptor instance.
func (me *XsdGoPkgHasElem_Refdescriptor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refdescriptor
	if fn != nil {
		fn(me, true)
	}
	me.Refdescriptor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefnamediv struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Refdescriptor

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Refclass

	XsdGoPkgHasElem_Refpurpose

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Refname
}

//	If the WalkHandlers.TxsdRefnamediv function is not nil (ie. was set by outside code), calls it with this TxsdRefnamediv instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRefnamediv instance.
func (me *TxsdRefnamediv) Walk() {
	fn := WalkHandlers.TxsdRefnamediv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Refname.Walk()
	me.XsdGoPkgHasElem_Refdescriptor.Walk()
	me.XsdGoPkgHasElems_Refclass.Walk()
	me.XsdGoPkgHasElem_Refpurpose.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refnamediv struct {
	Refnamedivs []*TxsdRefnamediv `xml:"http://docbook.org/ns/docbook refnamediv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refnamediv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refnamediv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refnamediv instance.
func (me *XsdGoPkgHasElems_Refnamediv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refnamediv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refnamedivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefsection struct {
	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalequation
}

//	If the WalkHandlers.TxsdRefsection function is not nil (ie. was set by outside code), calls it with this TxsdRefsection instance as the single argument. Then calls the Walk() method on 59/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsection instance.
func (me *TxsdRefsection) Walk() {
	fn := WalkHandlers.TxsdRefsection
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refsection struct {
	Refsections []*TxsdRefsection `xml:"http://docbook.org/ns/docbook refsection"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsection instance.
func (me *XsdGoPkgHasElems_Refsection) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refsection
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refsections {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refsect3 struct {
	Refsect3s []*TxsdColophon `xml:"http://docbook.org/ns/docbook refsect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect3 instance.
func (me *XsdGoPkgHasElems_Refsect3) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refsect3
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refsect3s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefsect2 struct {
	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Refsect3

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Table
}

//	If the WalkHandlers.TxsdRefsect2 function is not nil (ie. was set by outside code), calls it with this TxsdRefsect2 instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsect2 instance.
func (me *TxsdRefsect2) Walk() {
	fn := WalkHandlers.TxsdRefsect2
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Refsect3.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refsect2 struct {
	Refsect2s []*TxsdRefsect2 `xml:"http://docbook.org/ns/docbook refsect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect2 instance.
func (me *XsdGoPkgHasElems_Refsect2) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refsect2
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refsect2s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefsynopsisdiv struct {
	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Refsect2

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Destructorsynopsis
}

//	If the WalkHandlers.TxsdRefsynopsisdiv function is not nil (ie. was set by outside code), calls it with this TxsdRefsynopsisdiv instance as the single argument. Then calls the Walk() method on 61/64 embed(s) and 0/0 field(s) belonging to this TxsdRefsynopsisdiv instance.
func (me *TxsdRefsynopsisdiv) Walk() {
	fn := WalkHandlers.TxsdRefsynopsisdiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Refsection.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Refsect2.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refsynopsisdiv struct {
	Refsynopsisdiv *TxsdRefsynopsisdiv `xml:"http://docbook.org/ns/docbook refsynopsisdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsynopsisdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsynopsisdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsynopsisdiv instance.
func (me *XsdGoPkgHasElem_Refsynopsisdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refsynopsisdiv
	if fn != nil {
		fn(me, true)
	}
	me.Refsynopsisdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefmiscinfoClass xsdt.Token

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "manual".
func (me TxsdRefmiscinfoClass) IsManual() bool { return me == "manual" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "software".
func (me TxsdRefmiscinfoClass) IsSoftware() bool { return me == "software" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "source".
func (me TxsdRefmiscinfoClass) IsSource() bool { return me == "source" }

//	Since TxsdRefmiscinfoClass is just a simple String type, this merely returns the current string value.
func (me TxsdRefmiscinfoClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "sectdesc".
func (me TxsdRefmiscinfoClass) IsSectdesc() bool { return me == "sectdesc" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "version".
func (me TxsdRefmiscinfoClass) IsVersion() bool { return me == "version" }

//	Returns true if the value of this enumerated TxsdRefmiscinfoClass is "other".
func (me TxsdRefmiscinfoClass) IsOther() bool { return me == "other" }

//	This convenience method just performs a simple type conversion to TxsdRefmiscinfoClass's alias type xsdt.Token.
func (me TxsdRefmiscinfoClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TxsdRefmiscinfoClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRefmiscinfoClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Class_TxsdRefmiscinfoClass_ struct {
	Class TxsdRefmiscinfoClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdRefmiscinfo struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Biblioref

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Replaceable

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Superscript

	XsdGoPkgHasAttr_Class_TxsdRefmiscinfoClass_

	XsdGoPkgHasElems_Inlinemediaobject

	XsdGoPkgHasElems_Link

	XsdGoPkgHasElems_Phrase

	XsdGoPkgHasElems_Subscript

	XsdGoPkgHasElems_Alt

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Otherclass_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Olink
}

//	If the WalkHandlers.TxsdRefmiscinfo function is not nil (ie. was set by outside code), calls it with this TxsdRefmiscinfo instance as the single argument. Then calls the Walk() method on 15/20 embed(s) and 0/0 field(s) belonging to this TxsdRefmiscinfo instance.
func (me *TxsdRefmiscinfo) Walk() {
	fn := WalkHandlers.TxsdRefmiscinfo
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Xref.Walk()
	me.XsdGoPkgHasElems_Replaceable.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Superscript.Walk()
	me.XsdGoPkgHasElems_Inlinemediaobject.Walk()
	me.XsdGoPkgHasElems_Link.Walk()
	me.XsdGoPkgHasElems_Phrase.Walk()
	me.XsdGoPkgHasElems_Subscript.Walk()
	me.XsdGoPkgHasElems_Alt.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Olink.Walk()
	me.XsdGoPkgHasElems_Biblioref.Walk()
	me.XsdGoPkgHasCdata.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refmiscinfo struct {
	Refmiscinfos []*TxsdRefmiscinfo `xml:"http://docbook.org/ns/docbook refmiscinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refmiscinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refmiscinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refmiscinfo instance.
func (me *XsdGoPkgHasElems_Refmiscinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refmiscinfo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refmiscinfos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefmeta struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElem_Manvolnum

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Refmiscinfo

	XsdGoPkgHasElem_Refentrytitle

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdRefmeta function is not nil (ie. was set by outside code), calls it with this TxsdRefmeta instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdRefmeta instance.
func (me *TxsdRefmeta) Walk() {
	fn := WalkHandlers.TxsdRefmeta
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Manvolnum.Walk()
	me.XsdGoPkgHasElems_Refmiscinfo.Walk()
	me.XsdGoPkgHasElem_Refentrytitle.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refmeta struct {
	Refmeta *TxsdRefmeta `xml:"http://docbook.org/ns/docbook refmeta"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refmeta function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refmeta instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refmeta instance.
func (me *XsdGoPkgHasElem_Refmeta) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refmeta
	if fn != nil {
		fn(me, true)
	}
	me.Refmeta.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefsect1 struct {
	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Refsect2

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Sidebar
}

//	If the WalkHandlers.TxsdRefsect1 function is not nil (ie. was set by outside code), calls it with this TxsdRefsect1 instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdRefsect1 instance.
func (me *TxsdRefsect1) Walk() {
	fn := WalkHandlers.TxsdRefsect1
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Refsect2.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refsect1 struct {
	Refsect1s []*TxsdRefsect1 `xml:"http://docbook.org/ns/docbook refsect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsect1 instance.
func (me *XsdGoPkgHasElems_Refsect1) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refsect1
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refsect1s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdRefentry struct {
	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Refnamediv

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Refsynopsisdiv

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Refsection

	XsdGoPkgHasElem_Refmeta

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Refsect1

	XsdGoPkgHasAtts_DbCommonLinkingAttributes
}

//	If the WalkHandlers.TxsdRefentry function is not nil (ie. was set by outside code), calls it with this TxsdRefentry instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdRefentry instance.
func (me *TxsdRefentry) Walk() {
	fn := WalkHandlers.TxsdRefentry
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElem_Refsynopsisdiv.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Refsection.Walk()
	me.XsdGoPkgHasElem_Refmeta.Walk()
	me.XsdGoPkgHasElems_Refsect1.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Refnamediv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refentry struct {
	Refentries []*TxsdRefentry `xml:"http://docbook.org/ns/docbook refentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refentry instance.
func (me *XsdGoPkgHasElems_Refentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refentry
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refentries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBibliodiv struct {
	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Synopsis
}

//	If the WalkHandlers.TxsdBibliodiv function is not nil (ie. was set by outside code), calls it with this TxsdBibliodiv instance as the single argument. Then calls the Walk() method on 61/66 embed(s) and 0/0 field(s) belonging to this TxsdBibliodiv instance.
func (me *TxsdBibliodiv) Walk() {
	fn := WalkHandlers.TxsdBibliodiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Biblioentry.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Bibliomixed.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliodiv struct {
	Bibliodivs []*TxsdBibliodiv `xml:"http://docbook.org/ns/docbook bibliodiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliodiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliodiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliodiv instance.
func (me *XsdGoPkgHasElems_Bibliodiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliodiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliodivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBibliography struct {
	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Bibliomixed

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Biblioentry

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Bibliodiv

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Funcsynopsis
}

//	If the WalkHandlers.TxsdBibliography function is not nil (ie. was set by outside code), calls it with this TxsdBibliography instance as the single argument. Then calls the Walk() method on 62/67 embed(s) and 0/0 field(s) belonging to this TxsdBibliography instance.
func (me *TxsdBibliography) Walk() {
	fn := WalkHandlers.TxsdBibliography
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Bibliomixed.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Biblioentry.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Bibliodiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Bibliography struct {
	Bibliographies []*TxsdBibliography `xml:"http://docbook.org/ns/docbook bibliography"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bibliography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bibliography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bibliography instance.
func (me *XsdGoPkgHasElems_Bibliography) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Bibliography
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Bibliographies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Simplesect struct {
	Simplesects []*TxsdColophon `xml:"http://docbook.org/ns/docbook simplesect"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Simplesect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Simplesect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Simplesect instance.
func (me *XsdGoPkgHasElems_Simplesect) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Simplesect
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Simplesects {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliography struct {
	Bibliography *TxsdBibliography `xml:"http://docbook.org/ns/docbook bibliography"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliography instance.
func (me *XsdGoPkgHasElem_Bibliography) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliography
	if fn != nil {
		fn(me, true)
	}
	me.Bibliography.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGlossdiv struct {
	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Fieldsynopsis
}

//	If the WalkHandlers.TxsdGlossdiv function is not nil (ie. was set by outside code), calls it with this TxsdGlossdiv instance as the single argument. Then calls the Walk() method on 60/65 embed(s) and 0/0 field(s) belonging to this TxsdGlossdiv instance.
func (me *TxsdGlossdiv) Walk() {
	fn := WalkHandlers.TxsdGlossdiv
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Glossentry.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossdiv struct {
	Glossdivs []*TxsdGlossdiv `xml:"http://docbook.org/ns/docbook glossdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossdiv instance.
func (me *XsdGoPkgHasElems_Glossdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossdiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossdivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdGlossary struct {
	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElem_Bibliography

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Glossdiv

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Glossentry

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Programlistingco
}

//	If the WalkHandlers.TxsdGlossary function is not nil (ie. was set by outside code), calls it with this TxsdGlossary instance as the single argument. Then calls the Walk() method on 62/67 embed(s) and 0/0 field(s) belonging to this TxsdGlossary instance.
func (me *TxsdGlossary) Walk() {
	fn := WalkHandlers.TxsdGlossary
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Glossdiv.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Glossentry.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElem_Bibliography.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glossary struct {
	Glossaries []*TxsdGlossary `xml:"http://docbook.org/ns/docbook glossary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glossary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glossary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glossary instance.
func (me *XsdGoPkgHasElems_Glossary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glossary
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glossaries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Toc struct {
	Tocs []*TxsdToc `xml:"http://docbook.org/ns/docbook toc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Toc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Toc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Toc instance.
func (me *XsdGoPkgHasElems_Toc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Toc
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tocs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSection struct {
	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Equation
}

//	If the WalkHandlers.TxsdSection function is not nil (ie. was set by outside code), calls it with this TxsdSection instance as the single argument. Then calls the Walk() method on 65/71 embed(s) and 0/0 field(s) belonging to this TxsdSection instance.
func (me *TxsdSection) Walk() {
	fn := WalkHandlers.TxsdSection
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Section struct {
	Sections []*TxsdSection `xml:"http://docbook.org/ns/docbook section"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Section instance.
func (me *XsdGoPkgHasElems_Section) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Section
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sections {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSect5 struct {
	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Constraintdef
}

//	If the WalkHandlers.TxsdSect5 function is not nil (ie. was set by outside code), calls it with this TxsdSect5 instance as the single argument. Then calls the Walk() method on 64/69 embed(s) and 0/0 field(s) belonging to this TxsdSect5 instance.
func (me *TxsdSect5) Walk() {
	fn := WalkHandlers.TxsdSect5
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sect5 struct {
	Sect5s []*TxsdSect5 `xml:"http://docbook.org/ns/docbook sect5"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect5 instance.
func (me *XsdGoPkgHasElems_Sect5) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sect5
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sect5s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSect4 struct {
	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Sect5

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simplelist
}

//	If the WalkHandlers.TxsdSect4 function is not nil (ie. was set by outside code), calls it with this TxsdSect4 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect4 instance.
func (me *TxsdSect4) Walk() {
	fn := WalkHandlers.TxsdSect4
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Sect5.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sect4 struct {
	Sect4s []*TxsdSect4 `xml:"http://docbook.org/ns/docbook sect4"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect4 instance.
func (me *XsdGoPkgHasElems_Sect4) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sect4
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sect4s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSect3 struct {
	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Sect4

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Cmdsynopsis
}

//	If the WalkHandlers.TxsdSect3 function is not nil (ie. was set by outside code), calls it with this TxsdSect3 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect3 instance.
func (me *TxsdSect3) Walk() {
	fn := WalkHandlers.TxsdSect3
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Sect4.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sect3 struct {
	Sect3s []*TxsdSect3 `xml:"http://docbook.org/ns/docbook sect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect3 instance.
func (me *XsdGoPkgHasElems_Sect3) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sect3
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sect3s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSect2 struct {
	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Sect3

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Remark
}

//	If the WalkHandlers.TxsdSect2 function is not nil (ie. was set by outside code), calls it with this TxsdSect2 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect2 instance.
func (me *TxsdSect2) Walk() {
	fn := WalkHandlers.TxsdSect2
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Sect3.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sect2 struct {
	Sect2s []*TxsdSect2 `xml:"http://docbook.org/ns/docbook sect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect2 instance.
func (me *XsdGoPkgHasElems_Sect2) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sect2
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sect2s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSect1 struct {
	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Sect2

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Subtitle
}

//	If the WalkHandlers.TxsdSect1 function is not nil (ie. was set by outside code), calls it with this TxsdSect1 instance as the single argument. Then calls the Walk() method on 65/70 embed(s) and 0/0 field(s) belonging to this TxsdSect1 instance.
func (me *TxsdSect1) Walk() {
	fn := WalkHandlers.TxsdSect1
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Sect2.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Sect1 struct {
	Sect1s []*TxsdSect1 `xml:"http://docbook.org/ns/docbook sect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sect1 instance.
func (me *XsdGoPkgHasElems_Sect1) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Sect1
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sect1s {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPartintro struct {
	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Epigraph
}

//	If the WalkHandlers.TxsdPartintro function is not nil (ie. was set by outside code), calls it with this TxsdPartintro instance as the single argument. Then calls the Walk() method on 63/68 embed(s) and 0/0 field(s) belonging to this TxsdPartintro instance.
func (me *TxsdPartintro) Walk() {
	fn := WalkHandlers.TxsdPartintro
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Section.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Sect1.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Partintro struct {
	Partintro *TxsdPartintro `xml:"http://docbook.org/ns/docbook partintro"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Partintro function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Partintro instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Partintro instance.
func (me *XsdGoPkgHasElem_Partintro) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Partintro
	if fn != nil {
		fn(me, true)
	}
	me.Partintro.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdReference struct {
	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElem_Partintro

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdReference function is not nil (ie. was set by outside code), calls it with this TxsdReference instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdReference instance.
func (me *TxsdReference) Walk() {
	fn := WalkHandlers.TxsdReference
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElem_Partintro.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Reference struct {
	References []*TxsdReference `xml:"http://docbook.org/ns/docbook reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Reference
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.References {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Acknowledgements struct {
	Acknowledgementses []*TxsdColophon `xml:"http://docbook.org/ns/docbook acknowledgements"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Acknowledgements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Acknowledgements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Acknowledgements instance.
func (me *XsdGoPkgHasElems_Acknowledgements) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Acknowledgements
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Acknowledgementses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdArticleClass xsdt.Token

//	Returns true if the value of this enumerated TxsdArticleClass is "specification".
func (me TxsdArticleClass) IsSpecification() bool { return me == "specification" }

//	This convenience method just performs a simple type conversion to TxsdArticleClass's alias type xsdt.Token.
func (me TxsdArticleClass) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdArticleClass is "whitepaper".
func (me TxsdArticleClass) IsWhitepaper() bool { return me == "whitepaper" }

//	Since TxsdArticleClass is just a simple String type, this merely returns the current string value.
func (me TxsdArticleClass) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TxsdArticleClass is "journalarticle".
func (me TxsdArticleClass) IsJournalarticle() bool { return me == "journalarticle" }

//	Returns true if the value of this enumerated TxsdArticleClass is "techreport".
func (me TxsdArticleClass) IsTechreport() bool { return me == "techreport" }

//	Returns true if the value of this enumerated TxsdArticleClass is "productsheet".
func (me TxsdArticleClass) IsProductsheet() bool { return me == "productsheet" }

//	Since TxsdArticleClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdArticleClass) SetFromString(s string) { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TxsdArticleClass is "faq".
func (me TxsdArticleClass) IsFaq() bool { return me == "faq" }

type XsdGoPkgHasAttr_Class_TxsdArticleClass_ struct {
	Class TxsdArticleClass `xml:"http://docbook.org/ns/docbook class,attr"`
}

type TxsdAppendix struct {
	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Section

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Caution
}

//	If the WalkHandlers.TxsdAppendix function is not nil (ie. was set by outside code), calls it with this TxsdAppendix instance as the single argument. Then calls the Walk() method on 67/72 embed(s) and 0/0 field(s) belonging to this TxsdAppendix instance.
func (me *TxsdAppendix) Walk() {
	fn := WalkHandlers.TxsdAppendix
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Sect1.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Section.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Appendix struct {
	Appendixs []*TxsdAppendix `xml:"http://docbook.org/ns/docbook appendix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Appendix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Appendix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Appendix instance.
func (me *XsdGoPkgHasElems_Appendix) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Appendix
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Appendixs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdArticle struct {
	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Important

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Section

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Address

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Sect1

	XsdGoPkgHasElems_Simplesect

	XsdGoPkgHasElems_Acknowledgements

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasAttr_Class_TxsdArticleClass_

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasElems_Informaltable

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Mediaobject
}

//	If the WalkHandlers.TxsdArticle function is not nil (ie. was set by outside code), calls it with this TxsdArticle instance as the single argument. Then calls the Walk() method on 70/76 embed(s) and 0/0 field(s) belonging to this TxsdArticle instance.
func (me *TxsdArticle) Walk() {
	fn := WalkHandlers.TxsdArticle
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Sect1.Walk()
	me.XsdGoPkgHasElems_Simplesect.Walk()
	me.XsdGoPkgHasElems_Acknowledgements.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Appendix.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Colophon.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Section.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Article struct {
	Articles []*TxsdArticle `xml:"http://docbook.org/ns/docbook article"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Article instance.
func (me *XsdGoPkgHasElems_Article) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Article
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Articles {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Chapter struct {
	Chapters []*TxsdAppendix `xml:"http://docbook.org/ns/docbook chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Chapter instance.
func (me *XsdGoPkgHasElems_Chapter) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Chapter
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Chapters {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Dedication struct {
	Dedications []*TxsdColophon `xml:"http://docbook.org/ns/docbook dedication"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Dedication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Dedication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Dedication instance.
func (me *XsdGoPkgHasElems_Dedication) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Dedication
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Dedications {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Preface struct {
	Prefaces []*TxsdAppendix `xml:"http://docbook.org/ns/docbook preface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Preface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Preface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Preface instance.
func (me *XsdGoPkgHasElems_Preface) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Preface
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Prefaces {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdPart struct {
	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_Article

	XsdGoPkgHasElem_Partintro

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Acknowledgements

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Refentry

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Index

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Dedication

	XsdGoPkgHasElems_Preface

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Titleabbrev
}

//	If the WalkHandlers.TxsdPart function is not nil (ie. was set by outside code), calls it with this TxsdPart instance as the single argument. Then calls the Walk() method on 18/23 embed(s) and 0/0 field(s) belonging to this TxsdPart instance.
func (me *TxsdPart) Walk() {
	fn := WalkHandlers.TxsdPart
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Article.Walk()
	me.XsdGoPkgHasElem_Partintro.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Acknowledgements.Walk()
	me.XsdGoPkgHasElems_Chapter.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Appendix.Walk()
	me.XsdGoPkgHasElems_Refentry.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Colophon.Walk()
	me.XsdGoPkgHasElems_Dedication.Walk()
	me.XsdGoPkgHasElems_Preface.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Reference.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Part struct {
	Parts []*TxsdPart `xml:"http://docbook.org/ns/docbook part"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Part function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Part instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Part instance.
func (me *XsdGoPkgHasElems_Part) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Part
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Parts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdBook struct {
	XsdGoPkgHasElems_Preface

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Appendix

	XsdGoPkgHasElems_Glossary

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Toc

	XsdGoPkgHasElems_Article

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_Bibliography

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Colophon

	XsdGoPkgHasElems_Index

	XsdGoPkgHasElems_Part

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasElems_Dedication

	XsdGoPkgHasElems_Acknowledgements
}

//	If the WalkHandlers.TxsdBook function is not nil (ie. was set by outside code), calls it with this TxsdBook instance as the single argument. Then calls the Walk() method on 17/22 embed(s) and 0/0 field(s) belonging to this TxsdBook instance.
func (me *TxsdBook) Walk() {
	fn := WalkHandlers.TxsdBook
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Glossary.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Toc.Walk()
	me.XsdGoPkgHasElems_Article.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Reference.Walk()
	me.XsdGoPkgHasElems_Bibliography.Walk()
	me.XsdGoPkgHasElems_Colophon.Walk()
	me.XsdGoPkgHasElems_Index.Walk()
	me.XsdGoPkgHasElems_Part.Walk()
	me.XsdGoPkgHasElems_Chapter.Walk()
	me.XsdGoPkgHasElems_Dedication.Walk()
	me.XsdGoPkgHasElems_Acknowledgements.Walk()
	me.XsdGoPkgHasElems_Preface.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Appendix.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Book struct {
	Books []*TxsdBook `xml:"http://docbook.org/ns/docbook book"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Book instance.
func (me *XsdGoPkgHasElems_Book) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Book
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Books {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSetindex struct {
	XsdGoPkgHasElems_Important

	XsdGoPkgHasElems_Classsynopsis

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElems_Example

	XsdGoPkgHasElems_Remark

	XsdGoPkgHasElems_Informalexample

	XsdGoPkgHasAtts_DbCommonAttributes

	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElems_Indexterm

	XsdGoPkgHasElems_Screenshot

	XsdGoPkgHasElems_Screenco

	XsdGoPkgHasElems_Fieldsynopsis

	XsdGoPkgHasElems_Synopsis

	XsdGoPkgHasElems_Segmentedlist

	XsdGoPkgHasElems_Indexdiv

	XsdGoPkgHasElems_Sidebar

	XsdGoPkgHasElems_Bridgehead

	XsdGoPkgHasElems_Para

	XsdGoPkgHasElems_Destructorsynopsis

	XsdGoPkgHasElems_Funcsynopsis

	XsdGoPkgHasElems_Qandaset

	XsdGoPkgHasElems_Epigraph

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasElems_Methodsynopsis

	XsdGoPkgHasElems_Constructorsynopsis

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Mediaobject

	XsdGoPkgHasElems_Itemizedlist

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Literallayout

	XsdGoPkgHasElems_Revhistory

	XsdGoPkgHasElems_Simplelist

	XsdGoPkgHasElems_Programlistingco

	XsdGoPkgHasElems_Informalequation

	XsdGoPkgHasElems_Screen

	XsdGoPkgHasElems_Anchor

	XsdGoPkgHasElems_Procedure

	XsdGoPkgHasElems_Indexentry

	XsdGoPkgHasElems_Glosslist

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Msgset

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Simpara

	XsdGoPkgHasElems_Calloutlist

	XsdGoPkgHasElems_Productionset

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Info

	XsdGoPkgHasElems_Blockquote

	XsdGoPkgHasElems_Title

	XsdGoPkgHasElems_Bibliolist

	XsdGoPkgHasElems_Formalpara

	XsdGoPkgHasElems_Caution

	XsdGoPkgHasElems_Warning

	XsdGoPkgHasElems_Cmdsynopsis

	XsdGoPkgHasElems_Programlisting

	XsdGoPkgHasElems_Orderedlist

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasElems_Equation

	XsdGoPkgHasElems_Constraintdef

	XsdGoPkgHasElems_Informalfigure

	XsdGoPkgHasElems_Variablelist

	XsdGoPkgHasElems_Tip

	XsdGoPkgHasElems_Informaltable
}

//	If the WalkHandlers.TxsdSetindex function is not nil (ie. was set by outside code), calls it with this TxsdSetindex instance as the single argument. Then calls the Walk() method on 61/67 embed(s) and 0/0 field(s) belonging to this TxsdSetindex instance.
func (me *TxsdSetindex) Walk() {
	fn := WalkHandlers.TxsdSetindex
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Fieldsynopsis.Walk()
	me.XsdGoPkgHasElems_Synopsis.Walk()
	me.XsdGoPkgHasElems_Segmentedlist.Walk()
	me.XsdGoPkgHasElems_Indexdiv.Walk()
	me.XsdGoPkgHasElems_Sidebar.Walk()
	me.XsdGoPkgHasElems_Bridgehead.Walk()
	me.XsdGoPkgHasElems_Para.Walk()
	me.XsdGoPkgHasElems_Destructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Funcsynopsis.Walk()
	me.XsdGoPkgHasElems_Qandaset.Walk()
	me.XsdGoPkgHasElems_Epigraph.Walk()
	me.XsdGoPkgHasElems_Table.Walk()
	me.XsdGoPkgHasElems_Methodsynopsis.Walk()
	me.XsdGoPkgHasElems_Constructorsynopsis.Walk()
	me.XsdGoPkgHasElems_Mediaobject.Walk()
	me.XsdGoPkgHasElems_Itemizedlist.Walk()
	me.XsdGoPkgHasElems_Note.Walk()
	me.XsdGoPkgHasElems_Literallayout.Walk()
	me.XsdGoPkgHasElems_Revhistory.Walk()
	me.XsdGoPkgHasElems_Simplelist.Walk()
	me.XsdGoPkgHasElems_Programlistingco.Walk()
	me.XsdGoPkgHasElems_Informalequation.Walk()
	me.XsdGoPkgHasElems_Screen.Walk()
	me.XsdGoPkgHasElems_Anchor.Walk()
	me.XsdGoPkgHasElems_Procedure.Walk()
	me.XsdGoPkgHasElems_Indexentry.Walk()
	me.XsdGoPkgHasElems_Glosslist.Walk()
	me.XsdGoPkgHasElems_Msgset.Walk()
	me.XsdGoPkgHasElems_Simpara.Walk()
	me.XsdGoPkgHasElems_Calloutlist.Walk()
	me.XsdGoPkgHasElems_Productionset.Walk()
	me.XsdGoPkgHasElems_Task.Walk()
	me.XsdGoPkgHasElems_Address.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Blockquote.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	me.XsdGoPkgHasElems_Bibliolist.Walk()
	me.XsdGoPkgHasElems_Formalpara.Walk()
	me.XsdGoPkgHasElems_Caution.Walk()
	me.XsdGoPkgHasElems_Warning.Walk()
	me.XsdGoPkgHasElems_Cmdsynopsis.Walk()
	me.XsdGoPkgHasElems_Programlisting.Walk()
	me.XsdGoPkgHasElems_Orderedlist.Walk()
	me.XsdGoPkgHasElems_Figure.Walk()
	me.XsdGoPkgHasElems_Annotation.Walk()
	me.XsdGoPkgHasElems_Equation.Walk()
	me.XsdGoPkgHasElems_Constraintdef.Walk()
	me.XsdGoPkgHasElems_Informalfigure.Walk()
	me.XsdGoPkgHasElems_Variablelist.Walk()
	me.XsdGoPkgHasElems_Tip.Walk()
	me.XsdGoPkgHasElems_Informaltable.Walk()
	me.XsdGoPkgHasElems_Important.Walk()
	me.XsdGoPkgHasElems_Classsynopsis.Walk()
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElems_Example.Walk()
	me.XsdGoPkgHasElems_Remark.Walk()
	me.XsdGoPkgHasElems_Informalexample.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElems_Indexterm.Walk()
	me.XsdGoPkgHasElems_Screenshot.Walk()
	me.XsdGoPkgHasElems_Screenco.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Setindex struct {
	Setindex *TxsdSetindex `xml:"http://docbook.org/ns/docbook setindex"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Setindex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Setindex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Setindex instance.
func (me *XsdGoPkgHasElem_Setindex) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Setindex
	if fn != nil {
		fn(me, true)
	}
	me.Setindex.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type TxsdSet struct {
	XsdGoPkgHasElems_Subtitle

	XsdGoPkgHasElem_Setindex

	XsdGoPkgHasElems_Title

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasElems_Titleabbrev

	XsdGoPkgHasElem_Toc

	XsdGoPkgHasAttr_Role_XsdtString_

	XsdGoPkgHasElems_Set

	XsdGoPkgHasAtts_DbCommonLinkingAttributes

	XsdGoPkgHasElems_Book

	XsdGoPkgHasAttr_Status_XsdtString_

	XsdGoPkgHasElem_Info

	XsdGoPkgHasAtts_DbCommonAttributes
}

//	If the WalkHandlers.TxsdSet function is not nil (ie. was set by outside code), calls it with this TxsdSet instance as the single argument. Then calls the Walk() method on 7/13 embed(s) and 0/0 field(s) belonging to this TxsdSet instance.
func (me *TxsdSet) Walk() {
	fn := WalkHandlers.TxsdSet
	if fn != nil {
		fn(me, true)
	}
	me.XsdGoPkgHasElems_Titleabbrev.Walk()
	me.XsdGoPkgHasElem_Toc.Walk()
	me.XsdGoPkgHasElems_Book.Walk()
	me.XsdGoPkgHasElem_Info.Walk()
	me.XsdGoPkgHasElems_Subtitle.Walk()
	me.XsdGoPkgHasElem_Setindex.Walk()
	me.XsdGoPkgHasElems_Title.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Set struct {
	Sets []*TxsdSet `xml:"http://docbook.org/ns/docbook set"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Set instance.
func (me *XsdGoPkgHasElems_Set) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Set
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sets {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Set struct {
	Set *TxsdSet `xml:"http://docbook.org/ns/docbook set"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Set function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Set instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Set instance.
func (me *XsdGoPkgHasElem_Set) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Set
	if fn != nil {
		fn(me, true)
	}
	me.Set.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Book struct {
	Book *TxsdBook `xml:"http://docbook.org/ns/docbook book"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Book instance.
func (me *XsdGoPkgHasElem_Book) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Book
	if fn != nil {
		fn(me, true)
	}
	me.Book.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Dedication struct {
	Dedication *TxsdColophon `xml:"http://docbook.org/ns/docbook dedication"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Dedication function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Dedication instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Dedication instance.
func (me *XsdGoPkgHasElem_Dedication) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Dedication
	if fn != nil {
		fn(me, true)
	}
	me.Dedication.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Acknowledgements struct {
	Acknowledgements *TxsdColophon `xml:"http://docbook.org/ns/docbook acknowledgements"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Acknowledgements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Acknowledgements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Acknowledgements instance.
func (me *XsdGoPkgHasElem_Acknowledgements) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Acknowledgements
	if fn != nil {
		fn(me, true)
	}
	me.Acknowledgements.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Colophon struct {
	Colophon *TxsdColophon `xml:"http://docbook.org/ns/docbook colophon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colophon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colophon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colophon instance.
func (me *XsdGoPkgHasElem_Colophon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Colophon
	if fn != nil {
		fn(me, true)
	}
	me.Colophon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Appendix struct {
	Appendix *TxsdAppendix `xml:"http://docbook.org/ns/docbook appendix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Appendix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Appendix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Appendix instance.
func (me *XsdGoPkgHasElem_Appendix) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Appendix
	if fn != nil {
		fn(me, true)
	}
	me.Appendix.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Chapter struct {
	Chapter *TxsdAppendix `xml:"http://docbook.org/ns/docbook chapter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Chapter instance.
func (me *XsdGoPkgHasElem_Chapter) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Chapter
	if fn != nil {
		fn(me, true)
	}
	me.Chapter.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Part struct {
	Part *TxsdPart `xml:"http://docbook.org/ns/docbook part"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Part function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Part instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Part instance.
func (me *XsdGoPkgHasElem_Part) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Part
	if fn != nil {
		fn(me, true)
	}
	me.Part.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Preface struct {
	Preface *TxsdAppendix `xml:"http://docbook.org/ns/docbook preface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Preface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Preface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Preface instance.
func (me *XsdGoPkgHasElem_Preface) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Preface
	if fn != nil {
		fn(me, true)
	}
	me.Preface.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Partintro struct {
	Partintros []*TxsdPartintro `xml:"http://docbook.org/ns/docbook partintro"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Partintro function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Partintro instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Partintro instance.
func (me *XsdGoPkgHasElems_Partintro) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Partintro
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Partintros {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Section struct {
	Section *TxsdSection `xml:"http://docbook.org/ns/docbook section"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Section instance.
func (me *XsdGoPkgHasElem_Section) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Section
	if fn != nil {
		fn(me, true)
	}
	me.Section.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Simplesect struct {
	Simplesect *TxsdColophon `xml:"http://docbook.org/ns/docbook simplesect"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplesect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplesect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplesect instance.
func (me *XsdGoPkgHasElem_Simplesect) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Simplesect
	if fn != nil {
		fn(me, true)
	}
	me.Simplesect.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Article struct {
	Article *TxsdArticle `xml:"http://docbook.org/ns/docbook article"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Article instance.
func (me *XsdGoPkgHasElem_Article) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Article
	if fn != nil {
		fn(me, true)
	}
	me.Article.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Annotation struct {
	Annotation *TxsdAnnotation `xml:"http://docbook.org/ns/docbook annotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Annotation instance.
func (me *XsdGoPkgHasElem_Annotation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Annotation
	if fn != nil {
		fn(me, true)
	}
	me.Annotation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Extendedlink struct {
	Extendedlink *TxsdExtendedlink `xml:"http://docbook.org/ns/docbook extendedlink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extendedlink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extendedlink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extendedlink instance.
func (me *XsdGoPkgHasElem_Extendedlink) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Extendedlink
	if fn != nil {
		fn(me, true)
	}
	me.Extendedlink.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Locator struct {
	Locator *TxsdLocator `xml:"http://docbook.org/ns/docbook locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Locator instance.
func (me *XsdGoPkgHasElem_Locator) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Locator
	if fn != nil {
		fn(me, true)
	}
	me.Locator.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Arc struct {
	Arc *TxsdArc `xml:"http://docbook.org/ns/docbook arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arc instance.
func (me *XsdGoPkgHasElem_Arc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Arc
	if fn != nil {
		fn(me, true)
	}
	me.Arc.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sect1 struct {
	Sect1 *TxsdSect1 `xml:"http://docbook.org/ns/docbook sect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect1 instance.
func (me *XsdGoPkgHasElem_Sect1) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sect1
	if fn != nil {
		fn(me, true)
	}
	me.Sect1.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sect2 struct {
	Sect2 *TxsdSect2 `xml:"http://docbook.org/ns/docbook sect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect2 instance.
func (me *XsdGoPkgHasElem_Sect2) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sect2
	if fn != nil {
		fn(me, true)
	}
	me.Sect2.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sect3 struct {
	Sect3 *TxsdSect3 `xml:"http://docbook.org/ns/docbook sect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect3 instance.
func (me *XsdGoPkgHasElem_Sect3) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sect3
	if fn != nil {
		fn(me, true)
	}
	me.Sect3.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sect4 struct {
	Sect4 *TxsdSect4 `xml:"http://docbook.org/ns/docbook sect4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect4 instance.
func (me *XsdGoPkgHasElem_Sect4) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sect4
	if fn != nil {
		fn(me, true)
	}
	me.Sect4.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sect5 struct {
	Sect5 *TxsdSect5 `xml:"http://docbook.org/ns/docbook sect5"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sect5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sect5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sect5 instance.
func (me *XsdGoPkgHasElem_Sect5) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sect5
	if fn != nil {
		fn(me, true)
	}
	me.Sect5.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TxsdReference `xml:"http://docbook.org/ns/docbook reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Reference
	if fn != nil {
		fn(me, true)
	}
	me.Reference.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refentry struct {
	Refentry *TxsdRefentry `xml:"http://docbook.org/ns/docbook refentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refentry instance.
func (me *XsdGoPkgHasElem_Refentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refentry
	if fn != nil {
		fn(me, true)
	}
	me.Refentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refmeta struct {
	Refmetas []*TxsdRefmeta `xml:"http://docbook.org/ns/docbook refmeta"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refmeta function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refmeta instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refmeta instance.
func (me *XsdGoPkgHasElems_Refmeta) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refmeta
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refmetas {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refmiscinfo struct {
	Refmiscinfo *TxsdRefmiscinfo `xml:"http://docbook.org/ns/docbook refmiscinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refmiscinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refmiscinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refmiscinfo instance.
func (me *XsdGoPkgHasElem_Refmiscinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refmiscinfo
	if fn != nil {
		fn(me, true)
	}
	me.Refmiscinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refnamediv struct {
	Refnamediv *TxsdRefnamediv `xml:"http://docbook.org/ns/docbook refnamediv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refnamediv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refnamediv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refnamediv instance.
func (me *XsdGoPkgHasElem_Refnamediv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refnamediv
	if fn != nil {
		fn(me, true)
	}
	me.Refnamediv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refdescriptor struct {
	Refdescriptors []*TxsdTitle `xml:"http://docbook.org/ns/docbook refdescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refdescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refdescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refdescriptor instance.
func (me *XsdGoPkgHasElems_Refdescriptor) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refdescriptor
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refdescriptors {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refname struct {
	Refname *TxsdTitle `xml:"http://docbook.org/ns/docbook refname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refname instance.
func (me *XsdGoPkgHasElem_Refname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refname
	if fn != nil {
		fn(me, true)
	}
	me.Refname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refpurpose struct {
	Refpurposes []*TxsdTitle `xml:"http://docbook.org/ns/docbook refpurpose"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refpurpose function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refpurpose instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refpurpose instance.
func (me *XsdGoPkgHasElems_Refpurpose) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refpurpose
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refpurposes {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refclass struct {
	Refclass *TxsdRefclass `xml:"http://docbook.org/ns/docbook refclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refclass instance.
func (me *XsdGoPkgHasElem_Refclass) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refclass
	if fn != nil {
		fn(me, true)
	}
	me.Refclass.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Refsynopsisdiv struct {
	Refsynopsisdivs []*TxsdRefsynopsisdiv `xml:"http://docbook.org/ns/docbook refsynopsisdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Refsynopsisdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Refsynopsisdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Refsynopsisdiv instance.
func (me *XsdGoPkgHasElems_Refsynopsisdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Refsynopsisdiv
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Refsynopsisdivs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refsection struct {
	Refsection *TxsdRefsection `xml:"http://docbook.org/ns/docbook refsection"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsection instance.
func (me *XsdGoPkgHasElem_Refsection) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refsection
	if fn != nil {
		fn(me, true)
	}
	me.Refsection.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refsect1 struct {
	Refsect1 *TxsdRefsect1 `xml:"http://docbook.org/ns/docbook refsect1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect1 instance.
func (me *XsdGoPkgHasElem_Refsect1) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refsect1
	if fn != nil {
		fn(me, true)
	}
	me.Refsect1.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refsect2 struct {
	Refsect2 *TxsdRefsect2 `xml:"http://docbook.org/ns/docbook refsect2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect2 instance.
func (me *XsdGoPkgHasElem_Refsect2) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refsect2
	if fn != nil {
		fn(me, true)
	}
	me.Refsect2.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Refsect3 struct {
	Refsect3 *TxsdColophon `xml:"http://docbook.org/ns/docbook refsect3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Refsect3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Refsect3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Refsect3 instance.
func (me *XsdGoPkgHasElem_Refsect3) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Refsect3
	if fn != nil {
		fn(me, true)
	}
	me.Refsect3.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glosslist struct {
	Glosslist *TxsdGlosslist `xml:"http://docbook.org/ns/docbook glosslist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glosslist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glosslist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glosslist instance.
func (me *XsdGoPkgHasElem_Glosslist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glosslist
	if fn != nil {
		fn(me, true)
	}
	me.Glosslist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossentry struct {
	Glossentry *TxsdGlossentry `xml:"http://docbook.org/ns/docbook glossentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossentry instance.
func (me *XsdGoPkgHasElem_Glossentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossentry
	if fn != nil {
		fn(me, true)
	}
	me.Glossentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossdef struct {
	Glossdef *TxsdGlossdef `xml:"http://docbook.org/ns/docbook glossdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossdef instance.
func (me *XsdGoPkgHasElem_Glossdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossdef
	if fn != nil {
		fn(me, true)
	}
	me.Glossdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Glosssee struct {
	Glosssees []*TxsdGlosssee `xml:"http://docbook.org/ns/docbook glosssee"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Glosssee function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Glosssee instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Glosssee instance.
func (me *XsdGoPkgHasElems_Glosssee) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Glosssee
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Glosssees {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossseealso struct {
	Glossseealso *TxsdGlosssee `xml:"http://docbook.org/ns/docbook glossseealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossseealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossseealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossseealso instance.
func (me *XsdGoPkgHasElem_Glossseealso) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossseealso
	if fn != nil {
		fn(me, true)
	}
	me.Glossseealso.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Firstterm struct {
	Firstterm *TxsdFirstterm `xml:"http://docbook.org/ns/docbook firstterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Firstterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Firstterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Firstterm instance.
func (me *XsdGoPkgHasElem_Firstterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Firstterm
	if fn != nil {
		fn(me, true)
	}
	me.Firstterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossary struct {
	Glossary *TxsdGlossary `xml:"http://docbook.org/ns/docbook glossary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossary instance.
func (me *XsdGoPkgHasElem_Glossary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossary
	if fn != nil {
		fn(me, true)
	}
	me.Glossary.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Glossdiv struct {
	Glossdiv *TxsdGlossdiv `xml:"http://docbook.org/ns/docbook glossdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Glossdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Glossdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Glossdiv instance.
func (me *XsdGoPkgHasElem_Glossdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Glossdiv
	if fn != nil {
		fn(me, true)
	}
	me.Glossdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Termdef struct {
	Termdef *TxsdTermdef `xml:"http://docbook.org/ns/docbook termdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Termdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Termdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Termdef instance.
func (me *XsdGoPkgHasElem_Termdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Termdef
	if fn != nil {
		fn(me, true)
	}
	me.Termdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Biblioentry struct {
	Biblioentry *TxsdBiblioentry `xml:"http://docbook.org/ns/docbook biblioentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioentry instance.
func (me *XsdGoPkgHasElem_Biblioentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Biblioentry
	if fn != nil {
		fn(me, true)
	}
	me.Biblioentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliomixed struct {
	Bibliomixed *TxsdBibliomixed `xml:"http://docbook.org/ns/docbook bibliomixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomixed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomixed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomixed instance.
func (me *XsdGoPkgHasElem_Bibliomixed) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliomixed
	if fn != nil {
		fn(me, true)
	}
	me.Bibliomixed.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Biblioset struct {
	Biblioset *TxsdBiblioset `xml:"http://docbook.org/ns/docbook biblioset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioset instance.
func (me *XsdGoPkgHasElem_Biblioset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Biblioset
	if fn != nil {
		fn(me, true)
	}
	me.Biblioset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliomset struct {
	Bibliomset *TxsdBibliomset `xml:"http://docbook.org/ns/docbook bibliomset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomset instance.
func (me *XsdGoPkgHasElem_Bibliomset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliomset
	if fn != nil {
		fn(me, true)
	}
	me.Bibliomset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliomisc struct {
	Bibliomisc *TxsdSurname `xml:"http://docbook.org/ns/docbook bibliomisc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliomisc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliomisc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliomisc instance.
func (me *XsdGoPkgHasElem_Bibliomisc) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliomisc
	if fn != nil {
		fn(me, true)
	}
	me.Bibliomisc.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliodiv struct {
	Bibliodiv *TxsdBibliodiv `xml:"http://docbook.org/ns/docbook bibliodiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliodiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliodiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliodiv instance.
func (me *XsdGoPkgHasElem_Bibliodiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliodiv
	if fn != nil {
		fn(me, true)
	}
	me.Bibliodiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Bibliolist struct {
	Bibliolist *TxsdBibliolist `xml:"http://docbook.org/ns/docbook bibliolist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bibliolist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bibliolist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bibliolist instance.
func (me *XsdGoPkgHasElem_Bibliolist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Bibliolist
	if fn != nil {
		fn(me, true)
	}
	me.Bibliolist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Biblioref struct {
	Biblioref *TxsdBiblioref `xml:"http://docbook.org/ns/docbook biblioref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Biblioref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Biblioref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Biblioref instance.
func (me *XsdGoPkgHasElem_Biblioref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Biblioref
	if fn != nil {
		fn(me, true)
	}
	me.Biblioref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Itermset struct {
	Itermset *TxsdItermset `xml:"http://docbook.org/ns/docbook itermset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Itermset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Itermset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Itermset instance.
func (me *XsdGoPkgHasElem_Itermset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Itermset
	if fn != nil {
		fn(me, true)
	}
	me.Itermset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Indexterm struct {
	Indexterm *TxsdIndexterm `xml:"http://docbook.org/ns/docbook indexterm"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexterm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexterm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexterm instance.
func (me *XsdGoPkgHasElem_Indexterm) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Indexterm
	if fn != nil {
		fn(me, true)
	}
	me.Indexterm.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Primary struct {
	Primaries []*TxsdSecondary `xml:"http://docbook.org/ns/docbook primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Primary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Primary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Primary instance.
func (me *XsdGoPkgHasElems_Primary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Primary
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Primaries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Secondary struct {
	Secondaries []*TxsdSecondary `xml:"http://docbook.org/ns/docbook secondary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Secondary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Secondary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Secondary instance.
func (me *XsdGoPkgHasElems_Secondary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Secondary
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Secondaries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tertiary struct {
	Tertiaries []*TxsdSecondary `xml:"http://docbook.org/ns/docbook tertiary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tertiary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tertiary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tertiary instance.
func (me *XsdGoPkgHasElems_Tertiary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tertiary
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tertiaries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_See struct {
	Sees []*TxsdSee `xml:"http://docbook.org/ns/docbook see"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_See function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_See instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_See instance.
func (me *XsdGoPkgHasElems_See) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_See
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Sees {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seealso struct {
	Seealso *TxsdSee `xml:"http://docbook.org/ns/docbook seealso"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seealso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seealso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seealso instance.
func (me *XsdGoPkgHasElem_Seealso) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seealso
	if fn != nil {
		fn(me, true)
	}
	me.Seealso.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Index struct {
	Index *TxsdIndex `xml:"http://docbook.org/ns/docbook index"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Index function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Index instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Index instance.
func (me *XsdGoPkgHasElem_Index) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Index
	if fn != nil {
		fn(me, true)
	}
	me.Index.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Setindex struct {
	Setindexs []*TxsdSetindex `xml:"http://docbook.org/ns/docbook setindex"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Setindex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Setindex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Setindex instance.
func (me *XsdGoPkgHasElems_Setindex) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Setindex
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Setindexs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Indexdiv struct {
	Indexdiv *TxsdIndexdiv `xml:"http://docbook.org/ns/docbook indexdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexdiv instance.
func (me *XsdGoPkgHasElem_Indexdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Indexdiv
	if fn != nil {
		fn(me, true)
	}
	me.Indexdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Indexentry struct {
	Indexentry *TxsdIndexentry `xml:"http://docbook.org/ns/docbook indexentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indexentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indexentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indexentry instance.
func (me *XsdGoPkgHasElem_Indexentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Indexentry
	if fn != nil {
		fn(me, true)
	}
	me.Indexentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Primaryie struct {
	Primaryies []*TxsdTertiaryie `xml:"http://docbook.org/ns/docbook primaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Primaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Primaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Primaryie instance.
func (me *XsdGoPkgHasElems_Primaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Primaryie
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Primaryies {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Secondaryie struct {
	Secondaryie *TxsdTertiaryie `xml:"http://docbook.org/ns/docbook secondaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Secondaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Secondaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Secondaryie instance.
func (me *XsdGoPkgHasElem_Secondaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Secondaryie
	if fn != nil {
		fn(me, true)
	}
	me.Secondaryie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tertiaryie struct {
	Tertiaryie *TxsdTertiaryie `xml:"http://docbook.org/ns/docbook tertiaryie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tertiaryie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tertiaryie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tertiaryie instance.
func (me *XsdGoPkgHasElem_Tertiaryie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tertiaryie
	if fn != nil {
		fn(me, true)
	}
	me.Tertiaryie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seeie struct {
	Seeie *TxsdTitle `xml:"http://docbook.org/ns/docbook seeie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seeie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seeie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seeie instance.
func (me *XsdGoPkgHasElem_Seeie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seeie
	if fn != nil {
		fn(me, true)
	}
	me.Seeie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Seealsoie struct {
	Seealsoie *TxsdTertiaryie `xml:"http://docbook.org/ns/docbook seealsoie"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Seealsoie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Seealsoie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Seealsoie instance.
func (me *XsdGoPkgHasElem_Seealsoie) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Seealsoie
	if fn != nil {
		fn(me, true)
	}
	me.Seealsoie.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tocdiv struct {
	Tocdiv *TxsdTocdiv `xml:"http://docbook.org/ns/docbook tocdiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tocdiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tocdiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tocdiv instance.
func (me *XsdGoPkgHasElem_Tocdiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tocdiv
	if fn != nil {
		fn(me, true)
	}
	me.Tocdiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tocentry struct {
	Tocentry *TxsdTocentry `xml:"http://docbook.org/ns/docbook tocentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tocentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tocentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tocentry instance.
func (me *XsdGoPkgHasElem_Tocentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tocentry
	if fn != nil {
		fn(me, true)
	}
	me.Tocentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Task struct {
	Task *TxsdTask `xml:"http://docbook.org/ns/docbook task"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Task instance.
func (me *XsdGoPkgHasElem_Task) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Task
	if fn != nil {
		fn(me, true)
	}
	me.Task.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tasksummary struct {
	Tasksummaries []*TxsdTasksummary `xml:"http://docbook.org/ns/docbook tasksummary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tasksummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tasksummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tasksummary instance.
func (me *XsdGoPkgHasElems_Tasksummary) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tasksummary
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tasksummaries {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Taskprerequisites struct {
	Taskprerequisiteses []*TxsdTasksummary `xml:"http://docbook.org/ns/docbook taskprerequisites"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Taskprerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Taskprerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Taskprerequisites instance.
func (me *XsdGoPkgHasElems_Taskprerequisites) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Taskprerequisites
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Taskprerequisiteses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Taskrelated struct {
	Taskrelateds []*TxsdTasksummary `xml:"http://docbook.org/ns/docbook taskrelated"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Taskrelated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Taskrelated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Taskrelated instance.
func (me *XsdGoPkgHasElems_Taskrelated) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Taskrelated
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Taskrelateds {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Calloutlist struct {
	Calloutlist *TxsdCalloutlist `xml:"http://docbook.org/ns/docbook calloutlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Calloutlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Calloutlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Calloutlist instance.
func (me *XsdGoPkgHasElem_Calloutlist) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Calloutlist
	if fn != nil {
		fn(me, true)
	}
	me.Calloutlist.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Callout struct {
	Callout *TxsdCallout `xml:"http://docbook.org/ns/docbook callout"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Callout function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Callout instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Callout instance.
func (me *XsdGoPkgHasElem_Callout) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Callout
	if fn != nil {
		fn(me, true)
	}
	me.Callout.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Programlistingco struct {
	Programlistingco *TxsdProgramlistingco `xml:"http://docbook.org/ns/docbook programlistingco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Programlistingco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Programlistingco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Programlistingco instance.
func (me *XsdGoPkgHasElem_Programlistingco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Programlistingco
	if fn != nil {
		fn(me, true)
	}
	me.Programlistingco.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Areaspec struct {
	Areaspecs []*TxsdAreaspec `xml:"http://docbook.org/ns/docbook areaspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Areaspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Areaspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Areaspec instance.
func (me *XsdGoPkgHasElems_Areaspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Areaspec
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Areaspecs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Area struct {
	Area *TxsdArea `xml:"http://docbook.org/ns/docbook area"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Area instance.
func (me *XsdGoPkgHasElem_Area) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Area
	if fn != nil {
		fn(me, true)
	}
	me.Area.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Areaset struct {
	Areaset *TxsdAreaset `xml:"http://docbook.org/ns/docbook areaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Areaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Areaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Areaset instance.
func (me *XsdGoPkgHasElem_Areaset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Areaset
	if fn != nil {
		fn(me, true)
	}
	me.Areaset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Screenco struct {
	Screenco *TxsdScreenco `xml:"http://docbook.org/ns/docbook screenco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Screenco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Screenco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Screenco instance.
func (me *XsdGoPkgHasElem_Screenco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Screenco
	if fn != nil {
		fn(me, true)
	}
	me.Screenco.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Imageobjectco struct {
	Imageobjectco *TxsdImageobjectco `xml:"http://docbook.org/ns/docbook imageobjectco"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Imageobjectco function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Imageobjectco instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Imageobjectco instance.
func (me *XsdGoPkgHasElem_Imageobjectco) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Imageobjectco
	if fn != nil {
		fn(me, true)
	}
	me.Imageobjectco.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Co struct {
	Co *TxsdCo `xml:"http://docbook.org/ns/docbook co"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Co function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Co instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Co instance.
func (me *XsdGoPkgHasElem_Co) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Co
	if fn != nil {
		fn(me, true)
	}
	me.Co.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Coref struct {
	Coref *TxsdFootnoteref `xml:"http://docbook.org/ns/docbook coref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Coref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Coref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Coref instance.
func (me *XsdGoPkgHasElem_Coref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Coref
	if fn != nil {
		fn(me, true)
	}
	me.Coref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Productionset struct {
	Productionset *TxsdProductionset `xml:"http://docbook.org/ns/docbook productionset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productionset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productionset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productionset instance.
func (me *XsdGoPkgHasElem_Productionset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Productionset
	if fn != nil {
		fn(me, true)
	}
	me.Productionset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Production struct {
	Production *TxsdProduction `xml:"http://docbook.org/ns/docbook production"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Production function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Production instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Production instance.
func (me *XsdGoPkgHasElem_Production) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Production
	if fn != nil {
		fn(me, true)
	}
	me.Production.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Lhs struct {
	Lhses []*TxsdDate `xml:"http://docbook.org/ns/docbook lhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lhs instance.
func (me *XsdGoPkgHasElems_Lhs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Lhs
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Lhses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Rhs struct {
	Rhses []*TxsdRhs `xml:"http://docbook.org/ns/docbook rhs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Rhs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rhs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rhs instance.
func (me *XsdGoPkgHasElems_Rhs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Rhs
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Rhses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Nonterminal struct {
	Nonterminal *TxsdNonterminal `xml:"http://docbook.org/ns/docbook nonterminal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nonterminal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nonterminal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nonterminal instance.
func (me *XsdGoPkgHasElem_Nonterminal) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Nonterminal
	if fn != nil {
		fn(me, true)
	}
	me.Nonterminal.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Constraint struct {
	Constraint *TxsdVoid `xml:"http://docbook.org/ns/docbook constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constraint instance.
func (me *XsdGoPkgHasElem_Constraint) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Constraint
	if fn != nil {
		fn(me, true)
	}
	me.Constraint.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Productionrecap struct {
	Productionrecap *TxsdVoid `xml:"http://docbook.org/ns/docbook productionrecap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productionrecap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productionrecap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productionrecap instance.
func (me *XsdGoPkgHasElem_Productionrecap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Productionrecap
	if fn != nil {
		fn(me, true)
	}
	me.Productionrecap.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Constraintdef struct {
	Constraintdef *TxsdConstraintdef `xml:"http://docbook.org/ns/docbook constraintdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constraintdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constraintdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constraintdef instance.
func (me *XsdGoPkgHasElem_Constraintdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Constraintdef
	if fn != nil {
		fn(me, true)
	}
	me.Constraintdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tgroup struct {
	Tgroup *TxsdTgroup `xml:"http://docbook.org/ns/docbook tgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tgroup instance.
func (me *XsdGoPkgHasElem_Tgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tgroup
	if fn != nil {
		fn(me, true)
	}
	me.Tgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Colspec struct {
	Colspec *TxsdColspec `xml:"http://docbook.org/ns/docbook colspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colspec instance.
func (me *XsdGoPkgHasElem_Colspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Colspec
	if fn != nil {
		fn(me, true)
	}
	me.Colspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Spanspec struct {
	Spanspec *TxsdSpanspec `xml:"http://docbook.org/ns/docbook spanspec"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Spanspec instance.
func (me *XsdGoPkgHasElem_Spanspec) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Spanspec
	if fn != nil {
		fn(me, true)
	}
	me.Spanspec.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Thead struct {
	Theads []*TxsdThead `xml:"http://docbook.org/ns/docbook thead"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Thead instance.
func (me *XsdGoPkgHasElems_Thead) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Thead
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Theads {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Tfoot struct {
	Tfoots []*TxsdTfoot `xml:"http://docbook.org/ns/docbook tfoot"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tfoot instance.
func (me *XsdGoPkgHasElems_Tfoot) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Tfoot
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Tfoots {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Row struct {
	Row *TxsdRow `xml:"http://docbook.org/ns/docbook row"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Row instance.
func (me *XsdGoPkgHasElem_Row) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Row
	if fn != nil {
		fn(me, true)
	}
	me.Row.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Entry struct {
	Entry *TxsdEntry `xml:"http://docbook.org/ns/docbook entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Entry
	if fn != nil {
		fn(me, true)
	}
	me.Entry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Entrytbl struct {
	Entrytbl *TxsdEntrytbl `xml:"http://docbook.org/ns/docbook entrytbl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entrytbl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entrytbl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entrytbl instance.
func (me *XsdGoPkgHasElem_Entrytbl) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Entrytbl
	if fn != nil {
		fn(me, true)
	}
	me.Entrytbl.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Table struct {
	Table *TxsdTable `xml:"http://docbook.org/ns/docbook table"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Table instance.
func (me *XsdGoPkgHasElem_Table) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Table
	if fn != nil {
		fn(me, true)
	}
	me.Table.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Informaltable struct {
	Informaltable *TxsdInformaltable `xml:"http://docbook.org/ns/docbook informaltable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informaltable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informaltable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informaltable instance.
func (me *XsdGoPkgHasElem_Informaltable) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Informaltable
	if fn != nil {
		fn(me, true)
	}
	me.Informaltable.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Col struct {
	Col *TxsdCol `xml:"http://docbook.org/ns/docbook col"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Col function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Col instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Col instance.
func (me *XsdGoPkgHasElem_Col) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Col
	if fn != nil {
		fn(me, true)
	}
	me.Col.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Colgroup struct {
	Colgroup *TxsdColgroup `xml:"http://docbook.org/ns/docbook colgroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colgroup instance.
func (me *XsdGoPkgHasElem_Colgroup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Colgroup
	if fn != nil {
		fn(me, true)
	}
	me.Colgroup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tr struct {
	Tr *TxsdTr `xml:"http://docbook.org/ns/docbook tr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tr instance.
func (me *XsdGoPkgHasElem_Tr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tr
	if fn != nil {
		fn(me, true)
	}
	me.Tr.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Th struct {
	Th *TxsdTh `xml:"http://docbook.org/ns/docbook th"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Th function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Th instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Th instance.
func (me *XsdGoPkgHasElem_Th) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Th
	if fn != nil {
		fn(me, true)
	}
	me.Th.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Td struct {
	Td *TxsdTd `xml:"http://docbook.org/ns/docbook td"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Td function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Td instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Td instance.
func (me *XsdGoPkgHasElem_Td) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Td
	if fn != nil {
		fn(me, true)
	}
	me.Td.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgset struct {
	Msgset *TxsdMsgset `xml:"http://docbook.org/ns/docbook msgset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgset instance.
func (me *XsdGoPkgHasElem_Msgset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgset
	if fn != nil {
		fn(me, true)
	}
	me.Msgset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgentry struct {
	Msgentry *TxsdMsgentry `xml:"http://docbook.org/ns/docbook msgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgentry instance.
func (me *XsdGoPkgHasElem_Msgentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgentry
	if fn != nil {
		fn(me, true)
	}
	me.Msgentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Simplemsgentry struct {
	Simplemsgentry *TxsdSimplemsgentry `xml:"http://docbook.org/ns/docbook simplemsgentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Simplemsgentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Simplemsgentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Simplemsgentry instance.
func (me *XsdGoPkgHasElem_Simplemsgentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Simplemsgentry
	if fn != nil {
		fn(me, true)
	}
	me.Simplemsgentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msg struct {
	Msg *TxsdMsg `xml:"http://docbook.org/ns/docbook msg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msg instance.
func (me *XsdGoPkgHasElem_Msg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msg
	if fn != nil {
		fn(me, true)
	}
	me.Msg.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgmain struct {
	Msgmains []*TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgmain"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgmain function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgmain instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgmain instance.
func (me *XsdGoPkgHasElems_Msgmain) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgmain
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgmains {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgsub struct {
	Msgsub *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgsub"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgsub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgsub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgsub instance.
func (me *XsdGoPkgHasElem_Msgsub) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgsub
	if fn != nil {
		fn(me, true)
	}
	me.Msgsub.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgrel struct {
	Msgrel *TxsdMsgmain `xml:"http://docbook.org/ns/docbook msgrel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgrel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgrel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgrel instance.
func (me *XsdGoPkgHasElem_Msgrel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgrel
	if fn != nil {
		fn(me, true)
	}
	me.Msgrel.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msgtext struct {
	Msgtexts []*TxsdMsgtext `xml:"http://docbook.org/ns/docbook msgtext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msgtext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msgtext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msgtext instance.
func (me *XsdGoPkgHasElems_Msgtext) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msgtext
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msgtexts {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Msginfo struct {
	Msginfos []*TxsdMsginfo `xml:"http://docbook.org/ns/docbook msginfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msginfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msginfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msginfo instance.
func (me *XsdGoPkgHasElems_Msginfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Msginfo
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Msginfos {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msglevel struct {
	Msglevel *TxsdSurname `xml:"http://docbook.org/ns/docbook msglevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msglevel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msglevel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msglevel instance.
func (me *XsdGoPkgHasElem_Msglevel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msglevel
	if fn != nil {
		fn(me, true)
	}
	me.Msglevel.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgorig struct {
	Msgorig *TxsdSurname `xml:"http://docbook.org/ns/docbook msgorig"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgorig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgorig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgorig instance.
func (me *XsdGoPkgHasElem_Msgorig) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgorig
	if fn != nil {
		fn(me, true)
	}
	me.Msgorig.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgaud struct {
	Msgaud *TxsdSurname `xml:"http://docbook.org/ns/docbook msgaud"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgaud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgaud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgaud instance.
func (me *XsdGoPkgHasElem_Msgaud) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgaud
	if fn != nil {
		fn(me, true)
	}
	me.Msgaud.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Msgexplan struct {
	Msgexplan *TxsdWarning `xml:"http://docbook.org/ns/docbook msgexplan"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msgexplan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msgexplan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msgexplan instance.
func (me *XsdGoPkgHasElem_Msgexplan) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Msgexplan
	if fn != nil {
		fn(me, true)
	}
	me.Msgexplan.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Qandaset struct {
	Qandaset *TxsdQandaset `xml:"http://docbook.org/ns/docbook qandaset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandaset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandaset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandaset instance.
func (me *XsdGoPkgHasElem_Qandaset) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Qandaset
	if fn != nil {
		fn(me, true)
	}
	me.Qandaset.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Qandadiv struct {
	Qandadiv *TxsdQandadiv `xml:"http://docbook.org/ns/docbook qandadiv"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandadiv function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandadiv instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandadiv instance.
func (me *XsdGoPkgHasElem_Qandadiv) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Qandadiv
	if fn != nil {
		fn(me, true)
	}
	me.Qandadiv.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Qandaentry struct {
	Qandaentry *TxsdQandaentry `xml:"http://docbook.org/ns/docbook qandaentry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Qandaentry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Qandaentry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Qandaentry instance.
func (me *XsdGoPkgHasElem_Qandaentry) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Qandaentry
	if fn != nil {
		fn(me, true)
	}
	me.Qandaentry.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Question struct {
	Questions []*TxsdQuestion `xml:"http://docbook.org/ns/docbook question"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Question function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Question instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Question instance.
func (me *XsdGoPkgHasElems_Question) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Question
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Questions {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Answer struct {
	Answer *TxsdQuestion `xml:"http://docbook.org/ns/docbook answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Answer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Answer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Answer instance.
func (me *XsdGoPkgHasElem_Answer) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Answer
	if fn != nil {
		fn(me, true)
	}
	me.Answer.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Label struct {
	Labels []*TxsdSurname `xml:"http://docbook.org/ns/docbook label"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Label instance.
func (me *XsdGoPkgHasElems_Label) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Label
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Labels {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Equation struct {
	Equation *TxsdEquation `xml:"http://docbook.org/ns/docbook equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Equation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Equation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Equation instance.
func (me *XsdGoPkgHasElem_Equation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Equation
	if fn != nil {
		fn(me, true)
	}
	me.Equation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Informalequation struct {
	Informalequation *TxsdInformalequation `xml:"http://docbook.org/ns/docbook informalequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Informalequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Informalequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Informalequation instance.
func (me *XsdGoPkgHasElem_Informalequation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Informalequation
	if fn != nil {
		fn(me, true)
	}
	me.Informalequation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Inlineequation struct {
	Inlineequation *TxsdInlineequation `xml:"http://docbook.org/ns/docbook inlineequation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Inlineequation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Inlineequation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Inlineequation instance.
func (me *XsdGoPkgHasElem_Inlineequation) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Inlineequation
	if fn != nil {
		fn(me, true)
	}
	me.Inlineequation.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Mathphrase struct {
	Mathphrase *TxsdMathphrase `xml:"http://docbook.org/ns/docbook mathphrase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mathphrase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mathphrase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mathphrase instance.
func (me *XsdGoPkgHasElem_Mathphrase) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Mathphrase
	if fn != nil {
		fn(me, true)
	}
	me.Mathphrase.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Markup struct {
	Markup *TxsdSurname `xml:"http://docbook.org/ns/docbook markup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Markup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Markup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Markup instance.
func (me *XsdGoPkgHasElem_Markup) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Markup
	if fn != nil {
		fn(me, true)
	}
	me.Markup.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tag struct {
	Tag *TxsdTag `xml:"http://docbook.org/ns/docbook tag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tag instance.
func (me *XsdGoPkgHasElem_Tag) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tag
	if fn != nil {
		fn(me, true)
	}
	me.Tag.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Symbol struct {
	Symbol *TxsdSymbol `xml:"http://docbook.org/ns/docbook symbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Symbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Symbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Symbol instance.
func (me *XsdGoPkgHasElem_Symbol) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Symbol
	if fn != nil {
		fn(me, true)
	}
	me.Symbol.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Token struct {
	Token *TxsdSurname `xml:"http://docbook.org/ns/docbook token"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Token function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Token instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Token instance.
func (me *XsdGoPkgHasElem_Token) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Token
	if fn != nil {
		fn(me, true)
	}
	me.Token.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Literal struct {
	Literal *TxsdSurname `xml:"http://docbook.org/ns/docbook literal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Literal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Literal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Literal instance.
func (me *XsdGoPkgHasElem_Literal) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Literal
	if fn != nil {
		fn(me, true)
	}
	me.Literal.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Code struct {
	Code *TxsdCode `xml:"http://docbook.org/ns/docbook code"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Code function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Code instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Code instance.
func (me *XsdGoPkgHasElem_Code) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Code
	if fn != nil {
		fn(me, true)
	}
	me.Code.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Constant struct {
	Constant *TxsdConstant `xml:"http://docbook.org/ns/docbook constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constant instance.
func (me *XsdGoPkgHasElem_Constant) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Constant
	if fn != nil {
		fn(me, true)
	}
	me.Constant.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Productname struct {
	Productname *TxsdProductname `xml:"http://docbook.org/ns/docbook productname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productname instance.
func (me *XsdGoPkgHasElem_Productname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Productname
	if fn != nil {
		fn(me, true)
	}
	me.Productname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Productnumber struct {
	Productnumber *TxsdSurname `xml:"http://docbook.org/ns/docbook productnumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Productnumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Productnumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Productnumber instance.
func (me *XsdGoPkgHasElem_Productnumber) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Productnumber
	if fn != nil {
		fn(me, true)
	}
	me.Productnumber.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Database struct {
	Database *TxsdDatabase `xml:"http://docbook.org/ns/docbook database"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Database function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Database instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Database instance.
func (me *XsdGoPkgHasElem_Database) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Database
	if fn != nil {
		fn(me, true)
	}
	me.Database.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Application struct {
	Application *TxsdApplication `xml:"http://docbook.org/ns/docbook application"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Application instance.
func (me *XsdGoPkgHasElem_Application) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Application
	if fn != nil {
		fn(me, true)
	}
	me.Application.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Hardware struct {
	Hardware *TxsdSurname `xml:"http://docbook.org/ns/docbook hardware"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Hardware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Hardware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Hardware instance.
func (me *XsdGoPkgHasElem_Hardware) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Hardware
	if fn != nil {
		fn(me, true)
	}
	me.Hardware.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guibutton struct {
	Guibutton *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guibutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guibutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guibutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guibutton instance.
func (me *XsdGoPkgHasElem_Guibutton) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guibutton
	if fn != nil {
		fn(me, true)
	}
	me.Guibutton.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guiicon struct {
	Guiicon *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guiicon"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guiicon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guiicon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guiicon instance.
func (me *XsdGoPkgHasElem_Guiicon) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guiicon
	if fn != nil {
		fn(me, true)
	}
	me.Guiicon.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guilabel struct {
	Guilabel *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guilabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guilabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guilabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guilabel instance.
func (me *XsdGoPkgHasElem_Guilabel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guilabel
	if fn != nil {
		fn(me, true)
	}
	me.Guilabel.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guimenu struct {
	Guimenu *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guimenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guimenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guimenu instance.
func (me *XsdGoPkgHasElem_Guimenu) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guimenu
	if fn != nil {
		fn(me, true)
	}
	me.Guimenu.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guimenuitem struct {
	Guimenuitem *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guimenuitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guimenuitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guimenuitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guimenuitem instance.
func (me *XsdGoPkgHasElem_Guimenuitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guimenuitem
	if fn != nil {
		fn(me, true)
	}
	me.Guimenuitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Guisubmenu struct {
	Guisubmenu *TxsdGuimenuitem `xml:"http://docbook.org/ns/docbook guisubmenu"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Guisubmenu function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Guisubmenu instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Guisubmenu instance.
func (me *XsdGoPkgHasElem_Guisubmenu) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Guisubmenu
	if fn != nil {
		fn(me, true)
	}
	me.Guisubmenu.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Menuchoice struct {
	Menuchoice *TxsdMenuchoice `xml:"http://docbook.org/ns/docbook menuchoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Menuchoice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Menuchoice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Menuchoice instance.
func (me *XsdGoPkgHasElem_Menuchoice) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Menuchoice
	if fn != nil {
		fn(me, true)
	}
	me.Menuchoice.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Mousebutton struct {
	Mousebutton *TxsdSurname `xml:"http://docbook.org/ns/docbook mousebutton"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mousebutton function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mousebutton instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mousebutton instance.
func (me *XsdGoPkgHasElem_Mousebutton) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Mousebutton
	if fn != nil {
		fn(me, true)
	}
	me.Mousebutton.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keycap struct {
	Keycap *TxsdKeycap `xml:"http://docbook.org/ns/docbook keycap"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycap instance.
func (me *XsdGoPkgHasElem_Keycap) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keycap
	if fn != nil {
		fn(me, true)
	}
	me.Keycap.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keycode struct {
	Keycode *TxsdKeycode `xml:"http://docbook.org/ns/docbook keycode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycode instance.
func (me *XsdGoPkgHasElem_Keycode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keycode
	if fn != nil {
		fn(me, true)
	}
	me.Keycode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keycombo struct {
	Keycombo *TxsdKeycombo `xml:"http://docbook.org/ns/docbook keycombo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keycombo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keycombo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keycombo instance.
func (me *XsdGoPkgHasElem_Keycombo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keycombo
	if fn != nil {
		fn(me, true)
	}
	me.Keycombo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Keysym struct {
	Keysym *TxsdSurname `xml:"http://docbook.org/ns/docbook keysym"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keysym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keysym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keysym instance.
func (me *XsdGoPkgHasElem_Keysym) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Keysym
	if fn != nil {
		fn(me, true)
	}
	me.Keysym.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Accel struct {
	Accel *TxsdSurname `xml:"http://docbook.org/ns/docbook accel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Accel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Accel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Accel instance.
func (me *XsdGoPkgHasElem_Accel) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Accel
	if fn != nil {
		fn(me, true)
	}
	me.Accel.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Prompt struct {
	Prompt *TxsdPrompt `xml:"http://docbook.org/ns/docbook prompt"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Prompt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Prompt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Prompt instance.
func (me *XsdGoPkgHasElem_Prompt) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Prompt
	if fn != nil {
		fn(me, true)
	}
	me.Prompt.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Envar struct {
	Envar *TxsdSurname `xml:"http://docbook.org/ns/docbook envar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Envar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Envar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Envar instance.
func (me *XsdGoPkgHasElem_Envar) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Envar
	if fn != nil {
		fn(me, true)
	}
	me.Envar.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Filename struct {
	Filename *TxsdFilename `xml:"http://docbook.org/ns/docbook filename"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Filename function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Filename instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Filename instance.
func (me *XsdGoPkgHasElem_Filename) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Filename
	if fn != nil {
		fn(me, true)
	}
	me.Filename.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Command struct {
	Command *TxsdSurname `xml:"http://docbook.org/ns/docbook command"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Command function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Command instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Command instance.
func (me *XsdGoPkgHasElem_Command) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Command
	if fn != nil {
		fn(me, true)
	}
	me.Command.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Computeroutput struct {
	Computeroutput *TxsdComputeroutput `xml:"http://docbook.org/ns/docbook computeroutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Computeroutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Computeroutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Computeroutput instance.
func (me *XsdGoPkgHasElem_Computeroutput) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Computeroutput
	if fn != nil {
		fn(me, true)
	}
	me.Computeroutput.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Userinput struct {
	Userinput *TxsdUserinput `xml:"http://docbook.org/ns/docbook userinput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Userinput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Userinput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Userinput instance.
func (me *XsdGoPkgHasElem_Userinput) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Userinput
	if fn != nil {
		fn(me, true)
	}
	me.Userinput.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Cmdsynopsis struct {
	Cmdsynopsis *TxsdCmdsynopsis `xml:"http://docbook.org/ns/docbook cmdsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cmdsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cmdsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cmdsynopsis instance.
func (me *XsdGoPkgHasElem_Cmdsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Cmdsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Cmdsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Arg struct {
	Arg *TxsdArg `xml:"http://docbook.org/ns/docbook arg"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arg instance.
func (me *XsdGoPkgHasElem_Arg) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Arg
	if fn != nil {
		fn(me, true)
	}
	me.Arg.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Group struct {
	Group *TxsdGroup `xml:"http://docbook.org/ns/docbook group"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Group instance.
func (me *XsdGoPkgHasElem_Group) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Group
	if fn != nil {
		fn(me, true)
	}
	me.Group.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Sbr struct {
	Sbr *TxsdAnchor `xml:"http://docbook.org/ns/docbook sbr"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sbr function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sbr instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sbr instance.
func (me *XsdGoPkgHasElem_Sbr) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Sbr
	if fn != nil {
		fn(me, true)
	}
	me.Sbr.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Synopfragment struct {
	Synopfragment *TxsdSynopfragment `xml:"http://docbook.org/ns/docbook synopfragment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopfragment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopfragment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopfragment instance.
func (me *XsdGoPkgHasElem_Synopfragment) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Synopfragment
	if fn != nil {
		fn(me, true)
	}
	me.Synopfragment.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Synopfragmentref struct {
	Synopfragmentref *TxsdDate `xml:"http://docbook.org/ns/docbook synopfragmentref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopfragmentref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopfragmentref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopfragmentref instance.
func (me *XsdGoPkgHasElem_Synopfragmentref) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Synopfragmentref
	if fn != nil {
		fn(me, true)
	}
	me.Synopfragmentref.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Synopsis struct {
	Synopsis *TxsdSynopsis `xml:"http://docbook.org/ns/docbook synopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Synopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Synopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Synopsis instance.
func (me *XsdGoPkgHasElem_Synopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Synopsis
	if fn != nil {
		fn(me, true)
	}
	me.Synopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Funcsynopsis struct {
	Funcsynopsis *TxsdFuncsynopsis `xml:"http://docbook.org/ns/docbook funcsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcsynopsis instance.
func (me *XsdGoPkgHasElem_Funcsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Funcsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Funcsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Funcsynopsisinfo struct {
	Funcsynopsisinfo *TxsdFuncsynopsisinfo `xml:"http://docbook.org/ns/docbook funcsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcsynopsisinfo instance.
func (me *XsdGoPkgHasElem_Funcsynopsisinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Funcsynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	me.Funcsynopsisinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Funcprototype struct {
	Funcprototype *TxsdFuncprototype `xml:"http://docbook.org/ns/docbook funcprototype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Funcprototype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Funcprototype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Funcprototype instance.
func (me *XsdGoPkgHasElem_Funcprototype) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Funcprototype
	if fn != nil {
		fn(me, true)
	}
	me.Funcprototype.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Funcdef struct {
	Funcdefs []*TxsdFuncdef `xml:"http://docbook.org/ns/docbook funcdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Funcdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Funcdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Funcdef instance.
func (me *XsdGoPkgHasElems_Funcdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Funcdef
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Funcdefs {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Function struct {
	Function *TxsdSurname `xml:"http://docbook.org/ns/docbook function"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Function function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Function instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Function instance.
func (me *XsdGoPkgHasElem_Function) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Function
	if fn != nil {
		fn(me, true)
	}
	me.Function.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Void struct {
	Voids []*TxsdVoid `xml:"http://docbook.org/ns/docbook void"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Void function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Void instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Void instance.
func (me *XsdGoPkgHasElems_Void) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Void
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Voids {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElems_Varargs struct {
	Varargses []*TxsdVoid `xml:"http://docbook.org/ns/docbook varargs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Varargs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Varargs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Varargs instance.
func (me *XsdGoPkgHasElems_Varargs) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElems_Varargs
	if fn != nil {
		fn(me, true)
	}
	for _, x := range me.Varargses {
		x.Walk()
	}
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Paramdef struct {
	Paramdef *TxsdParamdef `xml:"http://docbook.org/ns/docbook paramdef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Paramdef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Paramdef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Paramdef instance.
func (me *XsdGoPkgHasElem_Paramdef) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Paramdef
	if fn != nil {
		fn(me, true)
	}
	me.Paramdef.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Classsynopsis struct {
	Classsynopsis *TxsdClasssynopsis `xml:"http://docbook.org/ns/docbook classsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Classsynopsis instance.
func (me *XsdGoPkgHasElem_Classsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Classsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Classsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Classsynopsisinfo struct {
	Classsynopsisinfo *TxsdClasssynopsisinfo `xml:"http://docbook.org/ns/docbook classsynopsisinfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Classsynopsisinfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Classsynopsisinfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Classsynopsisinfo instance.
func (me *XsdGoPkgHasElem_Classsynopsisinfo) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Classsynopsisinfo
	if fn != nil {
		fn(me, true)
	}
	me.Classsynopsisinfo.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Ooclass struct {
	Ooclass *TxsdOoclass `xml:"http://docbook.org/ns/docbook ooclass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ooclass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ooclass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ooclass instance.
func (me *XsdGoPkgHasElem_Ooclass) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Ooclass
	if fn != nil {
		fn(me, true)
	}
	me.Ooclass.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Oointerface struct {
	Oointerface *TxsdOointerface `xml:"http://docbook.org/ns/docbook oointerface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Oointerface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Oointerface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Oointerface instance.
func (me *XsdGoPkgHasElem_Oointerface) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Oointerface
	if fn != nil {
		fn(me, true)
	}
	me.Oointerface.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Ooexception struct {
	Ooexception *TxsdOoexception `xml:"http://docbook.org/ns/docbook ooexception"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ooexception function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ooexception instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ooexception instance.
func (me *XsdGoPkgHasElem_Ooexception) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Ooexception
	if fn != nil {
		fn(me, true)
	}
	me.Ooexception.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Modifier struct {
	Modifier *TxsdModifier `xml:"http://docbook.org/ns/docbook modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Modifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Modifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Modifier instance.
func (me *XsdGoPkgHasElem_Modifier) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Modifier
	if fn != nil {
		fn(me, true)
	}
	me.Modifier.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Fieldsynopsis struct {
	Fieldsynopsis *TxsdFieldsynopsis `xml:"http://docbook.org/ns/docbook fieldsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fieldsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fieldsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fieldsynopsis instance.
func (me *XsdGoPkgHasElem_Fieldsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Fieldsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Fieldsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Constructorsynopsis struct {
	Constructorsynopsis *TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook constructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Constructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Constructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Constructorsynopsis instance.
func (me *XsdGoPkgHasElem_Constructorsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Constructorsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Constructorsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Destructorsynopsis struct {
	Destructorsynopsis *TxsdDestructorsynopsis `xml:"http://docbook.org/ns/docbook destructorsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Destructorsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Destructorsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Destructorsynopsis instance.
func (me *XsdGoPkgHasElem_Destructorsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Destructorsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Destructorsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Methodsynopsis struct {
	Methodsynopsis *TxsdMethodsynopsis `xml:"http://docbook.org/ns/docbook methodsynopsis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodsynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodsynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodsynopsis instance.
func (me *XsdGoPkgHasElem_Methodsynopsis) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Methodsynopsis
	if fn != nil {
		fn(me, true)
	}
	me.Methodsynopsis.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Methodparam struct {
	Methodparam *TxsdMethodparam `xml:"http://docbook.org/ns/docbook methodparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Methodparam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Methodparam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Methodparam instance.
func (me *XsdGoPkgHasElem_Methodparam) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Methodparam
	if fn != nil {
		fn(me, true)
	}
	me.Methodparam.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Returnvalue struct {
	Returnvalue *TxsdSurname `xml:"http://docbook.org/ns/docbook returnvalue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Returnvalue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Returnvalue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Returnvalue instance.
func (me *XsdGoPkgHasElem_Returnvalue) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Returnvalue
	if fn != nil {
		fn(me, true)
	}
	me.Returnvalue.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Caution struct {
	Caution *TxsdCaution `xml:"http://docbook.org/ns/docbook caution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Caution function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Caution instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Caution instance.
func (me *XsdGoPkgHasElem_Caution) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Caution
	if fn != nil {
		fn(me, true)
	}
	me.Caution.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Important struct {
	Important *TxsdImportant `xml:"http://docbook.org/ns/docbook important"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Important function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Important instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Important instance.
func (me *XsdGoPkgHasElem_Important) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Important
	if fn != nil {
		fn(me, true)
	}
	me.Important.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Note struct {
	Note *TxsdNote `xml:"http://docbook.org/ns/docbook note"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Note instance.
func (me *XsdGoPkgHasElem_Note) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Note
	if fn != nil {
		fn(me, true)
	}
	me.Note.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Tip struct {
	Tip *TxsdTip `xml:"http://docbook.org/ns/docbook tip"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tip instance.
func (me *XsdGoPkgHasElem_Tip) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Tip
	if fn != nil {
		fn(me, true)
	}
	me.Tip.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Warning struct {
	Warning *TxsdWarning `xml:"http://docbook.org/ns/docbook warning"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Warning function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Warning instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Warning instance.
func (me *XsdGoPkgHasElem_Warning) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Warning
	if fn != nil {
		fn(me, true)
	}
	me.Warning.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Errorcode struct {
	Errorcode *TxsdSurname `xml:"http://docbook.org/ns/docbook errorcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errorcode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errorcode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errorcode instance.
func (me *XsdGoPkgHasElem_Errorcode) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Errorcode
	if fn != nil {
		fn(me, true)
	}
	me.Errorcode.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Errorname struct {
	Errorname *TxsdSurname `xml:"http://docbook.org/ns/docbook errorname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errorname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errorname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errorname instance.
func (me *XsdGoPkgHasElem_Errorname) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Errorname
	if fn != nil {
		fn(me, true)
	}
	me.Errorname.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Errortext struct {
	Errortext *TxsdSurname `xml:"http://docbook.org/ns/docbook errortext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errortext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errortext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errortext instance.
func (me *XsdGoPkgHasElem_Errortext) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Errortext
	if fn != nil {
		fn(me, true)
	}
	me.Errortext.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Errortype struct {
	Errortype *TxsdSurname `xml:"http://docbook.org/ns/docbook errortype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errortype function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errortype instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errortype instance.
func (me *XsdGoPkgHasElem_Errortype) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Errortype
	if fn != nil {
		fn(me, true)
	}
	me.Errortype.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Systemitem struct {
	Systemitem *TxsdSystemitem `xml:"http://docbook.org/ns/docbook systemitem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Systemitem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Systemitem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Systemitem instance.
func (me *XsdGoPkgHasElem_Systemitem) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Systemitem
	if fn != nil {
		fn(me, true)
	}
	me.Systemitem.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Option struct {
	Option *TxsdSurname `xml:"http://docbook.org/ns/docbook option"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Option instance.
func (me *XsdGoPkgHasElem_Option) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Option
	if fn != nil {
		fn(me, true)
	}
	me.Option.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Optional struct {
	Optional *TxsdSurname `xml:"http://docbook.org/ns/docbook optional"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Optional function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Optional instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Optional instance.
func (me *XsdGoPkgHasElem_Optional) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Optional
	if fn != nil {
		fn(me, true)
	}
	me.Optional.Walk()
	if fn != nil {
		fn(me, false)
	}
}

type XsdGoPkgHasElem_Property struct {
	Property *TxsdSurname `xml:"http://docbook.org/ns/docbook property"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Property instance.
func (me *XsdGoPkgHasElem_Property) Walk() {
	fn := WalkHandlers.XsdGoPkgHasElem_Property
	if fn != nil {
		fn(me, true)
	}
	me.Property.Walk()
	if fn != nil {
		fn(me, false)
	}
}

//	Provides 971 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
var WalkHandlers = &XsdGoPkgWalkHandlers{}

//	Provides 971 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_Interfacename       func(o *XsdGoPkgHasElems_Interfacename, enter bool)
	XsdGoPkgHasElem_Subjectterm          func(o *XsdGoPkgHasElem_Subjectterm, enter bool)
	XsdGoPkgHasElem_Keywordset           func(o *XsdGoPkgHasElem_Keywordset, enter bool)
	XsdGoPkgHasElem_Colspec              func(o *XsdGoPkgHasElem_Colspec, enter bool)
	XsdGoPkgHasElem_Sect5                func(o *XsdGoPkgHasElem_Sect5, enter bool)
	XsdGoPkgHasElems_Optional            func(o *XsdGoPkgHasElems_Optional, enter bool)
	XsdGoPkgHasElems_Index               func(o *XsdGoPkgHasElems_Index, enter bool)
	TxsdSynopsis                         func(o *TxsdSynopsis, enter bool)
	TxsdCaption                          func(o *TxsdCaption, enter bool)
	XsdGoPkgHasElems_Programlisting      func(o *XsdGoPkgHasElems_Programlisting, enter bool)
	XsdGoPkgHasElem_Biblioentry          func(o *XsdGoPkgHasElem_Biblioentry, enter bool)
	TxsdImageobject                      func(o *TxsdImageobject, enter bool)
	TxsdSubtitle                         func(o *TxsdSubtitle, enter bool)
	XsdGoPkgHasElems_Funcprototype       func(o *XsdGoPkgHasElems_Funcprototype, enter bool)
	XsdGoPkgHasElem_Code                 func(o *XsdGoPkgHasElem_Code, enter bool)
	XsdGoPkgHasElem_Bibliography         func(o *XsdGoPkgHasElem_Bibliography, enter bool)
	XsdGoPkgHasElems_Remark              func(o *XsdGoPkgHasElems_Remark, enter bool)
	XsdGoPkgHasElem_Msg                  func(o *XsdGoPkgHasElem_Msg, enter bool)
	XsdGoPkgHasElems_Methodname          func(o *XsdGoPkgHasElems_Methodname, enter bool)
	XsdGoPkgHasElems_Attribution         func(o *XsdGoPkgHasElems_Attribution, enter bool)
	XsdGoPkgHasElems_Msgset              func(o *XsdGoPkgHasElems_Msgset, enter bool)
	TxsdSystemitem                       func(o *TxsdSystemitem, enter bool)
	XsdGoPkgHasElems_Funcparams          func(o *XsdGoPkgHasElems_Funcparams, enter bool)
	TxsdIndexterm                        func(o *TxsdIndexterm, enter bool)
	TxsdQandaset                         func(o *TxsdQandaset, enter bool)
	TxsdMethodsynopsis                   func(o *TxsdMethodsynopsis, enter bool)
	XsdGoPkgHasElems_Refsynopsisdiv      func(o *XsdGoPkgHasElems_Refsynopsisdiv, enter bool)
	XsdGoPkgHasElems_Bibliosource        func(o *XsdGoPkgHasElems_Bibliosource, enter bool)
	XsdGoPkgHasElem_Classname            func(o *XsdGoPkgHasElem_Classname, enter bool)
	XsdGoPkgHasElem_Abbrev               func(o *XsdGoPkgHasElem_Abbrev, enter bool)
	TxsdScreen                           func(o *TxsdScreen, enter bool)
	XsdGoPkgHasElems_Msginfo             func(o *XsdGoPkgHasElems_Msginfo, enter bool)
	XsdGoPkgHasElems_Orgname             func(o *XsdGoPkgHasElems_Orgname, enter bool)
	TxsdTocentry                         func(o *TxsdTocentry, enter bool)
	XsdGoPkgHasElem_Trademark            func(o *XsdGoPkgHasElem_Trademark, enter bool)
	XsdGoPkgHasElem_Revremark            func(o *XsdGoPkgHasElem_Revremark, enter bool)
	TxsdSubsteps                         func(o *TxsdSubsteps, enter bool)
	XsdGoPkgHasElem_Primaryie            func(o *XsdGoPkgHasElem_Primaryie, enter bool)
	XsdGoPkgHasElems_Fax                 func(o *XsdGoPkgHasElems_Fax, enter bool)
	XsdGoPkgHasElems_Areaspec            func(o *XsdGoPkgHasElems_Areaspec, enter bool)
	XsdGoPkgHasElems_Simplesect          func(o *XsdGoPkgHasElems_Simplesect, enter bool)
	XsdGoPkgHasElems_Entrytbl            func(o *XsdGoPkgHasElems_Entrytbl, enter bool)
	XsdGoPkgHasElems_Literallayout       func(o *XsdGoPkgHasElems_Literallayout, enter bool)
	XsdGoPkgHasElem_Variablelist         func(o *XsdGoPkgHasElem_Variablelist, enter bool)
	XsdGoPkgHasElems_Msgexplan           func(o *XsdGoPkgHasElems_Msgexplan, enter bool)
	XsdGoPkgHasElems_Msgentry            func(o *XsdGoPkgHasElems_Msgentry, enter bool)
	XsdGoPkgHasElem_Section              func(o *XsdGoPkgHasElem_Section, enter bool)
	XsdGoPkgHasElems_Code                func(o *XsdGoPkgHasElems_Code, enter bool)
	XsdGoPkgHasElems_See                 func(o *XsdGoPkgHasElems_See, enter bool)
	XsdGoPkgHasElems_Edition             func(o *XsdGoPkgHasElems_Edition, enter bool)
	XsdGoPkgHasElem_Tasksummary          func(o *XsdGoPkgHasElem_Tasksummary, enter bool)
	TxsdKeywordset                       func(o *TxsdKeywordset, enter bool)
	XsdGoPkgHasElems_Firstterm           func(o *XsdGoPkgHasElems_Firstterm, enter bool)
	XsdGoPkgHasElem_Informalequation     func(o *XsdGoPkgHasElem_Informalequation, enter bool)
	XsdGoPkgHasElem_Remark               func(o *XsdGoPkgHasElem_Remark, enter bool)
	TxsdSubscript                        func(o *TxsdSubscript, enter bool)
	XsdGoPkgHasElem_Msgentry             func(o *XsdGoPkgHasElem_Msgentry, enter bool)
	TxsdMediaobject                      func(o *TxsdMediaobject, enter bool)
	TxsdGroup                            func(o *TxsdGroup, enter bool)
	XsdGoPkgHasElems_Fieldsynopsis       func(o *XsdGoPkgHasElems_Fieldsynopsis, enter bool)
	XsdGoPkgHasElems_Imagedata           func(o *XsdGoPkgHasElems_Imagedata, enter bool)
	XsdGoPkgHasElem_Manvolnum            func(o *XsdGoPkgHasElem_Manvolnum, enter bool)
	XsdGoPkgHasElem_Glossdef             func(o *XsdGoPkgHasElem_Glossdef, enter bool)
	TxsdPhrase                           func(o *TxsdPhrase, enter bool)
	XsdGoPkgHasElem_Keycap               func(o *XsdGoPkgHasElem_Keycap, enter bool)
	XsdGoPkgHasElems_Type                func(o *XsdGoPkgHasElems_Type, enter bool)
	TxsdFootnoteref                      func(o *TxsdFootnoteref, enter bool)
	XsdGoPkgHasElems_Funcdef             func(o *XsdGoPkgHasElems_Funcdef, enter bool)
	XsdGoPkgHasElems_Bibliolist          func(o *XsdGoPkgHasElems_Bibliolist, enter bool)
	XsdGoPkgHasElems_Pubdate             func(o *XsdGoPkgHasElems_Pubdate, enter bool)
	XsdGoPkgHasElem_Refentry             func(o *XsdGoPkgHasElem_Refentry, enter bool)
	XsdGoPkgHasElem_Personblurb          func(o *XsdGoPkgHasElem_Personblurb, enter bool)
	XsdGoPkgHasElems_Formalpara          func(o *XsdGoPkgHasElems_Formalpara, enter bool)
	XsdGoPkgHasElems_Seealsoie           func(o *XsdGoPkgHasElems_Seealsoie, enter bool)
	XsdGoPkgHasElems_Shortcut            func(o *XsdGoPkgHasElems_Shortcut, enter bool)
	XsdGoPkgHasElem_Fieldsynopsis        func(o *XsdGoPkgHasElem_Fieldsynopsis, enter bool)
	XsdGoPkgHasElems_Refentrytitle       func(o *XsdGoPkgHasElems_Refentrytitle, enter bool)
	XsdGoPkgHasElem_Firstname            func(o *XsdGoPkgHasElem_Firstname, enter bool)
	XsdGoPkgHasElem_Tgroup               func(o *XsdGoPkgHasElem_Tgroup, enter bool)
	XsdGoPkgHasElem_Listitem             func(o *XsdGoPkgHasElem_Listitem, enter bool)
	XsdGoPkgHasElem_Calloutlist          func(o *XsdGoPkgHasElem_Calloutlist, enter bool)
	TxsdLiterallayout                    func(o *TxsdLiterallayout, enter bool)
	XsdGoPkgHasElem_Areaset              func(o *XsdGoPkgHasElem_Areaset, enter bool)
	XsdGoPkgHasElem_Indexterm            func(o *XsdGoPkgHasElem_Indexterm, enter bool)
	TxsdArea                             func(o *TxsdArea, enter bool)
	XsdGoPkgHasElems_City                func(o *XsdGoPkgHasElems_City, enter bool)
	XsdGoPkgHasElem_Guimenuitem          func(o *XsdGoPkgHasElem_Guimenuitem, enter bool)
	XsdGoPkgHasElems_Audioobject         func(o *XsdGoPkgHasElems_Audioobject, enter bool)
	XsdGoPkgHasElems_Glossseealso        func(o *XsdGoPkgHasElems_Glossseealso, enter bool)
	XsdGoPkgHasElems_Qandadiv            func(o *XsdGoPkgHasElems_Qandadiv, enter bool)
	TxsdTask                             func(o *TxsdTask, enter bool)
	XsdGoPkgHasElem_Videoobject          func(o *XsdGoPkgHasElem_Videoobject, enter bool)
	XsdGoPkgHasElem_Cover                func(o *XsdGoPkgHasElem_Cover, enter bool)
	XsdGoPkgHasElem_Caution              func(o *XsdGoPkgHasElem_Caution, enter bool)
	XsdGoPkgHasElem_Honorific            func(o *XsdGoPkgHasElem_Honorific, enter bool)
	XsdGoPkgHasElems_Confgroup           func(o *XsdGoPkgHasElems_Confgroup, enter bool)
	XsdGoPkgHasElem_Coref                func(o *XsdGoPkgHasElem_Coref, enter bool)
	TxsdQandadiv                         func(o *TxsdQandadiv, enter bool)
	TxsdTd                               func(o *TxsdTd, enter bool)
	XsdGoPkgHasElem_Tocentry             func(o *XsdGoPkgHasElem_Tocentry, enter bool)
	XsdGoPkgHasElems_Sect2               func(o *XsdGoPkgHasElems_Sect2, enter bool)
	XsdGoPkgHasElems_Bibliography        func(o *XsdGoPkgHasElems_Bibliography, enter bool)
	TxsdOrderedlist                      func(o *TxsdOrderedlist, enter bool)
	XsdGoPkgHasElems_Termdef             func(o *XsdGoPkgHasElems_Termdef, enter bool)
	XsdGoPkgHasElem_Equation             func(o *XsdGoPkgHasElem_Equation, enter bool)
	TxsdWarning                          func(o *TxsdWarning, enter bool)
	XsdGoPkgHasElems_Methodparam         func(o *XsdGoPkgHasElems_Methodparam, enter bool)
	TxsdTermdef                          func(o *TxsdTermdef, enter bool)
	XsdGoPkgHasElems_Legalnotice         func(o *XsdGoPkgHasElems_Legalnotice, enter bool)
	XsdGoPkgHasElem_Refentrytitle        func(o *XsdGoPkgHasElem_Refentrytitle, enter bool)
	XsdGoPkgHasElems_Refname             func(o *XsdGoPkgHasElems_Refname, enter bool)
	XsdGoPkgHasElems_Informalexample     func(o *XsdGoPkgHasElems_Informalexample, enter bool)
	XsdGoPkgHasElems_Literal             func(o *XsdGoPkgHasElems_Literal, enter bool)
	TxsdAudioobject                      func(o *TxsdAudioobject, enter bool)
	TxsdUri                              func(o *TxsdUri, enter bool)
	XsdGoPkgHasElem_Superscript          func(o *XsdGoPkgHasElem_Superscript, enter bool)
	XsdGoPkgHasElem_Blockquote           func(o *XsdGoPkgHasElem_Blockquote, enter bool)
	XsdGoPkgHasElem_Colgroup             func(o *XsdGoPkgHasElem_Colgroup, enter bool)
	TxsdOthercredit                      func(o *TxsdOthercredit, enter bool)
	TxsdVideodata                        func(o *TxsdVideodata, enter bool)
	TxsdVarlistentry                     func(o *TxsdVarlistentry, enter bool)
	XsdGoPkgHasElem_Locator              func(o *XsdGoPkgHasElem_Locator, enter bool)
	TxsdBibliodiv                        func(o *TxsdBibliodiv, enter bool)
	XsdGoPkgHasElem_Para                 func(o *XsdGoPkgHasElem_Para, enter bool)
	XsdGoPkgHasElems_Tocentry            func(o *XsdGoPkgHasElems_Tocentry, enter bool)
	XsdGoPkgHasElems_Firstname           func(o *XsdGoPkgHasElems_Firstname, enter bool)
	TxsdCopyright                        func(o *TxsdCopyright, enter bool)
	TxsdBibliolist                       func(o *TxsdBibliolist, enter bool)
	XsdGoPkgHasElem_Productionrecap      func(o *XsdGoPkgHasElem_Productionrecap, enter bool)
	XsdGoPkgHasElems_Guimenuitem         func(o *XsdGoPkgHasElems_Guimenuitem, enter bool)
	XsdGoPkgHasElem_Ooclass              func(o *XsdGoPkgHasElem_Ooclass, enter bool)
	XsdGoPkgHasElem_Seriesvolnums        func(o *XsdGoPkgHasElem_Seriesvolnums, enter bool)
	XsdGoPkgHasElem_Accel                func(o *XsdGoPkgHasElem_Accel, enter bool)
	TxsdDatabase                         func(o *TxsdDatabase, enter bool)
	XsdGoPkgHasElem_Footnoteref          func(o *XsdGoPkgHasElem_Footnoteref, enter bool)
	TxsdFormalpara                       func(o *TxsdFormalpara, enter bool)
	XsdGoPkgHasElems_Systemitem          func(o *XsdGoPkgHasElems_Systemitem, enter bool)
	XsdGoPkgHasElems_Areaset             func(o *XsdGoPkgHasElems_Areaset, enter bool)
	TxsdMsginfo                          func(o *TxsdMsginfo, enter bool)
	XsdGoPkgHasElem_Methodparam          func(o *XsdGoPkgHasElem_Methodparam, enter bool)
	XsdGoPkgHasElems_Refmeta             func(o *XsdGoPkgHasElems_Refmeta, enter bool)
	XsdGoPkgHasElems_Tocdiv              func(o *XsdGoPkgHasElems_Tocdiv, enter bool)
	XsdGoPkgHasElem_Methodsynopsis       func(o *XsdGoPkgHasElem_Methodsynopsis, enter bool)
	XsdGoPkgHasElems_Screen              func(o *XsdGoPkgHasElems_Screen, enter bool)
	TxsdMethodparam                      func(o *TxsdMethodparam, enter bool)
	XsdGoPkgHasElem_Type                 func(o *XsdGoPkgHasElem_Type, enter bool)
	TxsdSegmentedlist                    func(o *TxsdSegmentedlist, enter bool)
	XsdGoPkgHasElems_Secondary           func(o *XsdGoPkgHasElems_Secondary, enter bool)
	XsdGoPkgHasElem_Pubdate              func(o *XsdGoPkgHasElem_Pubdate, enter bool)
	XsdGoPkgHasElem_Tfoot                func(o *XsdGoPkgHasElem_Tfoot, enter bool)
	XsdGoPkgHasElems_Seealso             func(o *XsdGoPkgHasElems_Seealso, enter bool)
	XsdGoPkgHasElems_Term                func(o *XsdGoPkgHasElems_Term, enter bool)
	XsdGoPkgHasElem_Formalpara           func(o *XsdGoPkgHasElem_Formalpara, enter bool)
	TxsdBibliomixed                      func(o *TxsdBibliomixed, enter bool)
	XsdGoPkgHasElem_Authorgroup          func(o *XsdGoPkgHasElem_Authorgroup, enter bool)
	XsdGoPkgHasElems_Group               func(o *XsdGoPkgHasElems_Group, enter bool)
	XsdGoPkgHasElem_Sidebar              func(o *XsdGoPkgHasElem_Sidebar, enter bool)
	TxsdExample                          func(o *TxsdExample, enter bool)
	XsdGoPkgHasElem_Toc                  func(o *XsdGoPkgHasElem_Toc, enter bool)
	XsdGoPkgHasElems_Taskrelated         func(o *XsdGoPkgHasElems_Taskrelated, enter bool)
	TxsdRow                              func(o *TxsdRow, enter bool)
	XsdGoPkgHasElem_Application          func(o *XsdGoPkgHasElem_Application, enter bool)
	TxsdMsgset                           func(o *TxsdMsgset, enter bool)
	XsdGoPkgHasElems_Textdata            func(o *XsdGoPkgHasElems_Textdata, enter bool)
	TxsdOlink                            func(o *TxsdOlink, enter bool)
	TxsdAlt                              func(o *TxsdAlt, enter bool)
	XsdGoPkgHasElem_Co                   func(o *XsdGoPkgHasElem_Co, enter bool)
	XsdGoPkgHasElem_Footnote             func(o *XsdGoPkgHasElem_Footnote, enter bool)
	TxsdNote                             func(o *TxsdNote, enter bool)
	XsdGoPkgHasElems_Refentry            func(o *XsdGoPkgHasElems_Refentry, enter bool)
	TxsdSee                              func(o *TxsdSee, enter bool)
	XsdGoPkgHasElem_Year                 func(o *XsdGoPkgHasElem_Year, enter bool)
	XsdGoPkgHasElem_Mousebutton          func(o *XsdGoPkgHasElem_Mousebutton, enter bool)
	TxsdEpigraph                         func(o *TxsdEpigraph, enter bool)
	XsdGoPkgHasElems_Destructorsynopsis  func(o *XsdGoPkgHasElems_Destructorsynopsis, enter bool)
	XsdGoPkgHasElems_Td                  func(o *XsdGoPkgHasElems_Td, enter bool)
	XsdGoPkgHasElem_Contrib              func(o *XsdGoPkgHasElem_Contrib, enter bool)
	XsdGoPkgHasElem_Productionset        func(o *XsdGoPkgHasElem_Productionset, enter bool)
	XsdGoPkgHasElems_Keyword             func(o *XsdGoPkgHasElems_Keyword, enter bool)
	TxsdOointerface                      func(o *TxsdOointerface, enter bool)
	XsdGoPkgHasElem_Label                func(o *XsdGoPkgHasElem_Label, enter bool)
	XsdGoPkgHasElem_Person               func(o *XsdGoPkgHasElem_Person, enter bool)
	XsdGoPkgHasElems_Link                func(o *XsdGoPkgHasElems_Link, enter bool)
	TxsdEquation                         func(o *TxsdEquation, enter bool)
	XsdGoPkgHasElems_Keycap              func(o *XsdGoPkgHasElems_Keycap, enter bool)
	XsdGoPkgHasElems_Info                func(o *XsdGoPkgHasElems_Info, enter bool)
	XsdGoPkgHasElems_Msg                 func(o *XsdGoPkgHasElems_Msg, enter bool)
	XsdGoPkgHasElem_Inlineequation       func(o *XsdGoPkgHasElem_Inlineequation, enter bool)
	XsdGoPkgHasElem_Bibliomisc           func(o *XsdGoPkgHasElem_Bibliomisc, enter bool)
	XsdGoPkgHasElems_Book                func(o *XsdGoPkgHasElems_Book, enter bool)
	XsdGoPkgHasElems_Guiicon             func(o *XsdGoPkgHasElems_Guiicon, enter bool)
	TxsdRefmeta                          func(o *TxsdRefmeta, enter bool)
	TxsdSimpara                          func(o *TxsdSimpara, enter bool)
	XsdGoPkgHasElem_Bibliorelation       func(o *XsdGoPkgHasElem_Bibliorelation, enter bool)
	XsdGoPkgHasElems_Locator             func(o *XsdGoPkgHasElems_Locator, enter bool)
	XsdGoPkgHasElems_Chapter             func(o *XsdGoPkgHasElems_Chapter, enter bool)
	XsdGoPkgHasElems_Bibliocoverage      func(o *XsdGoPkgHasElems_Bibliocoverage, enter bool)
	TxsdFilename                         func(o *TxsdFilename, enter bool)
	TxsdProductionset                    func(o *TxsdProductionset, enter bool)
	XsdGoPkgHasElems_Userinput           func(o *XsdGoPkgHasElems_Userinput, enter bool)
	XsdGoPkgHasElems_Abstract            func(o *XsdGoPkgHasElems_Abstract, enter bool)
	XsdGoPkgHasElem_Xref                 func(o *XsdGoPkgHasElem_Xref, enter bool)
	TxsdFootnote                         func(o *TxsdFootnote, enter bool)
	XsdGoPkgHasElem_Orgname              func(o *XsdGoPkgHasElem_Orgname, enter bool)
	TxsdIndex                            func(o *TxsdIndex, enter bool)
	XsdGoPkgHasElem_Systemitem           func(o *XsdGoPkgHasElem_Systemitem, enter bool)
	XsdGoPkgHasElems_Productname         func(o *XsdGoPkgHasElems_Productname, enter bool)
	XsdGoPkgHasElem_Revdescription       func(o *XsdGoPkgHasElem_Revdescription, enter bool)
	TxsdSect1                            func(o *TxsdSect1, enter bool)
	XsdGoPkgHasElem_Confdates            func(o *XsdGoPkgHasElem_Confdates, enter bool)
	TxsdSurname                          func(o *TxsdSurname, enter bool)
	XsdGoPkgHasElem_Bibliocoverage       func(o *XsdGoPkgHasElem_Bibliocoverage, enter bool)
	XsdGoPkgHasElem_Set                  func(o *XsdGoPkgHasElem_Set, enter bool)
	XsdGoPkgHasElems_Errortype           func(o *XsdGoPkgHasElems_Errortype, enter bool)
	TxsdCollab                           func(o *TxsdCollab, enter bool)
	XsdGoPkgHasElem_Bibliodiv            func(o *XsdGoPkgHasElem_Bibliodiv, enter bool)
	XsdGoPkgHasElem_Bibliomixed          func(o *XsdGoPkgHasElem_Bibliomixed, enter bool)
	XsdGoPkgHasElems_Othercredit         func(o *XsdGoPkgHasElems_Othercredit, enter bool)
	TxsdScreenco                         func(o *TxsdScreenco, enter bool)
	XsdGoPkgHasElems_Glossdef            func(o *XsdGoPkgHasElems_Glossdef, enter bool)
	XsdGoPkgHasElems_Informaltable       func(o *XsdGoPkgHasElems_Informaltable, enter bool)
	XsdGoPkgHasElems_Superscript         func(o *XsdGoPkgHasElems_Superscript, enter bool)
	XsdGoPkgHasElem_Primary              func(o *XsdGoPkgHasElem_Primary, enter bool)
	XsdGoPkgHasElems_Collab              func(o *XsdGoPkgHasElems_Collab, enter bool)
	XsdGoPkgHasElem_Guimenu              func(o *XsdGoPkgHasElem_Guimenu, enter bool)
	TxsdTasksummary                      func(o *TxsdTasksummary, enter bool)
	TxsdImageobjectco                    func(o *TxsdImageobjectco, enter bool)
	XsdGoPkgHasElem_Substeps             func(o *XsdGoPkgHasElem_Substeps, enter bool)
	XsdGoPkgHasElem_Biblioset            func(o *XsdGoPkgHasElem_Biblioset, enter bool)
	TxsdApplication                      func(o *TxsdApplication, enter bool)
	XsdGoPkgHasElem_Property             func(o *XsdGoPkgHasElem_Property, enter bool)
	XsdGoPkgHasElems_Pob                 func(o *XsdGoPkgHasElems_Pob, enter bool)
	XsdGoPkgHasElems_Partintro           func(o *XsdGoPkgHasElems_Partintro, enter bool)
	XsdGoPkgHasElem_Contractnum          func(o *XsdGoPkgHasElem_Contractnum, enter bool)
	XsdGoPkgHasElems_Printhistory        func(o *XsdGoPkgHasElems_Printhistory, enter bool)
	XsdGoPkgHasElems_Returnvalue         func(o *XsdGoPkgHasElems_Returnvalue, enter bool)
	XsdGoPkgHasElems_Seg                 func(o *XsdGoPkgHasElems_Seg, enter bool)
	XsdGoPkgHasElems_Productnumber       func(o *XsdGoPkgHasElems_Productnumber, enter bool)
	XsdGoPkgHasElems_Guilabel            func(o *XsdGoPkgHasElems_Guilabel, enter bool)
	XsdGoPkgHasElem_Epigraph             func(o *XsdGoPkgHasElem_Epigraph, enter bool)
	XsdGoPkgHasElems_Org                 func(o *XsdGoPkgHasElems_Org, enter bool)
	XsdGoPkgHasElem_Msgrel               func(o *XsdGoPkgHasElem_Msgrel, enter bool)
	XsdGoPkgHasElems_Audiodata           func(o *XsdGoPkgHasElems_Audiodata, enter bool)
	XsdGoPkgHasElem_Glossentry           func(o *XsdGoPkgHasElem_Glossentry, enter bool)
	XsdGoPkgHasElem_Option               func(o *XsdGoPkgHasElem_Option, enter bool)
	XsdGoPkgHasElem_Literal              func(o *XsdGoPkgHasElem_Literal, enter bool)
	TxsdProgramlisting                   func(o *TxsdProgramlisting, enter bool)
	XsdGoPkgHasElem_Issuenum             func(o *XsdGoPkgHasElem_Issuenum, enter bool)
	TxsdRevision                         func(o *TxsdRevision, enter bool)
	XsdGoPkgHasElem_Returnvalue          func(o *XsdGoPkgHasElem_Returnvalue, enter bool)
	XsdGoPkgHasElem_Affiliation          func(o *XsdGoPkgHasElem_Affiliation, enter bool)
	XsdGoPkgHasElem_Areaspec             func(o *XsdGoPkgHasElem_Areaspec, enter bool)
	TxsdEntry                            func(o *TxsdEntry, enter bool)
	XsdGoPkgHasElem_Citetitle            func(o *XsdGoPkgHasElem_Citetitle, enter bool)
	XsdGoPkgHasElems_Synopfragmentref    func(o *XsdGoPkgHasElems_Synopfragmentref, enter bool)
	XsdGoPkgHasElems_Imageobject         func(o *XsdGoPkgHasElems_Imageobject, enter bool)
	XsdGoPkgHasElems_Appendix            func(o *XsdGoPkgHasElems_Appendix, enter bool)
	XsdGoPkgHasElems_Glosssee            func(o *XsdGoPkgHasElems_Glosssee, enter bool)
	XsdGoPkgHasElems_Envar               func(o *XsdGoPkgHasElems_Envar, enter bool)
	XsdGoPkgHasElem_Table                func(o *XsdGoPkgHasElem_Table, enter bool)
	XsdGoPkgHasElems_Figure              func(o *XsdGoPkgHasElems_Figure, enter bool)
	XsdGoPkgHasElems_Errorname           func(o *XsdGoPkgHasElems_Errorname, enter bool)
	XsdGoPkgHasElems_Classsynopsisinfo   func(o *XsdGoPkgHasElems_Classsynopsisinfo, enter bool)
	TxsdTag                              func(o *TxsdTag, enter bool)
	XsdGoPkgHasElem_Qandaset             func(o *XsdGoPkgHasElem_Qandaset, enter bool)
	TxsdClasssynopsis                    func(o *TxsdClasssynopsis, enter bool)
	TxsdGlosssee                         func(o *TxsdGlosssee, enter bool)
	XsdGoPkgHasElems_Revhistory          func(o *XsdGoPkgHasElems_Revhistory, enter bool)
	XsdGoPkgHasElem_Classsynopsisinfo    func(o *XsdGoPkgHasElem_Classsynopsisinfo, enter bool)
	XsdGoPkgHasElem_Function             func(o *XsdGoPkgHasElem_Function, enter bool)
	XsdGoPkgHasElems_Lhs                 func(o *XsdGoPkgHasElems_Lhs, enter bool)
	TxsdTr                               func(o *TxsdTr, enter bool)
	XsdGoPkgHasElem_Msgorig              func(o *XsdGoPkgHasElem_Msgorig, enter bool)
	XsdGoPkgHasElem_Segmentedlist        func(o *XsdGoPkgHasElem_Segmentedlist, enter bool)
	XsdGoPkgHasElem_Personname           func(o *XsdGoPkgHasElem_Personname, enter bool)
	XsdGoPkgHasElem_Colophon             func(o *XsdGoPkgHasElem_Colophon, enter bool)
	XsdGoPkgHasElems_Synopfragment       func(o *XsdGoPkgHasElems_Synopfragment, enter bool)
	XsdGoPkgHasElems_Classname           func(o *XsdGoPkgHasElems_Classname, enter bool)
	TxsdSect5                            func(o *TxsdSect5, enter bool)
	XsdGoPkgHasElem_Segtitle             func(o *XsdGoPkgHasElem_Segtitle, enter bool)
	XsdGoPkgHasElem_Volumenum            func(o *XsdGoPkgHasElem_Volumenum, enter bool)
	XsdGoPkgHasElems_Entry               func(o *XsdGoPkgHasElems_Entry, enter bool)
	TxsdAnnotation                       func(o *TxsdAnnotation, enter bool)
	TxsdAnchor                           func(o *TxsdAnchor, enter bool)
	XsdGoPkgHasElem_Simplelist           func(o *XsdGoPkgHasElem_Simplelist, enter bool)
	TxsdCitation                         func(o *TxsdCitation, enter bool)
	TxsdAuthor                           func(o *TxsdAuthor, enter bool)
	XsdGoPkgHasElems_Orgdiv              func(o *XsdGoPkgHasElems_Orgdiv, enter bool)
	XsdGoPkgHasElems_Alt                 func(o *XsdGoPkgHasElems_Alt, enter bool)
	TxsdXref                             func(o *TxsdXref, enter bool)
	XsdGoPkgHasElems_Symbol              func(o *XsdGoPkgHasElems_Symbol, enter bool)
	XsdGoPkgHasElems_Bibliomixed         func(o *XsdGoPkgHasElems_Bibliomixed, enter bool)
	XsdGoPkgHasElems_Refpurpose          func(o *XsdGoPkgHasElems_Refpurpose, enter bool)
	XsdGoPkgHasElems_Manvolnum           func(o *XsdGoPkgHasElems_Manvolnum, enter bool)
	TxsdMsg                              func(o *TxsdMsg, enter bool)
	XsdGoPkgHasElems_Example             func(o *XsdGoPkgHasElems_Example, enter bool)
	XsdGoPkgHasElem_Computeroutput       func(o *XsdGoPkgHasElem_Computeroutput, enter bool)
	XsdGoPkgHasElem_Qandadiv             func(o *XsdGoPkgHasElem_Qandadiv, enter bool)
	XsdGoPkgHasElems_Honorific           func(o *XsdGoPkgHasElems_Honorific, enter bool)
	XsdGoPkgHasElems_Errorcode           func(o *XsdGoPkgHasElems_Errorcode, enter bool)
	XsdGoPkgHasElems_Mousebutton         func(o *XsdGoPkgHasElems_Mousebutton, enter bool)
	XsdGoPkgHasElem_Bibliolist           func(o *XsdGoPkgHasElem_Bibliolist, enter bool)
	XsdGoPkgHasElem_Editor               func(o *XsdGoPkgHasElem_Editor, enter bool)
	TxsdTable                            func(o *TxsdTable, enter bool)
	XsdGoPkgHasElems_Segtitle            func(o *XsdGoPkgHasElems_Segtitle, enter bool)
	XsdGoPkgHasElems_Phrase              func(o *XsdGoPkgHasElems_Phrase, enter bool)
	XsdGoPkgHasElems_Sidebar             func(o *XsdGoPkgHasElems_Sidebar, enter bool)
	TxsdPara                             func(o *TxsdPara, enter bool)
	TxsdRevdescription                   func(o *TxsdRevdescription, enter bool)
	XsdGoPkgHasElem_Citebiblioid         func(o *XsdGoPkgHasElem_Citebiblioid, enter bool)
	XsdGoPkgHasElem_Modifier             func(o *XsdGoPkgHasElem_Modifier, enter bool)
	XsdGoPkgHasElems_Guimenu             func(o *XsdGoPkgHasElems_Guimenu, enter bool)
	XsdGoPkgHasElem_Msgmain              func(o *XsdGoPkgHasElem_Msgmain, enter bool)
	TxsdShortcut                         func(o *TxsdShortcut, enter bool)
	XsdGoPkgHasElems_Wordasword          func(o *XsdGoPkgHasElems_Wordasword, enter bool)
	XsdGoPkgHasElems_Property            func(o *XsdGoPkgHasElems_Property, enter bool)
	XsdGoPkgHasElems_Msgrel              func(o *XsdGoPkgHasElems_Msgrel, enter bool)
	TxsdMathphrase                       func(o *TxsdMathphrase, enter bool)
	XsdGoPkgHasElem_Keycombo             func(o *XsdGoPkgHasElem_Keycombo, enter bool)
	XsdGoPkgHasElems_Taskprerequisites   func(o *XsdGoPkgHasElems_Taskprerequisites, enter bool)
	XsdGoPkgHasElems_Screenshot          func(o *XsdGoPkgHasElems_Screenshot, enter bool)
	XsdGoPkgHasElems_Author              func(o *XsdGoPkgHasElems_Author, enter bool)
	TxsdRefsect2                         func(o *TxsdRefsect2, enter bool)
	XsdGoPkgHasElems_Errortext           func(o *XsdGoPkgHasElems_Errortext, enter bool)
	XsdGoPkgHasElems_Phone               func(o *XsdGoPkgHasElems_Phone, enter bool)
	TxsdStep                             func(o *TxsdStep, enter bool)
	TxsdAppendix                         func(o *TxsdAppendix, enter bool)
	XsdGoPkgHasElem_Prompt               func(o *XsdGoPkgHasElem_Prompt, enter bool)
	XsdGoPkgHasElems_Revremark           func(o *XsdGoPkgHasElems_Revremark, enter bool)
	XsdGoPkgHasElem_Tip                  func(o *XsdGoPkgHasElem_Tip, enter bool)
	XsdGoPkgHasElem_Entry                func(o *XsdGoPkgHasElem_Entry, enter bool)
	XsdGoPkgHasElem_Th                   func(o *XsdGoPkgHasElem_Th, enter bool)
	XsdGoPkgHasElem_Guiicon              func(o *XsdGoPkgHasElem_Guiicon, enter bool)
	XsdGoPkgHasElem_Revision             func(o *XsdGoPkgHasElem_Revision, enter bool)
	XsdGoPkgHasElems_Screenco            func(o *XsdGoPkgHasElems_Screenco, enter bool)
	XsdGoPkgHasElems_Guisubmenu          func(o *XsdGoPkgHasElems_Guisubmenu, enter bool)
	XsdGoPkgHasElems_Refdescriptor       func(o *XsdGoPkgHasElems_Refdescriptor, enter bool)
	TxsdBibliocoverage                   func(o *TxsdBibliocoverage, enter bool)
	TxsdPrinthistory                     func(o *TxsdPrinthistory, enter bool)
	TxsdUserinput                        func(o *TxsdUserinput, enter bool)
	TxsdGuimenuitem                      func(o *TxsdGuimenuitem, enter bool)
	XsdGoPkgHasElem_Database             func(o *XsdGoPkgHasElem_Database, enter bool)
	XsdGoPkgHasElem_Taskprerequisites    func(o *XsdGoPkgHasElem_Taskprerequisites, enter bool)
	TxsdSubject                          func(o *TxsdSubject, enter bool)
	TxsdSuperscript                      func(o *TxsdSuperscript, enter bool)
	TxsdCmdsynopsis                      func(o *TxsdCmdsynopsis, enter bool)
	XsdGoPkgHasElems_Videodata           func(o *XsdGoPkgHasElems_Videodata, enter bool)
	XsdGoPkgHasElems_Dedication          func(o *XsdGoPkgHasElems_Dedication, enter bool)
	XsdGoPkgHasElem_Bridgehead           func(o *XsdGoPkgHasElem_Bridgehead, enter bool)
	XsdGoPkgHasElem_Olink                func(o *XsdGoPkgHasElem_Olink, enter bool)
	XsdGoPkgHasElem_Sect2                func(o *XsdGoPkgHasElem_Sect2, enter bool)
	XsdGoPkgHasElems_Year                func(o *XsdGoPkgHasElems_Year, enter bool)
	XsdGoPkgHasElem_Mediaobject          func(o *XsdGoPkgHasElem_Mediaobject, enter bool)
	TxsdPart                             func(o *TxsdPart, enter bool)
	XsdGoPkgHasElems_Rhs                 func(o *XsdGoPkgHasElems_Rhs, enter bool)
	XsdGoPkgHasElem_Refpurpose           func(o *XsdGoPkgHasElem_Refpurpose, enter bool)
	XsdGoPkgHasElems_Imageobjectco       func(o *XsdGoPkgHasElems_Imageobjectco, enter bool)
	XsdGoPkgHasElem_Literallayout        func(o *XsdGoPkgHasElem_Literallayout, enter bool)
	TxsdSeglistitem                      func(o *TxsdSeglistitem, enter bool)
	XsdGoPkgHasElems_Replaceable         func(o *XsdGoPkgHasElems_Replaceable, enter bool)
	TxsdEditor                           func(o *TxsdEditor, enter bool)
	XsdGoPkgHasElems_Qandaset            func(o *XsdGoPkgHasElems_Qandaset, enter bool)
	TxsdRefsection                       func(o *TxsdRefsection, enter bool)
	XsdGoPkgHasElem_Textdata             func(o *XsdGoPkgHasElem_Textdata, enter bool)
	XsdGoPkgHasElem_Glossterm            func(o *XsdGoPkgHasElem_Glossterm, enter bool)
	XsdGoPkgHasElems_Shortaffil          func(o *XsdGoPkgHasElems_Shortaffil, enter bool)
	XsdGoPkgHasElems_Issuenum            func(o *XsdGoPkgHasElems_Issuenum, enter bool)
	XsdGoPkgHasElem_Entrytbl             func(o *XsdGoPkgHasElem_Entrytbl, enter bool)
	XsdGoPkgHasElem_Seeie                func(o *XsdGoPkgHasElem_Seeie, enter bool)
	XsdGoPkgHasElem_Mathphrase           func(o *XsdGoPkgHasElem_Mathphrase, enter bool)
	XsdGoPkgHasElem_Varlistentry         func(o *XsdGoPkgHasElem_Varlistentry, enter bool)
	XsdGoPkgHasElem_Date                 func(o *XsdGoPkgHasElem_Date, enter bool)
	XsdGoPkgHasElems_Glosslist           func(o *XsdGoPkgHasElems_Glosslist, enter bool)
	XsdGoPkgHasElem_Term                 func(o *XsdGoPkgHasElem_Term, enter bool)
	XsdGoPkgHasElem_Constraint           func(o *XsdGoPkgHasElem_Constraint, enter bool)
	XsdGoPkgHasElems_Msgorig             func(o *XsdGoPkgHasElems_Msgorig, enter bool)
	XsdGoPkgHasElems_Refsect1            func(o *XsdGoPkgHasElems_Refsect1, enter bool)
	TxsdSubjectset                       func(o *TxsdSubjectset, enter bool)
	TxsdTitle                            func(o *TxsdTitle, enter bool)
	XsdGoPkgHasElems_Confnum             func(o *XsdGoPkgHasElems_Confnum, enter bool)
	XsdGoPkgHasElem_Uri                  func(o *XsdGoPkgHasElem_Uri, enter bool)
	XsdGoPkgHasElems_Menuchoice          func(o *XsdGoPkgHasElems_Menuchoice, enter bool)
	XsdGoPkgHasElems_Constraintdef       func(o *XsdGoPkgHasElems_Constraintdef, enter bool)
	XsdGoPkgHasElem_Refsect3             func(o *XsdGoPkgHasElem_Refsect3, enter bool)
	XsdGoPkgHasElem_Indexdiv             func(o *XsdGoPkgHasElem_Indexdiv, enter bool)
	XsdGoPkgHasElems_Procedure           func(o *XsdGoPkgHasElems_Procedure, enter bool)
	TxsdOrgname                          func(o *TxsdOrgname, enter bool)
	TxsdBibliography                     func(o *TxsdBibliography, enter bool)
	XsdGoPkgHasElems_Bridgehead          func(o *XsdGoPkgHasElems_Bridgehead, enter bool)
	XsdGoPkgHasElems_Exceptionname       func(o *XsdGoPkgHasElems_Exceptionname, enter bool)
	XsdGoPkgHasElem_Pagenums             func(o *XsdGoPkgHasElem_Pagenums, enter bool)
	TxsdBibliorelation                   func(o *TxsdBibliorelation, enter bool)
	XsdGoPkgHasElem_Refsynopsisdiv       func(o *XsdGoPkgHasElem_Refsynopsisdiv, enter bool)
	XsdGoPkgHasElems_Informalfigure      func(o *XsdGoPkgHasElems_Informalfigure, enter bool)
	XsdGoPkgHasElem_Taskrelated          func(o *XsdGoPkgHasElem_Taskrelated, enter bool)
	XsdGoPkgHasElem_Answer               func(o *XsdGoPkgHasElem_Answer, enter bool)
	XsdGoPkgHasElems_Warning             func(o *XsdGoPkgHasElems_Warning, enter bool)
	XsdGoPkgHasElem_Symbol               func(o *XsdGoPkgHasElem_Symbol, enter bool)
	TxsdInformaltable                    func(o *TxsdInformaltable, enter bool)
	TxsdKeycode                          func(o *TxsdKeycode, enter bool)
	TxsdGlossdef                         func(o *TxsdGlossdef, enter bool)
	XsdGoPkgHasElems_Spanspec            func(o *XsdGoPkgHasElems_Spanspec, enter bool)
	XsdGoPkgHasElems_Videoobject         func(o *XsdGoPkgHasElems_Videoobject, enter bool)
	XsdGoPkgHasElems_Important           func(o *XsdGoPkgHasElems_Important, enter bool)
	XsdGoPkgHasElems_Database            func(o *XsdGoPkgHasElems_Database, enter bool)
	TxsdAreaset                          func(o *TxsdAreaset, enter bool)
	TxsdCaution                          func(o *TxsdCaution, enter bool)
	XsdGoPkgHasElems_Para                func(o *XsdGoPkgHasElems_Para, enter bool)
	XsdGoPkgHasElem_Simplemsgentry       func(o *XsdGoPkgHasElem_Simplemsgentry, enter bool)
	XsdGoPkgHasElem_Reference            func(o *XsdGoPkgHasElem_Reference, enter bool)
	TxsdPersonname                       func(o *TxsdPersonname, enter bool)
	TxsdTocdiv                           func(o *TxsdTocdiv, enter bool)
	TxsdParameter                        func(o *TxsdParameter, enter bool)
	XsdGoPkgHasElem_Interfacename        func(o *XsdGoPkgHasElem_Interfacename, enter bool)
	TxsdAttribution                      func(o *TxsdAttribution, enter bool)
	XsdGoPkgHasElem_Attribution          func(o *XsdGoPkgHasElem_Attribution, enter bool)
	TxsdBiblioid                         func(o *TxsdBiblioid, enter bool)
	XsdGoPkgHasElem_Sbr                  func(o *XsdGoPkgHasElem_Sbr, enter bool)
	XsdGoPkgHasElem_Refsect2             func(o *XsdGoPkgHasElem_Refsect2, enter bool)
	XsdGoPkgHasElems_Primary             func(o *XsdGoPkgHasElems_Primary, enter bool)
	XsdGoPkgHasElems_Varargs             func(o *XsdGoPkgHasElems_Varargs, enter bool)
	XsdGoPkgHasElems_Seriesvolnums       func(o *XsdGoPkgHasElems_Seriesvolnums, enter bool)
	TxsdInfo                             func(o *TxsdInfo, enter bool)
	XsdGoPkgHasElems_Productionrecap     func(o *XsdGoPkgHasElems_Productionrecap, enter bool)
	XsdGoPkgHasElem_Audioobject          func(o *XsdGoPkgHasElem_Audioobject, enter bool)
	XsdGoPkgHasElem_Msgaud               func(o *XsdGoPkgHasElem_Msgaud, enter bool)
	XsdGoPkgHasElem_Holder               func(o *XsdGoPkgHasElem_Holder, enter bool)
	TxsdThead                            func(o *TxsdThead, enter bool)
	XsdGoPkgHasElem_Foreignphrase        func(o *XsdGoPkgHasElem_Foreignphrase, enter bool)
	XsdGoPkgHasElems_Set                 func(o *XsdGoPkgHasElems_Set, enter bool)
	TxsdRefnamediv                       func(o *TxsdRefnamediv, enter bool)
	XsdGoPkgHasElems_Markup              func(o *XsdGoPkgHasElems_Markup, enter bool)
	XsdGoPkgHasElems_Inlinemediaobject   func(o *XsdGoPkgHasElems_Inlinemediaobject, enter bool)
	XsdGoPkgHasElems_Acronym             func(o *XsdGoPkgHasElems_Acronym, enter bool)
	XsdGoPkgHasElem_Exceptionname        func(o *XsdGoPkgHasElem_Exceptionname, enter bool)
	XsdGoPkgHasElems_Listitem            func(o *XsdGoPkgHasElems_Listitem, enter bool)
	TxsdTextobject                       func(o *TxsdTextobject, enter bool)
	XsdGoPkgHasElems_Col                 func(o *XsdGoPkgHasElems_Col, enter bool)
	XsdGoPkgHasElem_Seglistitem          func(o *XsdGoPkgHasElem_Seglistitem, enter bool)
	XsdGoPkgHasElems_Refsect2            func(o *XsdGoPkgHasElems_Refsect2, enter bool)
	XsdGoPkgHasElem_Postcode             func(o *XsdGoPkgHasElem_Postcode, enter bool)
	XsdGoPkgHasElem_Revnumber            func(o *XsdGoPkgHasElem_Revnumber, enter bool)
	XsdGoPkgHasElem_Parameter            func(o *XsdGoPkgHasElem_Parameter, enter bool)
	XsdGoPkgHasElems_Abbrev              func(o *XsdGoPkgHasElems_Abbrev, enter bool)
	XsdGoPkgHasElem_Biblioref            func(o *XsdGoPkgHasElem_Biblioref, enter bool)
	XsdGoPkgHasElems_Answer              func(o *XsdGoPkgHasElems_Answer, enter bool)
	XsdGoPkgHasElem_Subjectset           func(o *XsdGoPkgHasElem_Subjectset, enter bool)
	XsdGoPkgHasElem_Msgset               func(o *XsdGoPkgHasElem_Msgset, enter bool)
	XsdGoPkgHasElem_Productname          func(o *XsdGoPkgHasElem_Productname, enter bool)
	XsdGoPkgHasElems_Revdescription      func(o *XsdGoPkgHasElems_Revdescription, enter bool)
	XsdGoPkgHasElem_Msgexplan            func(o *XsdGoPkgHasElem_Msgexplan, enter bool)
	XsdGoPkgHasElems_Member              func(o *XsdGoPkgHasElems_Member, enter bool)
	XsdGoPkgHasElems_Synopsis            func(o *XsdGoPkgHasElems_Synopsis, enter bool)
	XsdGoPkgHasElems_Revision            func(o *XsdGoPkgHasElems_Revision, enter bool)
	TxsdAffiliation                      func(o *TxsdAffiliation, enter bool)
	XsdGoPkgHasElems_Guibutton           func(o *XsdGoPkgHasElems_Guibutton, enter bool)
	XsdGoPkgHasElem_Glossdiv             func(o *XsdGoPkgHasElem_Glossdiv, enter bool)
	XsdGoPkgHasElem_Orderedlist          func(o *XsdGoPkgHasElem_Orderedlist, enter bool)
	XsdGoPkgHasElem_Annotation           func(o *XsdGoPkgHasElem_Annotation, enter bool)
	XsdGoPkgHasElem_Surname              func(o *XsdGoPkgHasElem_Surname, enter bool)
	XsdGoPkgHasElem_Indexentry           func(o *XsdGoPkgHasElem_Indexentry, enter bool)
	XsdGoPkgHasElems_Affiliation         func(o *XsdGoPkgHasElems_Affiliation, enter bool)
	TxsdAcronym                          func(o *TxsdAcronym, enter bool)
	TxsdModifier                         func(o *TxsdModifier, enter bool)
	XsdGoPkgHasElem_Address              func(o *XsdGoPkgHasElem_Address, enter bool)
	TxsdTip                              func(o *TxsdTip, enter bool)
	XsdGoPkgHasElems_Oointerface         func(o *XsdGoPkgHasElems_Oointerface, enter bool)
	XsdGoPkgHasElems_Msgaud              func(o *XsdGoPkgHasElems_Msgaud, enter bool)
	XsdGoPkgHasElems_Varname             func(o *XsdGoPkgHasElems_Varname, enter bool)
	XsdGoPkgHasElem_Refmeta              func(o *XsdGoPkgHasElem_Refmeta, enter bool)
	TxsdKeycap                           func(o *TxsdKeycap, enter bool)
	TxsdRemark                           func(o *TxsdRemark, enter bool)
	TxsdVariablelist                     func(o *TxsdVariablelist, enter bool)
	XsdGoPkgHasElem_Publisher            func(o *XsdGoPkgHasElem_Publisher, enter bool)
	XsdGoPkgHasElems_Othername           func(o *XsdGoPkgHasElems_Othername, enter bool)
	TxsdColspec                          func(o *TxsdColspec, enter bool)
	XsdGoPkgHasElems_Row                 func(o *XsdGoPkgHasElems_Row, enter bool)
	XsdGoPkgHasElem_Important            func(o *XsdGoPkgHasElem_Important, enter bool)
	TxsdSection                          func(o *TxsdSection, enter bool)
	TxsdInformalexample                  func(o *TxsdInformalexample, enter bool)
	XsdGoPkgHasElems_Constraint          func(o *XsdGoPkgHasElems_Constraint, enter bool)
	XsdGoPkgHasElems_Reference           func(o *XsdGoPkgHasElems_Reference, enter bool)
	XsdGoPkgHasElem_Screenco             func(o *XsdGoPkgHasElem_Screenco, enter bool)
	XsdGoPkgHasElems_Titleabbrev         func(o *XsdGoPkgHasElems_Titleabbrev, enter bool)
	XsdGoPkgHasElem_Authorinitials       func(o *XsdGoPkgHasElem_Authorinitials, enter bool)
	TxsdPersonblurb                      func(o *TxsdPersonblurb, enter bool)
	TxsdCiterefentry                     func(o *TxsdCiterefentry, enter bool)
	XsdGoPkgHasElems_Caption             func(o *XsdGoPkgHasElems_Caption, enter bool)
	TxsdSecondary                        func(o *TxsdSecondary, enter bool)
	XsdGoPkgHasElem_Copyright            func(o *XsdGoPkgHasElem_Copyright, enter bool)
	XsdGoPkgHasElems_Tfoot               func(o *XsdGoPkgHasElems_Tfoot, enter bool)
	XsdGoPkgHasElem_Step                 func(o *XsdGoPkgHasElem_Step, enter bool)
	TxsdMenuchoice                       func(o *TxsdMenuchoice, enter bool)
	XsdGoPkgHasElems_Msgtext             func(o *XsdGoPkgHasElems_Msgtext, enter bool)
	XsdGoPkgHasElems_Releaseinfo         func(o *XsdGoPkgHasElems_Releaseinfo, enter bool)
	XsdGoPkgHasElems_Token               func(o *XsdGoPkgHasElems_Token, enter bool)
	XsdGoPkgHasElem_Publishername        func(o *XsdGoPkgHasElem_Publishername, enter bool)
	XsdGoPkgHasElem_Subscript            func(o *XsdGoPkgHasElem_Subscript, enter bool)
	XsdGoPkgHasElem_Userinput            func(o *XsdGoPkgHasElem_Userinput, enter bool)
	XsdGoPkgHasElems_Colophon            func(o *XsdGoPkgHasElems_Colophon, enter bool)
	XsdGoPkgHasElem_Destructorsynopsis   func(o *XsdGoPkgHasElem_Destructorsynopsis, enter bool)
	XsdGoPkgHasElem_Envar                func(o *XsdGoPkgHasElem_Envar, enter bool)
	TxsdImagedata                        func(o *TxsdImagedata, enter bool)
	XsdGoPkgHasElems_Email               func(o *XsdGoPkgHasElems_Email, enter bool)
	XsdGoPkgHasElem_Stepalternatives     func(o *XsdGoPkgHasElem_Stepalternatives, enter bool)
	XsdGoPkgHasElems_Secondaryie         func(o *XsdGoPkgHasElems_Secondaryie, enter bool)
	XsdGoPkgHasElems_Date                func(o *XsdGoPkgHasElems_Date, enter bool)
	XsdGoPkgHasElem_City                 func(o *XsdGoPkgHasElem_City, enter bool)
	XsdGoPkgHasElem_Seg                  func(o *XsdGoPkgHasElem_Seg, enter bool)
	XsdGoPkgHasElem_Constructorsynopsis  func(o *XsdGoPkgHasElem_Constructorsynopsis, enter bool)
	XsdGoPkgHasElem_Msgtext              func(o *XsdGoPkgHasElem_Msgtext, enter bool)
	XsdGoPkgHasElems_Citerefentry        func(o *XsdGoPkgHasElems_Citerefentry, enter bool)
	XsdGoPkgHasElem_Hardware             func(o *XsdGoPkgHasElem_Hardware, enter bool)
	XsdGoPkgHasElem_Synopfragmentref     func(o *XsdGoPkgHasElem_Synopfragmentref, enter bool)
	XsdGoPkgHasElems_Blockquote          func(o *XsdGoPkgHasElems_Blockquote, enter bool)
	XsdGoPkgHasElem_Shortaffil           func(o *XsdGoPkgHasElem_Shortaffil, enter bool)
	XsdGoPkgHasElem_Arg                  func(o *XsdGoPkgHasElem_Arg, enter bool)
	XsdGoPkgHasElem_Releaseinfo          func(o *XsdGoPkgHasElem_Releaseinfo, enter bool)
	TxsdAbstract                         func(o *TxsdAbstract, enter bool)
	TxsdSidebar                          func(o *TxsdSidebar, enter bool)
	TxsdAudiodata                        func(o *TxsdAudiodata, enter bool)
	XsdGoPkgHasElems_Accel               func(o *XsdGoPkgHasElems_Accel, enter bool)
	XsdGoPkgHasElems_Refsect3            func(o *XsdGoPkgHasElems_Refsect3, enter bool)
	XsdGoPkgHasElem_Confsponsor          func(o *XsdGoPkgHasElem_Confsponsor, enter bool)
	XsdGoPkgHasElem_Glossary             func(o *XsdGoPkgHasElem_Glossary, enter bool)
	XsdGoPkgHasElem_Funcsynopsis         func(o *XsdGoPkgHasElem_Funcsynopsis, enter bool)
	TxsdColophon                         func(o *TxsdColophon, enter bool)
	XsdGoPkgHasElems_Indexentry          func(o *XsdGoPkgHasElems_Indexentry, enter bool)
	XsdGoPkgHasElem_Partintro            func(o *XsdGoPkgHasElem_Partintro, enter bool)
	XsdGoPkgHasElem_Task                 func(o *XsdGoPkgHasElem_Task, enter bool)
	XsdGoPkgHasElems_Authorinitials      func(o *XsdGoPkgHasElems_Authorinitials, enter bool)
	XsdGoPkgHasElems_Parameter           func(o *XsdGoPkgHasElems_Parameter, enter bool)
	XsdGoPkgHasElem_Phrase               func(o *XsdGoPkgHasElem_Phrase, enter bool)
	XsdGoPkgHasElems_Glossterm           func(o *XsdGoPkgHasElems_Glossterm, enter bool)
	XsdGoPkgHasElem_Refname              func(o *XsdGoPkgHasElem_Refname, enter bool)
	XsdGoPkgHasElems_Article             func(o *XsdGoPkgHasElems_Article, enter bool)
	XsdGoPkgHasElems_Street              func(o *XsdGoPkgHasElems_Street, enter bool)
	XsdGoPkgHasElem_Ooexception          func(o *XsdGoPkgHasElem_Ooexception, enter bool)
	XsdGoPkgHasElems_Stepalternatives    func(o *XsdGoPkgHasElems_Stepalternatives, enter bool)
	TxsdFigure                           func(o *TxsdFigure, enter bool)
	TxsdBiblioref                        func(o *TxsdBiblioref, enter bool)
	XsdGoPkgHasElems_Olink               func(o *XsdGoPkgHasElems_Olink, enter bool)
	XsdGoPkgHasElems_Part                func(o *XsdGoPkgHasElems_Part, enter bool)
	XsdGoPkgHasElems_Subtitle            func(o *XsdGoPkgHasElems_Subtitle, enter bool)
	XsdGoPkgHasElem_Guibutton            func(o *XsdGoPkgHasElem_Guibutton, enter bool)
	XsdGoPkgHasElems_Xref                func(o *XsdGoPkgHasElems_Xref, enter bool)
	XsdGoPkgHasElem_Question             func(o *XsdGoPkgHasElem_Question, enter bool)
	XsdGoPkgHasElems_Ooexception         func(o *XsdGoPkgHasElems_Ooexception, enter bool)
	XsdGoPkgHasElems_Acknowledgements    func(o *XsdGoPkgHasElems_Acknowledgements, enter bool)
	TxsdDate                             func(o *TxsdDate, enter bool)
	XsdGoPkgHasElems_Biblioref           func(o *XsdGoPkgHasElems_Biblioref, enter bool)
	XsdGoPkgHasElems_Epigraph            func(o *XsdGoPkgHasElems_Epigraph, enter bool)
	XsdGoPkgHasElem_Msgsub               func(o *XsdGoPkgHasElem_Msgsub, enter bool)
	XsdGoPkgHasElems_Simplelist          func(o *XsdGoPkgHasElems_Simplelist, enter bool)
	TxsdInformalequation                 func(o *TxsdInformalequation, enter bool)
	XsdGoPkgHasElems_Funcsynopsis        func(o *XsdGoPkgHasElems_Funcsynopsis, enter bool)
	XsdGoPkgHasElem_Sect1                func(o *XsdGoPkgHasElem_Sect1, enter bool)
	TxsdTextdata                         func(o *TxsdTextdata, enter bool)
	TxsdOrgdiv                           func(o *TxsdOrgdiv, enter bool)
	TxsdComputeroutput                   func(o *TxsdComputeroutput, enter bool)
	XsdGoPkgHasElem_Simpara              func(o *XsdGoPkgHasElem_Simpara, enter bool)
	XsdGoPkgHasElems_Citebiblioid        func(o *XsdGoPkgHasElems_Citebiblioid, enter bool)
	TxsdExtendedlink                     func(o *TxsdExtendedlink, enter bool)
	XsdGoPkgHasElem_Collab               func(o *XsdGoPkgHasElem_Collab, enter bool)
	XsdGoPkgHasElem_Errorname            func(o *XsdGoPkgHasElem_Errorname, enter bool)
	TxsdRefentrytitle                    func(o *TxsdRefentrytitle, enter bool)
	XsdGoPkgHasElems_Citation            func(o *XsdGoPkgHasElems_Citation, enter bool)
	TxsdItemizedlist                     func(o *TxsdItemizedlist, enter bool)
	XsdGoPkgHasElem_Country              func(o *XsdGoPkgHasElem_Country, enter bool)
	XsdGoPkgHasElem_Author               func(o *XsdGoPkgHasElem_Author, enter bool)
	TxsdInlineequation                   func(o *TxsdInlineequation, enter bool)
	XsdGoPkgHasElem_Lineage              func(o *XsdGoPkgHasElem_Lineage, enter bool)
	XsdGoPkgHasElem_Refclass             func(o *XsdGoPkgHasElem_Refclass, enter bool)
	TxsdFieldsynopsis                    func(o *TxsdFieldsynopsis, enter bool)
	XsdGoPkgHasElem_Firstterm            func(o *XsdGoPkgHasElem_Firstterm, enter bool)
	XsdGoPkgHasElem_Markup               func(o *XsdGoPkgHasElem_Markup, enter bool)
	XsdGoPkgHasElems_Arc                 func(o *XsdGoPkgHasElems_Arc, enter bool)
	XsdGoPkgHasElems_Lineannotation      func(o *XsdGoPkgHasElems_Lineannotation, enter bool)
	XsdGoPkgHasElem_Secondaryie          func(o *XsdGoPkgHasElem_Secondaryie, enter bool)
	XsdGoPkgHasElem_Informaltable        func(o *XsdGoPkgHasElem_Informaltable, enter bool)
	XsdGoPkgHasElems_Msgmain             func(o *XsdGoPkgHasElems_Msgmain, enter bool)
	XsdGoPkgHasElems_Tip                 func(o *XsdGoPkgHasElems_Tip, enter bool)
	TxsdRevhistory                       func(o *TxsdRevhistory, enter bool)
	TxsdMsgentry                         func(o *TxsdMsgentry, enter bool)
	XsdGoPkgHasElems_Keycombo            func(o *XsdGoPkgHasElems_Keycombo, enter bool)
	XsdGoPkgHasElem_Cmdsynopsis          func(o *XsdGoPkgHasElem_Cmdsynopsis, enter bool)
	XsdGoPkgHasElems_Methodsynopsis      func(o *XsdGoPkgHasElems_Methodsynopsis, enter bool)
	XsdGoPkgHasElems_Citetitle           func(o *XsdGoPkgHasElems_Citetitle, enter bool)
	XsdGoPkgHasElems_Orderedlist         func(o *XsdGoPkgHasElems_Orderedlist, enter bool)
	XsdGoPkgHasElem_Link                 func(o *XsdGoPkgHasElem_Link, enter bool)
	XsdGoPkgHasElem_Abstract             func(o *XsdGoPkgHasElem_Abstract, enter bool)
	XsdGoPkgHasElem_Informalexample      func(o *XsdGoPkgHasElem_Informalexample, enter bool)
	XsdGoPkgHasElem_Screen               func(o *XsdGoPkgHasElem_Screen, enter bool)
	TxsdListitem                         func(o *TxsdListitem, enter bool)
	XsdGoPkgHasElem_Guisubmenu           func(o *XsdGoPkgHasElem_Guisubmenu, enter bool)
	XsdGoPkgHasElems_Indexdiv            func(o *XsdGoPkgHasElems_Indexdiv, enter bool)
	TxsdQuote                            func(o *TxsdQuote, enter bool)
	XsdGoPkgHasElems_Itermset            func(o *XsdGoPkgHasElems_Itermset, enter bool)
	TxsdEmphasis                         func(o *TxsdEmphasis, enter bool)
	TxsdNonterminal                      func(o *TxsdNonterminal, enter bool)
	TxsdSect4                            func(o *TxsdSect4, enter bool)
	TxsdTgroup                           func(o *TxsdTgroup, enter bool)
	XsdGoPkgHasElem_Refdescriptor        func(o *XsdGoPkgHasElem_Refdescriptor, enter bool)
	XsdGoPkgHasElem_Seealso              func(o *XsdGoPkgHasElem_Seealso, enter bool)
	XsdGoPkgHasElem_Varname              func(o *XsdGoPkgHasElem_Varname, enter bool)
	TxsdReplaceable                      func(o *TxsdReplaceable, enter bool)
	XsdGoPkgHasElems_Indexterm           func(o *XsdGoPkgHasElems_Indexterm, enter bool)
	XsdGoPkgHasElem_Imagedata            func(o *XsdGoPkgHasElem_Imagedata, enter bool)
	XsdGoPkgHasElem_Refnamediv           func(o *XsdGoPkgHasElem_Refnamediv, enter bool)
	XsdGoPkgHasElem_Seealsoie            func(o *XsdGoPkgHasElem_Seealsoie, enter bool)
	XsdGoPkgHasElems_Artpagenums         func(o *XsdGoPkgHasElems_Artpagenums, enter bool)
	XsdGoPkgHasElems_Informalequation    func(o *XsdGoPkgHasElems_Informalequation, enter bool)
	XsdGoPkgHasElems_Cmdsynopsis         func(o *XsdGoPkgHasElems_Cmdsynopsis, enter bool)
	XsdGoPkgHasElem_Constant             func(o *XsdGoPkgHasElem_Constant, enter bool)
	TxsdSet                              func(o *TxsdSet, enter bool)
	XsdGoPkgHasElem_Programlisting       func(o *XsdGoPkgHasElem_Programlisting, enter bool)
	XsdGoPkgHasElem_Anchor               func(o *XsdGoPkgHasElem_Anchor, enter bool)
	XsdGoPkgHasElem_Area                 func(o *XsdGoPkgHasElem_Area, enter bool)
	XsdGoPkgHasElems_Refclass            func(o *XsdGoPkgHasElems_Refclass, enter bool)
	TxsdQandaentry                       func(o *TxsdQandaentry, enter bool)
	XsdGoPkgHasElem_Itemizedlist         func(o *XsdGoPkgHasElem_Itemizedlist, enter bool)
	TxsdBiblioset                        func(o *TxsdBiblioset, enter bool)
	XsdGoPkgHasElems_Uri                 func(o *XsdGoPkgHasElems_Uri, enter bool)
	TxsdVoid                             func(o *TxsdVoid, enter bool)
	XsdGoPkgHasElems_Ooclass             func(o *XsdGoPkgHasElems_Ooclass, enter bool)
	XsdGoPkgHasElems_Filename            func(o *XsdGoPkgHasElems_Filename, enter bool)
	TxsdParamdef                         func(o *TxsdParamdef, enter bool)
	XsdGoPkgHasElem_Refsection           func(o *XsdGoPkgHasElem_Refsection, enter bool)
	TxsdLink                             func(o *TxsdLink, enter bool)
	XsdGoPkgHasElems_Modifier            func(o *XsdGoPkgHasElems_Modifier, enter bool)
	XsdGoPkgHasElem_Edition              func(o *XsdGoPkgHasElem_Edition, enter bool)
	XsdGoPkgHasElem_Artpagenums          func(o *XsdGoPkgHasElem_Artpagenums, enter bool)
	XsdGoPkgHasElem_Subtitle             func(o *XsdGoPkgHasElem_Subtitle, enter bool)
	TxsdKeycombo                         func(o *TxsdKeycombo, enter bool)
	XsdGoPkgHasElems_Sect5               func(o *XsdGoPkgHasElems_Sect5, enter bool)
	XsdGoPkgHasElem_Sect4                func(o *XsdGoPkgHasElem_Sect4, enter bool)
	XsdGoPkgHasElems_Tag                 func(o *XsdGoPkgHasElems_Tag, enter bool)
	TxsdRefclass                         func(o *TxsdRefclass, enter bool)
	XsdGoPkgHasElem_Videodata            func(o *XsdGoPkgHasElem_Videodata, enter bool)
	XsdGoPkgHasElems_Contrib             func(o *XsdGoPkgHasElems_Contrib, enter bool)
	XsdGoPkgHasElems_Simplemsgentry      func(o *XsdGoPkgHasElems_Simplemsgentry, enter bool)
	XsdGoPkgHasElem_Replaceable          func(o *XsdGoPkgHasElem_Replaceable, enter bool)
	XsdGoPkgHasElem_Street               func(o *XsdGoPkgHasElem_Street, enter bool)
	TxsdBridgehead                       func(o *TxsdBridgehead, enter bool)
	XsdGoPkgHasElems_Address             func(o *XsdGoPkgHasElems_Address, enter bool)
	TxsdDestructorsynopsis               func(o *TxsdDestructorsynopsis, enter bool)
	XsdGoPkgHasElems_Personname          func(o *XsdGoPkgHasElems_Personname, enter bool)
	XsdGoPkgHasElem_Confgroup            func(o *XsdGoPkgHasElem_Confgroup, enter bool)
	TxsdVideoobject                      func(o *TxsdVideoobject, enter bool)
	XsdGoPkgHasElems_Sect3               func(o *XsdGoPkgHasElems_Sect3, enter bool)
	XsdGoPkgHasElem_Bibliomset           func(o *XsdGoPkgHasElem_Bibliomset, enter bool)
	XsdGoPkgHasElem_Otheraddr            func(o *XsdGoPkgHasElem_Otheraddr, enter bool)
	TxsdAuthorgroup                      func(o *TxsdAuthorgroup, enter bool)
	TxsdIndexentry                       func(o *TxsdIndexentry, enter bool)
	TxsdLocator                          func(o *TxsdLocator, enter bool)
	XsdGoPkgHasElem_Procedure            func(o *XsdGoPkgHasElem_Procedure, enter bool)
	XsdGoPkgHasElems_Jobtitle            func(o *XsdGoPkgHasElems_Jobtitle, enter bool)
	TxsdTrademark                        func(o *TxsdTrademark, enter bool)
	XsdGoPkgHasElem_Funcprototype        func(o *XsdGoPkgHasElem_Funcprototype, enter bool)
	XsdGoPkgHasElems_Co                  func(o *XsdGoPkgHasElems_Co, enter bool)
	XsdGoPkgHasElem_Inlinemediaobject    func(o *XsdGoPkgHasElem_Inlinemediaobject, enter bool)
	XsdGoPkgHasCdata                     func(o *XsdGoPkgHasCdata, enter bool)
	XsdGoPkgHasElems_Variablelist        func(o *XsdGoPkgHasElems_Variablelist, enter bool)
	XsdGoPkgHasElem_Article              func(o *XsdGoPkgHasElem_Article, enter bool)
	XsdGoPkgHasElems_Quote               func(o *XsdGoPkgHasElems_Quote, enter bool)
	XsdGoPkgHasElems_Itemizedlist        func(o *XsdGoPkgHasElems_Itemizedlist, enter bool)
	XsdGoPkgHasElems_Colspec             func(o *XsdGoPkgHasElems_Colspec, enter bool)
	TxsdRhs                              func(o *TxsdRhs, enter bool)
	XsdGoPkgHasElem_Menuchoice           func(o *XsdGoPkgHasElem_Menuchoice, enter bool)
	XsdGoPkgHasElems_Trademark           func(o *XsdGoPkgHasElems_Trademark, enter bool)
	XsdGoPkgHasElem_Funcdef              func(o *XsdGoPkgHasElem_Funcdef, enter bool)
	XsdGoPkgHasElems_Primaryie           func(o *XsdGoPkgHasElems_Primaryie, enter bool)
	XsdGoPkgHasElem_Org                  func(o *XsdGoPkgHasElem_Org, enter bool)
	XsdGoPkgHasElems_Extendedlink        func(o *XsdGoPkgHasElems_Extendedlink, enter bool)
	TxsdSect3                            func(o *TxsdSect3, enter bool)
	TxsdPartintro                        func(o *TxsdPartintro, enter bool)
	XsdGoPkgHasElem_Tocdiv               func(o *XsdGoPkgHasElem_Tocdiv, enter bool)
	XsdGoPkgHasElem_Tr                   func(o *XsdGoPkgHasElem_Tr, enter bool)
	TxsdGlossary                         func(o *TxsdGlossary, enter bool)
	TxsdStepalternatives                 func(o *TxsdStepalternatives, enter bool)
	XsdGoPkgHasElems_Confsponsor         func(o *XsdGoPkgHasElems_Confsponsor, enter bool)
	TxsdFuncdef                          func(o *TxsdFuncdef, enter bool)
	XsdGoPkgHasElem_See                  func(o *XsdGoPkgHasElem_See, enter bool)
	XsdGoPkgHasElems_Keysym              func(o *XsdGoPkgHasElems_Keysym, enter bool)
	XsdGoPkgHasElems_Production          func(o *XsdGoPkgHasElems_Production, enter bool)
	XsdGoPkgHasElems_Glossentry          func(o *XsdGoPkgHasElems_Glossentry, enter bool)
	XsdGoPkgHasElems_Annotation          func(o *XsdGoPkgHasElems_Annotation, enter bool)
	XsdGoPkgHasElems_Nonterminal         func(o *XsdGoPkgHasElems_Nonterminal, enter bool)
	XsdGoPkgHasElem_Imageobjectco        func(o *XsdGoPkgHasElem_Imageobjectco, enter bool)
	XsdGoPkgHasElems_Equation            func(o *XsdGoPkgHasElems_Equation, enter bool)
	XsdGoPkgHasElems_Foreignphrase       func(o *XsdGoPkgHasElems_Foreignphrase, enter bool)
	TxsdGlossdiv                         func(o *TxsdGlossdiv, enter bool)
	XsdGoPkgHasElems_Tbody               func(o *XsdGoPkgHasElems_Tbody, enter bool)
	XsdGoPkgHasElems_Preface             func(o *XsdGoPkgHasElems_Preface, enter bool)
	XsdGoPkgHasElem_Bibliosource         func(o *XsdGoPkgHasElem_Bibliosource, enter bool)
	XsdGoPkgHasElem_Conftitle            func(o *XsdGoPkgHasElem_Conftitle, enter bool)
	XsdGoPkgHasElems_Note                func(o *XsdGoPkgHasElems_Note, enter bool)
	XsdGoPkgHasElem_Part                 func(o *XsdGoPkgHasElem_Part, enter bool)
	XsdGoPkgHasElem_Revhistory           func(o *XsdGoPkgHasElem_Revhistory, enter bool)
	XsdGoPkgHasElems_Msglevel            func(o *XsdGoPkgHasElems_Msglevel, enter bool)
	XsdGoPkgHasElems_Refsection          func(o *XsdGoPkgHasElems_Refsection, enter bool)
	TxsdArg                              func(o *TxsdArg, enter bool)
	TxsdAreaspec                         func(o *TxsdAreaspec, enter bool)
	XsdGoPkgHasElems_Initializer         func(o *XsdGoPkgHasElems_Initializer, enter bool)
	XsdGoPkgHasElems_Keywordset          func(o *XsdGoPkgHasElems_Keywordset, enter bool)
	TxsdArc                              func(o *TxsdArc, enter bool)
	XsdGoPkgHasElem_Note                 func(o *XsdGoPkgHasElem_Note, enter bool)
	XsdGoPkgHasElem_Caption              func(o *XsdGoPkgHasElem_Caption, enter bool)
	XsdGoPkgHasElems_Caution             func(o *XsdGoPkgHasElems_Caution, enter bool)
	XsdGoPkgHasElem_Contractsponsor      func(o *XsdGoPkgHasElem_Contractsponsor, enter bool)
	TxsdIndexdiv                         func(o *TxsdIndexdiv, enter bool)
	XsdGoPkgHasElem_Tbody                func(o *XsdGoPkgHasElem_Tbody, enter bool)
	XsdGoPkgHasElem_Programlistingco     func(o *XsdGoPkgHasElem_Programlistingco, enter bool)
	XsdGoPkgHasElem_Oointerface          func(o *XsdGoPkgHasElem_Oointerface, enter bool)
	XsdGoPkgHasElem_Imageobject          func(o *XsdGoPkgHasElem_Imageobject, enter bool)
	XsdGoPkgHasElems_Country             func(o *XsdGoPkgHasElems_Country, enter bool)
	XsdGoPkgHasElems_Authorgroup         func(o *XsdGoPkgHasElems_Authorgroup, enter bool)
	TxsdItermset                         func(o *TxsdItermset, enter bool)
	XsdGoPkgHasElems_Footnoteref         func(o *XsdGoPkgHasElems_Footnoteref, enter bool)
	XsdGoPkgHasElems_Paramdef            func(o *XsdGoPkgHasElems_Paramdef, enter bool)
	XsdGoPkgHasElems_Publisher           func(o *XsdGoPkgHasElems_Publisher, enter bool)
	XsdGoPkgHasElem_Rhs                  func(o *XsdGoPkgHasElem_Rhs, enter bool)
	XsdGoPkgHasElem_Filename             func(o *XsdGoPkgHasElem_Filename, enter bool)
	TxsdSymbol                           func(o *TxsdSymbol, enter bool)
	XsdGoPkgHasElems_Section             func(o *XsdGoPkgHasElems_Section, enter bool)
	XsdGoPkgHasElems_Personblurb         func(o *XsdGoPkgHasElems_Personblurb, enter bool)
	XsdGoPkgHasElem_Citerefentry         func(o *XsdGoPkgHasElem_Citerefentry, enter bool)
	XsdGoPkgHasElems_Biblioset           func(o *XsdGoPkgHasElems_Biblioset, enter bool)
	TxsdCover                            func(o *TxsdCover, enter bool)
	XsdGoPkgHasElem_Quote                func(o *XsdGoPkgHasElem_Quote, enter bool)
	TxsdTitleabbrev                      func(o *TxsdTitleabbrev, enter bool)
	XsdGoPkgHasElem_Funcparams           func(o *XsdGoPkgHasElem_Funcparams, enter bool)
	XsdGoPkgHasElems_Holder              func(o *XsdGoPkgHasElems_Holder, enter bool)
	XsdGoPkgHasElem_Lhs                  func(o *XsdGoPkgHasElem_Lhs, enter bool)
	TxsdReference                        func(o *TxsdReference, enter bool)
	XsdGoPkgHasElems_Tr                  func(o *XsdGoPkgHasElems_Tr, enter bool)
	XsdGoPkgHasElem_Msginfo              func(o *XsdGoPkgHasElem_Msginfo, enter bool)
	XsdGoPkgHasElems_Subjectterm         func(o *XsdGoPkgHasElems_Subjectterm, enter bool)
	XsdGoPkgHasElems_State               func(o *XsdGoPkgHasElems_State, enter bool)
	XsdGoPkgHasElem_Package              func(o *XsdGoPkgHasElem_Package, enter bool)
	XsdGoPkgHasElem_Errortype            func(o *XsdGoPkgHasElem_Errortype, enter bool)
	XsdGoPkgHasElem_Methodname           func(o *XsdGoPkgHasElem_Methodname, enter bool)
	TxsdRefmiscinfo                      func(o *TxsdRefmiscinfo, enter bool)
	XsdGoPkgHasElem_Token                func(o *XsdGoPkgHasElem_Token, enter bool)
	TxsdEntrytbl                         func(o *TxsdEntrytbl, enter bool)
	TxsdRefsect1                         func(o *TxsdRefsect1, enter bool)
	XsdGoPkgHasElems_Funcsynopsisinfo    func(o *XsdGoPkgHasElems_Funcsynopsisinfo, enter bool)
	XsdGoPkgHasElems_Thead               func(o *XsdGoPkgHasElems_Thead, enter bool)
	XsdGoPkgHasElem_Acronym              func(o *XsdGoPkgHasElem_Acronym, enter bool)
	XsdGoPkgHasElem_Constraintdef        func(o *XsdGoPkgHasElem_Constraintdef, enter bool)
	XsdGoPkgHasElems_Subject             func(o *XsdGoPkgHasElems_Subject, enter bool)
	XsdGoPkgHasElems_Sect1               func(o *XsdGoPkgHasElems_Sect1, enter bool)
	TxsdSimplelist                       func(o *TxsdSimplelist, enter bool)
	XsdGoPkgHasElems_Keycode             func(o *XsdGoPkgHasElems_Keycode, enter bool)
	XsdGoPkgHasElem_Refmiscinfo          func(o *XsdGoPkgHasElem_Refmiscinfo, enter bool)
	XsdGoPkgHasElems_Surname             func(o *XsdGoPkgHasElems_Surname, enter bool)
	XsdGoPkgHasElems_Textobject          func(o *XsdGoPkgHasElems_Textobject, enter bool)
	XsdGoPkgHasElems_Inlineequation      func(o *XsdGoPkgHasElems_Inlineequation, enter bool)
	XsdGoPkgHasElem_Nonterminal          func(o *XsdGoPkgHasElem_Nonterminal, enter bool)
	XsdGoPkgHasElem_Printhistory         func(o *XsdGoPkgHasElem_Printhistory, enter bool)
	TxsdWordasword                       func(o *TxsdWordasword, enter bool)
	XsdGoPkgHasElem_Classsynopsis        func(o *XsdGoPkgHasElem_Classsynopsis, enter bool)
	TxsdGlossterm                        func(o *TxsdGlossterm, enter bool)
	XsdGoPkgHasElem_Tertiary             func(o *XsdGoPkgHasElem_Tertiary, enter bool)
	XsdGoPkgHasElems_Tgroup              func(o *XsdGoPkgHasElems_Tgroup, enter bool)
	XsdGoPkgHasElems_Cover               func(o *XsdGoPkgHasElems_Cover, enter bool)
	XsdGoPkgHasElem_Production           func(o *XsdGoPkgHasElem_Production, enter bool)
	XsdGoPkgHasElems_Anchor              func(o *XsdGoPkgHasElems_Anchor, enter bool)
	XsdGoPkgHasElem_Sect3                func(o *XsdGoPkgHasElem_Sect3, enter bool)
	TxsdFuncprototype                    func(o *TxsdFuncprototype, enter bool)
	XsdGoPkgHasElems_Publishername       func(o *XsdGoPkgHasElems_Publishername, enter bool)
	XsdGoPkgHasElem_Acknowledgements     func(o *XsdGoPkgHasElem_Acknowledgements, enter bool)
	XsdGoPkgHasElems_Table               func(o *XsdGoPkgHasElems_Table, enter bool)
	XsdGoPkgHasElems_Postcode            func(o *XsdGoPkgHasElems_Postcode, enter bool)
	XsdGoPkgHasElem_Jobtitle             func(o *XsdGoPkgHasElem_Jobtitle, enter bool)
	XsdGoPkgHasElems_Varlistentry        func(o *XsdGoPkgHasElems_Varlistentry, enter bool)
	XsdGoPkgHasElem_Textobject           func(o *XsdGoPkgHasElem_Textobject, enter bool)
	XsdGoPkgHasElems_Seeie               func(o *XsdGoPkgHasElems_Seeie, enter bool)
	XsdGoPkgHasElems_Arg                 func(o *XsdGoPkgHasElems_Arg, enter bool)
	XsdGoPkgHasElem_Phone                func(o *XsdGoPkgHasElem_Phone, enter bool)
	XsdGoPkgHasElems_Bibliomisc          func(o *XsdGoPkgHasElems_Bibliomisc, enter bool)
	TxsdCol                              func(o *TxsdCol, enter bool)
	XsdGoPkgHasElem_Keysym               func(o *XsdGoPkgHasElem_Keysym, enter bool)
	XsdGoPkgHasElem_Figure               func(o *XsdGoPkgHasElem_Figure, enter bool)
	XsdGoPkgHasElems_Subscript           func(o *XsdGoPkgHasElems_Subscript, enter bool)
	XsdGoPkgHasElems_Callout             func(o *XsdGoPkgHasElems_Callout, enter bool)
	TxsdColgroup                         func(o *TxsdColgroup, enter bool)
	TxsdBook                             func(o *TxsdBook, enter bool)
	TxsdSetindex                         func(o *TxsdSetindex, enter bool)
	TxsdProductname                      func(o *TxsdProductname, enter bool)
	XsdGoPkgHasElems_Tasksummary         func(o *XsdGoPkgHasElems_Tasksummary, enter bool)
	TxsdInlinemediaobject                func(o *TxsdInlinemediaobject, enter bool)
	XsdGoPkgHasElem_Member               func(o *XsdGoPkgHasElem_Member, enter bool)
	XsdGoPkgHasElem_Appendix             func(o *XsdGoPkgHasElem_Appendix, enter bool)
	TxsdSect2                            func(o *TxsdSect2, enter bool)
	XsdGoPkgHasElems_Void                func(o *XsdGoPkgHasElems_Void, enter bool)
	XsdGoPkgHasElem_Title                func(o *XsdGoPkgHasElem_Title, enter bool)
	TxsdPrompt                           func(o *TxsdPrompt, enter bool)
	TxsdSpanspec                         func(o *TxsdSpanspec, enter bool)
	XsdGoPkgHasElems_Segmentedlist       func(o *XsdGoPkgHasElems_Segmentedlist, enter bool)
	XsdGoPkgHasElems_Option              func(o *XsdGoPkgHasElems_Option, enter bool)
	TxsdFuncsynopsis                     func(o *TxsdFuncsynopsis, enter bool)
	XsdGoPkgHasElem_Extendedlink         func(o *XsdGoPkgHasElem_Extendedlink, enter bool)
	XsdGoPkgHasElem_Termdef              func(o *XsdGoPkgHasElem_Termdef, enter bool)
	TxsdCode                             func(o *TxsdCode, enter bool)
	XsdGoPkgHasElems_Prompt              func(o *XsdGoPkgHasElems_Prompt, enter bool)
	XsdGoPkgHasElem_Msglevel             func(o *XsdGoPkgHasElem_Msglevel, enter bool)
	XsdGoPkgHasElems_Colgroup            func(o *XsdGoPkgHasElems_Colgroup, enter bool)
	TxsdPerson                           func(o *TxsdPerson, enter bool)
	XsdGoPkgHasElem_Email                func(o *XsdGoPkgHasElem_Email, enter bool)
	XsdGoPkgHasElem_Command              func(o *XsdGoPkgHasElem_Command, enter bool)
	XsdGoPkgHasElem_Arc                  func(o *XsdGoPkgHasElem_Arc, enter bool)
	TxsdTfoot                            func(o *TxsdTfoot, enter bool)
	XsdGoPkgHasElem_Tertiaryie           func(o *XsdGoPkgHasElem_Tertiaryie, enter bool)
	XsdGoPkgHasElems_Refmiscinfo         func(o *XsdGoPkgHasElems_Refmiscinfo, enter bool)
	XsdGoPkgHasElems_Copyright           func(o *XsdGoPkgHasElems_Copyright, enter bool)
	XsdGoPkgHasElem_Fax                  func(o *XsdGoPkgHasElem_Fax, enter bool)
	XsdGoPkgHasElems_Constructorsynopsis func(o *XsdGoPkgHasElems_Constructorsynopsis, enter bool)
	XsdGoPkgHasElem_Shortcut             func(o *XsdGoPkgHasElem_Shortcut, enter bool)
	XsdGoPkgHasElems_Bibliorelation      func(o *XsdGoPkgHasElems_Bibliorelation, enter bool)
	XsdGoPkgHasElems_Tertiary            func(o *XsdGoPkgHasElems_Tertiary, enter bool)
	XsdGoPkgHasElems_Toc                 func(o *XsdGoPkgHasElems_Toc, enter bool)
	XsdGoPkgHasElem_Screenshot           func(o *XsdGoPkgHasElem_Screenshot, enter bool)
	XsdGoPkgHasElems_Footnote            func(o *XsdGoPkgHasElems_Footnote, enter bool)
	XsdGoPkgHasElem_Synopsis             func(o *XsdGoPkgHasElem_Synopsis, enter bool)
	TxsdRefsynopsisdiv                   func(o *TxsdRefsynopsisdiv, enter bool)
	XsdGoPkgHasElems_Emphasis            func(o *XsdGoPkgHasElems_Emphasis, enter bool)
	XsdGoPkgHasElems_Biblioentry         func(o *XsdGoPkgHasElems_Biblioentry, enter bool)
	TxsdConfgroup                        func(o *TxsdConfgroup, enter bool)
	XsdGoPkgHasElem_Preface              func(o *XsdGoPkgHasElem_Preface, enter bool)
	TxsdQuestion                         func(o *TxsdQuestion, enter bool)
	XsdGoPkgHasElems_Glossary            func(o *XsdGoPkgHasElems_Glossary, enter bool)
	XsdGoPkgHasElem_Othercredit          func(o *XsdGoPkgHasElem_Othercredit, enter bool)
	XsdGoPkgHasElems_Package             func(o *XsdGoPkgHasElems_Package, enter bool)
	XsdGoPkgHasElems_Label               func(o *XsdGoPkgHasElems_Label, enter bool)
	XsdGoPkgHasElem_Row                  func(o *XsdGoPkgHasElem_Row, enter bool)
	XsdGoPkgHasElem_Td                   func(o *XsdGoPkgHasElem_Td, enter bool)
	TxsdInformalfigure                   func(o *TxsdInformalfigure, enter bool)
	XsdGoPkgHasElem_Varargs              func(o *XsdGoPkgHasElem_Varargs, enter bool)
	XsdGoPkgHasElem_Initializer          func(o *XsdGoPkgHasElem_Initializer, enter bool)
	TxsdCalloutlist                      func(o *TxsdCalloutlist, enter bool)
	XsdGoPkgHasElem_Simplesect           func(o *XsdGoPkgHasElem_Simplesect, enter bool)
	TxsdGlossentry                       func(o *TxsdGlossentry, enter bool)
	TxsdBlockquote                       func(o *TxsdBlockquote, enter bool)
	XsdGoPkgHasElem_Guilabel             func(o *XsdGoPkgHasElem_Guilabel, enter bool)
	XsdGoPkgHasElems_Command             func(o *XsdGoPkgHasElems_Command, enter bool)
	TxsdCitetitle                        func(o *TxsdCitetitle, enter bool)
	TxsdMsgmain                          func(o *TxsdMsgmain, enter bool)
	XsdGoPkgHasElem_Orgdiv               func(o *XsdGoPkgHasElem_Orgdiv, enter bool)
	XsdGoPkgHasElems_Confdates           func(o *XsdGoPkgHasElems_Confdates, enter bool)
	XsdGoPkgHasElems_Sect4               func(o *XsdGoPkgHasElems_Sect4, enter bool)
	XsdGoPkgHasElems_Title               func(o *XsdGoPkgHasElems_Title, enter bool)
	XsdGoPkgHasElem_Biblioid             func(o *XsdGoPkgHasElem_Biblioid, enter bool)
	XsdGoPkgHasElem_Index                func(o *XsdGoPkgHasElem_Index, enter bool)
	XsdGoPkgHasElems_Revnumber           func(o *XsdGoPkgHasElems_Revnumber, enter bool)
	XsdGoPkgHasElem_Refsect1             func(o *XsdGoPkgHasElem_Refsect1, enter bool)
	XsdGoPkgHasElem_Dedication           func(o *XsdGoPkgHasElem_Dedication, enter bool)
	XsdGoPkgHasElems_Lineage             func(o *XsdGoPkgHasElems_Lineage, enter bool)
	XsdGoPkgHasElem_Informalfigure       func(o *XsdGoPkgHasElem_Informalfigure, enter bool)
	XsdGoPkgHasElem_Callout              func(o *XsdGoPkgHasElem_Callout, enter bool)
	XsdGoPkgHasElems_Calloutlist         func(o *XsdGoPkgHasElems_Calloutlist, enter bool)
	XsdGoPkgHasElems_Msgsub              func(o *XsdGoPkgHasElems_Msgsub, enter bool)
	XsdGoPkgHasElems_Task                func(o *XsdGoPkgHasElems_Task, enter bool)
	TxsdOoclass                          func(o *TxsdOoclass, enter bool)
	XsdGoPkgHasElem_Errortext            func(o *XsdGoPkgHasElem_Errortext, enter bool)
	XsdGoPkgHasElem_Setindex             func(o *XsdGoPkgHasElem_Setindex, enter bool)
	XsdGoPkgHasElems_Contractsponsor     func(o *XsdGoPkgHasElems_Contractsponsor, enter bool)
	TxsdProcedure                        func(o *TxsdProcedure, enter bool)
	XsdGoPkgHasElems_Contractnum         func(o *XsdGoPkgHasElems_Contractnum, enter bool)
	XsdGoPkgHasElems_Coref               func(o *XsdGoPkgHasElems_Coref, enter bool)
	XsdGoPkgHasElem_Funcsynopsisinfo     func(o *XsdGoPkgHasElem_Funcsynopsisinfo, enter bool)
	XsdGoPkgHasElem_Wordasword           func(o *XsdGoPkgHasElem_Wordasword, enter bool)
	XsdGoPkgHasElem_Chapter              func(o *XsdGoPkgHasElem_Chapter, enter bool)
	TxsdBiblioentry                      func(o *TxsdBiblioentry, enter bool)
	XsdGoPkgHasElem_Synopfragment        func(o *XsdGoPkgHasElem_Synopfragment, enter bool)
	XsdGoPkgHasElem_Confnum              func(o *XsdGoPkgHasElem_Confnum, enter bool)
	XsdGoPkgHasElems_Editor              func(o *XsdGoPkgHasElems_Editor, enter bool)
	TxsdToc                              func(o *TxsdToc, enter bool)
	XsdGoPkgHasElem_Pob                  func(o *XsdGoPkgHasElem_Pob, enter bool)
	XsdGoPkgHasElem_Citation             func(o *XsdGoPkgHasElem_Citation, enter bool)
	XsdGoPkgHasElems_Computeroutput      func(o *XsdGoPkgHasElems_Computeroutput, enter bool)
	XsdGoPkgHasElems_Sbr                 func(o *XsdGoPkgHasElems_Sbr, enter bool)
	XsdGoPkgHasElem_Tag                  func(o *XsdGoPkgHasElem_Tag, enter bool)
	XsdGoPkgHasElems_Seglistitem         func(o *XsdGoPkgHasElems_Seglistitem, enter bool)
	XsdGoPkgHasElems_Productionset       func(o *XsdGoPkgHasElems_Productionset, enter bool)
	XsdGoPkgHasElems_Qandaentry          func(o *XsdGoPkgHasElems_Qandaentry, enter bool)
	XsdGoPkgHasElem_Col                  func(o *XsdGoPkgHasElem_Col, enter bool)
	XsdGoPkgHasElem_Productnumber        func(o *XsdGoPkgHasElem_Productnumber, enter bool)
	TxsdBibliosource                     func(o *TxsdBibliosource, enter bool)
	TxsdPublisher                        func(o *TxsdPublisher, enter bool)
	XsdGoPkgHasElem_Warning              func(o *XsdGoPkgHasElem_Warning, enter bool)
	TxsdTh                               func(o *TxsdTh, enter bool)
	XsdGoPkgHasElem_Legalnotice          func(o *XsdGoPkgHasElem_Legalnotice, enter bool)
	XsdGoPkgHasElem_Glosslist            func(o *XsdGoPkgHasElem_Glosslist, enter bool)
	XsdGoPkgHasElem_Info                 func(o *XsdGoPkgHasElem_Info, enter bool)
	TxsdGlosslist                        func(o *TxsdGlosslist, enter bool)
	XsdGoPkgHasElems_Person              func(o *XsdGoPkgHasElems_Person, enter bool)
	XsdGoPkgHasElem_State                func(o *XsdGoPkgHasElem_State, enter bool)
	XsdGoPkgHasElem_Optional             func(o *XsdGoPkgHasElem_Optional, enter bool)
	XsdGoPkgHasElems_Th                  func(o *XsdGoPkgHasElems_Th, enter bool)
	TxsdSimplemsgentry                   func(o *TxsdSimplemsgentry, enter bool)
	XsdGoPkgHasElem_Keyword              func(o *XsdGoPkgHasElem_Keyword, enter bool)
	XsdGoPkgHasElems_Otheraddr           func(o *XsdGoPkgHasElems_Otheraddr, enter bool)
	TxsdProgramlistingco                 func(o *TxsdProgramlistingco, enter bool)
	XsdGoPkgHasElem_Itermset             func(o *XsdGoPkgHasElem_Itermset, enter bool)
	TxsdAddress                          func(o *TxsdAddress, enter bool)
	XsdGoPkgHasElems_Mathphrase          func(o *XsdGoPkgHasElems_Mathphrase, enter bool)
	XsdGoPkgHasElems_Glossdiv            func(o *XsdGoPkgHasElems_Glossdiv, enter bool)
	XsdGoPkgHasElems_Step                func(o *XsdGoPkgHasElems_Step, enter bool)
	XsdGoPkgHasElems_Subjectset          func(o *XsdGoPkgHasElems_Subjectset, enter bool)
	XsdGoPkgHasElem_Subject              func(o *XsdGoPkgHasElem_Subject, enter bool)
	XsdGoPkgHasElem_Glosssee             func(o *XsdGoPkgHasElem_Glosssee, enter bool)
	XsdGoPkgHasElems_Classsynopsis       func(o *XsdGoPkgHasElems_Classsynopsis, enter bool)
	XsdGoPkgHasElem_Keycode              func(o *XsdGoPkgHasElem_Keycode, enter bool)
	XsdGoPkgHasElem_Secondary            func(o *XsdGoPkgHasElem_Secondary, enter bool)
	TxsdFuncsynopsisinfo                 func(o *TxsdFuncsynopsisinfo, enter bool)
	TxsdScreenshot                       func(o *TxsdScreenshot, enter bool)
	TxsdMsgtext                          func(o *TxsdMsgtext, enter bool)
	XsdGoPkgHasElem_Void                 func(o *XsdGoPkgHasElem_Void, enter bool)
	XsdGoPkgHasElems_Function            func(o *XsdGoPkgHasElems_Function, enter bool)
	TxsdArticle                          func(o *TxsdArticle, enter bool)
	TxsdRefentry                         func(o *TxsdRefentry, enter bool)
	XsdGoPkgHasElems_Refnamediv          func(o *XsdGoPkgHasElems_Refnamediv, enter bool)
	TxsdCitebiblioid                     func(o *TxsdCitebiblioid, enter bool)
	XsdGoPkgHasElems_Question            func(o *XsdGoPkgHasElems_Question, enter bool)
	XsdGoPkgHasElem_Example              func(o *XsdGoPkgHasElem_Example, enter bool)
	XsdGoPkgHasElems_Biblioid            func(o *XsdGoPkgHasElems_Biblioid, enter bool)
	TxsdCallout                          func(o *TxsdCallout, enter bool)
	XsdGoPkgHasElem_Glossseealso         func(o *XsdGoPkgHasElem_Glossseealso, enter bool)
	TxsdConstraintdef                    func(o *TxsdConstraintdef, enter bool)
	XsdGoPkgHasElems_Constant            func(o *XsdGoPkgHasElems_Constant, enter bool)
	XsdGoPkgHasElem_Lineannotation       func(o *XsdGoPkgHasElem_Lineannotation, enter bool)
	TxsdForeignphrase                    func(o *TxsdForeignphrase, enter bool)
	XsdGoPkgHasElems_Setindex            func(o *XsdGoPkgHasElems_Setindex, enter bool)
	XsdGoPkgHasElem_Paramdef             func(o *XsdGoPkgHasElem_Paramdef, enter bool)
	TxsdConstant                         func(o *TxsdConstant, enter bool)
	XsdGoPkgHasElems_Application         func(o *XsdGoPkgHasElems_Application, enter bool)
	TxsdFirstterm                        func(o *TxsdFirstterm, enter bool)
	XsdGoPkgHasElem_Spanspec             func(o *XsdGoPkgHasElem_Spanspec, enter bool)
	XsdGoPkgHasElem_Alt                  func(o *XsdGoPkgHasElem_Alt, enter bool)
	XsdGoPkgHasElems_Conftitle           func(o *XsdGoPkgHasElems_Conftitle, enter bool)
	XsdGoPkgHasElems_Tertiaryie          func(o *XsdGoPkgHasElems_Tertiaryie, enter bool)
	TxsdBibliomset                       func(o *TxsdBibliomset, enter bool)
	XsdGoPkgHasElems_Programlistingco    func(o *XsdGoPkgHasElems_Programlistingco, enter bool)
	XsdGoPkgHasElem_Errorcode            func(o *XsdGoPkgHasElem_Errorcode, enter bool)
	XsdGoPkgHasElems_Bibliodiv           func(o *XsdGoPkgHasElems_Bibliodiv, enter bool)
	XsdGoPkgHasElem_Thead                func(o *XsdGoPkgHasElem_Thead, enter bool)
	XsdGoPkgHasElems_Bibliomset          func(o *XsdGoPkgHasElems_Bibliomset, enter bool)
	TxsdCo                               func(o *TxsdCo, enter bool)
	TxsdClasssynopsisinfo                func(o *TxsdClasssynopsisinfo, enter bool)
	XsdGoPkgHasElem_Audiodata            func(o *XsdGoPkgHasElem_Audiodata, enter bool)
	TxsdImportant                        func(o *TxsdImportant, enter bool)
	TxsdOoexception                      func(o *TxsdOoexception, enter bool)
	XsdGoPkgHasElems_Mediaobject         func(o *XsdGoPkgHasElems_Mediaobject, enter bool)
	XsdGoPkgHasElem_Group                func(o *XsdGoPkgHasElem_Group, enter bool)
	XsdGoPkgHasElem_Emphasis             func(o *XsdGoPkgHasElem_Emphasis, enter bool)
	XsdGoPkgHasElem_Othername            func(o *XsdGoPkgHasElem_Othername, enter bool)
	TxsdTertiaryie                       func(o *TxsdTertiaryie, enter bool)
	XsdGoPkgHasElems_Pagenums            func(o *XsdGoPkgHasElems_Pagenums, enter bool)
	XsdGoPkgHasElem_Book                 func(o *XsdGoPkgHasElem_Book, enter bool)
	XsdGoPkgHasElems_Volumenum           func(o *XsdGoPkgHasElems_Volumenum, enter bool)
	XsdGoPkgHasElem_Qandaentry           func(o *XsdGoPkgHasElem_Qandaentry, enter bool)
	XsdGoPkgHasElems_Simpara             func(o *XsdGoPkgHasElems_Simpara, enter bool)
	TxsdProduction                       func(o *TxsdProduction, enter bool)
	TxsdTbody                            func(o *TxsdTbody, enter bool)
	TxsdOrg                              func(o *TxsdOrg, enter bool)
	XsdGoPkgHasElem_Titleabbrev          func(o *XsdGoPkgHasElem_Titleabbrev, enter bool)
	XsdGoPkgHasElems_Hardware            func(o *XsdGoPkgHasElems_Hardware, enter bool)
	XsdGoPkgHasElems_Substeps            func(o *XsdGoPkgHasElems_Substeps, enter bool)
	TxsdSynopfragment                    func(o *TxsdSynopfragment, enter bool)
	XsdGoPkgHasElems_Area                func(o *XsdGoPkgHasElems_Area, enter bool)
}
