//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		khronos.org/files/collada_schema_1_4
package go_Collada14

//	COLLADA Schema
//	Version 1.4.1 (June 23, 2006)
//	Copyright (C) 2005, 2006 The Khronos Group Inc., Sony Computer Entertainment Inc.
//	All Rights Reserved.
//	Khronos is a trademark of The Khronos Group Inc.
//	COLLADA is a trademark of Sony Computer Entertainment Inc. used by permission by Khronos.
//	Note that this software document is distributed on an "AS IS" basis, with ALL EXPRESS AND
//	IMPLIED WARRANTIES AND CONDITIONS DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED
//	WARRANTIES AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR
//	PURPOSE, AND NON-INFRINGEMENT.


import (
	xsdt "github.com/metaleap/go-xsd/types"
	xml "github.com/metaleap/go-xsd-pkg/www.w3.org/2001/03/xml.xsd_go"
)

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
//	The library_animations element declares a module of animation elements.
//	The asset element defines asset management information regarding its parent element.
//	The contributor element defines authoring information for asset management
//	The author element contains a string with the author's name.
//	There may be only one author element.
type XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ struct {
//	The author element contains a string with the author's name.
//	There may be only one author element.
	Author xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema author"`

}

//	If the W.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_; fn != nil { fn(me) }
 }

//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
type XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ struct {
//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
	Copyright xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema copyright"`

}

//	If the W.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ instance.
func (me *XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_; fn != nil { fn(me) }
 }

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
type XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ struct {
//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
	Comments xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema comments"`

}

//	If the W.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ instance.
func (me *XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_; fn != nil { fn(me) }
 }

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
type XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ struct {
//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
	AuthoringTool xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema authoring_tool"`

}

//	If the W.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_; fn != nil { fn(me) }
 }

//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
type XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ struct {
//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
	SourceData xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source_data"`

}

//	If the W.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_; fn != nil { fn(me) }
 }

type TxsdAssetSequenceContributor struct {
//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
	XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_

//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
	XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_

//	The author element contains a string with the author's name.
//	There may be only one author element.
	XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_

}

//	If the W.TxsdAssetSequenceContributor function is not nil (ie. was set by outside code), calls it with this TxsdAssetSequenceContributor instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdAssetSequenceContributor instance.
func (me *TxsdAssetSequenceContributor) Walk ()  { 
	if fn := W.TxsdAssetSequenceContributor; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_.Walk()
	me.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_.Walk()
	me.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_.Walk()
	me.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_.Walk()
	me.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_.Walk()
 }

type XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ struct {
//	The contributor element defines authoring information for asset management
	Contributors []*TxsdAssetSequenceContributor `xml:"http://www.collada.org/2005/11/COLLADASchema contributor"`

}

//	If the W.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ instance.
func (me *XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_; fn != nil { fn(me) }
	for _, x := range me.Contributors { x.Walk() }
 }

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
type XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ struct {
//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	Modified xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema modified"`

}

//	If the W.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_; fn != nil { fn(me) }
 }

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
type XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ struct {
//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
	Revision xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema revision"`

}

//	If the W.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ instance.
func (me *XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_; fn != nil { fn(me) }
 }

//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
type XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ struct {
//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
	Title xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema title"`

}

//	If the W.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_; fn != nil { fn(me) }
 }

//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
type XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ struct {
//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
	Subject xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema subject"`

}

//	If the W.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ instance.
func (me *XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_; fn != nil { fn(me) }
 }

//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
type XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ struct {
//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
	Keywords xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema keywords"`

}

//	If the W.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ instance.
func (me *XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_; fn != nil { fn(me) }
 }

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
type XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ struct {
//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	Created xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema created"`

}

//	If the W.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_; fn != nil { fn(me) }
 }

//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
type XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter struct {
//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
	Name xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

//	Returns the default value for Name -- "meter"
func (me XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter) NameDefault () xsdt.Nmtoken { return xsdt.Nmtoken("meter") }

//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
type Tfloat xsdt.Double

//	This convenience method just performs a simple type conversion to Tfloat's alias type xsdt.Double.
func (me Tfloat) ToXsdtDouble () xsdt.Double { return xsdt.Double(me) }

//	Since Tfloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tfloat) SetFromString (s string)  { (*xsdt.Double)(me).SetFromString(s) }

//	Returns a string representation of this Tfloat's current non-string scalar value.
func (me Tfloat) String () string { return xsdt.Double(me).String() }

type XsdGoPkgHasAttr_Meter_Tfloat_10 struct {
//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
	Meter Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema meter,attr"`

}

//	Returns the default value for Meter -- 1.0
func (me XsdGoPkgHasAttr_Meter_Tfloat_10) MeterDefault () Tfloat { return Tfloat(1.0) }

type TxsdAssetSequenceUnit struct {
//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
	XsdGoPkgHasAttr_Meter_Tfloat_10

//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
	XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter

}

//	If the W.TxsdAssetSequenceUnit function is not nil (ie. was set by outside code), calls it with this TxsdAssetSequenceUnit instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdAssetSequenceUnit instance.
func (me *TxsdAssetSequenceUnit) Walk ()  { 
	if fn := W.TxsdAssetSequenceUnit; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ struct {
//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
	Unit *TxsdAssetSequenceUnit `xml:"http://www.collada.org/2005/11/COLLADASchema unit"`

}

//	If the W.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ instance.
func (me *XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_; fn != nil { fn(me) }
	me.Unit.Walk()
 }

//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
//	An enumerated type specifying the acceptable up-axis values.
type TUpAxisType xsdt.String

//	This convenience method just performs a simple type conversion to TUpAxisType's alias type xsdt.String.
func (me TUpAxisType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TUpAxisType is "Z_UP".
func (me TUpAxisType) IsZUp () bool { return me == "Z_UP" }

//	Returns true if the value of this enumerated TUpAxisType is "Y_UP".
func (me TUpAxisType) IsYUp () bool { return me == "Y_UP" }

//	Returns true if the value of this enumerated TUpAxisType is "X_UP".
func (me TUpAxisType) IsXUp () bool { return me == "X_UP" }

//	Since TUpAxisType is just a simple String type, this merely sets the current value from the specified string.
func (me *TUpAxisType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TUpAxisType is just a simple String type, this merely returns the current string value.
func (me TUpAxisType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp struct {
//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	UpAxis TUpAxisType `xml:"http://www.collada.org/2005/11/COLLADASchema up_axis"`

}

//	If the W.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp instance.
func (me *XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp; fn != nil { fn(me) }
 }

//	Returns the default value for UpAxis -- "Y_UP"
func (me XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp) UpAxisDefault () TUpAxisType { return TUpAxisType("Y_UP") }

type TxsdAsset struct {
//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
	XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_

//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
	XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_

//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
	XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_

//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
	XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_

//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp

//	The contributor element defines authoring information for asset management
	XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
	XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_

}

//	If the W.TxsdAsset function is not nil (ie. was set by outside code), calls it with this TxsdAsset instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdAsset instance.
func (me *TxsdAsset) Walk ()  { 
	if fn := W.TxsdAsset; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_.Walk()
	me.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_.Walk()
	me.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_.Walk()
	me.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_.Walk()
	me.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_.Walk()
	me.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_.Walk()
	me.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp.Walk()
	me.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_.Walk()
	me.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_.Walk()
 }

type XsdGoPkgHasElem_Asset struct {
//	The asset element defines asset management information regarding its parent element.
	Asset *TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`

}

//	If the W.XsdGoPkgHasElem_Asset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Asset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Asset instance.
func (me *XsdGoPkgHasElem_Asset) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Asset; fn != nil { fn(me) }
	me.Asset.Walk()
 }

//	The extra element declares additional information regarding its parent element.
//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
type XsdGoPkgHasAttr_Type_XsdtNmtoken_ struct {
//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
	Type xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
type XsdGoPkgHasAttr_Profile_XsdtNmtoken_ struct {
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
	Profile xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`

}

type TxsdTechnique struct {
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
	XsdGoPkgHasAttr_Profile_XsdtNmtoken_

}

//	If the W.TxsdTechnique function is not nil (ie. was set by outside code), calls it with this TxsdTechnique instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdTechnique instance.
func (me *TxsdTechnique) Walk ()  { 
	if fn := W.TxsdTechnique; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Technique struct {
//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Techniques []*TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElems_Technique function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Technique instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Technique instance.
func (me *XsdGoPkgHasElems_Technique) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Technique; fn != nil { fn(me) }
	for _, x := range me.Techniques { x.Walk() }
 }

//	The name attribute is the text string name of this element. Optional attribute.
type XsdGoPkgHasAttr_Name_XsdtNCName_ struct {
//	The name attribute is the text string name of this element. Optional attribute.
	Name xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
type XsdGoPkgHasAttr_Id_XsdtId_ struct {
//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	Id xsdt.Id `xml:"http://www.collada.org/2005/11/COLLADASchema id,attr"`

}

type TxsdExtra struct {
//	The extra element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The type attribute indicates the type of the value data. This text string must be understood by
//	the application. Optional attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

}

//	If the W.TxsdExtra function is not nil (ie. was set by outside code), calls it with this TxsdExtra instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdExtra instance.
func (me *TxsdExtra) Walk ()  { 
	if fn := W.TxsdExtra; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_Extra struct {
//	The extra element declares additional information regarding its parent element.
	Extras []*TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`

}

//	If the W.XsdGoPkgHasElems_Extra function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extra instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extra instance.
func (me *XsdGoPkgHasElems_Extra) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Extra; fn != nil { fn(me) }
	for _, x := range me.Extras { x.Walk() }
 }

//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
//	The input element must occur at least one time. These inputs are local inputs.
//	The InputLocal type is used to represent inputs that can only reference resources declared in the same document.
//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
type XsdGoPkgHasAttr_Semantic_XsdtNmtoken_ struct {
//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	Semantic xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`

}

//	The source attribute indicates the location of the data source. Required attribute.
//	This type is used for URI reference which can only reference a resource declared within it's same document.
type TURIFragmentType xsdt.String

//	Since TURIFragmentType is just a simple String type, this merely returns the current string value.
func (me TURIFragmentType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TURIFragmentType's alias type xsdt.String.
func (me TURIFragmentType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TURIFragmentType is just a simple String type, this merely sets the current value from the specified string.
func (me *TURIFragmentType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Source_TURIFragmentType_ struct {
//	The source attribute indicates the location of the data source. Required attribute.
	Source TURIFragmentType `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TInputLocal struct {
//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

}

//	If the W.TInputLocal function is not nil (ie. was set by outside code), calls it with this TInputLocal instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TInputLocal instance.
func (me *TInputLocal) Walk ()  { 
	if fn := W.TInputLocal; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ struct {
//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdSampler struct {
//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdSampler function is not nil (ie. was set by outside code), calls it with this TxsdSampler instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdSampler instance.
func (me *TxsdSampler) Walk ()  { 
	if fn := W.TxsdSampler; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk()
 }

type XsdGoPkgHasElems_Sampler struct {
//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
	Samplers []*TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`

}

//	If the W.XsdGoPkgHasElems_Sampler function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sampler instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sampler instance.
func (me *XsdGoPkgHasElems_Sampler) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Sampler; fn != nil { fn(me) }
	for _, x := range me.Samplers { x.Walk() }
 }

//	The channel element declares an output channel of an animation.
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
type XsdGoPkgHasAttr_Target_XsdtToken_ struct {
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
	Target xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`

}

type TxsdChannel struct {
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
	XsdGoPkgHasAttr_Target_XsdtToken_

//	The source attribute indicates the location of the sampler using a URL expression.
//	The sampler must be declared within the same document. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

}

//	If the W.TxsdChannel function is not nil (ie. was set by outside code), calls it with this TxsdChannel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdChannel instance.
func (me *TxsdChannel) Walk ()  { 
	if fn := W.TxsdChannel; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Channel struct {
//	The channel element declares an output channel of an animation.
	Channels []*TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`

}

//	If the W.XsdGoPkgHasElems_Channel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Channel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Channel instance.
func (me *XsdGoPkgHasElems_Channel) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Channel; fn != nil { fn(me) }
	for _, x := range me.Channels { x.Walk() }
 }

//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
//	The count attribute indicates the number of values in the array. Required attribute.
type Tuint xsdt.UnsignedLong

//	This convenience method just performs a simple type conversion to Tuint's alias type xsdt.UnsignedLong.
func (me Tuint) ToXsdtUnsignedLong () xsdt.UnsignedLong { return xsdt.UnsignedLong(me) }

//	Returns a string representation of this Tuint's current non-string scalar value.
func (me Tuint) String () string { return xsdt.UnsignedLong(me).String() }

//	Since Tuint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tuint) SetFromString (s string)  { (*xsdt.UnsignedLong)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Count_Tuint_ struct {
//	The count attribute indicates the number of values in the array. Required attribute.
	Count Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema count,attr"`

}

type TxsdIdrefArray struct {
	XsdGoPkgValue xsdt.Idrefs `xml:",chardata"`

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdIdrefArray function is not nil (ie. was set by outside code), calls it with this TxsdIdrefArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdIdrefArray instance.
func (me *TxsdIdrefArray) Walk ()  { 
	if fn := W.TxsdIdrefArray; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_IdrefArray struct {
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArray *TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`

}

//	If the W.XsdGoPkgHasElem_IdrefArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IdrefArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IdrefArray instance.
func (me *XsdGoPkgHasElem_IdrefArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_IdrefArray; fn != nil { fn(me) }
	me.IdrefArray.Walk()
 }

//	The technique common specifies the common method for accessing this source element's data.
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
type XsdGoPkgHasAttr_Stride_Tuint_1 struct {
//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	Stride Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema stride,attr"`

}

//	Returns the default value for Stride -- 1
func (me XsdGoPkgHasAttr_Stride_Tuint_1) StrideDefault () Tuint { return Tuint(1) }

//	The param element declares parametric information regarding its parent element.
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
type XsdGoPkgHasAttr_Sid_XsdtNCName_ struct {
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	Sid xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

type TxsdParam struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The semantic attribute is the user-defined meaning of the parameter. Optional attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdParam function is not nil (ie. was set by outside code), calls it with this TxsdParam instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TxsdParam instance.
func (me *TxsdParam) Walk ()  { 
	if fn := W.TxsdParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Param struct {
//	The param element declares parametric information regarding its parent element.
	Params []*TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElems_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Param instance.
func (me *XsdGoPkgHasElems_Param) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Param; fn != nil { fn(me) }
	for _, x := range me.Params { x.Walk() }
 }

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
type XsdGoPkgHasAttr_Offset_Tuint_0 struct {
//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`

}

//	Returns the default value for Offset -- 0
func (me XsdGoPkgHasAttr_Offset_Tuint_0) OffsetDefault () Tuint { return Tuint(0) }

//	The source attribute indicates the location of the data source. Required attribute.
type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
//	The source attribute indicates the location of the data source. Required attribute.
	Source xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TxsdAccessor struct {
//	The count attribute indicates the number of times the array is accessed. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The accessor element may have any number of param elements.
	XsdGoPkgHasElems_Param

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
	XsdGoPkgHasAttr_Offset_Tuint_0

//	The source attribute indicates the location of the array to access using a URL expression. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	XsdGoPkgHasAttr_Stride_Tuint_1

}

//	If the W.TxsdAccessor function is not nil (ie. was set by outside code), calls it with this TxsdAccessor instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdAccessor instance.
func (me *TxsdAccessor) Walk ()  { 
	if fn := W.TxsdAccessor; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Param.Walk()
 }

type XsdGoPkgHasElem_Accessor struct {
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
	Accessor *TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`

}

//	If the W.XsdGoPkgHasElem_Accessor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Accessor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Accessor instance.
func (me *XsdGoPkgHasElem_Accessor) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Accessor; fn != nil { fn(me) }
	me.Accessor.Walk()
 }

type TxsdSourceSequenceTechniqueCommon struct {
//	The source's technique_common must have one and only one accessor.
	XsdGoPkgHasElem_Accessor

}

//	If the W.TxsdSourceSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdSourceSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSourceSequenceTechniqueCommon instance.
func (me *TxsdSourceSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdSourceSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Accessor.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ struct {
//	The technique common specifies the common method for accessing this source element's data.
	TechniqueCommon *TxsdSourceSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

//	The bool_array element declares the storage for a homogenous array of boolean values.
type Tbool xsdt.Boolean

//	Since Tbool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tbool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tbool's alias type xsdt.Boolean.
func (me Tbool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Returns a string representation of this Tbool's current non-string scalar value.
func (me Tbool) String () string { return xsdt.Boolean(me).String() }

type TListOfBools xsdt.String

//	Since TListOfBools is just a simple String type, this merely returns the current string value.
func (me TListOfBools) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TListOfBools's alias type xsdt.String.
func (me TListOfBools) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfBools is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfBools) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TListOfBools defines a String containing a whitespace-separated list of Tbool values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfBools) Values () (list []Tbool) { var btv = new(Tbool); var svals = xsdt.ListValues(string(me)); list = make([]Tbool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TxsdBoolArray struct {
	XsdGoPkgValue TListOfBools `xml:",chardata"`

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdBoolArray function is not nil (ie. was set by outside code), calls it with this TxsdBoolArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdBoolArray instance.
func (me *TxsdBoolArray) Walk ()  { 
	if fn := W.TxsdBoolArray; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_BoolArray struct {
//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArray *TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`

}

//	If the W.XsdGoPkgHasElem_BoolArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BoolArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BoolArray instance.
func (me *XsdGoPkgHasElem_BoolArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_BoolArray; fn != nil { fn(me) }
	me.BoolArray.Walk()
 }

//	The Name_array element declares the storage for a homogenous array of Name string values.
type TName xsdt.Name

//	This convenience method just performs a simple type conversion to TName's alias type xsdt.Name.
func (me TName) ToXsdtName () xsdt.Name { return xsdt.Name(me) }

//	Since TName is just a simple String type, this merely sets the current value from the specified string.
func (me *TName) SetFromString (s string)  { (*xsdt.Name)(me).SetFromString(s) }

//	Since TName is just a simple String type, this merely returns the current string value.
func (me TName) String () string { return xsdt.Name(me).String() }

type TListOfNames xsdt.String

//	TListOfNames defines a String containing a whitespace-separated list of TName values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfNames) Values () (list []TName) { var svals = xsdt.ListValues(string(me)); list = make([]TName, len(svals)); for i, s := range svals { list[i] = TName(s) }; return }

//	Since TListOfNames is just a simple String type, this merely returns the current string value.
func (me TListOfNames) String () string { return xsdt.String(me).String() }

//	Since TListOfNames is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfNames) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TListOfNames's alias type xsdt.String.
func (me TListOfNames) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TxsdNameArray struct {
	XsdGoPkgValue TListOfNames `xml:",chardata"`

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdNameArray function is not nil (ie. was set by outside code), calls it with this TxsdNameArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdNameArray instance.
func (me *TxsdNameArray) Walk ()  { 
	if fn := W.TxsdNameArray; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_NameArray struct {
//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArray *TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`

}

//	If the W.XsdGoPkgHasElem_NameArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameArray instance.
func (me *XsdGoPkgHasElem_NameArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_NameArray; fn != nil { fn(me) }
	me.NameArray.Walk()
 }

//	The float_array element declares the storage for a homogenous array of floating point values.
//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
type XsdGoPkgHasAttr_Magnitude_XsdtShort_38 struct {
//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
	Magnitude xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema magnitude,attr"`

}

//	Returns the default value for Magnitude -- 38
func (me XsdGoPkgHasAttr_Magnitude_XsdtShort_38) MagnitudeDefault () xsdt.Short { return xsdt.Short(38) }

//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
type XsdGoPkgHasAttr_Digits_XsdtShort_6 struct {
//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
	Digits xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema digits,attr"`

}

//	Returns the default value for Digits -- 6
func (me XsdGoPkgHasAttr_Digits_XsdtShort_6) DigitsDefault () xsdt.Short { return xsdt.Short(6) }

type TListOfFloats xsdt.String

//	Since TListOfFloats is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfFloats) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TListOfFloats is just a simple String type, this merely returns the current string value.
func (me TListOfFloats) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TListOfFloats's alias type xsdt.String.
func (me TListOfFloats) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TListOfFloats defines a String containing a whitespace-separated list of Tfloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfFloats) Values () (list []Tfloat) { var btv = new(Tfloat); var svals = xsdt.ListValues(string(me)); list = make([]Tfloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TxsdFloatArray struct {
	XsdGoPkgValue TListOfFloats `xml:",chardata"`

//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
	XsdGoPkgHasAttr_Digits_XsdtShort_6

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
	XsdGoPkgHasAttr_Magnitude_XsdtShort_38

}

//	If the W.TxsdFloatArray function is not nil (ie. was set by outside code), calls it with this TxsdFloatArray instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TxsdFloatArray instance.
func (me *TxsdFloatArray) Walk ()  { 
	if fn := W.TxsdFloatArray; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_FloatArray struct {
//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArray *TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`

}

//	If the W.XsdGoPkgHasElem_FloatArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FloatArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FloatArray instance.
func (me *XsdGoPkgHasElem_FloatArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_FloatArray; fn != nil { fn(me) }
	me.FloatArray.Walk()
 }

//	The int_array element declares the storage for a homogenous array of integer values.
//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
type XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648 struct {
//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
	MinInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema minInclusive,attr"`

}

//	Returns the default value for MinInclusive -- -2147483648
func (me XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648) MinInclusiveDefault () xsdt.Integer { return xsdt.Integer(-2147483648) }

//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
type XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647 struct {
//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
	MaxInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema maxInclusive,attr"`

}

//	Returns the default value for MaxInclusive -- 2147483647
func (me XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647) MaxInclusiveDefault () xsdt.Integer { return xsdt.Integer(2147483647) }

type Tint xsdt.Long

//	Returns a string representation of this Tint's current non-string scalar value.
func (me Tint) String () string { return xsdt.Long(me).String() }

//	Since Tint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tint) SetFromString (s string)  { (*xsdt.Long)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tint's alias type xsdt.Long.
func (me Tint) ToXsdtLong () xsdt.Long { return xsdt.Long(me) }

type TListOfInts xsdt.String

//	TListOfInts defines a String containing a whitespace-separated list of Tint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfInts) Values () (list []Tint) { var btv = new(Tint); var svals = xsdt.ListValues(string(me)); list = make([]Tint, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TListOfInts's alias type xsdt.String.
func (me TListOfInts) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfInts) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TListOfInts is just a simple String type, this merely returns the current string value.
func (me TListOfInts) String () string { return xsdt.String(me).String() }

type TxsdIntArray struct {
	XsdGoPkgValue TListOfInts `xml:",chardata"`

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
	XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
	XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647

}

//	If the W.TxsdIntArray function is not nil (ie. was set by outside code), calls it with this TxsdIntArray instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TxsdIntArray instance.
func (me *TxsdIntArray) Walk ()  { 
	if fn := W.TxsdIntArray; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_IntArray struct {
//	The int_array element declares the storage for a homogenous array of integer values.
	IntArray *TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`

}

//	If the W.XsdGoPkgHasElem_IntArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntArray instance.
func (me *XsdGoPkgHasElem_IntArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_IntArray; fn != nil { fn(me) }
	me.IntArray.Walk()
 }

type TxsdSource struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The source element may contain a bool_array.
	XsdGoPkgHasElem_BoolArray

//	The source element may contain a Name_array.
	XsdGoPkgHasElem_NameArray

//	The source element may contain a float_array.
	XsdGoPkgHasElem_FloatArray

//	The source element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The source element may contain an int_array.
	XsdGoPkgHasElem_IntArray

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The source element may contain an IDREF_array.
	XsdGoPkgHasElem_IdrefArray

//	The technique common specifies the common method for accessing this source element's data.
	XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_

}

//	If the W.TxsdSource function is not nil (ie. was set by outside code), calls it with this TxsdSource instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdSource instance.
func (me *TxsdSource) Walk ()  { 
	if fn := W.TxsdSource; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_NameArray.Walk()
	me.XsdGoPkgHasElem_FloatArray.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElem_IntArray.Walk()
	me.XsdGoPkgHasElem_IdrefArray.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_BoolArray.Walk()
 }

type XsdGoPkgHasElems_Source struct {
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
	Sources []*TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElems_Source function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Source instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Source instance.
func (me *XsdGoPkgHasElems_Source) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Source; fn != nil { fn(me) }
	for _, x := range me.Sources { x.Walk() }
 }

type TxsdAnimation struct {
//	The animation element may contain any number of source elements.
	XsdGoPkgHasElems_Source

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Animation

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The animation element may contain any number of sampler elements.
	XsdGoPkgHasElems_Sampler

//	The animation element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The animation element may contain any number of channel elements.
	XsdGoPkgHasElems_Channel

}

//	If the W.TxsdAnimation function is not nil (ie. was set by outside code), calls it with this TxsdAnimation instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdAnimation instance.
func (me *TxsdAnimation) Walk ()  { 
	if fn := W.TxsdAnimation; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Sampler.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Channel.Walk()
	me.XsdGoPkgHasElems_Source.Walk()
 }

type XsdGoPkgHasElems_Animation struct {
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
	Animations []*TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`

}

//	If the W.XsdGoPkgHasElems_Animation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Animation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Animation instance.
func (me *XsdGoPkgHasElems_Animation) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Animation; fn != nil { fn(me) }
	for _, x := range me.Animations { x.Walk() }
 }

type TxsdLibraryAnimations struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one animation element.
	XsdGoPkgHasElems_Animation

//	The library_animations element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdLibraryAnimations function is not nil (ie. was set by outside code), calls it with this TxsdLibraryAnimations instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryAnimations instance.
func (me *TxsdLibraryAnimations) Walk ()  { 
	if fn := W.TxsdLibraryAnimations; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Animation.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryAnimations struct {
//	The library_animations element declares a module of animation elements.
	AnimationsLibraries []*TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`

}

//	If the W.XsdGoPkgHasElems_LibraryAnimations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryAnimations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryAnimations instance.
func (me *XsdGoPkgHasElems_LibraryAnimations) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryAnimations; fn != nil { fn(me) }
	for _, x := range me.AnimationsLibraries { x.Walk() }
 }

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
//	An enumerated type specifying the acceptable document versions.
type TVersionType xsdt.String

//	Returns true if the value of this enumerated TVersionType is "1.4.0".
func (me TVersionType) Is140 () bool { return me == "1.4.0" }

//	Since TVersionType is just a simple String type, this merely returns the current string value.
func (me TVersionType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TVersionType's alias type xsdt.String.
func (me TVersionType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TVersionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TVersionType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TVersionType is "1.4.1".
func (me TVersionType) Is141 () bool { return me == "1.4.1" }

type XsdGoPkgHasAttr_Version_TVersionType_ struct {
//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
	Version TVersionType `xml:"http://www.collada.org/2005/11/COLLADASchema version,attr"`

}

//	The library_controllers element declares a module of controller elements.
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
//	The input element must occur at least twice. These inputs are local inputs.
type XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_ struct {
//	The input element must occur at least twice. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdSkinSequenceJoints struct {
//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdSkinSequenceJoints function is not nil (ie. was set by outside code), calls it with this TxsdSkinSequenceJoints instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSkinSequenceJoints instance.
func (me *TxsdSkinSequenceJoints) Walk ()  { 
	if fn := W.TxsdSkinSequenceJoints; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_.Walk()
 }

type XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ struct {
//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	Joints *TxsdSkinSequenceJoints `xml:"http://www.collada.org/2005/11/COLLADASchema joints"`

}

//	If the W.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ instance.
func (me *XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_; fn != nil { fn(me) }
	me.Joints.Walk()
 }

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
type XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ struct {
//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
	V TListOfInts `xml:"http://www.collada.org/2005/11/COLLADASchema v"`

}

//	If the W.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ instance.
func (me *XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_; fn != nil { fn(me) }
 }

//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
type TListOfUInts xsdt.String

//	TListOfUInts defines a String containing a whitespace-separated list of Tuint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfUInts) Values () (list []Tuint) { var btv = new(Tuint); var svals = xsdt.ListValues(string(me)); list = make([]Tuint, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TListOfUInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfUInts) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TListOfUInts's alias type xsdt.String.
func (me TListOfUInts) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfUInts is just a simple String type, this merely returns the current string value.
func (me TListOfUInts) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ struct {
//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
	Vcount TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema vcount"`

}

//	If the W.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ instance.
func (me *XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_; fn != nil { fn(me) }
 }

//	The input element must occur at least twice.
//	The InputLocalOffset type is used to represent indexed inputs that can only reference resources declared in the same document.
//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
type XsdGoPkgHasAttr_Set_Tuint_ struct {
//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
	Set Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema set,attr"`

}

//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
type XsdGoPkgHasAttr_Offset_Tuint_ struct {
//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`

}

type TInputLocalOffset struct {
//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	XsdGoPkgHasAttr_Offset_Tuint_

//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
	XsdGoPkgHasAttr_Set_Tuint_

}

//	If the W.TInputLocalOffset function is not nil (ie. was set by outside code), calls it with this TInputLocalOffset instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TInputLocalOffset instance.
func (me *TInputLocalOffset) Walk ()  { 
	if fn := W.TInputLocalOffset; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ struct {
//	The input element must occur at least twice.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdSkinSequenceVertexWeights struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_

//	The count attribute describes the number of vertices in the base mesh. Required element.
	XsdGoPkgHasAttr_Count_Tuint_

//	The input element must occur at least twice.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_

}

//	If the W.TxsdSkinSequenceVertexWeights function is not nil (ie. was set by outside code), calls it with this TxsdSkinSequenceVertexWeights instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TxsdSkinSequenceVertexWeights instance.
func (me *TxsdSkinSequenceVertexWeights) Walk ()  { 
	if fn := W.TxsdSkinSequenceVertexWeights; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_.Walk()
	me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk()
 }

type XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ struct {
//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	VertexWeights *TxsdSkinSequenceVertexWeights `xml:"http://www.collada.org/2005/11/COLLADASchema vertex_weights"`

}

//	If the W.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ instance.
func (me *XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_; fn != nil { fn(me) }
	me.VertexWeights.Walk()
 }

//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
type Tfloat4X4 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat4X4's alias type TListOfFloats.
func (me Tfloat4X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat4X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X4) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ struct {
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
	BindShapeMatrix Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bind_shape_matrix"`

}

//	If the W.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_; fn != nil { fn(me) }
 }

type TxsdSkin struct {
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
	XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_

//	The skin element must contain at least three source elements.
	XsdGoPkgHasElems_Source

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The source attribute contains a URI reference to the base mesh, (a static mesh or a morphed mesh).
//	This also provides the bind-shape of the skinned mesh.  Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_

}

//	If the W.TxsdSkin function is not nil (ie. was set by outside code), calls it with this TxsdSkin instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdSkin instance.
func (me *TxsdSkin) Walk ()  { 
	if fn := W.TxsdSkin; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Source.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_.Walk()
	me.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_.Walk()
	me.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_.Walk()
 }

type XsdGoPkgHasElem_Skin struct {
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skin *TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`

}

//	If the W.XsdGoPkgHasElem_Skin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Skin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Skin instance.
func (me *XsdGoPkgHasElem_Skin) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Skin; fn != nil { fn(me) }
	me.Skin.Walk()
 }

//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
//	The input element must occur at least twice. These inputs are local inputs.
type XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_ struct {
//	The input element must occur at least twice. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdMorphSequenceTargets struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_

}

//	If the W.TxsdMorphSequenceTargets function is not nil (ie. was set by outside code), calls it with this TxsdMorphSequenceTargets instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdMorphSequenceTargets instance.
func (me *TxsdMorphSequenceTargets) Walk ()  { 
	if fn := W.TxsdMorphSequenceTargets; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_.Walk()
 }

type XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ struct {
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
	Targets *TxsdMorphSequenceTargets `xml:"http://www.collada.org/2005/11/COLLADASchema targets"`

}

//	If the W.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ instance.
func (me *XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_; fn != nil { fn(me) }
	me.Targets.Walk()
 }

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
//	An enumuerated type specifying the acceptable morph methods.
type TMorphMethodType xsdt.String

//	Returns true if the value of this enumerated TMorphMethodType is "RELATIVE".
func (me TMorphMethodType) IsRelative () bool { return me == "RELATIVE" }

//	Since TMorphMethodType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMorphMethodType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TMorphMethodType's alias type xsdt.String.
func (me TMorphMethodType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TMorphMethodType is "NORMALIZED".
func (me TMorphMethodType) IsNormalized () bool { return me == "NORMALIZED" }

//	Since TMorphMethodType is just a simple String type, this merely returns the current string value.
func (me TMorphMethodType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized struct {
//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	Method TMorphMethodType `xml:"http://www.collada.org/2005/11/COLLADASchema method,attr"`

}

//	Returns the default value for Method -- "NORMALIZED"
func (me XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized) MethodDefault () TMorphMethodType { return TMorphMethodType("NORMALIZED") }

type TxsdMorph struct {
//	The morph element must contain at least two source elements.
	XsdGoPkgHasElems_Source

//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
	XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized

//	The source attribute indicates the base mesh. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdMorph function is not nil (ie. was set by outside code), calls it with this TxsdMorph instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdMorph instance.
func (me *TxsdMorph) Walk ()  { 
	if fn := W.TxsdMorph; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Source.Walk()
	me.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_Morph struct {
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
	Morph *TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`

}

//	If the W.XsdGoPkgHasElem_Morph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Morph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Morph instance.
func (me *XsdGoPkgHasElem_Morph) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Morph; fn != nil { fn(me) }
	me.Morph.Walk()
 }

type TxsdController struct {
//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The controller element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Skin

//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Morph

}

//	If the W.TxsdController function is not nil (ie. was set by outside code), calls it with this TxsdController instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdController instance.
func (me *TxsdController) Walk ()  { 
	if fn := W.TxsdController; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElem_Skin.Walk()
	me.XsdGoPkgHasElem_Morph.Walk()
 }

type XsdGoPkgHasElems_Controller struct {
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controllers []*TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`

}

//	If the W.XsdGoPkgHasElems_Controller function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Controller instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Controller instance.
func (me *XsdGoPkgHasElems_Controller) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Controller; fn != nil { fn(me) }
	for _, x := range me.Controllers { x.Walk() }
 }

type TxsdLibraryControllers struct {
//	The library_controllers element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one controller element.
	XsdGoPkgHasElems_Controller

}

//	If the W.TxsdLibraryControllers function is not nil (ie. was set by outside code), calls it with this TxsdLibraryControllers instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryControllers instance.
func (me *TxsdLibraryControllers) Walk ()  { 
	if fn := W.TxsdLibraryControllers; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Controller.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryControllers struct {
//	The library_controllers element declares a module of controller elements.
	ControllersLibraries []*TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`

}

//	If the W.XsdGoPkgHasElems_LibraryControllers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryControllers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryControllers instance.
func (me *XsdGoPkgHasElems_LibraryControllers) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryControllers; fn != nil { fn(me) }
	for _, x := range me.ControllersLibraries { x.Walk() }
 }

//	The library_images element declares a module of image elements.
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
type XsdGoPkgHasAttr_Depth_Tuint_1 struct {
//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
	Depth Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema depth,attr"`

}

//	Returns the default value for Depth -- 1
func (me XsdGoPkgHasAttr_Depth_Tuint_1) DepthDefault () Tuint { return Tuint(1) }

//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
type XsdGoPkgHasAttr_Width_Tuint_ struct {
//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
	Width Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema width,attr"`

}

//	The init_from element allows you to specify an external image file to use for the image element.
type XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ struct {
//	The init_from element allows you to specify an external image file to use for the image element.
	InitFrom xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`

}

//	If the W.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_; fn != nil { fn(me) }
 }

//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
type XsdGoPkgHasAttr_Height_Tuint_ struct {
//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
	Height Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema height,attr"`

}

//	The format attribute is a text string value that indicates the image format. Optional attribute.
type XsdGoPkgHasAttr_Format_XsdtToken_ struct {
//	The format attribute is a text string value that indicates the image format. Optional attribute.
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format,attr"`

}

//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
type TListOfHexBinary xsdt.String

//	Since TListOfHexBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfHexBinary) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TListOfHexBinary defines a String containing a whitespace-separated list of xsdt.HexBinary values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfHexBinary) Values () (list []xsdt.HexBinary) { var svals = xsdt.ListValues(string(me)); list = make([]xsdt.HexBinary, len(svals)); for i, s := range svals { list[i] = xsdt.HexBinary(s) }; return }

//	This convenience method just performs a simple type conversion to TListOfHexBinary's alias type xsdt.String.
func (me TListOfHexBinary) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfHexBinary is just a simple String type, this merely returns the current string value.
func (me TListOfHexBinary) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ struct {
//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
	Data TListOfHexBinary `xml:"http://www.collada.org/2005/11/COLLADASchema data"`

}

//	If the W.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ instance.
func (me *XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_; fn != nil { fn(me) }
 }

type TxsdImage struct {
//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
	XsdGoPkgHasAttr_Height_Tuint_

//	The format attribute is a text string value that indicates the image format. Optional attribute.
	XsdGoPkgHasAttr_Format_XsdtToken_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The image element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
	XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
	XsdGoPkgHasAttr_Depth_Tuint_1

//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
	XsdGoPkgHasAttr_Width_Tuint_

//	The init_from element allows you to specify an external image file to use for the image element.
	XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_

}

//	If the W.TxsdImage function is not nil (ie. was set by outside code), calls it with this TxsdImage instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TxsdImage instance.
func (me *TxsdImage) Walk ()  { 
	if fn := W.TxsdImage; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_Image struct {
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
	Images []*TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`

}

//	If the W.XsdGoPkgHasElems_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Image instance.
func (me *XsdGoPkgHasElems_Image) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Image; fn != nil { fn(me) }
	for _, x := range me.Images { x.Walk() }
 }

type TxsdLibraryImages struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_images element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one image element.
	XsdGoPkgHasElems_Image

}

//	If the W.TxsdLibraryImages function is not nil (ie. was set by outside code), calls it with this TxsdLibraryImages instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryImages instance.
func (me *TxsdLibraryImages) Walk ()  { 
	if fn := W.TxsdLibraryImages; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
 }

type XsdGoPkgHasElems_LibraryImages struct {
//	The library_images element declares a module of image elements.
	ImagesLibraries []*TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`

}

//	If the W.XsdGoPkgHasElems_LibraryImages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryImages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryImages instance.
func (me *XsdGoPkgHasElems_LibraryImages) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryImages; fn != nil { fn(me) }
	for _, x := range me.ImagesLibraries { x.Walk() }
 }

//	The library_materials element declares a module of material elements.
//	Materials describe the visual appearance of a geometric object.
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
type XsdGoPkgHasAttr_Url_XsdtAnyURI_ struct {
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
	Url xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema url,attr"`

}

//	Assigns a new value to a previously defined parameter
type XsdGoPkgHasAttr_Ref_XsdtToken_ struct {
	Ref xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

//	A group that specifies the allowable types for effect scoped parameters.
type Tfloat3X2 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3X2's alias type TListOfFloats.
func (me Tfloat3X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat3X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X2) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ struct {
	Float3X2 Tfloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`

}

//	If the W.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ instance.
func (me *XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ struct {
	Bool Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

//	If the W.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ instance.
func (me *XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_; fn != nil { fn(me) }
 }

type Tfloat3 TListOfFloats

//	Since Tfloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3's alias type TListOfFloats.
func (me Tfloat3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ struct {
	Float3X1 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`

}

//	If the W.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_; fn != nil { fn(me) }
 }

type Tfloat2X3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat2X3's alias type TListOfFloats.
func (me Tfloat2X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat2X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X3) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ struct {
	Float2X3 Tfloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`

}

//	If the W.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ instance.
func (me *XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_; fn != nil { fn(me) }
 }

type Tint2 TListOfInts

//	Since Tint2 is just a simple String type, this merely returns the current string value.
func (me Tint2) String () string { return TListOfInts(me).String() }

//	Since Tint2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tint2's alias type TListOfInts.
func (me Tint2) ToTListOfInts () TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ struct {
	Int2 Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

//	If the W.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ instance.
func (me *XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_; fn != nil { fn(me) }
 }

type Tbool3 TListOfBools

//	Since Tbool3 is just a simple String type, this merely returns the current string value.
func (me Tbool3) String () string { return TListOfBools(me).String() }

//	This convenience method just performs a simple type conversion to Tbool3's alias type TListOfBools.
func (me Tbool3) ToTListOfBools () TListOfBools { return TListOfBools(me) }

//	Since Tbool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ struct {
	Bool3 Tbool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

//	If the W.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_; fn != nil { fn(me) }
 }

//	A one-dimensional texture sampler.
type TfxSamplerFilterCommon xsdt.Nmtoken

//	Since TfxSamplerFilterCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerFilterCommon) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST".
func (me TfxSamplerFilterCommon) IsNearest () bool { return me == "NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsLinearMipmapNearest () bool { return me == "LINEAR_MIPMAP_NEAREST" }

//	Since TfxSamplerFilterCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerFilterCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TfxSamplerFilterCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerFilterCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsNearestMipmapLinear () bool { return me == "NEAREST_MIPMAP_LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR".
func (me TfxSamplerFilterCommon) IsLinear () bool { return me == "LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NONE".
func (me TfxSamplerFilterCommon) IsNone () bool { return me == "NONE" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsNearestMipmapNearest () bool { return me == "NEAREST_MIPMAP_NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsLinearMipmapLinear () bool { return me == "LINEAR_MIPMAP_LINEAR" }

type XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapMaxlevel -- 0
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(0) }

type TfxSamplerWrapCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "WRAP".
func (me TfxSamplerWrapCommon) IsWrap () bool { return me == "WRAP" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "MIRROR".
func (me TfxSamplerWrapCommon) IsMirror () bool { return me == "MIRROR" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "BORDER".
func (me TfxSamplerWrapCommon) IsBorder () bool { return me == "BORDER" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "NONE".
func (me TfxSamplerWrapCommon) IsNone () bool { return me == "NONE" }

//	Since TfxSamplerWrapCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerWrapCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TfxSamplerWrapCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerWrapCommon) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfxSamplerWrapCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerWrapCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "CLAMP".
func (me TfxSamplerWrapCommon) IsClamp () bool { return me == "CLAMP" }

type XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type Tfloat4 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat4's alias type TListOfFloats.
func (me Tfloat4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4) String () string { return TListOfFloats(me).String() }

type TfxColorCommon Tfloat4

//	Since TfxColorCommon is just a simple String type, this merely returns the current string value.
func (me TfxColorCommon) String () string { return Tfloat4(me).String() }

//	Since TfxColorCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxColorCommon) SetFromString (s string)  { (*Tfloat4)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TfxColorCommon's alias type Tfloat4.
func (me TfxColorCommon) ToTfloat4 () Tfloat4 { return Tfloat4(me) }

type XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

//	If the W.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	If the W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

type TfxSampler1DCommon struct {
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0

	XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_

}

//	If the W.TfxSampler1DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler1DCommon instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TfxSampler1DCommon instance.
func (me *TfxSampler1DCommon) Walk ()  { 
	if fn := W.TfxSampler1DCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk()
 }

type XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ struct {
	Sampler1D *TfxSampler1DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

//	If the W.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_; fn != nil { fn(me) }
	me.Sampler1D.Walk()
 }

type XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ struct {
	Float Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_; fn != nil { fn(me) }
 }

//	A two-dimensional texture sampler.
type XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

//	If the W.XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	If the W.XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	If the W.XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

//	If the W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

type TfxSampler2DCommon struct {
	XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_

}

//	If the W.TfxSampler2DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler2DCommon instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TfxSampler2DCommon instance.
func (me *TfxSampler2DCommon) Walk ()  { 
	if fn := W.TfxSampler2DCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk()
	me.XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00.Walk()
 }

type XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ struct {
	Sampler2D *TfxSampler2DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

//	If the W.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_; fn != nil { fn(me) }
	me.Sampler2D.Walk()
 }

type XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ struct {
	Float4X4 Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

//	If the W.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_; fn != nil { fn(me) }
 }

type Tfloat2 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat2's alias type TListOfFloats.
func (me Tfloat2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ struct {
	Float2X1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`

}

//	If the W.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ struct {
	Float4X1 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`

}

//	If the W.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_; fn != nil { fn(me) }
 }

//	A texture sampler for depth maps.
type XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	If the W.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type TfxSamplerDEPTHCommon struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

}

//	If the W.TfxSamplerDEPTHCommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerDEPTHCommon instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TfxSamplerDEPTHCommon instance.
func (me *TfxSamplerDEPTHCommon) Walk ()  { 
	if fn := W.TfxSamplerDEPTHCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
 }

type XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ struct {
	SamplerDEPTH *TfxSamplerDEPTHCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

//	If the W.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_; fn != nil { fn(me) }
	me.SamplerDEPTH.Walk()
 }

type XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ struct {
	Enum xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	If the W.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ instance.
func (me *XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_; fn != nil { fn(me) }
 }

//	A texture sampler for cube maps.
type XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

//	If the W.XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

//	If the W.XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap struct {
	WrapP TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_p"`

}

//	Returns the default value for WrapP -- "WRAP"
func (me XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) WrapPDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type TfxSamplerCUBECommon struct {
	XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

}

//	If the W.TfxSamplerCUBECommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerCUBECommon instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TfxSamplerCUBECommon instance.
func (me *TfxSamplerCUBECommon) Walk ()  { 
	if fn := W.TfxSamplerCUBECommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00.Walk()
	me.XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
 }

type XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ struct {
	SamplerCUBE *TfxSamplerCUBECommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

//	If the W.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_; fn != nil { fn(me) }
	me.SamplerCUBE.Walk()
 }

type Tfloat3X4 TListOfFloats

//	Since Tfloat3X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X4) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3X4's alias type TListOfFloats.
func (me Tfloat3X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ struct {
	Float3X4 Tfloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`

}

//	If the W.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ instance.
func (me *XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_; fn != nil { fn(me) }
 }

//	A three-dimensional texture sampler.
type XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

//	If the W.XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	If the W.XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	If the W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

type XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap struct {
	WrapP TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_p"`

}

//	If the W.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapP -- "WRAP"
func (me XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) WrapPDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type TfxSampler3DCommon struct {
	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

}

//	If the W.TfxSampler3DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler3DCommon instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TfxSampler3DCommon instance.
func (me *TfxSampler3DCommon) Walk ()  { 
	if fn := W.TfxSampler3DCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00.Walk()
	me.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk()
 }

type XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ struct {
	Sampler3D *TfxSampler3DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

//	If the W.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_; fn != nil { fn(me) }
	me.Sampler3D.Walk()
 }

type XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ struct {
	Float1X4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`

}

//	If the W.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_; fn != nil { fn(me) }
 }

type Tfloat4X2 TListOfFloats

//	Since Tfloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat4X2's alias type TListOfFloats.
func (me Tfloat4X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X2) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ struct {
	Float4X2 Tfloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`

}

//	If the W.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ instance.
func (me *XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ struct {
	Float1X3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`

}

//	If the W.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_; fn != nil { fn(me) }
 }

type Tfloat2X2 TListOfFloats

//	Since Tfloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat2X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X2) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat2X2's alias type TListOfFloats.
func (me Tfloat2X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ struct {
	Float2X2 Tfloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	If the W.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ struct {
	Int Tint `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

//	If the W.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ instance.
func (me *XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_; fn != nil { fn(me) }
 }

type Tint3 TListOfInts

//	Since Tint3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

//	Since Tint3 is just a simple String type, this merely returns the current string value.
func (me Tint3) String () string { return TListOfInts(me).String() }

//	This convenience method just performs a simple type conversion to Tint3's alias type TListOfInts.
func (me Tint3) ToTListOfInts () TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ struct {
	Int3 Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	If the W.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ instance.
func (me *XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_; fn != nil { fn(me) }
 }

//	The fx_surface_common type is used to declare a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	The surface should be sized to these exact dimensions
type XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 struct {
//	The surface should be sized to these exact dimensions
	Size Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`

}

//	If the W.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 instance.
func (me *XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000; fn != nil { fn(me) }
 }

//	Returns the default value for Size -- "0 0 0"
func (me XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000) SizeDefault () Tint3 { return Tint3("0 0 0") }

//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
type XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ struct {
//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	MipmapGenerate xsdt.Boolean `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_generate"`

}

//	If the W.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_; fn != nil { fn(me) }
 }

//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
type XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ struct {
//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format"`

}

//	If the W.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ instance.
func (me *XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_; fn != nil { fn(me) }
 }

//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	If the exact format cannot be resolve via other methods then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	Additional hints about data relationships and other things to help the application pick the best format.
//	Additional hints about data relationships and other things to help the application pick the best format.
type TfxSurfaceFormatHintOptionEnum xsdt.String

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintOptionEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "COMPRESSABLE".
func (me TfxSurfaceFormatHintOptionEnum) IsCompressable () bool { return me == "COMPRESSABLE" }

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintOptionEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED3".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized3 () bool { return me == "NORMALIZED3" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintOptionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintOptionEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED4".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized4 () bool { return me == "NORMALIZED4" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "SRGB_GAMMA".
func (me TfxSurfaceFormatHintOptionEnum) IsSrgbGamma () bool { return me == "SRGB_GAMMA" }

type XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ struct {
//	Additional hints about data relationships and other things to help the application pick the best format.
	Options []TfxSurfaceFormatHintOptionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema option"`

}

//	If the W.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ instance.
func (me *XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_; fn != nil { fn(me) }
 }

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
type TfxSurfaceFormatHintPrecisionEnum xsdt.String

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintPrecisionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintPrecisionEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "HIGH".
func (me TfxSurfaceFormatHintPrecisionEnum) IsHigh () bool { return me == "HIGH" }

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintPrecisionEnum) String () string { return xsdt.String(me).String() }

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintPrecisionEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "MID".
func (me TfxSurfaceFormatHintPrecisionEnum) IsMid () bool { return me == "MID" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "LOW".
func (me TfxSurfaceFormatHintPrecisionEnum) IsLow () bool { return me == "LOW" }

type XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ struct {
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	Precision TfxSurfaceFormatHintPrecisionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema precision"`

}

//	If the W.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ instance.
func (me *XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_; fn != nil { fn(me) }
 }

//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
type TfxSurfaceFormatHintChannelsEnum xsdt.String

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintChannelsEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintChannelsEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZ".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyz () bool { return me == "XYZ" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "L".
func (me TfxSurfaceFormatHintChannelsEnum) IsL () bool { return me == "L" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGB".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgb () bool { return me == "RGB" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "D".
func (me TfxSurfaceFormatHintChannelsEnum) IsD () bool { return me == "D" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "LA".
func (me TfxSurfaceFormatHintChannelsEnum) IsLa () bool { return me == "LA" }

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintChannelsEnum) String () string { return xsdt.String(me).String() }

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintChannelsEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGBA".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgba () bool { return me == "RGBA" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZW".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyzw () bool { return me == "XYZW" }

type XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ struct {
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	Channels TfxSurfaceFormatHintChannelsEnum `xml:"http://www.collada.org/2005/11/COLLADASchema channels"`

}

//	If the W.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ instance.
func (me *XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_; fn != nil { fn(me) }
 }

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
type TfxSurfaceFormatHintRangeEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SINT".
func (me TfxSurfaceFormatHintRangeEnum) IsSint () bool { return me == "SINT" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsSnorm () bool { return me == "SNORM" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintRangeEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintRangeEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UINT".
func (me TfxSurfaceFormatHintRangeEnum) IsUint () bool { return me == "UINT" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintRangeEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsUnorm () bool { return me == "UNORM" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintRangeEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "FLOAT".
func (me TfxSurfaceFormatHintRangeEnum) IsFloat () bool { return me == "FLOAT" }

type XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ struct {
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	Range TfxSurfaceFormatHintRangeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema range"`

}

//	If the W.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ instance.
func (me *XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_; fn != nil { fn(me) }
 }

type TfxSurfaceFormatHintCommon struct {
	XsdGoPkgHasElems_Extra

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_

//	Additional hints about data relationships and other things to help the application pick the best format.
	XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_

//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_

}

//	If the W.TfxSurfaceFormatHintCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceFormatHintCommon instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TfxSurfaceFormatHintCommon instance.
func (me *TfxSurfaceFormatHintCommon) Walk ()  { 
	if fn := W.TfxSurfaceFormatHintCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_.Walk()
	me.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_.Walk()
	me.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_.Walk()
	me.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_.Walk()
 }

type XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ struct {
//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	FormatHint *TfxSurfaceFormatHintCommon `xml:"http://www.collada.org/2005/11/COLLADASchema format_hint"`

}

//	If the W.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ instance.
func (me *XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_; fn != nil { fn(me) }
	me.FormatHint.Walk()
 }

//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on type and other characteristics. described by the annotation docs on the child elements.
//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
//	This element is an IDREF which specifies the image to use to initialize a specific mip of a 1D or 2D surface, 3D slice, or Cube face.
type TfxSurfaceFaceEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_X".
func (me TfxSurfaceFaceEnum) IsNegativeX () bool { return me == "NEGATIVE_X" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Z".
func (me TfxSurfaceFaceEnum) IsPositiveZ () bool { return me == "POSITIVE_Z" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Z".
func (me TfxSurfaceFaceEnum) IsNegativeZ () bool { return me == "NEGATIVE_Z" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Y".
func (me TfxSurfaceFaceEnum) IsNegativeY () bool { return me == "NEGATIVE_Y" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_X".
func (me TfxSurfaceFaceEnum) IsPositiveX () bool { return me == "POSITIVE_X" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFaceEnum's alias type xsdt.String.
func (me TfxSurfaceFaceEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFaceEnum) String () string { return xsdt.String(me).String() }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFaceEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Y".
func (me TfxSurfaceFaceEnum) IsPositiveY () bool { return me == "POSITIVE_Y" }

type XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX struct {
	Face TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema face,attr"`

}

//	Returns the default value for Face -- "POSITIVE_X"
func (me XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX) FaceDefault () TfxSurfaceFaceEnum { return TfxSurfaceFaceEnum("POSITIVE_X") }

type XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0 struct {
	Slice xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`

}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0) SliceDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

type XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0 struct {
	Mip xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`

}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0) MipDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

type TfxSurfaceInitFromCommon struct {
	XsdGoPkgValue xsdt.Idref `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0

}

//	If the W.TfxSurfaceInitFromCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitFromCommon instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TfxSurfaceInitFromCommon instance.
func (me *TfxSurfaceInitFromCommon) Walk ()  { 
	if fn := W.TfxSurfaceInitFromCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ struct {
//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	InitFroms []*TfxSurfaceInitFromCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`

}

//	If the W.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ instance.
func (me *XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_; fn != nil { fn(me) }
	for _, x := range me.InitFroms { x.Walk() }
 }

//	Init a 3D from a compound image such as DDS
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
type XsdGoPkgHasAttr_Ref_XsdtIdref_ struct {
	Ref xsdt.Idref `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TxsdFxSurfaceInitVolumeCommonChoicePrimary struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitVolumeCommonChoicePrimary function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitVolumeCommonChoicePrimary instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitVolumeCommonChoicePrimary instance.
func (me *TxsdFxSurfaceInitVolumeCommonChoicePrimary) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitVolumeCommonChoicePrimary; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ struct {
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`

}

//	If the W.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ instance.
func (me *XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_; fn != nil { fn(me) }
	me.Primary.Walk()
 }

//	Init the entire surface with one compound image such as DDS
type TxsdFxSurfaceInitVolumeCommonChoiceAll struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitVolumeCommonChoiceAll function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitVolumeCommonChoiceAll instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitVolumeCommonChoiceAll instance.
func (me *TxsdFxSurfaceInitVolumeCommonChoiceAll) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitVolumeCommonChoiceAll; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitVolumeCommonChoiceAll `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

//	If the W.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_; fn != nil { fn(me) }
	me.All.Walk()
 }

type TfxSurfaceInitVolumeCommon struct {
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_

//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_

}

//	If the W.TfxSurfaceInitVolumeCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitVolumeCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitVolumeCommon instance.
func (me *TfxSurfaceInitVolumeCommon) Walk ()  { 
	if fn := W.TfxSurfaceInitVolumeCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_.Walk()
	me.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_.Walk()
 }

type XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ struct {
//	Init a 3D from a compound image such as DDS
	InitVolume *TfxSurfaceInitVolumeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_volume"`

}

//	If the W.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ instance.
func (me *XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_; fn != nil { fn(me) }
	me.InitVolume.Walk()
 }

//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
type XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ struct {
//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	InitAsTarget xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_target"`

}

//	If the W.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ instance.
func (me *XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_; fn != nil { fn(me) }
 }

//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
//	For 1D, 2D, RECT surface types
//	Init the entire surface with one compound image such as DDS
type TxsdFxSurfaceInitPlanarCommonChoiceAll struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitPlanarCommonChoiceAll function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitPlanarCommonChoiceAll instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitPlanarCommonChoiceAll instance.
func (me *TxsdFxSurfaceInitPlanarCommonChoiceAll) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitPlanarCommonChoiceAll; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitPlanarCommonChoiceAll `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

//	If the W.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_; fn != nil { fn(me) }
	me.All.Walk()
 }

type TfxSurfaceInitPlanarCommon struct {
//	This choice exists for consistancy with other init types (volume and cube).  When other initialization methods are needed.
//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_

}

//	If the W.TfxSurfaceInitPlanarCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitPlanarCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitPlanarCommon instance.
func (me *TfxSurfaceInitPlanarCommon) Walk ()  { 
	if fn := W.TfxSurfaceInitPlanarCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_.Walk()
 }

type XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ struct {
//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	InitPlanar *TfxSurfaceInitPlanarCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_planar"`

}

//	If the W.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ instance.
func (me *XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_; fn != nil { fn(me) }
	me.InitPlanar.Walk()
 }

//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
type XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ struct {
//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	InitAsNull xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_null"`

}

//	If the W.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ instance.
func (me *XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_; fn != nil { fn(me) }
 }

//	Init a CUBE from a compound image such as DDS
//	Init each face mipchain with one compound image such as DDS
type TxsdFxSurfaceInitCubeCommonChoiceFace struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitCubeCommonChoiceFace function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitCubeCommonChoiceFace instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitCubeCommonChoiceFace instance.
func (me *TxsdFxSurfaceInitCubeCommonChoiceFace) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitCubeCommonChoiceFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ struct {
//	Init each face mipchain with one compound image such as DDS
	Faces []*TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

//	If the W.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ instance.
func (me *XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_; fn != nil { fn(me) }
	for _, x := range me.Faces { x.Walk() }
 }

//	Init the entire surface with one compound image such as DDS
type TxsdFxSurfaceInitCubeCommonChoiceAll struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitCubeCommonChoiceAll function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitCubeCommonChoiceAll instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitCubeCommonChoiceAll instance.
func (me *TxsdFxSurfaceInitCubeCommonChoiceAll) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitCubeCommonChoiceAll; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitCubeCommonChoiceAll `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

//	If the W.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_; fn != nil { fn(me) }
	me.All.Walk()
 }

//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
type XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ struct {
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	Orders []TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema order"`

}

//	If the W.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ instance.
func (me *XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_; fn != nil { fn(me) }
 }

type TxsdFxSurfaceInitCubeCommonChoicePrimary struct {
//	This sequence exists to allow the order elements to be optional but require that if they exist there must be 6 of them.
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_

	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

//	If the W.TxsdFxSurfaceInitCubeCommonChoicePrimary function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitCubeCommonChoicePrimary instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitCubeCommonChoicePrimary instance.
func (me *TxsdFxSurfaceInitCubeCommonChoicePrimary) Walk ()  { 
	if fn := W.TxsdFxSurfaceInitCubeCommonChoicePrimary; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_.Walk()
 }

type XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ struct {
//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitCubeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`

}

//	If the W.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ instance.
func (me *XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_; fn != nil { fn(me) }
	me.Primary.Walk()
 }

type TfxSurfaceInitCubeCommon struct {
//	Init each face mipchain with one compound image such as DDS
	XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_

//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_

//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_

}

//	If the W.TfxSurfaceInitCubeCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitCubeCommon instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitCubeCommon instance.
func (me *TfxSurfaceInitCubeCommon) Walk ()  { 
	if fn := W.TfxSurfaceInitCubeCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_.Walk()
	me.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_.Walk()
	me.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_.Walk()
 }

type XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ struct {
//	Init a CUBE from a compound image such as DDS
	InitCube *TfxSurfaceInitCubeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_cube"`

}

//	If the W.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ instance.
func (me *XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_; fn != nil { fn(me) }
	me.InitCube.Walk()
 }

type XsdGoPkgHasGroup_FxSurfaceInitCommon struct {
//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_

//	Init a 3D from a compound image such as DDS
	XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_

//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_

//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_

//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_

//	Init a CUBE from a compound image such as DDS
	XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_

}

//	If the W.XsdGoPkgHasGroup_FxSurfaceInitCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxSurfaceInitCommon instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxSurfaceInitCommon instance.
func (me *XsdGoPkgHasGroup_FxSurfaceInitCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_FxSurfaceInitCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_.Walk()
	me.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_.Walk()
	me.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_.Walk()
	me.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_.Walk()
	me.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_.Walk()
	me.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_.Walk()
 }

//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
type XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 struct {
//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	MipLevels xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip_levels"`

}

//	Returns the default value for MipLevels -- 0
func (me XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0) MipLevelsDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

//	If the W.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 instance.
func (me *XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0; fn != nil { fn(me) }
 }

//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
type TfxSurfaceTypeEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "DEPTH".
func (me TfxSurfaceTypeEnum) IsDepth () bool { return me == "DEPTH" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "3D".
func (me TfxSurfaceTypeEnum) Is3D () bool { return me == "3D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "1D".
func (me TfxSurfaceTypeEnum) Is1D () bool { return me == "1D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "2D".
func (me TfxSurfaceTypeEnum) Is2D () bool { return me == "2D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "RECT".
func (me TfxSurfaceTypeEnum) IsRect () bool { return me == "RECT" }

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceTypeEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "CUBE".
func (me TfxSurfaceTypeEnum) IsCube () bool { return me == "CUBE" }

//	This convenience method just performs a simple type conversion to TfxSurfaceTypeEnum's alias type xsdt.String.
func (me TfxSurfaceTypeEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "UNTYPED".
func (me TfxSurfaceTypeEnum) IsUntyped () bool { return me == "UNTYPED" }

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceTypeEnum) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_ struct {
//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
	Type TfxSurfaceTypeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
type XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 struct {
//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	ViewportRatio Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema viewport_ratio"`

}

//	If the W.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 instance.
func (me *XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11; fn != nil { fn(me) }
 }

//	Returns the default value for ViewportRatio -- "1 1"
func (me XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11) ViewportRatioDefault () Tfloat2 { return Tfloat2("1 1") }

type TfxSurfaceCommon struct {
//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
	XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_

//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11

//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000

//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_

//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_

//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_

	XsdGoPkgHasElems_Extra

//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on the type attribute and other characteristics described by the annotation docs on the choiced child elements of this type.
	XsdGoPkgHasGroup_FxSurfaceInitCommon

//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0

}

//	If the W.TfxSurfaceCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceCommon instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TfxSurfaceCommon instance.
func (me *TfxSurfaceCommon) Walk ()  { 
	if fn := W.TfxSurfaceCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11.Walk()
	me.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000.Walk()
	me.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_.Walk()
	me.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_.Walk()
	me.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasGroup_FxSurfaceInitCommon.Walk()
	me.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0.Walk()
 }

type XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ struct {
	Surface *TfxSurfaceCommon `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance.
func (me *XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_; fn != nil { fn(me) }
	me.Surface.Walk()
 }

type Tbool2 TListOfBools

//	Since Tbool2 is just a simple String type, this merely returns the current string value.
func (me Tbool2) String () string { return TListOfBools(me).String() }

//	This convenience method just performs a simple type conversion to Tbool2's alias type TListOfBools.
func (me Tbool2) ToTListOfBools () TListOfBools { return TListOfBools(me) }

//	Since Tbool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ struct {
	Bool2 Tbool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	If the W.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_; fn != nil { fn(me) }
 }

type Tfloat4X3 TListOfFloats

//	Since Tfloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat4X3's alias type TListOfFloats.
func (me Tfloat4X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X3) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ struct {
	Float4X3 Tfloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`

}

//	If the W.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ instance.
func (me *XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_; fn != nil { fn(me) }
 }

type Tbool4 TListOfBools

//	This convenience method just performs a simple type conversion to Tbool4's alias type TListOfBools.
func (me Tbool4) ToTListOfBools () TListOfBools { return TListOfBools(me) }

//	Since Tbool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

//	Since Tbool4 is just a simple String type, this merely returns the current string value.
func (me Tbool4) String () string { return TListOfBools(me).String() }

type XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ struct {
	Bool4 Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

//	If the W.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_; fn != nil { fn(me) }
 }

//	A two-dimensional texture sampler.
type XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	If the W.XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

//	If the W.XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	If the W.XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

//	If the W.XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

//	If the W.XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type TfxSamplerRECTCommon struct {
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00

}

//	If the W.TfxSamplerRECTCommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerRECTCommon instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TfxSamplerRECTCommon instance.
func (me *TfxSamplerRECTCommon) Walk ()  { 
	if fn := W.TfxSamplerRECTCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk()
	me.XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk()
	me.XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00.Walk()
 }

type XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ struct {
	SamplerRECT *TfxSamplerRECTCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

//	If the W.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_; fn != nil { fn(me) }
	me.SamplerRECT.Walk()
 }

type XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ struct {
	Float1X2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`

}

//	If the W.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_; fn != nil { fn(me) }
 }

type Tfloat3X3 TListOfFloats

//	Since Tfloat3X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X3) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3X3's alias type TListOfFloats.
func (me Tfloat3X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ struct {
	Float3X3 Tfloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

//	If the W.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_; fn != nil { fn(me) }
 }

type Tfloat2X4 TListOfFloats

//	Since Tfloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat2X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X4) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat2X4's alias type TListOfFloats.
func (me Tfloat2X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ struct {
	Float2X4 Tfloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`

}

//	If the W.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ instance.
func (me *XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ struct {
	Float1X1 Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`

}

//	If the W.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ instance.
func (me *XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_; fn != nil { fn(me) }
 }

type Tint4 TListOfInts

//	Since Tint4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

//	Since Tint4 is just a simple String type, this merely returns the current string value.
func (me Tint4) String () string { return TListOfInts(me).String() }

//	This convenience method just performs a simple type conversion to Tint4's alias type TListOfInts.
func (me Tint4) ToTListOfInts () TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ struct {
	Int4 Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

//	If the W.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ instance.
func (me *XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasGroup_FxBasicTypeCommon struct {
	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_

	XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_

	XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_

	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_

	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_

	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_

}

//	If the W.XsdGoPkgHasGroup_FxBasicTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxBasicTypeCommon instance as the single argument. Then calls the Walk() method on 36/36 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxBasicTypeCommon instance.
func (me *XsdGoPkgHasGroup_FxBasicTypeCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_FxBasicTypeCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_.Walk()
	me.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_.Walk()
	me.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_.Walk()
	me.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_.Walk()
	me.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_.Walk()
	me.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_.Walk()
	me.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_.Walk()
	me.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_.Walk()
	me.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_.Walk()
	me.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_.Walk()
	me.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_.Walk()
	me.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_.Walk()
	me.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_.Walk()
	me.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_.Walk()
	me.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_.Walk()
	me.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_.Walk()
	me.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_.Walk()
	me.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_.Walk()
	me.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_.Walk()
	me.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_.Walk()
	me.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_.Walk()
	me.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_.Walk()
	me.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_.Walk()
	me.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_.Walk()
	me.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_.Walk()
	me.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_.Walk()
	me.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_.Walk()
	me.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_.Walk()
 }

type TxsdInstanceEffectSequenceSetparam struct {
	XsdGoPkgHasGroup_FxBasicTypeCommon

	XsdGoPkgHasAttr_Ref_XsdtToken_

}

//	If the W.TxsdInstanceEffectSequenceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectSequenceSetparam instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectSequenceSetparam instance.
func (me *TxsdInstanceEffectSequenceSetparam) Walk ()  { 
	if fn := W.TxsdInstanceEffectSequenceSetparam; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_FxBasicTypeCommon.Walk()
 }

type XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ struct {
//	Assigns a new value to a previously defined parameter
	Setparams []*TxsdInstanceEffectSequenceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

//	Add a hint for a platform of which technique to use in this effect.
//	A profile defines a string that specifies which API profile this is hint is aimed for.
type XsdGoPkgHasAttr_Profile_XsdtNCName_ struct {
//	A profile defines a string that specifies which API profile this is hint is aimed for.
	Profile xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`

}

type XsdGoPkgHasAttr_Ref_XsdtNCName_ struct {
	Ref xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

//	A platform defines a string that specifies which platform this is hint is aimed for.
type XsdGoPkgHasAttr_Platform_XsdtNCName_ struct {
//	A platform defines a string that specifies which platform this is hint is aimed for.
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`

}

type TxsdInstanceEffectSequenceTechniqueHint struct {
//	A profile defines a string that specifies which API profile this is hint is aimed for.
	XsdGoPkgHasAttr_Profile_XsdtNCName_

//	A reference to the technique to use for the specified platform.
	XsdGoPkgHasAttr_Ref_XsdtNCName_

//	A platform defines a string that specifies which platform this is hint is aimed for.
	XsdGoPkgHasAttr_Platform_XsdtNCName_

}

//	If the W.TxsdInstanceEffectSequenceTechniqueHint function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectSequenceTechniqueHint instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectSequenceTechniqueHint instance.
func (me *TxsdInstanceEffectSequenceTechniqueHint) Walk ()  { 
	if fn := W.TxsdInstanceEffectSequenceTechniqueHint; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ struct {
//	Add a hint for a platform of which technique to use in this effect.
	TechniqueHints []*TxsdInstanceEffectSequenceTechniqueHint `xml:"http://www.collada.org/2005/11/COLLADASchema technique_hint"`

}

//	If the W.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ instance.
func (me *XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_; fn != nil { fn(me) }
	for _, x := range me.TechniqueHints { x.Walk() }
 }

type TxsdInstanceEffect struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	Assigns a new value to a previously defined parameter
	XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_

//	Add a hint for a platform of which technique to use in this effect.
	XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_

}

//	If the W.TxsdInstanceEffect function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffect instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffect instance.
func (me *TxsdInstanceEffect) Walk ()  { 
	if fn := W.TxsdInstanceEffect; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_.Walk()
	me.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_InstanceEffect struct {
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	InstanceEffect *TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`

}

//	If the W.XsdGoPkgHasElem_InstanceEffect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceEffect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceEffect instance.
func (me *XsdGoPkgHasElem_InstanceEffect) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceEffect; fn != nil { fn(me) }
	me.InstanceEffect.Walk()
 }

type TxsdMaterial struct {
//	The material must instance an effect.
	XsdGoPkgHasElem_InstanceEffect

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The material element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdMaterial function is not nil (ie. was set by outside code), calls it with this TxsdMaterial instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdMaterial instance.
func (me *TxsdMaterial) Walk ()  { 
	if fn := W.TxsdMaterial; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElem_InstanceEffect.Walk()
 }

type XsdGoPkgHasElems_Material struct {
//	Materials describe the visual appearance of a geometric object.
	Materials []*TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`

}

//	If the W.XsdGoPkgHasElems_Material function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Material instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Material instance.
func (me *XsdGoPkgHasElems_Material) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Material; fn != nil { fn(me) }
	for _, x := range me.Materials { x.Walk() }
 }

type TxsdLibraryMaterials struct {
//	There must be at least one material element.
	XsdGoPkgHasElems_Material

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdLibraryMaterials function is not nil (ie. was set by outside code), calls it with this TxsdLibraryMaterials instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryMaterials instance.
func (me *TxsdLibraryMaterials) Walk ()  { 
	if fn := W.TxsdLibraryMaterials; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Material.Walk()
 }

type XsdGoPkgHasElems_LibraryMaterials struct {
//	The library_materials element declares a module of material elements.
	MaterialsLibraries []*TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`

}

//	If the W.XsdGoPkgHasElems_LibraryMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryMaterials instance.
func (me *XsdGoPkgHasElems_LibraryMaterials) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryMaterials; fn != nil { fn(me) }
	for _, x := range me.MaterialsLibraries { x.Walk() }
 }

//	The library_physics_materials element declares a module of physics_material elements.
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
//	The TargetableFloat type is used to represent elements which contain a single float value which can
//	be targeted for animation.
type TargetableFloat struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TargetableFloat function is not nil (ie. was set by outside code), calls it with this TargetableFloat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TargetableFloat instance.
func (me *TargetableFloat) Walk ()  { 
	if fn := W.TargetableFloat; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ struct {
//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	Restitution *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema restitution"`

}

//	If the W.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_; fn != nil { fn(me) }
	me.Restitution.Walk()
 }

//	Static friction coefficient
type XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ struct {
//	Static friction coefficient
	StaticFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema static_friction"`

}

//	If the W.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_; fn != nil { fn(me) }
	me.StaticFriction.Walk()
 }

//	Dynamic friction coefficient
type XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ struct {
//	Dynamic friction coefficient
	DynamicFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic_friction"`

}

//	If the W.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_; fn != nil { fn(me) }
	me.DynamicFriction.Walk()
 }

type TxsdPhysicsMaterialSequenceTechniqueCommon struct {
//	Static friction coefficient
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_

//	Dynamic friction coefficient
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_

//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_

}

//	If the W.TxsdPhysicsMaterialSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsMaterialSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsMaterialSequenceTechniqueCommon instance.
func (me *TxsdPhysicsMaterialSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdPhysicsMaterialSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdPhysicsMaterial struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The physics_material element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_

}

//	If the W.TxsdPhysicsMaterial function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsMaterial instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsMaterial instance.
func (me *TxsdPhysicsMaterial) Walk ()  { 
	if fn := W.TxsdPhysicsMaterial; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
 }

type XsdGoPkgHasElems_PhysicsMaterial struct {
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterials []*TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`

}

//	If the W.XsdGoPkgHasElems_PhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsMaterial instance.
func (me *XsdGoPkgHasElems_PhysicsMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_PhysicsMaterial; fn != nil { fn(me) }
	for _, x := range me.PhysicsMaterials { x.Walk() }
 }

type TxsdLibraryPhysicsMaterials struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There must be at least one physics_material element.
	XsdGoPkgHasElems_PhysicsMaterial

//	The library_physics_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdLibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsMaterials instance.
func (me *TxsdLibraryPhysicsMaterials) Walk ()  { 
	if fn := W.TxsdLibraryPhysicsMaterials; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_PhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryPhysicsMaterials struct {
//	The library_physics_materials element declares a module of physics_material elements.
	PhysicsMaterialsLibraries []*TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`

}

//	If the W.XsdGoPkgHasElems_LibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsMaterials instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsMaterials) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryPhysicsMaterials; fn != nil { fn(me) }
	for _, x := range me.PhysicsMaterialsLibraries { x.Walk() }
 }

//	The library_animation_clips element declares a module of animation_clip elements.
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
type XsdGoPkgHasAttr_Start_XsdtDouble_00 struct {
//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	Start xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema start,attr"`

}

//	Returns the default value for Start -- 0.0
func (me XsdGoPkgHasAttr_Start_XsdtDouble_00) StartDefault () xsdt.Double { return xsdt.Double(0.0) }

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
type XsdGoPkgHasAttr_End_XsdtDouble_ struct {
//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
	End xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema end,attr"`

}

//	The animation_clip must instance at least one animation element.
//	The InstanceWithExtra type is used for all generic instance elements. A generic instance element
//	is one which does not have any specific child elements declared.
type TInstanceWithExtra struct {
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The extra element may occur any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TInstanceWithExtra function is not nil (ie. was set by outside code), calls it with this TInstanceWithExtra instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TInstanceWithExtra instance.
func (me *TInstanceWithExtra) Walk ()  { 
	if fn := W.TInstanceWithExtra; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ struct {
//	The animation_clip must instance at least one animation element.
	AnimationInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_animation"`

}

//	If the W.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_; fn != nil { fn(me) }
	for _, x := range me.AnimationInstances { x.Walk() }
 }

type TxsdAnimationClip struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The animation_clip element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	XsdGoPkgHasAttr_Start_XsdtDouble_00

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
	XsdGoPkgHasAttr_End_XsdtDouble_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The animation_clip must instance at least one animation element.
	XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_

}

//	If the W.TxsdAnimationClip function is not nil (ie. was set by outside code), calls it with this TxsdAnimationClip instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdAnimationClip instance.
func (me *TxsdAnimationClip) Walk ()  { 
	if fn := W.TxsdAnimationClip; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_.Walk()
 }

type XsdGoPkgHasElems_AnimationClip struct {
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
	AnimationClips []*TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`

}

//	If the W.XsdGoPkgHasElems_AnimationClip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnimationClip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnimationClip instance.
func (me *XsdGoPkgHasElems_AnimationClip) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_AnimationClip; fn != nil { fn(me) }
	for _, x := range me.AnimationClips { x.Walk() }
 }

type TxsdLibraryAnimationClips struct {
//	The library_animation_clips element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one animation_clip element.
	XsdGoPkgHasElems_AnimationClip

}

//	If the W.TxsdLibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this TxsdLibraryAnimationClips instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryAnimationClips instance.
func (me *TxsdLibraryAnimationClips) Walk ()  { 
	if fn := W.TxsdLibraryAnimationClips; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_AnimationClip.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryAnimationClips struct {
//	The library_animation_clips element declares a module of animation_clip elements.
	AnimationClipsLibraries []*TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`

}

//	If the W.XsdGoPkgHasElems_LibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryAnimationClips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryAnimationClips instance.
func (me *XsdGoPkgHasElems_LibraryAnimationClips) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryAnimationClips; fn != nil { fn(me) }
	for _, x := range me.AnimationClipsLibraries { x.Walk() }
 }

//	The library_cameras element declares a module of camera elements.
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
//	The perspective element describes the optics of a perspective camera.
//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
type XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`

}

//	If the W.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_; fn != nil { fn(me) }
	me.AspectRatio.Walk()
 }

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
type XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ struct {
//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	Xfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xfov"`

}

//	If the W.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_; fn != nil { fn(me) }
	me.Xfov.Walk()
 }

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
type XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ struct {
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	Zfar *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema zfar"`

}

//	If the W.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_; fn != nil { fn(me) }
	me.Zfar.Walk()
 }

type XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`

}

//	If the W.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_; fn != nil { fn(me) }
	me.AspectRatio.Walk()
 }

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
type XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ struct {
//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	Znear *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema znear"`

}

//	If the W.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_; fn != nil { fn(me) }
	me.Znear.Walk()
 }

type XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ struct {
	Yfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema yfov"`

}

//	If the W.XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_; fn != nil { fn(me) }
	me.Yfov.Walk()
 }

//	The yfov element contains a floating point number describing the verticle field of view in degrees.
type XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ struct {
//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	Yfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema yfov"`

}

//	If the W.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_; fn != nil { fn(me) }
	me.Yfov.Walk()
 }

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective struct {
	XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_

//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_

//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

	XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_

}

//	If the W.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective) Walk ()  { 
	if fn := W.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk()
 }

type XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ struct {
//	The perspective element describes the optics of a perspective camera.
	Perspective *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective `xml:"http://www.collada.org/2005/11/COLLADASchema perspective"`

}

//	If the W.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance.
func (me *XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_; fn != nil { fn(me) }
	me.Perspective.Walk()
 }

//	The orthographic element describes the field of view of an orthographic camera.
//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
type XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ struct {
//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
	Xmag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xmag"`

}

//	If the W.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_; fn != nil { fn(me) }
	me.Xmag.Walk()
 }

type XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`

}

//	If the W.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_; fn != nil { fn(me) }
	me.AspectRatio.Walk()
 }

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
type XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ struct {
//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	Znear *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema znear"`

}

//	If the W.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_; fn != nil { fn(me) }
	me.Znear.Walk()
 }

//	The aspect_ratio element contains a floating point number describing the aspect ratio of
//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
//	calculated from the xmag or ymag elements and the current viewport.
type XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
//	The aspect_ratio element contains a floating point number describing the aspect ratio of
//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
//	calculated from the xmag or ymag elements and the current viewport.
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`

}

//	If the W.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_; fn != nil { fn(me) }
	me.AspectRatio.Walk()
 }

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
type XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ struct {
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	Zfar *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema zfar"`

}

//	If the W.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_; fn != nil { fn(me) }
	me.Zfar.Walk()
 }

//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
type XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ struct {
//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
	Ymag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema ymag"`

}

//	If the W.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_; fn != nil { fn(me) }
	me.Ymag.Walk()
 }

type XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ struct {
	Ymag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema ymag"`

}

//	If the W.XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_; fn != nil { fn(me) }
	me.Ymag.Walk()
 }

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic struct {
//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_

//	The aspect_ratio element contains a floating point number describing the aspect ratio of
//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
//	calculated from the xmag or ymag elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_

	XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_

//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_

	XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

}

//	If the W.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic) Walk ()  { 
	if fn := W.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk()
 }

type XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ struct {
//	The orthographic element describes the field of view of an orthographic camera.
	Orthographic *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic `xml:"http://www.collada.org/2005/11/COLLADASchema orthographic"`

}

//	If the W.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance.
func (me *XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_; fn != nil { fn(me) }
	me.Orthographic.Walk()
 }

type TxsdCameraSequenceOpticsSequenceTechniqueCommon struct {
//	The perspective element describes the optics of a perspective camera.
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_

//	The orthographic element describes the field of view of an orthographic camera.
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_

}

//	If the W.TxsdCameraSequenceOpticsSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommon instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdCameraSequenceOpticsSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_.Walk()
	me.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdCameraSequenceOpticsSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdCameraSequenceOptics struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_

}

//	If the W.TxsdCameraSequenceOptics function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOptics instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOptics instance.
func (me *TxsdCameraSequenceOptics) Walk ()  { 
	if fn := W.TxsdCameraSequenceOptics; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_.Walk()
 }

type XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ struct {
//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	Optics *TxsdCameraSequenceOptics `xml:"http://www.collada.org/2005/11/COLLADASchema optics"`

}

//	If the W.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ instance.
func (me *XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_; fn != nil { fn(me) }
	me.Optics.Walk()
 }

//	Imagers represent the image sensor of a camera (for example film or CCD).
type TxsdCameraSequenceImager struct {
//	This element may contain any number of non-common profile techniques.
//	There is no common technique for imager.
	XsdGoPkgHasElems_Technique

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdCameraSequenceImager function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceImager instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceImager instance.
func (me *TxsdCameraSequenceImager) Walk ()  { 
	if fn := W.TxsdCameraSequenceImager; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
 }

type XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ struct {
//	Imagers represent the image sensor of a camera (for example film or CCD).
	Imager *TxsdCameraSequenceImager `xml:"http://www.collada.org/2005/11/COLLADASchema imager"`

}

//	If the W.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ instance.
func (me *XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_; fn != nil { fn(me) }
	me.Imager.Walk()
 }

type TxsdCamera struct {
//	The camera element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	Imagers represent the image sensor of a camera (for example film or CCD).
	XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdCamera function is not nil (ie. was set by outside code), calls it with this TxsdCamera instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdCamera instance.
func (me *TxsdCamera) Walk ()  { 
	if fn := W.TxsdCamera; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_.Walk()
	me.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_.Walk()
 }

type XsdGoPkgHasElems_Camera struct {
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
	Cameras []*TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`

}

//	If the W.XsdGoPkgHasElems_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Camera instance.
func (me *XsdGoPkgHasElems_Camera) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Camera; fn != nil { fn(me) }
	for _, x := range me.Cameras { x.Walk() }
 }

type TxsdLibraryCameras struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one camera element.
	XsdGoPkgHasElems_Camera

//	The library_cameras element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdLibraryCameras function is not nil (ie. was set by outside code), calls it with this TxsdLibraryCameras instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryCameras instance.
func (me *TxsdLibraryCameras) Walk ()  { 
	if fn := W.TxsdLibraryCameras; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Camera.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryCameras struct {
//	The library_cameras element declares a module of camera elements.
	CamerasLibraries []*TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`

}

//	If the W.XsdGoPkgHasElems_LibraryCameras function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryCameras instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryCameras instance.
func (me *XsdGoPkgHasElems_LibraryCameras) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryCameras; fn != nil { fn(me) }
	for _, x := range me.CamerasLibraries { x.Walk() }
 }

//	The library_effects element declares a module of effect elements.
//	A self contained description of a shader effect.
//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of GLES platform-specific data types and technique declarations.
//	Create a new, named param object in the GLES Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	The modifier element allows you to specify a modifier for this new param.
type TfxModifierEnumCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "SHARED".
func (me TfxModifierEnumCommon) IsShared () bool { return me == "SHARED" }

//	Since TfxModifierEnumCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxModifierEnumCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VOLATILE".
func (me TfxModifierEnumCommon) IsVolatile () bool { return me == "VOLATILE" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "EXTERN".
func (me TfxModifierEnumCommon) IsExtern () bool { return me == "EXTERN" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "STATIC".
func (me TfxModifierEnumCommon) IsStatic () bool { return me == "STATIC" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "CONST".
func (me TfxModifierEnumCommon) IsConst () bool { return me == "CONST" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VARYING".
func (me TfxModifierEnumCommon) IsVarying () bool { return me == "VARYING" }

//	Since TfxModifierEnumCommon is just a simple String type, this merely returns the current string value.
func (me TfxModifierEnumCommon) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfxModifierEnumCommon's alias type xsdt.Nmtoken.
func (me TfxModifierEnumCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "UNIFORM".
func (me TfxModifierEnumCommon) IsUniform () bool { return me == "UNIFORM" }

type XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_ struct {
//	The modifier element allows you to specify a modifier for this new param.
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`

}

//	If the W.XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_ instance.
func (me *XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_; fn != nil { fn(me) }
 }

//	The semantic element allows you to specify a semantic for this new param.
type XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_ struct {
//	The semantic element allows you to specify a semantic for this new param.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

//	If the W.XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_; fn != nil { fn(me) }
 }

//	The annotate element allows you to specify an annotation for this new param.
//	A group that specifies the allowable types for an annotation.
type XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_ struct {
	Float4X4 Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

//	If the W.XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_ struct {
	Bool4 Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

//	If the W.XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_ struct {
	Float3X3 Tfloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

//	If the W.XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_ struct {
	Int Tint `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

//	If the W.XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_ instance.
func (me *XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_ struct {
	Int3 Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	If the W.XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_ instance.
func (me *XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_ struct {
	Int2 Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

//	If the W.XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_ instance.
func (me *XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_ struct {
	Bool2 Tbool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	If the W.XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema string"`

}

//	If the W.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ instance.
func (me *XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_ struct {
	Float Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_ struct {
	Bool Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

//	If the W.XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_ instance.
func (me *XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_ struct {
	Bool3 Tbool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

//	If the W.XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_ struct {
	Int4 Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

//	If the W.XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_ instance.
func (me *XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_ struct {
	Float2X2 Tfloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	If the W.XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasGroup_FxAnnotateTypeCommon struct {
	XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_

	XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_

}

//	If the W.XsdGoPkgHasGroup_FxAnnotateTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxAnnotateTypeCommon instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxAnnotateTypeCommon instance.
func (me *XsdGoPkgHasGroup_FxAnnotateTypeCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_FxAnnotateTypeCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_.Walk()
	me.XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_.Walk()
	me.XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_.Walk()
	me.XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_.Walk()
	me.XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_.Walk()
	me.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_.Walk()
	me.XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_.Walk()
	me.XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_.Walk()
	me.XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_.Walk()
	me.XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_.Walk()
	me.XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_.Walk()
	me.XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_.Walk()
	me.XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_.Walk()
 }

type TfxAnnotateCommon struct {
	XsdGoPkgHasAttr_Name_XsdtNCName_

	XsdGoPkgHasGroup_FxAnnotateTypeCommon

}

//	If the W.TfxAnnotateCommon function is not nil (ie. was set by outside code), calls it with this TfxAnnotateCommon instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TfxAnnotateCommon instance.
func (me *TfxAnnotateCommon) Walk ()  { 
	if fn := W.TfxAnnotateCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_FxAnnotateTypeCommon.Walk()
 }

type XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this new param.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

//	A group that defines the available variable types for GLES parameters.
type XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_ struct {
	Float2X1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`

}

//	If the W.XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_ struct {
	Bool4 Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

//	If the W.XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_ struct {
	Float4X2 Tfloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`

}

//	If the W.XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_ instance.
func (me *XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_ struct {
	Float4X4 Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

//	If the W.XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_ struct {
	Float2X4 Tfloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`

}

//	If the W.XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_ instance.
func (me *XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_; fn != nil { fn(me) }
 }

type TglFogType xsdt.String

//	Since TglFogType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglFogType is just a simple String type, this merely returns the current string value.
func (me TglFogType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogType is "LINEAR".
func (me TglFogType) IsLinear () bool { return me == "LINEAR" }

//	Returns true if the value of this enumerated TglFogType is "EXP2".
func (me TglFogType) IsExp2 () bool { return me == "EXP2" }

//	Returns true if the value of this enumerated TglFogType is "EXP".
func (me TglFogType) IsExp () bool { return me == "EXP" }

//	This convenience method just performs a simple type conversion to TglFogType's alias type xsdt.String.
func (me TglFogType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TglFrontFaceType xsdt.String

//	Since TglFrontFaceType is just a simple String type, this merely returns the current string value.
func (me TglFrontFaceType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglFrontFaceType's alias type xsdt.String.
func (me TglFrontFaceType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFrontFaceType is "CW".
func (me TglFrontFaceType) IsCw () bool { return me == "CW" }

//	Returns true if the value of this enumerated TglFrontFaceType is "CCW".
func (me TglFrontFaceType) IsCcw () bool { return me == "CCW" }

//	Since TglFrontFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFrontFaceType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglLightModelColorControlType xsdt.String

//	Since TglLightModelColorControlType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLightModelColorControlType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglLightModelColorControlType is just a simple String type, this merely returns the current string value.
func (me TglLightModelColorControlType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SEPARATE_SPECULAR_COLOR".
func (me TglLightModelColorControlType) IsSeparateSpecularColor () bool { return me == "SEPARATE_SPECULAR_COLOR" }

//	This convenience method just performs a simple type conversion to TglLightModelColorControlType's alias type xsdt.String.
func (me TglLightModelColorControlType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SINGLE_COLOR".
func (me TglLightModelColorControlType) IsSingleColor () bool { return me == "SINGLE_COLOR" }

type TglFuncType xsdt.String

//	This convenience method just performs a simple type conversion to TglFuncType's alias type xsdt.String.
func (me TglFuncType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFuncType is "LESS".
func (me TglFuncType) IsLess () bool { return me == "LESS" }

//	Returns true if the value of this enumerated TglFuncType is "ALWAYS".
func (me TglFuncType) IsAlways () bool { return me == "ALWAYS" }

//	Returns true if the value of this enumerated TglFuncType is "LEQUAL".
func (me TglFuncType) IsLequal () bool { return me == "LEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "GREATER".
func (me TglFuncType) IsGreater () bool { return me == "GREATER" }

//	Returns true if the value of this enumerated TglFuncType is "NOTEQUAL".
func (me TglFuncType) IsNotequal () bool { return me == "NOTEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "GEQUAL".
func (me TglFuncType) IsGequal () bool { return me == "GEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "EQUAL".
func (me TglFuncType) IsEqual () bool { return me == "EQUAL" }

//	Since TglFuncType is just a simple String type, this merely returns the current string value.
func (me TglFuncType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFuncType is "NEVER".
func (me TglFuncType) IsNever () bool { return me == "NEVER" }

//	Since TglFuncType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFuncType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglLogicOpType xsdt.String

//	Returns true if the value of this enumerated TglLogicOpType is "OR_REVERSE".
func (me TglLogicOpType) IsOrReverse () bool { return me == "OR_REVERSE" }

//	This convenience method just performs a simple type conversion to TglLogicOpType's alias type xsdt.String.
func (me TglLogicOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY_INVERTED".
func (me TglLogicOpType) IsCopyInverted () bool { return me == "COPY_INVERTED" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND_REVERSE".
func (me TglLogicOpType) IsAndReverse () bool { return me == "AND_REVERSE" }

//	Returns true if the value of this enumerated TglLogicOpType is "XOR".
func (me TglLogicOpType) IsXor () bool { return me == "XOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "NOR".
func (me TglLogicOpType) IsNor () bool { return me == "NOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "CLEAR".
func (me TglLogicOpType) IsClear () bool { return me == "CLEAR" }

//	Returns true if the value of this enumerated TglLogicOpType is "INVERT".
func (me TglLogicOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY".
func (me TglLogicOpType) IsCopy () bool { return me == "COPY" }

//	Returns true if the value of this enumerated TglLogicOpType is "NOOP".
func (me TglLogicOpType) IsNoop () bool { return me == "NOOP" }

//	Returns true if the value of this enumerated TglLogicOpType is "OR".
func (me TglLogicOpType) IsOr () bool { return me == "OR" }

//	Returns true if the value of this enumerated TglLogicOpType is "NAND".
func (me TglLogicOpType) IsNand () bool { return me == "NAND" }

//	Since TglLogicOpType is just a simple String type, this merely returns the current string value.
func (me TglLogicOpType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglLogicOpType is "EQUIV".
func (me TglLogicOpType) IsEquiv () bool { return me == "EQUIV" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND".
func (me TglLogicOpType) IsAnd () bool { return me == "AND" }

//	Returns true if the value of this enumerated TglLogicOpType is "SET".
func (me TglLogicOpType) IsSet () bool { return me == "SET" }

//	Since TglLogicOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLogicOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglLogicOpType is "AND_INVERTED".
func (me TglLogicOpType) IsAndInverted () bool { return me == "AND_INVERTED" }

type TglMaterialType xsdt.String

//	Since TglMaterialType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglMaterialType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglMaterialType's alias type xsdt.String.
func (me TglMaterialType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglMaterialType is "EMISSION".
func (me TglMaterialType) IsEmission () bool { return me == "EMISSION" }

//	Returns true if the value of this enumerated TglMaterialType is "SPECULAR".
func (me TglMaterialType) IsSpecular () bool { return me == "SPECULAR" }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT_AND_DIFFUSE".
func (me TglMaterialType) IsAmbientAndDiffuse () bool { return me == "AMBIENT_AND_DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT".
func (me TglMaterialType) IsAmbient () bool { return me == "AMBIENT" }

//	Returns true if the value of this enumerated TglMaterialType is "DIFFUSE".
func (me TglMaterialType) IsDiffuse () bool { return me == "DIFFUSE" }

//	Since TglMaterialType is just a simple String type, this merely returns the current string value.
func (me TglMaterialType) String () string { return xsdt.String(me).String() }

type TglStencilOpType xsdt.String

//	Returns true if the value of this enumerated TglStencilOpType is "KEEP".
func (me TglStencilOpType) IsKeep () bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglStencilOpType is "INVERT".
func (me TglStencilOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR_WRAP".
func (me TglStencilOpType) IsDecrWrap () bool { return me == "DECR_WRAP" }

//	Since TglStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglStencilOpType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglStencilOpType's alias type xsdt.String.
func (me TglStencilOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglStencilOpType is "INCR".
func (me TglStencilOpType) IsIncr () bool { return me == "INCR" }

//	Since TglStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglStencilOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglStencilOpType is "INCR_WRAP".
func (me TglStencilOpType) IsIncrWrap () bool { return me == "INCR_WRAP" }

//	Returns true if the value of this enumerated TglStencilOpType is "REPLACE".
func (me TglStencilOpType) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglStencilOpType is "ZERO".
func (me TglStencilOpType) IsZero () bool { return me == "ZERO" }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR".
func (me TglStencilOpType) IsDecr () bool { return me == "DECR" }

type TglPolygonModeType xsdt.String

//	Returns true if the value of this enumerated TglPolygonModeType is "POINT".
func (me TglPolygonModeType) IsPoint () bool { return me == "POINT" }

//	Returns true if the value of this enumerated TglPolygonModeType is "LINE".
func (me TglPolygonModeType) IsLine () bool { return me == "LINE" }

//	Returns true if the value of this enumerated TglPolygonModeType is "FILL".
func (me TglPolygonModeType) IsFill () bool { return me == "FILL" }

//	Since TglPolygonModeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglPolygonModeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglPolygonModeType's alias type xsdt.String.
func (me TglPolygonModeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglPolygonModeType is just a simple String type, this merely returns the current string value.
func (me TglPolygonModeType) String () string { return xsdt.String(me).String() }

type TglBlendType xsdt.String

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_ALPHA".
func (me TglBlendType) IsConstantAlpha () bool { return me == "CONSTANT_ALPHA" }

//	Since TglBlendType is just a simple String type, this merely returns the current string value.
func (me TglBlendType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_ALPHA".
func (me TglBlendType) IsOneMinusConstantAlpha () bool { return me == "ONE_MINUS_CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "DST_ALPHA".
func (me TglBlendType) IsDstAlpha () bool { return me == "DST_ALPHA" }

//	This convenience method just performs a simple type conversion to TglBlendType's alias type xsdt.String.
func (me TglBlendType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_COLOR".
func (me TglBlendType) IsConstantColor () bool { return me == "CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DEST_COLOR".
func (me TglBlendType) IsOneMinusDestColor () bool { return me == "ONE_MINUS_DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_COLOR".
func (me TglBlendType) IsSrcColor () bool { return me == "SRC_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA_SATURATE".
func (me TglBlendType) IsSrcAlphaSaturate () bool { return me == "SRC_ALPHA_SATURATE" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_ALPHA".
func (me TglBlendType) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "DEST_COLOR".
func (me TglBlendType) IsDestColor () bool { return me == "DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_COLOR".
func (me TglBlendType) IsOneMinusSrcColor () bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE".
func (me TglBlendType) IsOne () bool { return me == "ONE" }

//	Since TglBlendType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA".
func (me TglBlendType) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "ZERO".
func (me TglBlendType) IsZero () bool { return me == "ZERO" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_COLOR".
func (me TglBlendType) IsOneMinusConstantColor () bool { return me == "ONE_MINUS_CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DST_ALPHA".
func (me TglBlendType) IsOneMinusDstAlpha () bool { return me == "ONE_MINUS_DST_ALPHA" }

type TglFaceType xsdt.String

//	Since TglFaceType is just a simple String type, this merely returns the current string value.
func (me TglFaceType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFaceType is "FRONT".
func (me TglFaceType) IsFront () bool { return me == "FRONT" }

//	Returns true if the value of this enumerated TglFaceType is "FRONT_AND_BACK".
func (me TglFaceType) IsFrontAndBack () bool { return me == "FRONT_AND_BACK" }

//	This convenience method just performs a simple type conversion to TglFaceType's alias type xsdt.String.
func (me TglFaceType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFaceType is "BACK".
func (me TglFaceType) IsBack () bool { return me == "BACK" }

//	Since TglFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFaceType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglShadeModelType xsdt.String

//	Returns true if the value of this enumerated TglShadeModelType is "SMOOTH".
func (me TglShadeModelType) IsSmooth () bool { return me == "SMOOTH" }

//	Returns true if the value of this enumerated TglShadeModelType is "FLAT".
func (me TglShadeModelType) IsFlat () bool { return me == "FLAT" }

//	Since TglShadeModelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglShadeModelType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglShadeModelType's alias type xsdt.String.
func (me TglShadeModelType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglShadeModelType is just a simple String type, this merely returns the current string value.
func (me TglShadeModelType) String () string { return xsdt.String(me).String() }

type TglesEnumeration xsdt.String

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglesEnumeration) ToTglFogType () TglFogType { return TglFogType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglesEnumeration) ToTglFrontFaceType () TglFrontFaceType { return TglFrontFaceType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglesEnumeration) ToTglLightModelColorControlType () TglLightModelColorControlType { return TglLightModelColorControlType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglesEnumeration) ToTglFuncType () TglFuncType { return TglFuncType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglesEnumeration) ToTglLogicOpType () TglLogicOpType { return TglLogicOpType(me) }

//	Since TglesEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesEnumeration) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglesEnumeration) ToTglMaterialType () TglMaterialType { return TglMaterialType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglesEnumeration) ToTglStencilOpType () TglStencilOpType { return TglStencilOpType(me) }

//	This convenience method just performs a simple type conversion to TglesEnumeration's alias type xsdt.String.
func (me TglesEnumeration) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglesEnumeration) ToTglPolygonModeType () TglPolygonModeType { return TglPolygonModeType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglesEnumeration) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglesEnumeration) ToTglFaceType () TglFaceType { return TglFaceType(me) }

//	Since TglesEnumeration is just a simple String type, this merely returns the current string value.
func (me TglesEnumeration) String () string { return xsdt.String(me).String() }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglesEnumeration) ToTglShadeModelType () TglShadeModelType { return TglShadeModelType(me) }

type XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ struct {
	Enum TglesEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	If the W.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ instance.
func (me *XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_ struct {
	Surface *TfxSurfaceCommon `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance.
func (me *XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_; fn != nil { fn(me) }
	me.Surface.Walk()
 }

type XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_ struct {
	Float Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_ struct {
	Float4X3 Tfloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`

}

//	If the W.XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_ instance.
func (me *XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_ struct {
	Float3X4 Tfloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`

}

//	If the W.XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_ instance.
func (me *XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_ struct {
	Float4X1 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`

}

//	If the W.XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_ struct {
	Int4 Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

//	If the W.XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_ instance.
func (me *XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_; fn != nil { fn(me) }
 }

//	Defines a set of texturing commands that will be converted into multitexturing operations using glTexEnv in regular and combiner mode.
//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
type XsdGoPkgHasAttr_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param,attr"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_ struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TglesTextureConstantType struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_

}

//	If the W.TglesTextureConstantType function is not nil (ie. was set by outside code), calls it with this TglesTextureConstantType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TglesTextureConstantType instance.
func (me *TglesTextureConstantType) Walk ()  { 
	if fn := W.TglesTextureConstantType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ struct {
	Constant *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`

}

//	If the W.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ instance.
func (me *XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_; fn != nil { fn(me) }
	me.Constant.Walk()
 }

type TglesTexcombinerOperatorAlphaEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "MODULATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsModulate () bool { return me == "MODULATE" }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorAlphaEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "REPLACE".
func (me TglesTexcombinerOperatorAlphaEnums) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD".
func (me TglesTexcombinerOperatorAlphaEnums) IsAdd () bool { return me == "ADD" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorAlphaEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorAlphaEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorAlphaEnums) IsSubtract () bool { return me == "SUBTRACT" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorAlphaEnums) IsAddSigned () bool { return me == "ADD_SIGNED" }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorAlphaEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsInterpolate () bool { return me == "INTERPOLATE" }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_ struct {
	Operator TglesTexcombinerOperatorAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type XsdGoPkgHasAttr_Scale_XsdtFloat_ struct {
	Scale xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema scale,attr"`

}

type TglesTexcombinerSourceEnums xsdt.Token

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerSourceEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "CONSTANT".
func (me TglesTexcombinerSourceEnums) IsConstant () bool { return me == "CONSTANT" }

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerSourceEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PRIMARY".
func (me TglesTexcombinerSourceEnums) IsPrimary () bool { return me == "PRIMARY" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PREVIOUS".
func (me TglesTexcombinerSourceEnums) IsPrevious () bool { return me == "PREVIOUS" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "TEXTURE".
func (me TglesTexcombinerSourceEnums) IsTexture () bool { return me == "TEXTURE" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerSourceEnums's alias type xsdt.Token.
func (me TglesTexcombinerSourceEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_ struct {
	Source TglesTexcombinerSourceEnums `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TglesTexcombinerOperandAlphaEnums TglBlendType

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandAlphaEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandAlphaEnums) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandAlphaEnums) SetFromString (s string)  { (*TglBlendType)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandAlphaEnums) String () string { return TglBlendType(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha struct {
	Operand TglesTexcombinerOperandAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`

}

//	Returns the default value for Operand -- "SRC_ALPHA"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha) OperandDefault () TglesTexcombinerOperandAlphaEnums { return TglesTexcombinerOperandAlphaEnums("SRC_ALPHA") }

type XsdGoPkgHasAttr_Unit_XsdtNCName_ struct {
	Unit xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema unit,attr"`

}

type TglesTexcombinerArgumentAlphaType struct {
	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha

	XsdGoPkgHasAttr_Unit_XsdtNCName_

}

//	If the W.TglesTexcombinerArgumentAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentAlphaType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentAlphaType instance.
func (me *TglesTexcombinerArgumentAlphaType) Walk ()  { 
	if fn := W.TglesTexcombinerArgumentAlphaType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ struct {
	Arguments []*TglesTexcombinerArgumentAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`

}

//	If the W.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_; fn != nil { fn(me) }
	for _, x := range me.Arguments { x.Walk() }
 }

type TglesTexcombinerCommandAlphaType struct {
	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_

	XsdGoPkgHasAttr_Scale_XsdtFloat_

	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_

}

//	If the W.TglesTexcombinerCommandAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandAlphaType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandAlphaType instance.
func (me *TglesTexcombinerCommandAlphaType) Walk ()  { 
	if fn := W.TglesTexcombinerCommandAlphaType; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_.Walk()
 }

type XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ struct {
	Alpha *TglesTexcombinerCommandAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`

}

//	If the W.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance.
func (me *XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_; fn != nil { fn(me) }
	me.Alpha.Walk()
 }

//	Defines the RGB portion of a texture_pipeline command. This is a combiner-mode texturing operation.
type TglesTexcombinerOperandRGBEnums TglBlendType

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandRGBEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandRGBEnums) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandRGBEnums) String () string { return TglBlendType(me).String() }

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandRGBEnums) SetFromString (s string)  { (*TglBlendType)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcColor () bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsSrcColor () bool { return me == "SRC_COLOR" }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor struct {
	Operand TglesTexcombinerOperandRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`

}

//	Returns the default value for Operand -- "SRC_COLOR"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor) OperandDefault () TglesTexcombinerOperandRGBEnums { return TglesTexcombinerOperandRGBEnums("SRC_COLOR") }

type TglesTexcombinerArgumentRGBType struct {
	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor

	XsdGoPkgHasAttr_Unit_XsdtNCName_

}

//	If the W.TglesTexcombinerArgumentRGBType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentRGBType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentRGBType instance.
func (me *TglesTexcombinerArgumentRGBType) Walk ()  { 
	if fn := W.TglesTexcombinerArgumentRGBType; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ struct {
	Arguments []*TglesTexcombinerArgumentRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`

}

//	If the W.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_; fn != nil { fn(me) }
	for _, x := range me.Arguments { x.Walk() }
 }

type TglesTexcombinerOperatorRGBEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorRGBEnums) IsInterpolate () bool { return me == "INTERPOLATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGBA".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgba () bool { return me == "DOT3_RGBA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGB".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgb () bool { return me == "DOT3_RGB" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD".
func (me TglesTexcombinerOperatorRGBEnums) IsAdd () bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "REPLACE".
func (me TglesTexcombinerOperatorRGBEnums) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorRGBEnums) IsSubtract () bool { return me == "SUBTRACT" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorRGBEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorRGBEnums) IsAddSigned () bool { return me == "ADD_SIGNED" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorRGBEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "MODULATE".
func (me TglesTexcombinerOperatorRGBEnums) IsModulate () bool { return me == "MODULATE" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorRGBEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorRGBEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_ struct {
	Operator TglesTexcombinerOperatorRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type TglesTexcombinerCommandRGBType struct {
	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_

	XsdGoPkgHasAttr_Scale_XsdtFloat_

	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_

}

//	If the W.TglesTexcombinerCommandRGBType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandRGBType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandRGBType instance.
func (me *TglesTexcombinerCommandRGBType) Walk ()  { 
	if fn := W.TglesTexcombinerCommandRGBType; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_.Walk()
 }

type XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ struct {
	Rgb *TglesTexcombinerCommandRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema RGB"`

}

//	If the W.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ instance.
func (me *XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_; fn != nil { fn(me) }
	me.Rgb.Walk()
 }

type TglesTexcombinerCommandType struct {
	XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_

	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_

	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_

}

//	If the W.TglesTexcombinerCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandType instance.
func (me *TglesTexcombinerCommandType) Walk ()  { 
	if fn := W.TglesTexcombinerCommandType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_.Walk()
	me.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_.Walk()
	me.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_.Walk()
 }

type XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ struct {
//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	Texcombiners []*TglesTexcombinerCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texcombiner"`

}

//	If the W.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ instance.
func (me *XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_; fn != nil { fn(me) }
	for _, x := range me.Texcombiners { x.Walk() }
 }

//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
type TglesTexenvModeEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "ADD".
func (me TglesTexenvModeEnums) IsAdd () bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "DECAL".
func (me TglesTexenvModeEnums) IsDecal () bool { return me == "DECAL" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "BLEND".
func (me TglesTexenvModeEnums) IsBlend () bool { return me == "BLEND" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "REPLACE".
func (me TglesTexenvModeEnums) IsReplace () bool { return me == "REPLACE" }

//	Since TglesTexenvModeEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexenvModeEnums) String () string { return xsdt.Token(me).String() }

//	Since TglesTexenvModeEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexenvModeEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglesTexenvModeEnums's alias type xsdt.Token.
func (me TglesTexenvModeEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "MODULATE".
func (me TglesTexenvModeEnums) IsModulate () bool { return me == "MODULATE" }

type XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_ struct {
	Operator TglesTexenvModeEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ struct {
	Constant *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`

}

//	If the W.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ instance.
func (me *XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_; fn != nil { fn(me) }
	me.Constant.Walk()
 }

type TglesTexenvCommandType struct {
	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_

	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_

}

//	If the W.TglesTexenvCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexenvCommandType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexenvCommandType instance.
func (me *TglesTexenvCommandType) Walk ()  { 
	if fn := W.TglesTexenvCommandType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_.Walk()
 }

type XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ struct {
//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	Texenvs []*TglesTexenvCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texenv"`

}

//	If the W.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ instance.
func (me *XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_; fn != nil { fn(me) }
	for _, x := range me.Texenvs { x.Walk() }
 }

type TglesTexturePipeline struct {
//	The extra element may appear any number of times.
//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra

//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_

}

//	If the W.TglesTexturePipeline function is not nil (ie. was set by outside code), calls it with this TglesTexturePipeline instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TglesTexturePipeline instance.
func (me *TglesTexturePipeline) Walk ()  { 
	if fn := W.TglesTexturePipeline; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_.Walk()
 }

type XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ struct {
	TexturePipeline *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`

}

//	If the W.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_; fn != nil { fn(me) }
	me.TexturePipeline.Walk()
 }

type XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_ struct {
	Bool3 Tbool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

//	If the W.XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_ struct {
	Float1X1 Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`

}

//	If the W.XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_ instance.
func (me *XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_ struct {
	Int3 Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	If the W.XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_ instance.
func (me *XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_ struct {
	Int Tint `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

//	If the W.XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_ instance.
func (me *XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_ struct {
	Int2 Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

//	If the W.XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_ instance.
func (me *XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_ struct {
	Float3X1 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`

}

//	If the W.XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_ struct {
	Float3X3 Tfloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

//	If the W.XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_ struct {
	Bool2 Tbool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	If the W.XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_; fn != nil { fn(me) }
 }

//	Two-dimensional texture sampler state for profile_GLES. This is a bundle of sampler-specific states that will be referenced by one or more texture_units.
type XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	If the W.XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type TglesSamplerWrap xsdt.Nmtoken

//	Since TglesSamplerWrap is just a simple String type, this merely returns the current string value.
func (me TglesSamplerWrap) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TglesSamplerWrap is "REPEAT".
func (me TglesSamplerWrap) IsRepeat () bool { return me == "REPEAT" }

//	This convenience method just performs a simple type conversion to TglesSamplerWrap's alias type xsdt.Nmtoken.
func (me TglesSamplerWrap) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TglesSamplerWrap is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesSamplerWrap) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP_TO_EDGE".
func (me TglesSamplerWrap) IsClampToEdge () bool { return me == "CLAMP_TO_EDGE" }

//	Returns true if the value of this enumerated TglesSamplerWrap is "MIRRORED_REPEAT".
func (me TglesSamplerWrap) IsMirroredRepeat () bool { return me == "MIRRORED_REPEAT" }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP".
func (me TglesSamplerWrap) IsClamp () bool { return me == "CLAMP" }

type XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat struct {
	WrapT TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	Returns the default value for WrapT -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat) WrapTDefault () TglesSamplerWrap { return TglesSamplerWrap("REPEAT") }

//	If the W.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	If the W.XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00; fn != nil { fn(me) }
 }

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

type XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat struct {
	WrapS TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat) WrapSDefault () TglesSamplerWrap { return TglesSamplerWrap("REPEAT") }

//	If the W.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

//	If the W.XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	If the W.XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None; fn != nil { fn(me) }
 }

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

//	If the W.XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255; fn != nil { fn(me) }
 }

type TglesSamplerState struct {
	XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat

	XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The extra element may appear any number of times.
//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00

}

//	If the W.TglesSamplerState function is not nil (ie. was set by outside code), calls it with this TglesSamplerState instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TglesSamplerState instance.
func (me *TglesSamplerState) Walk ()  { 
	if fn := W.TglesSamplerState; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk()
	me.XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None.Walk()
	me.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00.Walk()
	me.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat.Walk()
	me.XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None.Walk()
 }

type XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ struct {
	SamplerState *TglesSamplerState `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`

}

//	If the W.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ instance.
func (me *XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_; fn != nil { fn(me) }
	me.SamplerState.Walk()
 }

type XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_ struct {
	Float2X2 Tfloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	If the W.XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_ struct {
	Float3X2 Tfloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`

}

//	If the W.XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_ instance.
func (me *XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_ struct {
	Float2X3 Tfloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`

}

//	If the W.XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_ instance.
func (me *XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_ struct {
	Bool Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

//	If the W.XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_ instance.
func (me *XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_; fn != nil { fn(me) }
 }

type XsdGoPkgHasAttr_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`

}

type TxsdGlesTextureUnitSequenceTexcoord struct {
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

}

//	If the W.TxsdGlesTextureUnitSequenceTexcoord function is not nil (ie. was set by outside code), calls it with this TxsdGlesTextureUnitSequenceTexcoord instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGlesTextureUnitSequenceTexcoord instance.
func (me *TxsdGlesTextureUnitSequenceTexcoord) Walk ()  { 
	if fn := W.TxsdGlesTextureUnitSequenceTexcoord; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ struct {
	Texcoord *TxsdGlesTextureUnitSequenceTexcoord `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord"`

}

//	If the W.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ instance.
func (me *XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_; fn != nil { fn(me) }
	me.Texcoord.Walk()
 }

type XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ struct {
	Surface xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ struct {
	SamplerState xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`

}

//	If the W.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_; fn != nil { fn(me) }
 }

type TglesTextureUnit struct {
//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_

	XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_

	XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_

}

//	If the W.TglesTextureUnit function is not nil (ie. was set by outside code), calls it with this TglesTextureUnit instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglesTextureUnit instance.
func (me *TglesTextureUnit) Walk ()  { 
	if fn := W.TglesTextureUnit; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_.Walk()
	me.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ struct {
	TextureUnit *TglesTextureUnit `xml:"http://www.collada.org/2005/11/COLLADASchema texture_unit"`

}

//	If the W.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ instance.
func (me *XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_; fn != nil { fn(me) }
	me.TextureUnit.Walk()
 }

type XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_ struct {
	Float1X4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`

}

//	If the W.XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_ struct {
	Float1X2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`

}

//	If the W.XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_ struct {
	Float1X3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`

}

//	If the W.XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasGroup_GlesBasicTypeCommon struct {
	XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_

	XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_

	XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_

	XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_

	XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_

	XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_

	XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_

}

//	If the W.XsdGoPkgHasGroup_GlesBasicTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesBasicTypeCommon instance as the single argument. Then calls the Walk() method on 33/33 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesBasicTypeCommon instance.
func (me *XsdGoPkgHasGroup_GlesBasicTypeCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_GlesBasicTypeCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_.Walk()
	me.XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_.Walk()
	me.XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_.Walk()
	me.XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_.Walk()
	me.XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_.Walk()
	me.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_.Walk()
	me.XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_.Walk()
	me.XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_.Walk()
	me.XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_.Walk()
	me.XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_.Walk()
	me.XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_.Walk()
	me.XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_.Walk()
	me.XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_.Walk()
	me.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_.Walk()
	me.XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_.Walk()
	me.XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_.Walk()
	me.XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_.Walk()
	me.XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_.Walk()
	me.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_.Walk()
	me.XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_.Walk()
	me.XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_.Walk()
	me.XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_.Walk()
	me.XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_.Walk()
	me.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_.Walk()
 }

type TglesNewparam struct {
	XsdGoPkgHasGroup_GlesBasicTypeCommon

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_

//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_

//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TglesNewparam function is not nil (ie. was set by outside code), calls it with this TglesNewparam instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglesNewparam instance.
func (me *TglesNewparam) Walk ()  { 
	if fn := W.TglesNewparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasGroup_GlesBasicTypeCommon.Walk()
	me.XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_.Walk()
	me.XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ struct {
	Newparams []*TglesNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam struct {
	XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_GlesBasicTypeCommon

	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

//	If the W.TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam instance.
func (me *TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam) Walk ()  { 
	if fn := W.TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasGroup_GlesBasicTypeCommon.Walk()
 }

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ struct {
	Setparams []*TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ struct {
	Newparams []*TglesNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ struct {
	DepthClear Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`

}

//	If the W.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ instance.
func (me *XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_; fn != nil { fn(me) }
 }

type TglesRendertargetCommon xsdt.NCName

//	Since TglesRendertargetCommon is just a simple String type, this merely returns the current string value.
func (me TglesRendertargetCommon) String () string { return xsdt.NCName(me).String() }

//	Since TglesRendertargetCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesRendertargetCommon) SetFromString (s string)  { (*xsdt.NCName)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglesRendertargetCommon's alias type xsdt.NCName.
func (me TglesRendertargetCommon) ToXsdtNCName () xsdt.NCName { return xsdt.NCName(me) }

type XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ struct {
	StencilTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`

}

//	If the W.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ struct {
	DepthTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`

}

//	If the W.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_; fn != nil { fn(me) }
 }

//	A group that contains the renderstates available for the GLES profile.
type TglesMaxLightsIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglesMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxLightsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Returns a string representation of this TglesMaxLightsIndex's current non-string scalar value.
func (me TglesMaxLightsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

//	Since TglesMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxLightsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_ struct {
	Index TglesMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type XsdGoPkgHasAttr_Value_Tfloat3_001 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 -1"
func (me XsdGoPkgHasAttr_Value_Tfloat3_001) ValueDefault () Tfloat3 { return Tfloat3("0 0 -1") }

type TxsdGlesPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat3_001

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotDirection instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotDirection) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightSpotDirection; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlesPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`

}

//	If the W.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_; fn != nil { fn(me) }
	me.LightSpotDirection.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat_1 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 1
func (me XsdGoPkgHasAttr_Value_Tfloat_1) ValueDefault () Tfloat { return Tfloat(1) }

type TxsdGlesPipelineSettingsChoiceFogDensity struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogDensity function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogDensity instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogDensity instance.
func (me *TxsdGlesPipelineSettingsChoiceFogDensity) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogDensity; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlesPipelineSettingsChoiceFogDensity `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`

}

//	If the W.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_; fn != nil { fn(me) }
	me.FogDensity.Walk()
 }

type XsdGoPkgHasAttr_Value_Tbool_False struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- false
func (me XsdGoPkgHasAttr_Value_Tbool_False) ValueDefault () Tbool { return Tbool(false) }

type TxsdGlesPipelineSettingsChoiceTexturePipelineEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceTexturePipelineEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceTexturePipelineEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceTexturePipelineEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceTexturePipelineEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ struct {
	TexturePipelineEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline_enable"`

}

//	If the W.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ instance.
func (me *XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_; fn != nil { fn(me) }
	me.TexturePipelineEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat_0 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tfloat_0) ValueDefault () Tfloat { return Tfloat(0) }

type TxsdGlesPipelineSettingsChoicePointSizeMin struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoicePointSizeMin function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSizeMin instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSizeMin instance.
func (me *TxsdGlesPipelineSettingsChoicePointSizeMin) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointSizeMin; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`

}

//	If the W.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_; fn != nil { fn(me) }
	me.PointSizeMin.Walk()
 }

type TxsdGlesPipelineSettingsChoiceSampleCoverageEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceSampleCoverageEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceSampleCoverageEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceSampleCoverageEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceSampleCoverageEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceSampleCoverageEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlesPipelineSettingsChoiceSampleCoverageEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_; fn != nil { fn(me) }
	me.SampleCoverageEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4_0001 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0001) ValueDefault () Tfloat4 { return Tfloat4("0 0 0 1") }

type TxsdGlesPipelineSettingsChoiceMaterialEmission struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0001

}

//	If the W.TxsdGlesPipelineSettingsChoiceMaterialEmission function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialEmission instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialEmission instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialEmission) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMaterialEmission; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlesPipelineSettingsChoiceMaterialEmission `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`

}

//	If the W.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_; fn != nil { fn(me) }
	me.MaterialEmission.Walk()
 }

type TxsdGlesPipelineSettingsChoiceScissorTestEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceScissorTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceScissorTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceScissorTestEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceScissorTestEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceScissorTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlesPipelineSettingsChoiceScissorTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`

}

//	If the W.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_; fn != nil { fn(me) }
	me.ScissorTestEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat2_01 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat2_01) ValueDefault () Tfloat2 { return Tfloat2("0 1") }

type TxsdGlesPipelineSettingsChoiceDepthRange struct {
	XsdGoPkgHasAttr_Value_Tfloat2_01

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceDepthRange function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDepthRange instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDepthRange instance.
func (me *TxsdGlesPipelineSettingsChoiceDepthRange) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceDepthRange; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlesPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`

}

//	If the W.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_; fn != nil { fn(me) }
	me.DepthRange.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4_0010 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 1 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0010) ValueDefault () Tfloat4 { return Tfloat4("0 0 1 0") }

type TxsdGlesPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0010

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightPosition instance.
func (me *TxsdGlesPipelineSettingsChoiceLightPosition) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightPosition; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlesPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`

}

//	If the W.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_; fn != nil { fn(me) }
	me.LightPosition.Walk()
 }

type TxsdGlesPipelineSettingsChoiceBlendEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceBlendEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceBlendEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlesPipelineSettingsChoiceBlendEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`

}

//	If the W.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_; fn != nil { fn(me) }
	me.BlendEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation instance.
func (me *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`

}

//	If the W.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_; fn != nil { fn(me) }
	me.LightQuadraticAttenuation.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFuncType_Always struct {
	Value TglFuncType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ALWAYS"
func (me XsdGoPkgHasAttr_Value_TglFuncType_Always) ValueDefault () TglFuncType { return TglFuncType("ALWAYS") }

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

//	If the W.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_; fn != nil { fn(me) }
	me.Func.Walk()
 }

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0) ValueDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(0) }

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

//	If the W.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_; fn != nil { fn(me) }
	me.Ref.Walk()
 }

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 255
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255) ValueDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

//	If the W.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_; fn != nil { fn(me) }
	me.Mask.Walk()
 }

type TxsdGlesPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_.Walk()
	me.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_.Walk()
	me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_.Walk()
 }

type XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlesPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`

}

//	If the W.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_; fn != nil { fn(me) }
	me.StencilFunc.Walk()
 }

type TxsdGlesPipelineSettingsChoiceMaterialSpecular struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0001

}

//	If the W.TxsdGlesPipelineSettingsChoiceMaterialSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialSpecular instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialSpecular instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialSpecular) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMaterialSpecular; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`

}

//	If the W.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_; fn != nil { fn(me) }
	me.MaterialSpecular.Walk()
 }

type XsdGoPkgHasAttr_Value_Tbool_True struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- true
func (me XsdGoPkgHasAttr_Value_Tbool_True) ValueDefault () Tbool { return Tbool(true) }

type TxsdGlesPipelineSettingsChoiceColorMaterialEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_True

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceColorMaterialEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceColorMaterialEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceColorMaterialEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceColorMaterialEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceColorMaterialEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`

}

//	If the W.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_; fn != nil { fn(me) }
	me.ColorMaterialEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat3_100 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat3_100) ValueDefault () Tfloat3 { return Tfloat3("1 0 0") }

type TxsdGlesPipelineSettingsChoicePointDistanceAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3_100

}

//	If the W.TxsdGlesPipelineSettingsChoicePointDistanceAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointDistanceAttenuation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointDistanceAttenuation instance.
func (me *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointDistanceAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`

}

//	If the W.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_; fn != nil { fn(me) }
	me.PointDistanceAttenuation.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFogType_Exp struct {
	Value TglFogType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "EXP"
func (me XsdGoPkgHasAttr_Value_TglFogType_Exp) ValueDefault () TglFogType { return TglFogType("EXP") }

type TxsdGlesPipelineSettingsChoiceFogMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogType_Exp

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogMode function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogMode instance.
func (me *TxsdGlesPipelineSettingsChoiceFogMode) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogMode; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlesPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`

}

//	If the W.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_; fn != nil { fn(me) }
	me.FogMode.Walk()
 }

type TxsdGlesPipelineSettingsChoiceNormalizeEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceNormalizeEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceNormalizeEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceNormalizeEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceNormalizeEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceNormalizeEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlesPipelineSettingsChoiceNormalizeEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`

}

//	If the W.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_; fn != nil { fn(me) }
	me.NormalizeEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4_0000 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0000) ValueDefault () Tfloat4 { return Tfloat4("0 0 0 0") }

type TxsdGlesPipelineSettingsChoiceLightSpecular struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpecular instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpecular instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpecular) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightSpecular; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlesPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`

}

//	If the W.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_; fn != nil { fn(me) }
	me.LightSpecular.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4_02020210 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0.2 0.2 0.2 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_02020210) ValueDefault () Tfloat4 { return Tfloat4("0.2 0.2 0.2 1.0") }

type TxsdGlesPipelineSettingsChoiceMaterialAmbient struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_02020210

}

//	If the W.TxsdGlesPipelineSettingsChoiceMaterialAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialAmbient instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialAmbient) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMaterialAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlesPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`

}

//	If the W.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_; fn != nil { fn(me) }
	me.MaterialAmbient.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat_ struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceClearDepth struct {
	XsdGoPkgHasAttr_Value_Tfloat_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceClearDepth function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClearDepth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClearDepth instance.
func (me *TxsdGlesPipelineSettingsChoiceClearDepth) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceClearDepth; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlesPipelineSettingsChoiceClearDepth `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`

}

//	If the W.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ instance.
func (me *XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_; fn != nil { fn(me) }
	me.ClearDepth.Walk()
 }

type XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth struct {
	Value TglShadeModelType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "SMOOTH"
func (me XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth) ValueDefault () TglShadeModelType { return TglShadeModelType("SMOOTH") }

type TxsdGlesPipelineSettingsChoiceShadeModel struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth

}

//	If the W.TxsdGlesPipelineSettingsChoiceShadeModel function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceShadeModel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceShadeModel instance.
func (me *TxsdGlesPipelineSettingsChoiceShadeModel) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceShadeModel; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlesPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`

}

//	If the W.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_; fn != nil { fn(me) }
	me.ShadeModel.Walk()
 }

type TxsdGlesPipelineSettingsChoicePointSizeMax struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlesPipelineSettingsChoicePointSizeMax function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSizeMax instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSizeMax instance.
func (me *TxsdGlesPipelineSettingsChoicePointSizeMax) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointSizeMax; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`

}

//	If the W.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_; fn != nil { fn(me) }
	me.PointSizeMax.Walk()
 }

type XsdGoPkgHasAttr_Value_Tint_ struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint_

}

//	If the W.TxsdGlesPipelineSettingsChoiceClearStencil function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClearStencil instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClearStencil instance.
func (me *TxsdGlesPipelineSettingsChoiceClearStencil) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceClearStencil; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlesPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`

}

//	If the W.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ instance.
func (me *XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_; fn != nil { fn(me) }
	me.ClearStencil.Walk()
 }

type XsdGoPkgHasAttr_Value_TglLogicOpType_Copy struct {
	Value TglLogicOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "COPY"
func (me XsdGoPkgHasAttr_Value_TglLogicOpType_Copy) ValueDefault () TglLogicOpType { return TglLogicOpType("COPY") }

type TxsdGlesPipelineSettingsChoiceLogicOp struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLogicOpType_Copy

}

//	If the W.TxsdGlesPipelineSettingsChoiceLogicOp function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLogicOp instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLogicOp instance.
func (me *TxsdGlesPipelineSettingsChoiceLogicOp) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLogicOp; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlesPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`

}

//	If the W.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_; fn != nil { fn(me) }
	me.LogicOp.Walk()
 }

type TglesMaxClipPlanesIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglesMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxClipPlanesIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Since TglesMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxClipPlanesIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	Returns a string representation of this TglesMaxClipPlanesIndex's current non-string scalar value.
func (me TglesMaxClipPlanesIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_ struct {
	Index TglesMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlesPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClipPlaneEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceClipPlaneEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceClipPlaneEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlesPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`

}

//	If the W.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_; fn != nil { fn(me) }
	me.ClipPlaneEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightAmbient instance.
func (me *TxsdGlesPipelineSettingsChoiceLightAmbient) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlesPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`

}

//	If the W.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_; fn != nil { fn(me) }
	me.LightAmbient.Walk()
 }

type TxsdGlesPipelineSettingsChoicePointFadeThresholdSize struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoicePointFadeThresholdSize function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointFadeThresholdSize instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointFadeThresholdSize instance.
func (me *TxsdGlesPipelineSettingsChoicePointFadeThresholdSize) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointFadeThresholdSize; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlesPipelineSettingsChoicePointFadeThresholdSize `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`

}

//	If the W.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_; fn != nil { fn(me) }
	me.PointFadeThresholdSize.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4_08080810 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0.8 0.8 0.8 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_08080810) ValueDefault () Tfloat4 { return Tfloat4("0.8 0.8 0.8 1.0") }

type TxsdGlesPipelineSettingsChoiceMaterialDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_08080810

}

//	If the W.TxsdGlesPipelineSettingsChoiceMaterialDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialDiffuse instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialDiffuse instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialDiffuse) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMaterialDiffuse; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlesPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`

}

//	If the W.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_; fn != nil { fn(me) }
	me.MaterialDiffuse.Walk()
 }

type TxsdGlesPipelineSettingsChoicePointSize struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoicePointSize function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSize instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSize instance.
func (me *TxsdGlesPipelineSettingsChoicePointSize) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointSize; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlesPipelineSettingsChoicePointSize `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`

}

//	If the W.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_; fn != nil { fn(me) }
	me.PointSize.Walk()
 }

type TxsdGlesPipelineSettingsChoiceDepthMask struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceDepthMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDepthMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDepthMask instance.
func (me *TxsdGlesPipelineSettingsChoiceDepthMask) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceDepthMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlesPipelineSettingsChoiceDepthMask `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`

}

//	If the W.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_; fn != nil { fn(me) }
	me.DepthMask.Walk()
 }

type XsdGoPkgHasAttr_Value_Tint_4294967295 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 4294967295
func (me XsdGoPkgHasAttr_Value_Tint_4294967295) ValueDefault () Tint { return Tint(4294967295) }

type TxsdGlesPipelineSettingsChoiceStencilMask struct {
	XsdGoPkgHasAttr_Value_Tint_4294967295

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilMask instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilMask) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlesPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`

}

//	If the W.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_; fn != nil { fn(me) }
	me.StencilMask.Walk()
 }

type XsdGoPkgHasAttr_Value_Tint4_ struct {
	Value Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceScissor function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceScissor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceScissor instance.
func (me *TxsdGlesPipelineSettingsChoiceScissor) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceScissor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlesPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`

}

//	If the W.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_; fn != nil { fn(me) }
	me.Scissor.Walk()
 }

type TxsdGlesPipelineSettingsChoiceDepthFunc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlesPipelineSettingsChoiceDepthFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDepthFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDepthFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceDepthFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceDepthFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`

}

//	If the W.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_; fn != nil { fn(me) }
	me.DepthFunc.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightLinearAttenutation struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightLinearAttenutation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightLinearAttenutation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightLinearAttenutation instance.
func (me *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightLinearAttenutation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ struct {
	LightLinearAttenutation *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenutation"`

}

//	If the W.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_; fn != nil { fn(me) }
	me.LightLinearAttenutation.Walk()
 }

type TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_; fn != nil { fn(me) }
	me.SampleAlphaToOneEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_; fn != nil { fn(me) }
	me.SampleAlphaToCoverageEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceColorLogicOpEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceColorLogicOpEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceColorLogicOpEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceColorLogicOpEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceColorLogicOpEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceColorLogicOpEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlesPipelineSettingsChoiceColorLogicOpEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`

}

//	If the W.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_; fn != nil { fn(me) }
	me.ColorLogicOpEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable instance.
func (me *TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_; fn != nil { fn(me) }
	me.PolygonOffsetFillEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFaceType_Back struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_Back) ValueDefault () TglFaceType { return TglFaceType("BACK") }

type TxsdGlesPipelineSettingsChoiceCullFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFaceType_Back

}

//	If the W.TxsdGlesPipelineSettingsChoiceCullFace function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceCullFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceCullFace instance.
func (me *TxsdGlesPipelineSettingsChoiceCullFace) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceCullFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlesPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`

}

//	If the W.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_; fn != nil { fn(me) }
	me.CullFace.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLineSmoothEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceLineSmoothEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLineSmoothEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLineSmoothEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceLineSmoothEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLineSmoothEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlesPipelineSettingsChoiceLineSmoothEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`

}

//	If the W.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_; fn != nil { fn(me) }
	me.LineSmoothEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightDiffuse instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightDiffuse instance.
func (me *TxsdGlesPipelineSettingsChoiceLightDiffuse) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightDiffuse; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlesPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`

}

//	If the W.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_; fn != nil { fn(me) }
	me.LightDiffuse.Walk()
 }

type XsdGoPkgHasAttr_Value_Tbool4_ struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool4_

}

//	If the W.TxsdGlesPipelineSettingsChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceColorMask instance.
func (me *TxsdGlesPipelineSettingsChoiceColorMask) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceColorMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlesPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`

}

//	If the W.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_; fn != nil { fn(me) }
	me.ColorMask.Walk()
 }

type TxsdGlesPipelineSettingsChoiceFogEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceFogEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlesPipelineSettingsChoiceFogEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`

}

//	If the W.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_; fn != nil { fn(me) }
	me.FogEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat2_00 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat2_00) ValueDefault () Tfloat2 { return Tfloat2("0 0") }

type TxsdGlesPipelineSettingsChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_00

}

//	If the W.TxsdGlesPipelineSettingsChoicePolygonOffset function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePolygonOffset instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePolygonOffset instance.
func (me *TxsdGlesPipelineSettingsChoicePolygonOffset) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePolygonOffset; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlesPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`

}

//	If the W.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_; fn != nil { fn(me) }
	me.PolygonOffset.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw struct {
	Value TglFrontFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "CCW"
func (me XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw) ValueDefault () TglFrontFaceType { return TglFrontFaceType("CCW") }

type TxsdGlesPipelineSettingsChoiceFrontFace struct {
	XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceFrontFace function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFrontFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFrontFace instance.
func (me *TxsdGlesPipelineSettingsChoiceFrontFace) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFrontFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlesPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`

}

//	If the W.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_; fn != nil { fn(me) }
	me.FrontFace.Walk()
 }

type TxsdGlesPipelineSettingsChoiceFogEnd struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogEnd function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogEnd instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogEnd instance.
func (me *TxsdGlesPipelineSettingsChoiceFogEnd) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogEnd; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlesPipelineSettingsChoiceFogEnd `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`

}

//	If the W.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_; fn != nil { fn(me) }
	me.FogEnd.Walk()
 }

type TxsdGlesPipelineSettingsChoiceMultisampleEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceMultisampleEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMultisampleEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMultisampleEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceMultisampleEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMultisampleEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlesPipelineSettingsChoiceMultisampleEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`

}

//	If the W.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_; fn != nil { fn(me) }
	me.MultisampleEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceLightEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlesPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`

}

//	If the W.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_; fn != nil { fn(me) }
	me.LightEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat_180 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 180
func (me XsdGoPkgHasAttr_Value_Tfloat_180) ValueDefault () Tfloat { return Tfloat(180) }

type TxsdGlesPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Value_Tfloat_180

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotCutoff instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotCutoff) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightSpotCutoff; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlesPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`

}

//	If the W.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_; fn != nil { fn(me) }
	me.LightSpotCutoff.Walk()
 }

type TxsdGlesPipelineSettingsChoiceStencilTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilTestEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilTestEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlesPipelineSettingsChoiceStencilTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`

}

//	If the W.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_; fn != nil { fn(me) }
	me.StencilTestEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLineWidth struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceLineWidth function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLineWidth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLineWidth instance.
func (me *TxsdGlesPipelineSettingsChoiceLineWidth) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLineWidth; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlesPipelineSettingsChoiceLineWidth `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`

}

//	If the W.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_; fn != nil { fn(me) }
	me.LineWidth.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightConstantAttenuation struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightConstantAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightConstantAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightConstantAttenuation instance.
func (me *TxsdGlesPipelineSettingsChoiceLightConstantAttenuation) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightConstantAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlesPipelineSettingsChoiceLightConstantAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`

}

//	If the W.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_; fn != nil { fn(me) }
	me.LightConstantAttenuation.Walk()
 }

type TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Value_TglFuncType_Always

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

//	If the W.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_; fn != nil { fn(me) }
	me.Func.Walk()
 }

type TglAlphaValueType xsdt.Float

//	Since TglAlphaValueType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglAlphaValueType) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TglAlphaValueType's current non-string scalar value.
func (me TglAlphaValueType) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TglAlphaValueType's alias type xsdt.Float.
func (me TglAlphaValueType) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasAttr_Value_TglAlphaValueType_00 struct {
	Value TglAlphaValueType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0.0
func (me XsdGoPkgHasAttr_Value_TglAlphaValueType_00) ValueDefault () TglAlphaValueType { return TglAlphaValueType(0.0) }

type TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue struct {
	XsdGoPkgHasAttr_Value_TglAlphaValueType_00

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type TxsdGlesPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_

	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_

}

//	If the W.TxsdGlesPipelineSettingsChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceAlphaFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_.Walk()
	me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_.Walk()
 }

type XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlesPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`

}

//	If the W.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_; fn != nil { fn(me) }
	me.AlphaFunc.Walk()
 }

type TxsdGlesPipelineSettingsChoiceCullFaceEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceCullFaceEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceCullFaceEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceCullFaceEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceCullFaceEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceCullFaceEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlesPipelineSettingsChoiceCullFaceEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`

}

//	If the W.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_; fn != nil { fn(me) }
	me.CullFaceEnable.Walk()
 }

type TglesStencilOpType xsdt.String

//	Since TglesStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglesStencilOpType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglesStencilOpType is "ZERO".
func (me TglesStencilOpType) IsZero () bool { return me == "ZERO" }

//	This convenience method just performs a simple type conversion to TglesStencilOpType's alias type xsdt.String.
func (me TglesStencilOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglesStencilOpType is "KEEP".
func (me TglesStencilOpType) IsKeep () bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglesStencilOpType is "DECR".
func (me TglesStencilOpType) IsDecr () bool { return me == "DECR" }

//	Returns true if the value of this enumerated TglesStencilOpType is "INCR".
func (me TglesStencilOpType) IsIncr () bool { return me == "INCR" }

//	Since TglesStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesStencilOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesStencilOpType is "INVERT".
func (me TglesStencilOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglesStencilOpType is "REPLACE".
func (me TglesStencilOpType) IsReplace () bool { return me == "REPLACE" }

type XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep struct {
	Value TglesStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep) ValueDefault () TglesStencilOpType { return TglesStencilOpType("KEEP") }

type TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

//	If the W.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_; fn != nil { fn(me) }
	me.Zfail.Walk()
 }

type TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

//	If the W.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_; fn != nil { fn(me) }
	me.Zpass.Walk()
 }

type TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

//	If the W.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_; fn != nil { fn(me) }
	me.Fail.Walk()
 }

type TxsdGlesPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_

}

//	If the W.TxsdGlesPipelineSettingsChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOp instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOp) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceStencilOp; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_.Walk()
	me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_.Walk()
	me.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_.Walk()
 }

type XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlesPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`

}

//	If the W.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_; fn != nil { fn(me) }
	me.StencilOp.Walk()
 }

type TxsdGlesPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool4_

}

//	If the W.TxsdGlesPipelineSettingsChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClipPlane instance.
func (me *TxsdGlesPipelineSettingsChoiceClipPlane) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceClipPlane; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlesPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`

}

//	If the W.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_; fn != nil { fn(me) }
	me.ClipPlane.Walk()
 }

type TxsdGlesPipelineSettingsChoiceDepthTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceDepthTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDepthTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDepthTestEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceDepthTestEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceDepthTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`

}

//	If the W.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_; fn != nil { fn(me) }
	me.DepthTestEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceFogColor struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogColor function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogColor instance.
func (me *TxsdGlesPipelineSettingsChoiceFogColor) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`

}

//	If the W.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_; fn != nil { fn(me) }
	me.FogColor.Walk()
 }

type TxsdGlesPipelineSettingsChoiceClearColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_

}

//	If the W.TxsdGlesPipelineSettingsChoiceClearColor function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClearColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClearColor instance.
func (me *TxsdGlesPipelineSettingsChoiceClearColor) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceClearColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TxsdGlesPipelineSettingsChoiceClearColor `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`

}

//	If the W.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ instance.
func (me *XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_; fn != nil { fn(me) }
	me.ClearColor.Walk()
 }

type TxsdGlesPipelineSettingsChoiceAlphaTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceAlphaTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaTestEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaTestEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceAlphaTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlesPipelineSettingsChoiceAlphaTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`

}

//	If the W.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_; fn != nil { fn(me) }
	me.AlphaTestEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_TglBlendType_One struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ONE"
func (me XsdGoPkgHasAttr_Value_TglBlendType_One) ValueDefault () TglBlendType { return TglBlendType("ONE") }

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_One

}

//	If the W.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`

}

//	If the W.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_; fn != nil { fn(me) }
	me.Src.Walk()
 }

type XsdGoPkgHasAttr_Value_TglBlendType_Zero struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ZERO"
func (me XsdGoPkgHasAttr_Value_TglBlendType_Zero) ValueDefault () TglBlendType { return TglBlendType("ZERO") }

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_Zero

}

//	If the W.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`

}

//	If the W.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_; fn != nil { fn(me) }
	me.Dest.Walk()
 }

type TxsdGlesPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_

	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_

}

//	If the W.TxsdGlesPipelineSettingsChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFunc) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceBlendFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_.Walk()
	me.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_.Walk()
 }

type XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlesPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`

}

//	If the W.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_; fn != nil { fn(me) }
	me.BlendFunc.Walk()
 }

type XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ struct {
	Value *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type TxsdGlesPipelineSettingsChoiceTexturePipeline struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_

}

//	If the W.TxsdGlesPipelineSettingsChoiceTexturePipeline function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceTexturePipeline instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceTexturePipeline instance.
func (me *TxsdGlesPipelineSettingsChoiceTexturePipeline) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceTexturePipeline; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_.Walk()
 }

type XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ struct {
	TexturePipeline *TxsdGlesPipelineSettingsChoiceTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`

}

//	If the W.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_; fn != nil { fn(me) }
	me.TexturePipeline.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001 struct {
	Value Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001) ValueDefault () Tfloat4X4 { return Tfloat4X4("1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1") }

type TxsdGlesPipelineSettingsChoiceModelViewMatrix struct {
	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceModelViewMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceModelViewMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceModelViewMatrix instance.
func (me *TxsdGlesPipelineSettingsChoiceModelViewMatrix) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceModelViewMatrix; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlesPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`

}

//	If the W.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_; fn != nil { fn(me) }
	me.ModelViewMatrix.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightModelAmbient struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_02020210

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightModelAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightModelAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightModelAmbient instance.
func (me *TxsdGlesPipelineSettingsChoiceLightModelAmbient) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightModelAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlesPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`

}

//	If the W.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_; fn != nil { fn(me) }
	me.LightModelAmbient.Walk()
 }

type TxsdGlesPipelineSettingsChoiceMaterialShininess struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceMaterialShininess function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialShininess instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialShininess instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialShininess) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceMaterialShininess; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlesPipelineSettingsChoiceMaterialShininess `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`

}

//	If the W.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_; fn != nil { fn(me) }
	me.MaterialShininess.Walk()
 }

type TxsdGlesPipelineSettingsChoiceDitherEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceDitherEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDitherEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDitherEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceDitherEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceDitherEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlesPipelineSettingsChoiceDitherEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`

}

//	If the W.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_; fn != nil { fn(me) }
	me.DitherEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightingEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightingEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightingEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightingEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceLightingEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightingEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlesPipelineSettingsChoiceLightingEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`

}

//	If the W.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_; fn != nil { fn(me) }
	me.LightingEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceProjectionMatrix struct {
	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceProjectionMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceProjectionMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceProjectionMatrix instance.
func (me *TxsdGlesPipelineSettingsChoiceProjectionMatrix) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceProjectionMatrix; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlesPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`

}

//	If the W.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_; fn != nil { fn(me) }
	me.ProjectionMatrix.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`

}

//	If the W.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_; fn != nil { fn(me) }
	me.LightModelTwoSideEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceLightSpotExponent struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

}

//	If the W.TxsdGlesPipelineSettingsChoiceLightSpotExponent function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotExponent instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotExponent instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotExponent) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceLightSpotExponent; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlesPipelineSettingsChoiceLightSpotExponent `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`

}

//	If the W.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_; fn != nil { fn(me) }
	me.LightSpotExponent.Walk()
 }

type TxsdGlesPipelineSettingsChoicePointSmoothEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlesPipelineSettingsChoicePointSmoothEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSmoothEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSmoothEnable instance.
func (me *TxsdGlesPipelineSettingsChoicePointSmoothEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoicePointSmoothEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlesPipelineSettingsChoicePointSmoothEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`

}

//	If the W.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_; fn != nil { fn(me) }
	me.PointSmoothEnable.Walk()
 }

type TxsdGlesPipelineSettingsChoiceFogStart struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

}

//	If the W.TxsdGlesPipelineSettingsChoiceFogStart function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogStart instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogStart instance.
func (me *TxsdGlesPipelineSettingsChoiceFogStart) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceFogStart; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`

}

//	If the W.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_; fn != nil { fn(me) }
	me.FogStart.Walk()
 }

type TxsdGlesPipelineSettingsChoiceRescaleNormalEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlesPipelineSettingsChoiceRescaleNormalEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceRescaleNormalEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceRescaleNormalEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceRescaleNormalEnable) Walk ()  { 
	if fn := W.TxsdGlesPipelineSettingsChoiceRescaleNormalEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlesPipelineSettingsChoiceRescaleNormalEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`

}

//	If the W.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_; fn != nil { fn(me) }
	me.RescaleNormalEnable.Walk()
 }

type XsdGoPkgHasGroup_GlesPipelineSettings struct {
	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_

	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_

	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_

	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_

	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_

	XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_

}

//	If the W.XsdGoPkgHasGroup_GlesPipelineSettings function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesPipelineSettings instance as the single argument. Then calls the Walk() method on 73/73 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesPipelineSettings instance.
func (me *XsdGoPkgHasGroup_GlesPipelineSettings) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_GlesPipelineSettings; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_.Walk()
	me.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_.Walk()
	me.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_.Walk()
	me.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_.Walk()
	me.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_.Walk()
	me.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_.Walk()
	me.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_.Walk()
	me.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_.Walk()
	me.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_.Walk()
	me.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_.Walk()
	me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_.Walk()
	me.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_.Walk()
	me.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_.Walk()
	me.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_.Walk()
	me.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_.Walk()
	me.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_.Walk()
	me.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_.Walk()
	me.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_.Walk()
	me.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_.Walk()
	me.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_.Walk()
	me.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_.Walk()
	me.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_.Walk()
	me.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_.Walk()
	me.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_.Walk()
	me.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_.Walk()
	me.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_.Walk()
	me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_.Walk()
	me.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_.Walk()
	me.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_.Walk()
	me.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_.Walk()
	me.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_.Walk()
	me.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_.Walk()
	me.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_.Walk()
	me.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_.Walk()
	me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_.Walk()
	me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_.Walk()
	me.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_.Walk()
	me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_.Walk()
	me.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_.Walk()
	me.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_.Walk()
	me.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_.Walk()
	me.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_.Walk()
	me.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_.Walk()
	me.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_.Walk()
	me.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_.Walk()
	me.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_.Walk()
	me.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_.Walk()
	me.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_.Walk()
	me.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_.Walk()
	me.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_.Walk()
	me.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_.Walk()
	me.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_.Walk()
	me.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_.Walk()
	me.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_.Walk()
	me.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_.Walk()
	me.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_.Walk()
	me.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_.Walk()
	me.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_.Walk()
	me.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_.Walk()
	me.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_.Walk()
	me.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_.Walk()
	me.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_.Walk()
	me.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_.Walk()
	me.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_.Walk()
	me.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_.Walk()
	me.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_.Walk()
	me.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_.Walk()
	me.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_.Walk()
	me.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_.Walk()
	me.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_.Walk()
	me.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_.Walk()
	me.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_.Walk()
	me.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_.Walk()
 }

type TfxDrawCommon xsdt.String

//	This convenience method just performs a simple type conversion to TfxDrawCommon's alias type xsdt.String.
func (me TfxDrawCommon) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TfxDrawCommon is just a simple String type, this merely returns the current string value.
func (me TfxDrawCommon) String () string { return xsdt.String(me).String() }

//	Since TfxDrawCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxDrawCommon) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ struct {
	Draw TfxDrawCommon `xml:"http://www.collada.org/2005/11/COLLADASchema draw"`

}

//	If the W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ instance.
func (me *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ struct {
	ColorClear TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`

}

//	If the W.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ struct {
	StencilClear xsdt.Byte `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`

}

//	If the W.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ instance.
func (me *XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ struct {
	ColorTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`

}

//	If the W.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_; fn != nil { fn(me) }
 }

type TxsdProfileGlesSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_

	XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_

	XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_

	XsdGoPkgHasGroup_GlesPipelineSettings

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_

	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_

}

//	If the W.TxsdProfileGlesSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlesSequenceTechniqueSequencePass) Walk ()  { 
	if fn := W.TxsdProfileGlesSequenceTechniqueSequencePass; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_.Walk()
	me.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_.Walk()
	me.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_.Walk()
	me.XsdGoPkgHasGroup_GlesPipelineSettings.Walk()
	me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_.Walk()
	me.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_.Walk()
	me.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_.Walk()
	me.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_.Walk()
 }

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlesSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

//	If the W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_; fn != nil { fn(me) }
	for _, x := range me.Passes { x.Walk() }
 }

type XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TxsdProfileGlesSequenceTechnique struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasAttr_Id_XsdtId_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdProfileGlesSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechnique instance as the single argument. Then calls the Walk() method on 7/9 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechnique instance.
func (me *TxsdProfileGlesSequenceTechnique) Walk ()  { 
	if fn := W.TxsdProfileGlesSequenceTechnique; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_.Walk()
	me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_.Walk()
 }

type XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlesSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_; fn != nil { fn(me) }
	for _, x := range me.Techniques { x.Walk() }
 }

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
type XsdGoPkgHasAttr_Platform_XsdtNCName_Pc struct {
//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`

}

//	Returns the default value for Platform -- "PC"
func (me XsdGoPkgHasAttr_Platform_XsdtNCName_Pc) PlatformDefault () xsdt.NCName { return xsdt.NCName("PC") }

type TxsdProfileGles struct {
	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_

	XsdGoPkgHasElems_Image

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

}

//	If the W.TxsdProfileGles function is not nil (ie. was set by outside code), calls it with this TxsdProfileGles instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdProfileGles instance.
func (me *TxsdProfileGles) Walk ()  { 
	if fn := W.TxsdProfileGles; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_.Walk()
 }

type XsdGoPkgHasElems_ProfileGles struct {
//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGleses []*TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`

}

//	If the W.XsdGoPkgHasElems_ProfileGles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileGles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileGles instance.
func (me *XsdGoPkgHasElems_ProfileGles) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ProfileGles; fn != nil { fn(me) }
	for _, x := range me.ProfileGleses { x.Walk() }
 }

//	Opens a block of COMMON platform-specific data types and technique declarations.
type XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_ struct {
	Sampler2D *TfxSampler2DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

//	If the W.XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_; fn != nil { fn(me) }
	me.Sampler2D.Walk()
 }

type XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_ struct {
	Surface *TfxSurfaceCommon `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_ instance.
func (me *XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_; fn != nil { fn(me) }
	me.Surface.Walk()
 }

type XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_ struct {
	Float Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

//	If the W.XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_; fn != nil { fn(me) }
 }

type TcommonNewparamType struct {
	XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_

	XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_

	XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_

	XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_

	XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_

}

//	If the W.TcommonNewparamType function is not nil (ie. was set by outside code), calls it with this TcommonNewparamType instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TcommonNewparamType instance.
func (me *TcommonNewparamType) Walk ()  { 
	if fn := W.TcommonNewparamType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_.Walk()
	me.XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_.Walk()
	me.XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_.Walk()
	me.XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_.Walk()
	me.XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_.Walk()
	me.XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ struct {
	Newparams []*TcommonNewparamType `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type TxsdCommonFloatOrParamTypeChoiceFloat struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdCommonFloatOrParamTypeChoiceFloat function is not nil (ie. was set by outside code), calls it with this TxsdCommonFloatOrParamTypeChoiceFloat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdCommonFloatOrParamTypeChoiceFloat instance.
func (me *TxsdCommonFloatOrParamTypeChoiceFloat) Walk ()  { 
	if fn := W.TxsdCommonFloatOrParamTypeChoiceFloat; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ struct {
	Float *TxsdCommonFloatOrParamTypeChoiceFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_; fn != nil { fn(me) }
	me.Float.Walk()
 }

type TxsdCommonFloatOrParamTypeChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

//	If the W.TxsdCommonFloatOrParamTypeChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdCommonFloatOrParamTypeChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdCommonFloatOrParamTypeChoiceParam instance.
func (me *TxsdCommonFloatOrParamTypeChoiceParam) Walk ()  { 
	if fn := W.TxsdCommonFloatOrParamTypeChoiceParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ struct {
	Param *TxsdCommonFloatOrParamTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_; fn != nil { fn(me) }
	me.Param.Walk()
 }

type TcommonFloatOrParamType struct {
	XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_

	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_

}

//	If the W.TcommonFloatOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonFloatOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonFloatOrParamType instance.
func (me *TcommonFloatOrParamType) Walk ()  { 
	if fn := W.TcommonFloatOrParamType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_.Walk()
	me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_.Walk()
 }

type XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`

}

//	If the W.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Transparency.Walk()
 }

type XsdGoPkgHasAttr_Texture_XsdtNCName_ struct {
	Texture xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texture,attr"`

}

type XsdGoPkgHasAttr_Texcoord_XsdtNCName_ struct {
	Texcoord xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord,attr"`

}

//	The extra element declares additional information regarding its parent element.
type XsdGoPkgHasElem_Extra struct {
//	The extra element declares additional information regarding its parent element.
	Extra *TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`

}

//	If the W.XsdGoPkgHasElem_Extra function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extra instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extra instance.
func (me *XsdGoPkgHasElem_Extra) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Extra; fn != nil { fn(me) }
	me.Extra.Walk()
 }

type TxsdCommonColorOrTextureTypeChoiceTexture struct {
	XsdGoPkgHasElem_Extra

	XsdGoPkgHasAttr_Texture_XsdtNCName_

	XsdGoPkgHasAttr_Texcoord_XsdtNCName_

}

//	If the W.TxsdCommonColorOrTextureTypeChoiceTexture function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceTexture instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceTexture instance.
func (me *TxsdCommonColorOrTextureTypeChoiceTexture) Walk ()  { 
	if fn := W.TxsdCommonColorOrTextureTypeChoiceTexture; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Extra.Walk()
 }

type XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ struct {
	Texture *TxsdCommonColorOrTextureTypeChoiceTexture `xml:"http://www.collada.org/2005/11/COLLADASchema texture"`

}

//	If the W.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ instance.
func (me *XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_; fn != nil { fn(me) }
	me.Texture.Walk()
 }

type TxsdCommonColorOrTextureTypeChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

//	If the W.TxsdCommonColorOrTextureTypeChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceParam instance.
func (me *TxsdCommonColorOrTextureTypeChoiceParam) Walk ()  { 
	if fn := W.TxsdCommonColorOrTextureTypeChoiceParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ struct {
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_; fn != nil { fn(me) }
	me.Param.Walk()
 }

type TxsdCommonColorOrTextureTypeChoiceColor struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdCommonColorOrTextureTypeChoiceColor function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceColor instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceColor instance.
func (me *TxsdCommonColorOrTextureTypeChoiceColor) Walk ()  { 
	if fn := W.TxsdCommonColorOrTextureTypeChoiceColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ struct {
	Color *TxsdCommonColorOrTextureTypeChoiceColor `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

//	If the W.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ instance.
func (me *XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_; fn != nil { fn(me) }
	me.Color.Walk()
 }

type TcommonColorOrTextureType struct {
	XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_

	XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_

	XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_

}

//	If the W.TcommonColorOrTextureType function is not nil (ie. was set by outside code), calls it with this TcommonColorOrTextureType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TcommonColorOrTextureType instance.
func (me *TcommonColorOrTextureType) Walk ()  { 
	if fn := W.TcommonColorOrTextureType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_.Walk()
	me.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_.Walk()
	me.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_.Walk()
 }

type XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ struct {
	Ambient *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

//	If the W.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Ambient.Walk()
 }

type XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`

}

//	If the W.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Emission.Walk()
 }

type XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`

}

//	If the W.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.IndexOfRefraction.Walk()
 }

type TfxOpaqueEnum xsdt.String

//	Since TfxOpaqueEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxOpaqueEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "RGB_ZERO".
func (me TfxOpaqueEnum) IsRgbZero () bool { return me == "RGB_ZERO" }

//	Since TfxOpaqueEnum is just a simple String type, this merely returns the current string value.
func (me TfxOpaqueEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "A_ONE".
func (me TfxOpaqueEnum) IsAOne () bool { return me == "A_ONE" }

//	This convenience method just performs a simple type conversion to TfxOpaqueEnum's alias type xsdt.String.
func (me TfxOpaqueEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne struct {
	Opaque TfxOpaqueEnum `xml:"http://www.collada.org/2005/11/COLLADASchema opaque,attr"`

}

//	Returns the default value for Opaque -- "A_ONE"
func (me XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne) OpaqueDefault () TfxOpaqueEnum { return TfxOpaqueEnum("A_ONE") }

type TcommonTransparentType struct {
	XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne

	TcommonColorOrTextureType

}

//	If the W.TcommonTransparentType function is not nil (ie. was set by outside code), calls it with this TcommonTransparentType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TcommonTransparentType instance.
func (me *TcommonTransparentType) Walk ()  { 
	if fn := W.TcommonTransparentType; fn != nil { fn(me) }
	me.TcommonColorOrTextureType.Walk()
 }

type XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`

}

//	If the W.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_; fn != nil { fn(me) }
	me.Transparent.Walk()
 }

type XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`

}

//	If the W.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Reflective.Walk()
 }

type XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`

}

//	If the W.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Reflectivity.Walk()
 }

type XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ struct {
	Diffuse *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema diffuse"`

}

//	If the W.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Diffuse.Walk()
 }

type TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert struct {
	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

}

//	If the W.TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert) Walk ()  { 
	if fn := W.TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk()
	me.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk()
 }

type XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ struct {
	Lambert *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert `xml:"http://www.collada.org/2005/11/COLLADASchema lambert"`

}

//	If the W.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ instance.
func (me *XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_; fn != nil { fn(me) }
	me.Lambert.Walk()
 }

type XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`

}

//	If the W.XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Reflective.Walk()
 }

type XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`

}

//	If the W.XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.IndexOfRefraction.Walk()
 }

type XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`

}

//	If the W.XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Emission.Walk()
 }

type XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`

}

//	If the W.XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Transparency.Walk()
 }

type XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`

}

//	If the W.XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_; fn != nil { fn(me) }
	me.Transparent.Walk()
 }

type XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`

}

//	If the W.XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Reflectivity.Walk()
 }

type TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant struct {
	XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

}

//	If the W.TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant) Walk ()  { 
	if fn := W.TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk()
	me.XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk()
 }

type XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ struct {
	Constant *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`

}

//	If the W.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ instance.
func (me *XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_; fn != nil { fn(me) }
	me.Constant.Walk()
 }

type XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`

}

//	If the W.XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Emission.Walk()
 }

type XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ struct {
	Shininess *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema shininess"`

}

//	If the W.XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Shininess.Walk()
 }

type XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`

}

//	If the W.XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Reflective.Walk()
 }

type XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ struct {
	Ambient *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

//	If the W.XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Ambient.Walk()
 }

type XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`

}

//	If the W.XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Transparency.Walk()
 }

type XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`

}

//	If the W.XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_; fn != nil { fn(me) }
	me.Transparent.Walk()
 }

type XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ struct {
	Diffuse *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema diffuse"`

}

//	If the W.XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Diffuse.Walk()
 }

type XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`

}

//	If the W.XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Reflectivity.Walk()
 }

type XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ struct {
	Specular *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema specular"`

}

//	If the W.XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Specular.Walk()
 }

type XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`

}

//	If the W.XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.IndexOfRefraction.Walk()
 }

type TxsdProfileCommonSequenceTechniqueSequenceChoicePhong struct {
	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

}

//	If the W.TxsdProfileCommonSequenceTechniqueSequenceChoicePhong function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoicePhong instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoicePhong instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong) Walk ()  { 
	if fn := W.TxsdProfileCommonSequenceTechniqueSequenceChoicePhong; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk()
	me.XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk()
 }

type XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ struct {
	Phong *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong `xml:"http://www.collada.org/2005/11/COLLADASchema phong"`

}

//	If the W.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ instance.
func (me *XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_; fn != nil { fn(me) }
	me.Phong.Walk()
 }

type XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ struct {
	Specular *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema specular"`

}

//	If the W.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Specular.Walk()
 }

type XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`

}

//	If the W.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Emission.Walk()
 }

type XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`

}

//	If the W.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Reflectivity.Walk()
 }

type XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`

}

//	If the W.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_; fn != nil { fn(me) }
	me.Transparent.Walk()
 }

type XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`

}

//	If the W.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Reflective.Walk()
 }

type XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ struct {
	Ambient *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

//	If the W.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Ambient.Walk()
 }

type XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ struct {
	Diffuse *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema diffuse"`

}

//	If the W.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_; fn != nil { fn(me) }
	me.Diffuse.Walk()
 }

type XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`

}

//	If the W.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.IndexOfRefraction.Walk()
 }

type XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`

}

//	If the W.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Transparency.Walk()
 }

type XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ struct {
	Shininess *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema shininess"`

}

//	If the W.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_; fn != nil { fn(me) }
	me.Shininess.Walk()
 }

type TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn struct {
	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

}

//	If the W.TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn) Walk ()  { 
	if fn := W.TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk()
	me.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk()
	me.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk()
	me.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk()
 }

type XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ struct {
	Blinn *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn `xml:"http://www.collada.org/2005/11/COLLADASchema blinn"`

}

//	If the W.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ instance.
func (me *XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_; fn != nil { fn(me) }
	me.Blinn.Walk()
 }

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ struct {
	Newparams []*TcommonNewparamType `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

type TxsdProfileCommonSequenceTechnique struct {
	XsdGoPkgHasElems_Image

	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_

//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_

	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_

}

//	If the W.TxsdProfileCommonSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechnique instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechnique instance.
func (me *TxsdProfileCommonSequenceTechnique) Walk ()  { 
	if fn := W.TxsdProfileCommonSequenceTechnique; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_.Walk()
	me.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_.Walk()
	me.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_.Walk()
	me.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Technique *TxsdProfileCommonSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ instance.
func (me *XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_; fn != nil { fn(me) }
	me.Technique.Walk()
 }

type TxsdProfileCommon struct {
	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_

	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdProfileCommon function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommon instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommon instance.
func (me *TxsdProfileCommon) Walk ()  { 
	if fn := W.TxsdProfileCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
 }

type XsdGoPkgHasElems_ProfileCommon struct {
//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommons []*TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`

}

//	If the W.XsdGoPkgHasElems_ProfileCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileCommon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileCommon instance.
func (me *XsdGoPkgHasElems_ProfileCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ProfileCommon; fn != nil { fn(me) }
	for _, x := range me.ProfileCommons { x.Walk() }
 }

//	Opens a block of GLSL platform-specific data types and technique declarations.
//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	A group that specifies the allowable types for GLSL profile parameters.
type TglslFloat xsdt.Float

//	Since TglslFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslFloat) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslFloat's alias type xsdt.Float.
func (me TglslFloat) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TglslFloat's current non-string scalar value.
func (me TglslFloat) String () string { return xsdt.Float(me).String() }

type XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ struct {
	Float TglslFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_; fn != nil { fn(me) }
 }

type TglslBool xsdt.Boolean

//	Returns a string representation of this TglslBool's current non-string scalar value.
func (me TglslBool) String () string { return xsdt.Boolean(me).String() }

//	This convenience method just performs a simple type conversion to TglslBool's alias type xsdt.Boolean.
func (me TglslBool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TglslBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslBool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

type TglslListOfBool xsdt.String

//	Since TglslListOfBool is just a simple String type, this merely returns the current string value.
func (me TglslListOfBool) String () string { return xsdt.String(me).String() }

//	TglslListOfBool defines a String containing a whitespace-separated list of TglslBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfBool) Values () (list []TglslBool) { var btv = new(TglslBool); var svals = xsdt.ListValues(string(me)); list = make([]TglslBool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TglslListOfBool's alias type xsdt.String.
func (me TglslListOfBool) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfBool) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglslBool2 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool2's alias type TglslListOfBool.
func (me TglslBool2) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool2 is just a simple String type, this merely returns the current string value.
func (me TglslBool2) String () string { return TglslListOfBool(me).String() }

//	Since TglslBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool2) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ struct {
	Bool2 TglslBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	If the W.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ instance.
func (me *XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_; fn != nil { fn(me) }
 }

type TglslListOfFloat xsdt.String

//	Since TglslListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfFloat) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglslListOfFloat defines a String containing a whitespace-separated list of TglslFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfFloat) Values () (list []TglslFloat) { var btv = new(TglslFloat); var svals = xsdt.ListValues(string(me)); list = make([]TglslFloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TglslListOfFloat's alias type xsdt.String.
func (me TglslListOfFloat) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslListOfFloat is just a simple String type, this merely returns the current string value.
func (me TglslListOfFloat) String () string { return xsdt.String(me).String() }

type TglslFloat2X2 TglslListOfFloat

//	Since TglslFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2X2) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	Since TglslFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2X2) String () string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat2X2's alias type TglslListOfFloat.
func (me TglslFloat2X2) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ struct {
	Float2X2 TglslFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	If the W.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_; fn != nil { fn(me) }
 }

type TglBlendEquationType xsdt.String

//	Returns true if the value of this enumerated TglBlendEquationType is "MIN".
func (me TglBlendEquationType) IsMin () bool { return me == "MIN" }

//	This convenience method just performs a simple type conversion to TglBlendEquationType's alias type xsdt.String.
func (me TglBlendEquationType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglBlendEquationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendEquationType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglBlendEquationType is just a simple String type, this merely returns the current string value.
func (me TglBlendEquationType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_SUBTRACT".
func (me TglBlendEquationType) IsFuncSubtract () bool { return me == "FUNC_SUBTRACT" }

//	Returns true if the value of this enumerated TglBlendEquationType is "MAX".
func (me TglBlendEquationType) IsMax () bool { return me == "MAX" }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_REVERSE_SUBTRACT".
func (me TglBlendEquationType) IsFuncReverseSubtract () bool { return me == "FUNC_REVERSE_SUBTRACT" }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_ADD".
func (me TglBlendEquationType) IsFuncAdd () bool { return me == "FUNC_ADD" }

type TglFogCoordSrcType xsdt.String

//	Since TglFogCoordSrcType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogCoordSrcType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglFogCoordSrcType's alias type xsdt.String.
func (me TglFogCoordSrcType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FOG_COORDINATE".
func (me TglFogCoordSrcType) IsFogCoordinate () bool { return me == "FOG_COORDINATE" }

//	Since TglFogCoordSrcType is just a simple String type, this merely returns the current string value.
func (me TglFogCoordSrcType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FRAGMENT_DEPTH".
func (me TglFogCoordSrcType) IsFragmentDepth () bool { return me == "FRAGMENT_DEPTH" }

type TglEnumeration xsdt.String

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglEnumeration) ToTglStencilOpType () TglStencilOpType { return TglStencilOpType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendEquationType, but keep in mind the actual value may or may not be a valid TglBlendEquationType value.
func (me TglEnumeration) ToTglBlendEquationType () TglBlendEquationType { return TglBlendEquationType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglEnumeration) ToTglLightModelColorControlType () TglLightModelColorControlType { return TglLightModelColorControlType(me) }

//	This convenience method just performs a simple type conversion to TglEnumeration's alias type xsdt.String.
func (me TglEnumeration) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglEnumeration) ToTglFrontFaceType () TglFrontFaceType { return TglFrontFaceType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglEnumeration) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglEnumeration) ToTglLogicOpType () TglLogicOpType { return TglLogicOpType(me) }

//	Since TglEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglEnumeration) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglEnumeration) ToTglPolygonModeType () TglPolygonModeType { return TglPolygonModeType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglEnumeration) ToTglFaceType () TglFaceType { return TglFaceType(me) }

//	Since TglEnumeration is just a simple String type, this merely returns the current string value.
func (me TglEnumeration) String () string { return xsdt.String(me).String() }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglEnumeration) ToTglMaterialType () TglMaterialType { return TglMaterialType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglEnumeration) ToTglFuncType () TglFuncType { return TglFuncType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglEnumeration) ToTglFogType () TglFogType { return TglFogType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogCoordSrcType, but keep in mind the actual value may or may not be a valid TglFogCoordSrcType value.
func (me TglEnumeration) ToTglFogCoordSrcType () TglFogCoordSrcType { return TglFogCoordSrcType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglEnumeration) ToTglShadeModelType () TglShadeModelType { return TglShadeModelType(me) }

type XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ struct {
	Enum TglEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	If the W.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ instance.
func (me *XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ struct {
	Bool TglslBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

//	If the W.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ instance.
func (me *XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_; fn != nil { fn(me) }
 }

type TglslInt xsdt.Int

//	This convenience method just performs a simple type conversion to TglslInt's alias type xsdt.Int.
func (me TglslInt) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

//	Since TglslInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslInt) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

//	Returns a string representation of this TglslInt's current non-string scalar value.
func (me TglslInt) String () string { return xsdt.Int(me).String() }

type XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ struct {
	Int TglslInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

//	If the W.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ instance.
func (me *XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_; fn != nil { fn(me) }
 }

//	A cube map texture sampler for the GLSL profile.
type TglSamplerCUBE struct {
	TfxSamplerCUBECommon

}

//	If the W.TglSamplerCUBE function is not nil (ie. was set by outside code), calls it with this TglSamplerCUBE instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerCUBE instance.
func (me *TglSamplerCUBE) Walk ()  { 
	if fn := W.TglSamplerCUBE; fn != nil { fn(me) }
	me.TfxSamplerCUBECommon.Walk()
 }

type XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ struct {
	SamplerCUBE *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

//	If the W.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_; fn != nil { fn(me) }
	me.SamplerCUBE.Walk()
 }

type TglslBool3 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool3's alias type TglslListOfBool.
func (me TglslBool3) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool3) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

//	Since TglslBool3 is just a simple String type, this merely returns the current string value.
func (me TglslBool3) String () string { return TglslListOfBool(me).String() }

type XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ struct {
	Bool3 TglslBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

//	If the W.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ instance.
func (me *XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_; fn != nil { fn(me) }
 }

//	A surface type for the GLSL profile. This surface inherits from the fx_surface_common type and adds the
//	ability to programmatically generate textures.
//	A procedural surface generator.
//	The code element allows you to embed GLSL code to use for this surface generator.
//	The fx_code_profile type allows you to specify an inline block of source code.
type TfxCodeProfile struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TfxCodeProfile function is not nil (ie. was set by outside code), calls it with this TfxCodeProfile instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCodeProfile instance.
func (me *TfxCodeProfile) Walk ()  { 
	if fn := W.TfxCodeProfile; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ struct {
//	The code element allows you to embed GLSL code to use for this surface generator.
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

//	The entry symbol for the shader function.
type XsdGoPkgHasAttr_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_

}

//	If the W.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance.
func (me *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName) Walk ()  { 
	if fn := W.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	If the W.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_; fn != nil { fn(me) }
	me.Name.Walk()
 }

//	The setparam element allows you to assign a new value to a previously defined parameter.
type XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TglslIdentifier xsdt.Token

//	Since TglslIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslIdentifier) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslIdentifier's alias type xsdt.Token.
func (me TglslIdentifier) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Since TglslIdentifier is just a simple String type, this merely returns the current string value.
func (me TglslIdentifier) String () string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Ref_TglslIdentifier_ struct {
	Ref TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TglslSetparamSimple struct {
	XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasAttr_Ref_TglslIdentifier_

}

//	If the W.TglslSetparamSimple function is not nil (ie. was set by outside code), calls it with this TglslSetparamSimple instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglslSetparamSimple instance.
func (me *TglslSetparamSimple) Walk ()  { 
	if fn := W.TglslSetparamSimple; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_.Walk()
 }

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ struct {
//	The setparam element allows you to assign a new value to a previously defined parameter.
	Setparams []*TglslSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ instance.
func (me *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

//	The annotate element allows you to specify an annotation for this surface generator.
type XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this surface generator.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

//	The include element allows you to import GLSL code to use for this surface generator.
//	The include element is used to import source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
type TfxIncludeCommon struct {
//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TfxIncludeCommon function is not nil (ie. was set by outside code), calls it with this TfxIncludeCommon instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfxIncludeCommon instance.
func (me *TfxIncludeCommon) Walk ()  { 
	if fn := W.TfxIncludeCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ struct {
//	The include element allows you to import GLSL code to use for this surface generator.
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

type TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator struct {
//	The code element allows you to embed GLSL code to use for this surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

//	The setparam element allows you to assign a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_

//	The annotate element allows you to specify an annotation for this surface generator.
	XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_

//	The include element allows you to import GLSL code to use for this surface generator.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

}

//	If the W.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator function is not nil (ie. was set by outside code), calls it with this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator instance.
func (me *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator) Walk ()  { 
	if fn := W.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk()
	me.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_.Walk()
	me.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_.Walk()
	me.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk()
 }

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
//	A procedural surface generator.
	Generator *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`

}

//	If the W.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ instance.
func (me *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_; fn != nil { fn(me) }
	me.Generator.Walk()
 }

type TglslSurfaceType struct {
//	A procedural surface generator.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_

	TfxSurfaceCommon

}

//	If the W.TglslSurfaceType function is not nil (ie. was set by outside code), calls it with this TglslSurfaceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TglslSurfaceType instance.
func (me *TglslSurfaceType) Walk ()  { 
	if fn := W.TglslSurfaceType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_.Walk()
	me.TfxSurfaceCommon.Walk()
 }

type XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ struct {
	Surface *TglslSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ instance.
func (me *XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_; fn != nil { fn(me) }
	me.Surface.Walk()
 }

type TglslFloat3X3 TglslListOfFloat

//	Since TglslFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3X3) String () string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat3X3's alias type TglslListOfFloat.
func (me TglslFloat3X3) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3X3) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ struct {
	Float3X3 TglslFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

//	If the W.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_; fn != nil { fn(me) }
 }

//	A two-dimensional texture sampler for the GLSL profile.
type TglSampler2D struct {
	TfxSampler2DCommon

}

//	If the W.TglSampler2D function is not nil (ie. was set by outside code), calls it with this TglSampler2D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler2D instance.
func (me *TglSampler2D) Walk ()  { 
	if fn := W.TglSampler2D; fn != nil { fn(me) }
	me.TfxSampler2DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ struct {
	Sampler2D *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

//	If the W.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_; fn != nil { fn(me) }
	me.Sampler2D.Walk()
 }

type TglslFloat2 TglslListOfFloat

//	Since TglslFloat2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2) String () string { return TglslListOfFloat(me).String() }

//	Since TglslFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslFloat2's alias type TglslListOfFloat.
func (me TglslFloat2) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ struct {
	Float2 TglslFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ instance.
func (me *XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_; fn != nil { fn(me) }
 }

//	A three-dimensional texture sampler for the GLSL profile.
type TglSampler3D struct {
	TfxSampler3DCommon

}

//	If the W.TglSampler3D function is not nil (ie. was set by outside code), calls it with this TglSampler3D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler3D instance.
func (me *TglSampler3D) Walk ()  { 
	if fn := W.TglSampler3D; fn != nil { fn(me) }
	me.TfxSampler3DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ struct {
	Sampler3D *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

//	If the W.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_; fn != nil { fn(me) }
	me.Sampler3D.Walk()
 }

type TglslListOfInt xsdt.String

//	Since TglslListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfInt) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglslListOfInt defines a String containing a whitespace-separated list of TglslInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfInt) Values () (list []TglslInt) { var btv = new(TglslInt); var svals = xsdt.ListValues(string(me)); list = make([]TglslInt, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TglslListOfInt's alias type xsdt.String.
func (me TglslListOfInt) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslListOfInt is just a simple String type, this merely returns the current string value.
func (me TglslListOfInt) String () string { return xsdt.String(me).String() }

type TglslInt3 TglslListOfInt

//	Since TglslInt3 is just a simple String type, this merely returns the current string value.
func (me TglslInt3) String () string { return TglslListOfInt(me).String() }

//	Since TglslInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt3) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslInt3's alias type TglslListOfInt.
func (me TglslInt3) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ struct {
	Int3 TglslInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	If the W.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ instance.
func (me *XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_; fn != nil { fn(me) }
 }

type TglslFloat3 TglslListOfFloat

//	This convenience method just performs a simple type conversion to TglslFloat3's alias type TglslListOfFloat.
func (me TglslFloat3) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3) String () string { return TglslListOfFloat(me).String() }

//	Since TglslFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ struct {
	Float3 TglslFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ instance.
func (me *XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_; fn != nil { fn(me) }
 }

type TglslBool4 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool4's alias type TglslListOfBool.
func (me TglslBool4) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool4) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

//	Since TglslBool4 is just a simple String type, this merely returns the current string value.
func (me TglslBool4) String () string { return TglslListOfBool(me).String() }

type XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ struct {
	Bool4 TglslBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

//	If the W.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ instance.
func (me *XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_; fn != nil { fn(me) }
 }

//	A one-dimensional texture sampler for the GLSL profile.
type TglSampler1D struct {
	TfxSampler1DCommon

}

//	If the W.TglSampler1D function is not nil (ie. was set by outside code), calls it with this TglSampler1D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler1D instance.
func (me *TglSampler1D) Walk ()  { 
	if fn := W.TglSampler1D; fn != nil { fn(me) }
	me.TfxSampler1DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ struct {
	Sampler1D *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

//	If the W.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_; fn != nil { fn(me) }
	me.Sampler1D.Walk()
 }

//	A depth texture sampler for the GLSL profile.
type TglSamplerDEPTH struct {
	TfxSamplerDEPTHCommon

}

//	If the W.TglSamplerDEPTH function is not nil (ie. was set by outside code), calls it with this TglSamplerDEPTH instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerDEPTH instance.
func (me *TglSamplerDEPTH) Walk ()  { 
	if fn := W.TglSamplerDEPTH; fn != nil { fn(me) }
	me.TfxSamplerDEPTHCommon.Walk()
 }

type XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ struct {
	SamplerDEPTH *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

//	If the W.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_; fn != nil { fn(me) }
	me.SamplerDEPTH.Walk()
 }

type TglslFloat4X4 TglslListOfFloat

//	Since TglslFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4X4) String () string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat4X4's alias type TglslListOfFloat.
func (me TglslFloat4X4) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4X4) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ struct {
	Float4X4 TglslFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

//	If the W.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_; fn != nil { fn(me) }
 }

type TglslFloat4 TglslListOfFloat

//	Since TglslFloat4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4) String () string { return TglslListOfFloat(me).String() }

//	Since TglslFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslFloat4's alias type TglslListOfFloat.
func (me TglslFloat4) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ struct {
	Float4 TglslFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ instance.
func (me *XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_; fn != nil { fn(me) }
 }

//	A two-dimensional texture sampler for the GLSL profile.
type TglSamplerRECT struct {
	TfxSamplerRECTCommon

}

//	If the W.TglSamplerRECT function is not nil (ie. was set by outside code), calls it with this TglSamplerRECT instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerRECT instance.
func (me *TglSamplerRECT) Walk ()  { 
	if fn := W.TglSamplerRECT; fn != nil { fn(me) }
	me.TfxSamplerRECTCommon.Walk()
 }

type XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ struct {
	SamplerRECT *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

//	If the W.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_; fn != nil { fn(me) }
	me.SamplerRECT.Walk()
 }

type TglslInt4 TglslListOfInt

//	Since TglslInt4 is just a simple String type, this merely returns the current string value.
func (me TglslInt4) String () string { return TglslListOfInt(me).String() }

//	Since TglslInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt4) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslInt4's alias type TglslListOfInt.
func (me TglslInt4) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ struct {
	Int4 TglslInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

//	If the W.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ instance.
func (me *XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_; fn != nil { fn(me) }
 }

type TglslInt2 TglslListOfInt

//	Since TglslInt2 is just a simple String type, this merely returns the current string value.
func (me TglslInt2) String () string { return TglslListOfInt(me).String() }

//	Since TglslInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt2) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslInt2's alias type TglslListOfInt.
func (me TglslInt2) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ struct {
	Int2 TglslInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

//	If the W.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ instance.
func (me *XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasGroup_GlslParamType struct {
	XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_

	XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_

	XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_

	XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_

	XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_

	XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_

	XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_

	XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_

	XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_

	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_

	XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_

	XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_

	XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_

	XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_

	XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_

	XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_

	XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_

}

//	If the W.XsdGoPkgHasGroup_GlslParamType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlslParamType instance as the single argument. Then calls the Walk() method on 23/23 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlslParamType instance.
func (me *XsdGoPkgHasGroup_GlslParamType) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_GlslParamType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_.Walk()
	me.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_.Walk()
	me.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_.Walk()
	me.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_.Walk()
	me.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_.Walk()
	me.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_.Walk()
	me.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_.Walk()
	me.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_.Walk()
	me.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_.Walk()
	me.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_.Walk()
	me.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_.Walk()
	me.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_.Walk()
	me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_.Walk()
	me.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_.Walk()
	me.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_.Walk()
	me.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_.Walk()
	me.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_.Walk()
	me.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_.Walk()
	me.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_.Walk()
	me.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_.Walk()
	me.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_.Walk()
	me.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_.Walk()
	me.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_.Walk()
 }

//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_; fn != nil { fn(me) }
 }

//	The length attribute specifies the length of the array.
type XsdGoPkgHasAttr_Length_XsdtPositiveInteger_ struct {
//	The length attribute specifies the length of the array.
	Length xsdt.PositiveInteger `xml:"http://www.collada.org/2005/11/COLLADASchema length,attr"`

}

type TglslNewarrayType struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_GlslParamType

}

//	If the W.TglslNewarrayType function is not nil (ie. was set by outside code), calls it with this TglslNewarrayType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TglslNewarrayType instance.
func (me *TglslNewarrayType) Walk ()  { 
	if fn := W.TglslNewarrayType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_GlslParamType.Walk()
	me.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_.Walk()
 }

type XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ struct {
	Array *TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_; fn != nil { fn(me) }
	me.Array.Walk()
 }

type XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_ struct {
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`

}

//	If the W.XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_ instance.
func (me *XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasAttr_Sid_TglslIdentifier_ struct {
	Sid TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

type XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

//	If the W.XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_; fn != nil { fn(me) }
 }

type TglslNewparam struct {
	XsdGoPkgHasAttr_Sid_TglslIdentifier_

	XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_

	XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_

}

//	If the W.TglslNewparam function is not nil (ie. was set by outside code), calls it with this TglslNewparam instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TglslNewparam instance.
func (me *TglslNewparam) Walk ()  { 
	if fn := W.TglslNewparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_.Walk()
	me.XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_.Walk()
	me.XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_.Walk()
	me.XsdGoPkgHasGroup_GlslParamType.Walk()
 }

type XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ struct {
	Newparams []*TglslNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	A group that defines all of the renderstates used for the CG and GLSL profiles.
type TxsdGlPipelineSettingsChoiceFrontFace struct {
	XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceFrontFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFrontFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFrontFace instance.
func (me *TxsdGlPipelineSettingsChoiceFrontFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFrontFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`

}

//	If the W.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_; fn != nil { fn(me) }
	me.FrontFace.Walk()
 }

type TxsdGlPipelineSettingsChoicePointSizeMin struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

}

//	If the W.TxsdGlPipelineSettingsChoicePointSizeMin function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointSizeMin instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointSizeMin instance.
func (me *TxsdGlPipelineSettingsChoicePointSizeMin) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointSizeMin; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`

}

//	If the W.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_; fn != nil { fn(me) }
	me.PointSizeMin.Walk()
 }

type TglMaxTextureImageUnitsIndex xsdt.NonNegativeInteger

//	Since TglMaxTextureImageUnitsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxTextureImageUnitsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglMaxTextureImageUnitsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxTextureImageUnitsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Returns a string representation of this TglMaxTextureImageUnitsIndex's current non-string scalar value.
func (me TglMaxTextureImageUnitsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_ struct {
	Index TglMaxTextureImageUnitsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ struct {
	Value *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type TxsdGlPipelineSettingsChoiceTexture2D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture2D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture2D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture2D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture2D) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture2D; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_.Walk()
	me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ struct {
	Texture2D *TxsdGlPipelineSettingsChoiceTexture2D `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D"`

}

//	If the W.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ instance.
func (me *XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_; fn != nil { fn(me) }
	me.Texture2D.Walk()
 }

type XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ struct {
	Value *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureDEPTH struct {
	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_

	XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureDEPTH function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureDEPTH instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureDEPTH instance.
func (me *TxsdGlPipelineSettingsChoiceTextureDEPTH) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureDEPTH; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_.Walk()
 }

type XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ struct {
	TextureDEPTH *TxsdGlPipelineSettingsChoiceTextureDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH"`

}

//	If the W.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ instance.
func (me *XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_; fn != nil { fn(me) }
	me.TextureDEPTH.Walk()
 }

type TxsdGlPipelineSettingsChoiceAutoNormalEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceAutoNormalEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAutoNormalEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAutoNormalEnable instance.
func (me *TxsdGlPipelineSettingsChoiceAutoNormalEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceAutoNormalEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ struct {
	AutoNormalEnable *TxsdGlPipelineSettingsChoiceAutoNormalEnable `xml:"http://www.collada.org/2005/11/COLLADASchema auto_normal_enable"`

}

//	If the W.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ instance.
func (me *XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_; fn != nil { fn(me) }
	me.AutoNormalEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill struct {
	Value TglPolygonModeType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FILL"
func (me XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill) ValueDefault () TglPolygonModeType { return TglPolygonModeType("FILL") }

type TxsdGlPipelineSettingsChoicePolygonModeSequenceMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonModeSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonModeSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonModeSequenceMode instance.
func (me *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonModeSequenceMode; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`

}

//	If the W.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_; fn != nil { fn(me) }
	me.Mode.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FRONT_AND_BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack) ValueDefault () TglFaceType { return TglFaceType("FRONT_AND_BACK") }

type TxsdGlPipelineSettingsChoicePolygonModeSequenceFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonModeSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonModeSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonModeSequenceFace instance.
func (me *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonModeSequenceFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

//	If the W.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_; fn != nil { fn(me) }
	me.Face.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonMode struct {
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_

	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonMode instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonMode instance.
func (me *TxsdGlPipelineSettingsChoicePolygonMode) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonMode; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_.Walk()
	me.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_.Walk()
 }

type XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ struct {
	PolygonMode *TxsdGlPipelineSettingsChoicePolygonMode `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_mode"`

}

//	If the W.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ instance.
func (me *XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_; fn != nil { fn(me) }
	me.PolygonMode.Walk()
 }

type TxsdGlPipelineSettingsChoiceModelViewMatrix struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

}

//	If the W.TxsdGlPipelineSettingsChoiceModelViewMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceModelViewMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceModelViewMatrix instance.
func (me *TxsdGlPipelineSettingsChoiceModelViewMatrix) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceModelViewMatrix; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`

}

//	If the W.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_; fn != nil { fn(me) }
	me.ModelViewMatrix.Walk()
 }

type XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ struct {
	Value *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type TxsdGlPipelineSettingsChoiceTextureCUBE struct {
	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureCUBE function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureCUBE instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureCUBE instance.
func (me *TxsdGlPipelineSettingsChoiceTextureCUBE) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureCUBE; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_.Walk()
	me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ struct {
	TextureCUBE *TxsdGlPipelineSettingsChoiceTextureCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE"`

}

//	If the W.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ instance.
func (me *XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_; fn != nil { fn(me) }
	me.TextureCUBE.Walk()
 }

type TxsdGlPipelineSettingsChoiceLineStippleEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLineStippleEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLineStippleEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLineStippleEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLineStippleEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLineStippleEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ struct {
	LineStippleEnable *TxsdGlPipelineSettingsChoiceLineStippleEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple_enable"`

}

//	If the W.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ instance.
func (me *XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_; fn != nil { fn(me) }
	me.LineStippleEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceColorLogicOpEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceColorLogicOpEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorLogicOpEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorLogicOpEnable instance.
func (me *TxsdGlPipelineSettingsChoiceColorLogicOpEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorLogicOpEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlPipelineSettingsChoiceColorLogicOpEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`

}

//	If the W.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_; fn != nil { fn(me) }
	me.ColorLogicOpEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceMaterialAmbient struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_02020210

}

//	If the W.TxsdGlPipelineSettingsChoiceMaterialAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMaterialAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMaterialAmbient instance.
func (me *TxsdGlPipelineSettingsChoiceMaterialAmbient) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMaterialAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`

}

//	If the W.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_; fn != nil { fn(me) }
	me.MaterialAmbient.Walk()
 }

type XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse struct {
	Value TglMaterialType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "AMBIENT_AND_DIFFUSE"
func (me XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse) ValueDefault () TglMaterialType { return TglMaterialType("AMBIENT_AND_DIFFUSE") }

type TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse

}

//	If the W.TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`

}

//	If the W.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_; fn != nil { fn(me) }
	me.Mode.Walk()
 }

type TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

//	If the W.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_; fn != nil { fn(me) }
	me.Face.Walk()
 }

type TxsdGlPipelineSettingsChoiceColorMaterial struct {
	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_

	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_

}

//	If the W.TxsdGlPipelineSettingsChoiceColorMaterial function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterial instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterial instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterial) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorMaterial; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_.Walk()
	me.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_.Walk()
 }

type XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ struct {
	ColorMaterial *TxsdGlPipelineSettingsChoiceColorMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema color_material"`

}

//	If the W.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ instance.
func (me *XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_; fn != nil { fn(me) }
	me.ColorMaterial.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogDensity struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlPipelineSettingsChoiceFogDensity function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogDensity instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogDensity instance.
func (me *TxsdGlPipelineSettingsChoiceFogDensity) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogDensity; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlPipelineSettingsChoiceFogDensity `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`

}

//	If the W.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_; fn != nil { fn(me) }
	me.FogDensity.Walk()
 }

type TglMaxLightsIndex xsdt.NonNegativeInteger

//	Since TglMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxLightsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	Returns a string representation of this TglMaxLightsIndex's current non-string scalar value.
func (me TglMaxLightsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

//	This convenience method just performs a simple type conversion to TglMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxLightsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

type XsdGoPkgHasAttr_Index_TglMaxLightsIndex_ struct {
	Index TglMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlPipelineSettingsChoiceLightSpotExponent struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightSpotExponent function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpotExponent instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpotExponent instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpotExponent) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightSpotExponent; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlPipelineSettingsChoiceLightSpotExponent `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`

}

//	If the W.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_; fn != nil { fn(me) }
	me.LightSpotExponent.Walk()
 }

type TxsdGlPipelineSettingsChoiceClearDepth struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlPipelineSettingsChoiceClearDepth function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClearDepth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClearDepth instance.
func (me *TxsdGlPipelineSettingsChoiceClearDepth) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceClearDepth; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlPipelineSettingsChoiceClearDepth `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`

}

//	If the W.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ instance.
func (me *XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_; fn != nil { fn(me) }
	me.ClearDepth.Walk()
 }

type TxsdGlPipelineSettingsChoiceLogicOp struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLogicOpType_Copy

}

//	If the W.TxsdGlPipelineSettingsChoiceLogicOp function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLogicOp instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLogicOp instance.
func (me *TxsdGlPipelineSettingsChoiceLogicOp) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLogicOp; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`

}

//	If the W.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_; fn != nil { fn(me) }
	me.LogicOp.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightDiffuse struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightDiffuse instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightDiffuse instance.
func (me *TxsdGlPipelineSettingsChoiceLightDiffuse) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightDiffuse; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`

}

//	If the W.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_; fn != nil { fn(me) }
	me.LightDiffuse.Walk()
 }

type XsdGoPkgHasAttr_Value_Tint2_165536 struct {
	Value Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 65536"
func (me XsdGoPkgHasAttr_Value_Tint2_165536) ValueDefault () Tint2 { return Tint2("1 65536") }

type TxsdGlPipelineSettingsChoiceLineStipple struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint2_165536

}

//	If the W.TxsdGlPipelineSettingsChoiceLineStipple function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLineStipple instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLineStipple instance.
func (me *TxsdGlPipelineSettingsChoiceLineStipple) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLineStipple; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ struct {
	LineStipple *TxsdGlPipelineSettingsChoiceLineStipple `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple"`

}

//	If the W.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ instance.
func (me *XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_; fn != nil { fn(me) }
	me.LineStipple.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ struct {
	Front *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront `xml:"http://www.collada.org/2005/11/COLLADASchema front"`

}

//	If the W.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ instance.
func (me *XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_; fn != nil { fn(me) }
	me.Front.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

//	If the W.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_; fn != nil { fn(me) }
	me.Mask.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef struct {
	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ struct {
	Ref *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

//	If the W.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_; fn != nil { fn(me) }
	me.Ref.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ struct {
	Back *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack `xml:"http://www.collada.org/2005/11/COLLADASchema back"`

}

//	If the W.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ instance.
func (me *XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_; fn != nil { fn(me) }
	me.Back.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSeparate struct {
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_

	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_

	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_

	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparate) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSeparate; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_.Walk()
	me.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_.Walk()
	me.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_.Walk()
	me.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_.Walk()
 }

type XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ struct {
	StencilFuncSeparate *TxsdGlPipelineSettingsChoiceStencilFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func_separate"`

}

//	If the W.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_; fn != nil { fn(me) }
	me.StencilFuncSeparate.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Value_TglFuncType_Always

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

//	If the W.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_; fn != nil { fn(me) }
	me.Func.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

//	If the W.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_; fn != nil { fn(me) }
	me.Mask.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef struct {
	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

//	If the W.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_; fn != nil { fn(me) }
	me.Ref.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFunc instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_.Walk()
	me.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_.Walk()
	me.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_.Walk()
 }

type XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`

}

//	If the W.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_; fn != nil { fn(me) }
	me.StencilFunc.Walk()
 }

type TxsdGlPipelineSettingsChoicePointSizeMax struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlPipelineSettingsChoicePointSizeMax function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointSizeMax instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointSizeMax instance.
func (me *TxsdGlPipelineSettingsChoicePointSizeMax) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointSizeMax; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`

}

//	If the W.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_; fn != nil { fn(me) }
	me.PointSizeMax.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

}

//	If the W.TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation instance.
func (me *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`

}

//	If the W.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_; fn != nil { fn(me) }
	me.LightQuadraticAttenuation.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureDEPTHEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureDEPTHEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureDEPTHEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureDEPTHEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTextureDEPTHEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureDEPTHEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ struct {
	TextureDEPTHEnable *TxsdGlPipelineSettingsChoiceTextureDEPTHEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH_enable"`

}

//	If the W.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ instance.
func (me *XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_; fn != nil { fn(me) }
	me.TextureDEPTHEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthTestEnable instance.
func (me *TxsdGlPipelineSettingsChoiceDepthTestEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`

}

//	If the W.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_; fn != nil { fn(me) }
	me.DepthTestEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable instance.
func (me *TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_; fn != nil { fn(me) }
	me.SampleAlphaToOneEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLineWidth struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlPipelineSettingsChoiceLineWidth function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLineWidth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLineWidth instance.
func (me *TxsdGlPipelineSettingsChoiceLineWidth) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLineWidth; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlPipelineSettingsChoiceLineWidth `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`

}

//	If the W.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_; fn != nil { fn(me) }
	me.LineWidth.Walk()
 }

type Tstring xsdt.String

//	Since Tstring is just a simple String type, this merely sets the current value from the specified string.
func (me *Tstring) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tstring's alias type xsdt.String.
func (me Tstring) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since Tstring is just a simple String type, this merely returns the current string value.
func (me Tstring) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Value_Tstring_ struct {
	Value Tstring `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlPipelineSettingsChoiceTextureEnvMode struct {
	XsdGoPkgHasAttr_Value_Tstring_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureEnvMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureEnvMode instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureEnvMode instance.
func (me *TxsdGlPipelineSettingsChoiceTextureEnvMode) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureEnvMode; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ struct {
	TextureEnvMode *TxsdGlPipelineSettingsChoiceTextureEnvMode `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_mode"`

}

//	If the W.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ instance.
func (me *XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_; fn != nil { fn(me) }
	me.TextureEnvMode.Walk()
 }

type TxsdGlPipelineSettingsChoiceMultisampleEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceMultisampleEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMultisampleEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMultisampleEnable instance.
func (me *TxsdGlPipelineSettingsChoiceMultisampleEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMultisampleEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlPipelineSettingsChoiceMultisampleEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`

}

//	If the W.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_; fn != nil { fn(me) }
	me.MultisampleEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceMaterialEmission struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceMaterialEmission function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMaterialEmission instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMaterialEmission instance.
func (me *TxsdGlPipelineSettingsChoiceMaterialEmission) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMaterialEmission; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlPipelineSettingsChoiceMaterialEmission `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`

}

//	If the W.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_; fn != nil { fn(me) }
	me.MaterialEmission.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthFunc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthFunc instance.
func (me *TxsdGlPipelineSettingsChoiceDepthFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`

}

//	If the W.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_; fn != nil { fn(me) }
	me.DepthFunc.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLightEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`

}

//	If the W.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_; fn != nil { fn(me) }
	me.LightEnable.Walk()
 }

type TxsdGlPipelineSettingsChoicePointSize struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePointSize function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointSize instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointSize instance.
func (me *TxsdGlPipelineSettingsChoicePointSize) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointSize; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlPipelineSettingsChoicePointSize `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`

}

//	If the W.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_; fn != nil { fn(me) }
	me.PointSize.Walk()
 }

type XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor struct {
	Value TglLightModelColorControlType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "SINGLE_COLOR"
func (me XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor) ValueDefault () TglLightModelColorControlType { return TglLightModelColorControlType("SINGLE_COLOR") }

type TxsdGlPipelineSettingsChoiceLightModelColorControl struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor

}

//	If the W.TxsdGlPipelineSettingsChoiceLightModelColorControl function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightModelColorControl instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightModelColorControl instance.
func (me *TxsdGlPipelineSettingsChoiceLightModelColorControl) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightModelColorControl; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ struct {
	LightModelColorControl *TxsdGlPipelineSettingsChoiceLightModelColorControl `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_color_control"`

}

//	If the W.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ instance.
func (me *XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_; fn != nil { fn(me) }
	me.LightModelColorControl.Walk()
 }

type XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ struct {
	Value *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type TxsdGlPipelineSettingsChoiceTexture3D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_

	XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture3D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture3D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture3D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture3D) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture3D; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_.Walk()
	me.XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ struct {
	Texture3D *TxsdGlPipelineSettingsChoiceTexture3D `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D"`

}

//	If the W.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ instance.
func (me *XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_; fn != nil { fn(me) }
	me.Texture3D.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightModelAmbient struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_02020210

}

//	If the W.TxsdGlPipelineSettingsChoiceLightModelAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightModelAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightModelAmbient instance.
func (me *TxsdGlPipelineSettingsChoiceLightModelAmbient) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightModelAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`

}

//	If the W.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_; fn != nil { fn(me) }
	me.LightModelAmbient.Walk()
 }

type TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable instance.
func (me *TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_; fn != nil { fn(me) }
	me.SampleAlphaToCoverageEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthClampEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthClampEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthClampEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthClampEnable instance.
func (me *TxsdGlPipelineSettingsChoiceDepthClampEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthClampEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ struct {
	DepthClampEnable *TxsdGlPipelineSettingsChoiceDepthClampEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clamp_enable"`

}

//	If the W.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ instance.
func (me *XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_; fn != nil { fn(me) }
	me.DepthClampEnable.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonSmoothEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonSmoothEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonSmoothEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonSmoothEnable instance.
func (me *TxsdGlPipelineSettingsChoicePolygonSmoothEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonSmoothEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ struct {
	PolygonSmoothEnable *TxsdGlPipelineSettingsChoicePolygonSmoothEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_smooth_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_; fn != nil { fn(me) }
	me.PolygonSmoothEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendColor instance.
func (me *TxsdGlPipelineSettingsChoiceBlendColor) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ struct {
	BlendColor *TxsdGlPipelineSettingsChoiceBlendColor `xml:"http://www.collada.org/2005/11/COLLADASchema blend_color"`

}

//	If the W.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ instance.
func (me *XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_; fn != nil { fn(me) }
	me.BlendColor.Walk()
 }

type TxsdGlPipelineSettingsChoiceTexture2DEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture2DEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture2DEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture2DEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTexture2DEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture2DEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ struct {
	Texture2DEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D_enable"`

}

//	If the W.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ instance.
func (me *XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_; fn != nil { fn(me) }
	me.Texture2DEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureCUBEEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureCUBEEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureCUBEEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureCUBEEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTextureCUBEEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureCUBEEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ struct {
	TextureCUBEEnable *TxsdGlPipelineSettingsChoiceTextureCUBEEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE_enable"`

}

//	If the W.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ instance.
func (me *XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_; fn != nil { fn(me) }
	me.TextureCUBEEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceSampleCoverageEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceSampleCoverageEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceSampleCoverageEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceSampleCoverageEnable instance.
func (me *TxsdGlPipelineSettingsChoiceSampleCoverageEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceSampleCoverageEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlPipelineSettingsChoiceSampleCoverageEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`

}

//	If the W.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_; fn != nil { fn(me) }
	me.SampleCoverageEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_Tfloat2_ struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlPipelineSettingsChoiceDepthBounds struct {
	XsdGoPkgHasAttr_Value_Tfloat2_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthBounds function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthBounds instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthBounds instance.
func (me *TxsdGlPipelineSettingsChoiceDepthBounds) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthBounds; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ struct {
	DepthBounds *TxsdGlPipelineSettingsChoiceDepthBounds `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds"`

}

//	If the W.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ instance.
func (me *XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_; fn != nil { fn(me) }
	me.DepthBounds.Walk()
 }

type TxsdGlPipelineSettingsChoiceColorMaterialEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_True

}

//	If the W.TxsdGlPipelineSettingsChoiceColorMaterialEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterialEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterialEnable instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterialEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorMaterialEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`

}

//	If the W.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_; fn != nil { fn(me) }
	me.ColorMaterialEnable.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable instance.
func (me *TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ struct {
	PolygonOffsetLineEnable *TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_line_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_; fn != nil { fn(me) }
	me.PolygonOffsetLineEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureRECTEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureRECTEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureRECTEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureRECTEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTextureRECTEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureRECTEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ struct {
	TextureRECTEnable *TxsdGlPipelineSettingsChoiceTextureRECTEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT_enable"`

}

//	If the W.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ instance.
func (me *XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_; fn != nil { fn(me) }
	me.TextureRECTEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceNormalizeEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceNormalizeEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceNormalizeEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceNormalizeEnable instance.
func (me *TxsdGlPipelineSettingsChoiceNormalizeEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceNormalizeEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlPipelineSettingsChoiceNormalizeEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`

}

//	If the W.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_; fn != nil { fn(me) }
	me.NormalizeEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceMaterialSpecular struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceMaterialSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMaterialSpecular instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMaterialSpecular instance.
func (me *TxsdGlPipelineSettingsChoiceMaterialSpecular) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMaterialSpecular; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`

}

//	If the W.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_; fn != nil { fn(me) }
	me.MaterialSpecular.Walk()
 }

type XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ struct {
	Value *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureRECT struct {
	XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureRECT function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureRECT instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureRECT instance.
func (me *TxsdGlPipelineSettingsChoiceTextureRECT) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureRECT; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_.Walk()
	me.XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ struct {
	TextureRECT *TxsdGlPipelineSettingsChoiceTextureRECT `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT"`

}

//	If the W.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ instance.
func (me *XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_; fn != nil { fn(me) }
	me.TextureRECT.Walk()
 }

type XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate struct {
	Value TglFogCoordSrcType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FOG_COORDINATE"
func (me XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate) ValueDefault () TglFogCoordSrcType { return TglFogCoordSrcType("FOG_COORDINATE") }

type TxsdGlPipelineSettingsChoiceFogCoordSrc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate

}

//	If the W.TxsdGlPipelineSettingsChoiceFogCoordSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogCoordSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogCoordSrc instance.
func (me *TxsdGlPipelineSettingsChoiceFogCoordSrc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogCoordSrc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ struct {
	FogCoordSrc *TxsdGlPipelineSettingsChoiceFogCoordSrc `xml:"http://www.collada.org/2005/11/COLLADASchema fog_coord_src"`

}

//	If the W.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ instance.
func (me *XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_; fn != nil { fn(me) }
	me.FogCoordSrc.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3_001

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpotDirection instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpotDirection) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightSpotDirection; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`

}

//	If the W.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_; fn != nil { fn(me) }
	me.LightSpotDirection.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ struct {
	LightModelLocalViewerEnable *TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_local_viewer_enable"`

}

//	If the W.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_; fn != nil { fn(me) }
	me.LightModelLocalViewerEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightingEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightingEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightingEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightingEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLightingEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightingEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlPipelineSettingsChoiceLightingEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`

}

//	If the W.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_; fn != nil { fn(me) }
	me.LightingEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceAlphaTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceAlphaTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAlphaTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAlphaTestEnable instance.
func (me *TxsdGlPipelineSettingsChoiceAlphaTestEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceAlphaTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlPipelineSettingsChoiceAlphaTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`

}

//	If the W.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_; fn != nil { fn(me) }
	me.AlphaTestEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightConstantAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightConstantAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightConstantAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightConstantAttenuation instance.
func (me *TxsdGlPipelineSettingsChoiceLightConstantAttenuation) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightConstantAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlPipelineSettingsChoiceLightConstantAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`

}

//	If the W.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_; fn != nil { fn(me) }
	me.LightConstantAttenuation.Walk()
 }

type TxsdGlPipelineSettingsChoiceLineSmoothEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceLineSmoothEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLineSmoothEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLineSmoothEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLineSmoothEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLineSmoothEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlPipelineSettingsChoiceLineSmoothEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`

}

//	If the W.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_; fn != nil { fn(me) }
	me.LineSmoothEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_Zero

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`

}

//	If the W.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_; fn != nil { fn(me) }
	me.Dest.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_One

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`

}

//	If the W.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_; fn != nil { fn(me) }
	me.Src.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFunc instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_.Walk()
	me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_.Walk()
 }

type XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`

}

//	If the W.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_; fn != nil { fn(me) }
	me.BlendFunc.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonStippleEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonStippleEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonStippleEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonStippleEnable instance.
func (me *TxsdGlPipelineSettingsChoicePolygonStippleEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonStippleEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ struct {
	PolygonStippleEnable *TxsdGlPipelineSettingsChoicePolygonStippleEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_stipple_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_; fn != nil { fn(me) }
	me.PolygonStippleEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogEnd struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

//	If the W.TxsdGlPipelineSettingsChoiceFogEnd function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogEnd instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogEnd instance.
func (me *TxsdGlPipelineSettingsChoiceFogEnd) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogEnd; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlPipelineSettingsChoiceFogEnd `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`

}

//	If the W.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_; fn != nil { fn(me) }
	me.FogEnd.Walk()
 }

type TxsdGlPipelineSettingsChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceScissor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceScissor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceScissor instance.
func (me *TxsdGlPipelineSettingsChoiceScissor) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceScissor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`

}

//	If the W.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_; fn != nil { fn(me) }
	me.Scissor.Walk()
 }

type TxsdGlPipelineSettingsChoiceRescaleNormalEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceRescaleNormalEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceRescaleNormalEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceRescaleNormalEnable instance.
func (me *TxsdGlPipelineSettingsChoiceRescaleNormalEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceRescaleNormalEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlPipelineSettingsChoiceRescaleNormalEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`

}

//	If the W.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_; fn != nil { fn(me) }
	me.RescaleNormalEnable.Walk()
 }

type XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd struct {
	Value TglBlendEquationType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FUNC_ADD"
func (me XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd) ValueDefault () TglBlendEquationType { return TglBlendEquationType("FUNC_ADD") }

type TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha struct {
	XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ struct {
	Alpha *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`

}

//	If the W.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ instance.
func (me *XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_; fn != nil { fn(me) }
	me.Alpha.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb struct {
	XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ struct {
	Rgb *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb `xml:"http://www.collada.org/2005/11/COLLADASchema rgb"`

}

//	If the W.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ instance.
func (me *XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_; fn != nil { fn(me) }
	me.Rgb.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendEquationSeparate struct {
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_

	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendEquationSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquationSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquationSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquationSeparate) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendEquationSeparate; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_.Walk()
	me.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_.Walk()
 }

type XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ struct {
	BlendEquationSeparate *TxsdGlPipelineSettingsChoiceBlendEquationSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation_separate"`

}

//	If the W.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_; fn != nil { fn(me) }
	me.BlendEquationSeparate.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendEquation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendEquation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquation instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquation) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendEquation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ struct {
	BlendEquation *TxsdGlPipelineSettingsChoiceBlendEquation `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation"`

}

//	If the W.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ instance.
func (me *XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_; fn != nil { fn(me) }
	me.BlendEquation.Walk()
 }

type TxsdGlPipelineSettingsChoiceTextureEnvColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Value_Tfloat4_

}

//	If the W.TxsdGlPipelineSettingsChoiceTextureEnvColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureEnvColor instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureEnvColor instance.
func (me *TxsdGlPipelineSettingsChoiceTextureEnvColor) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTextureEnvColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ struct {
	TextureEnvColor *TxsdGlPipelineSettingsChoiceTextureEnvColor `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_color"`

}

//	If the W.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ instance.
func (me *XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_; fn != nil { fn(me) }
	me.TextureEnvColor.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogStart struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceFogStart function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogStart instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogStart instance.
func (me *TxsdGlPipelineSettingsChoiceFogStart) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogStart; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`

}

//	If the W.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_; fn != nil { fn(me) }
	me.FogStart.Walk()
 }

type TxsdGlPipelineSettingsChoicePointDistanceAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat3_100

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePointDistanceAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointDistanceAttenuation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointDistanceAttenuation instance.
func (me *TxsdGlPipelineSettingsChoicePointDistanceAttenuation) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointDistanceAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`

}

//	If the W.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_; fn != nil { fn(me) }
	me.PointDistanceAttenuation.Walk()
 }

type XsdGoPkgHasElem_GlHookAbstract struct {
	GlHookAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`

}

//	If the W.XsdGoPkgHasElem_GlHookAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlHookAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GlHookAbstract instance.
func (me *XsdGoPkgHasElem_GlHookAbstract) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_GlHookAbstract; fn != nil { fn(me) }
 }

type TxsdGlPipelineSettingsChoiceProjectionMatrix struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

}

//	If the W.TxsdGlPipelineSettingsChoiceProjectionMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceProjectionMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceProjectionMatrix instance.
func (me *TxsdGlPipelineSettingsChoiceProjectionMatrix) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceProjectionMatrix; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`

}

//	If the W.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_; fn != nil { fn(me) }
	me.ProjectionMatrix.Walk()
 }

type XsdGoPkgHasAttr_Value_TglStencilOpType_Keep struct {
	Value TglStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglStencilOpType_Keep) ValueDefault () TglStencilOpType { return TglStencilOpType("KEEP") }

type TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

//	If the W.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_; fn != nil { fn(me) }
	me.Zfail.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail struct {
	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

//	If the W.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_; fn != nil { fn(me) }
	me.Fail.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass struct {
	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

//	If the W.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_; fn != nil { fn(me) }
	me.Zpass.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

//	If the W.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_; fn != nil { fn(me) }
	me.Face.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSeparate struct {
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_

	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_

	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparate) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSeparate; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_.Walk()
	me.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_.Walk()
	me.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_.Walk()
	me.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_.Walk()
 }

type XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ struct {
	StencilOpSeparate *TxsdGlPipelineSettingsChoiceStencilOpSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op_separate"`

}

//	If the W.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_; fn != nil { fn(me) }
	me.StencilOpSeparate.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Value_Tfloat_180

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpotCutoff instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpotCutoff) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightSpotCutoff; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`

}

//	If the W.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_; fn != nil { fn(me) }
	me.LightSpotCutoff.Walk()
 }

type TxsdGlPipelineSettingsChoicePointFadeThresholdSize struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePointFadeThresholdSize function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointFadeThresholdSize instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointFadeThresholdSize instance.
func (me *TxsdGlPipelineSettingsChoicePointFadeThresholdSize) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointFadeThresholdSize; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlPipelineSettingsChoicePointFadeThresholdSize `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`

}

//	If the W.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_; fn != nil { fn(me) }
	me.PointFadeThresholdSize.Walk()
 }

type TxsdGlPipelineSettingsChoiceDitherEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_True

}

//	If the W.TxsdGlPipelineSettingsChoiceDitherEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDitherEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDitherEnable instance.
func (me *TxsdGlPipelineSettingsChoiceDitherEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDitherEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlPipelineSettingsChoiceDitherEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`

}

//	If the W.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_; fn != nil { fn(me) }
	me.DitherEnable.Walk()
 }

type TglMaxClipPlanesIndex xsdt.NonNegativeInteger

//	Since TglMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxClipPlanesIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxClipPlanesIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Returns a string representation of this TglMaxClipPlanesIndex's current non-string scalar value.
func (me TglMaxClipPlanesIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_ struct {
	Index TglMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClipPlane instance.
func (me *TxsdGlPipelineSettingsChoiceClipPlane) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceClipPlane; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`

}

//	If the W.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_; fn != nil { fn(me) }
	me.ClipPlane.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSequenceFail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSequenceFail function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSequenceFail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSequenceFail instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSequenceFail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

//	If the W.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_; fn != nil { fn(me) }
	me.Fail.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

//	If the W.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_; fn != nil { fn(me) }
	me.Zpass.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

//	If the W.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_; fn != nil { fn(me) }
	me.Zfail.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOp instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOp) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilOp; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_.Walk()
	me.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_.Walk()
	me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_.Walk()
 }

type XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`

}

//	If the W.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_; fn != nil { fn(me) }
	me.StencilOp.Walk()
 }

type TxsdGlPipelineSettingsChoiceClearColor struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceClearColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClearColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClearColor instance.
func (me *TxsdGlPipelineSettingsChoiceClearColor) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceClearColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TxsdGlPipelineSettingsChoiceClearColor `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`

}

//	If the W.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ instance.
func (me *XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_; fn != nil { fn(me) }
	me.ClearColor.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEnable instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlPipelineSettingsChoiceBlendEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`

}

//	If the W.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_; fn != nil { fn(me) }
	me.BlendEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightSpecular struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

}

//	If the W.TxsdGlPipelineSettingsChoiceLightSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpecular instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpecular instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpecular) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightSpecular; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`

}

//	If the W.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_; fn != nil { fn(me) }
	me.LightSpecular.Walk()
 }

type TxsdGlPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClipPlaneEnable instance.
func (me *TxsdGlPipelineSettingsChoiceClipPlaneEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceClipPlaneEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`

}

//	If the W.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_; fn != nil { fn(me) }
	me.ClipPlaneEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilTestEnable instance.
func (me *TxsdGlPipelineSettingsChoiceStencilTestEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlPipelineSettingsChoiceStencilTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`

}

//	If the W.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_; fn != nil { fn(me) }
	me.StencilTestEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace instance.
func (me *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

//	If the W.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_; fn != nil { fn(me) }
	me.Face.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask struct {
	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask instance.
func (me *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

//	If the W.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_; fn != nil { fn(me) }
	me.Mask.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilMaskSeparate struct {
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_

	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilMaskSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilMaskSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilMaskSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilMaskSeparate) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilMaskSeparate; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_.Walk()
	me.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_.Walk()
 }

type XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ struct {
	StencilMaskSeparate *TxsdGlPipelineSettingsChoiceStencilMaskSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask_separate"`

}

//	If the W.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_; fn != nil { fn(me) }
	me.StencilMaskSeparate.Walk()
 }

type TxsdGlPipelineSettingsChoiceShadeModel struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth

}

//	If the W.TxsdGlPipelineSettingsChoiceShadeModel function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceShadeModel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceShadeModel instance.
func (me *TxsdGlPipelineSettingsChoiceShadeModel) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceShadeModel; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`

}

//	If the W.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_; fn != nil { fn(me) }
	me.ShadeModel.Walk()
 }

type XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "true true true true"
func (me XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue) ValueDefault () Tbool4 { return Tbool4("true true true true") }

type TxsdGlPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMask instance.
func (me *TxsdGlPipelineSettingsChoiceColorMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceColorMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`

}

//	If the W.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_; fn != nil { fn(me) }
	me.ColorMask.Walk()
 }

type TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always

}

//	If the W.TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc instance.
func (me *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

//	If the W.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_; fn != nil { fn(me) }
	me.Func.Walk()
 }

type TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue struct {
	XsdGoPkgHasAttr_Value_TglAlphaValueType_00

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue instance.
func (me *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type TxsdGlPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_

	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_

}

//	If the W.TxsdGlPipelineSettingsChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAlphaFunc instance.
func (me *TxsdGlPipelineSettingsChoiceAlphaFunc) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceAlphaFunc; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_.Walk()
	me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_.Walk()
 }

type XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`

}

//	If the W.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_; fn != nil { fn(me) }
	me.AlphaFunc.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Value_Tfloat2_00

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonOffset function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonOffset instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonOffset instance.
func (me *TxsdGlPipelineSettingsChoicePolygonOffset) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonOffset; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`

}

//	If the W.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_; fn != nil { fn(me) }
	me.PolygonOffset.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogMode struct {
	XsdGoPkgHasAttr_Value_TglFogType_Exp

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceFogMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogMode instance.
func (me *TxsdGlPipelineSettingsChoiceFogMode) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogMode; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`

}

//	If the W.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_; fn != nil { fn(me) }
	me.FogMode.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable instance.
func (me *TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ struct {
	PolygonOffsetPointEnable *TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_point_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_; fn != nil { fn(me) }
	me.PolygonOffsetPointEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceFogEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogEnable instance.
func (me *TxsdGlPipelineSettingsChoiceFogEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlPipelineSettingsChoiceFogEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`

}

//	If the W.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_; fn != nil { fn(me) }
	me.FogEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0010

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightPosition instance.
func (me *TxsdGlPipelineSettingsChoiceLightPosition) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightPosition; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`

}

//	If the W.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_; fn != nil { fn(me) }
	me.LightPosition.Walk()
 }

type TxsdGlPipelineSettingsChoiceFogColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

}

//	If the W.TxsdGlPipelineSettingsChoiceFogColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogColor instance.
func (me *TxsdGlPipelineSettingsChoiceFogColor) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceFogColor; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`

}

//	If the W.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_; fn != nil { fn(me) }
	me.FogColor.Walk()
 }

type TxsdGlPipelineSettingsChoiceMaterialDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_08080810

}

//	If the W.TxsdGlPipelineSettingsChoiceMaterialDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMaterialDiffuse instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMaterialDiffuse instance.
func (me *TxsdGlPipelineSettingsChoiceMaterialDiffuse) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMaterialDiffuse; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`

}

//	If the W.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_; fn != nil { fn(me) }
	me.MaterialDiffuse.Walk()
 }

type TxsdGlPipelineSettingsChoiceCullFaceEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceCullFaceEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceCullFaceEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceCullFaceEnable instance.
func (me *TxsdGlPipelineSettingsChoiceCullFaceEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceCullFaceEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlPipelineSettingsChoiceCullFaceEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`

}

//	If the W.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_; fn != nil { fn(me) }
	me.CullFaceEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceTexture1DEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture1DEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture1DEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture1DEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTexture1DEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture1DEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ struct {
	Texture1DEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D_enable"`

}

//	If the W.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ instance.
func (me *XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_; fn != nil { fn(me) }
	me.Texture1DEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightAmbient instance.
func (me *TxsdGlPipelineSettingsChoiceLightAmbient) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightAmbient; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`

}

//	If the W.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_; fn != nil { fn(me) }
	me.LightAmbient.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthMask struct {
	XsdGoPkgHasAttr_Value_Tbool_True

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthMask instance.
func (me *TxsdGlPipelineSettingsChoiceDepthMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlPipelineSettingsChoiceDepthMask `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`

}

//	If the W.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_; fn != nil { fn(me) }
	me.DepthMask.Walk()
 }

type TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable instance.
func (me *TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`

}

//	If the W.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_; fn != nil { fn(me) }
	me.PolygonOffsetFillEnable.Walk()
 }

type TxsdGlPipelineSettingsChoicePointSmoothEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoicePointSmoothEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePointSmoothEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePointSmoothEnable instance.
func (me *TxsdGlPipelineSettingsChoicePointSmoothEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoicePointSmoothEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlPipelineSettingsChoicePointSmoothEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`

}

//	If the W.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_; fn != nil { fn(me) }
	me.PointSmoothEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceTexture3DEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture3DEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture3DEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture3DEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTexture3DEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture3DEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ struct {
	Texture3DEnable *TxsdGlPipelineSettingsChoiceTexture3DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D_enable"`

}

//	If the W.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ instance.
func (me *XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_; fn != nil { fn(me) }
	me.Texture3DEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightLinearAttenuation struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLightLinearAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightLinearAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightLinearAttenuation instance.
func (me *TxsdGlPipelineSettingsChoiceLightLinearAttenuation) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightLinearAttenuation; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ struct {
	LightLinearAttenuation *TxsdGlPipelineSettingsChoiceLightLinearAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenuation"`

}

//	If the W.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_; fn != nil { fn(me) }
	me.LightLinearAttenuation.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthBoundsEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthBoundsEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthBoundsEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthBoundsEnable instance.
func (me *TxsdGlPipelineSettingsChoiceDepthBoundsEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthBoundsEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ struct {
	DepthBoundsEnable *TxsdGlPipelineSettingsChoiceDepthBoundsEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds_enable"`

}

//	If the W.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ instance.
func (me *XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_; fn != nil { fn(me) }
	me.DepthBoundsEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceStencilMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint_4294967295

}

//	If the W.TxsdGlPipelineSettingsChoiceStencilMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilMask instance.
func (me *TxsdGlPipelineSettingsChoiceStencilMask) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceStencilMask; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`

}

//	If the W.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_; fn != nil { fn(me) }
	me.StencilMask.Walk()
 }

type TxsdGlPipelineSettingsChoiceMaterialShininess struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceMaterialShininess function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceMaterialShininess instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceMaterialShininess instance.
func (me *TxsdGlPipelineSettingsChoiceMaterialShininess) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceMaterialShininess; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlPipelineSettingsChoiceMaterialShininess `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`

}

//	If the W.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_; fn != nil { fn(me) }
	me.MaterialShininess.Walk()
 }

type TxsdGlPipelineSettingsChoiceDepthRange struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_01

}

//	If the W.TxsdGlPipelineSettingsChoiceDepthRange function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthRange instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthRange instance.
func (me *TxsdGlPipelineSettingsChoiceDepthRange) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceDepthRange; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`

}

//	If the W.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_; fn != nil { fn(me) }
	me.DepthRange.Walk()
 }

type XsdGoPkgHasAttr_Value_Tint_0 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tint_0) ValueDefault () Tint { return Tint(0) }

type TxsdGlPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Value_Tint_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceClearStencil function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClearStencil instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClearStencil instance.
func (me *TxsdGlPipelineSettingsChoiceClearStencil) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceClearStencil; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`

}

//	If the W.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ instance.
func (me *XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_; fn != nil { fn(me) }
	me.ClearStencil.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha struct {
	XsdGoPkgHasAttr_Value_TglBlendType_One

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ struct {
	SrcAlpha *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema src_alpha"`

}

//	If the W.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ instance.
func (me *XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_; fn != nil { fn(me) }
	me.SrcAlpha.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb struct {
	XsdGoPkgHasAttr_Value_TglBlendType_Zero

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ struct {
	DestRgb *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb `xml:"http://www.collada.org/2005/11/COLLADASchema dest_rgb"`

}

//	If the W.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ instance.
func (me *XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_; fn != nil { fn(me) }
	me.DestRgb.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_One

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ struct {
	SrcRgb *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb `xml:"http://www.collada.org/2005/11/COLLADASchema src_rgb"`

}

//	If the W.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ instance.
func (me *XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_; fn != nil { fn(me) }
	me.SrcRgb.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_Zero

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ struct {
	DestAlpha *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema dest_alpha"`

}

//	If the W.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ instance.
func (me *XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_; fn != nil { fn(me) }
	me.DestAlpha.Walk()
 }

type TxsdGlPipelineSettingsChoiceBlendFuncSeparate struct {
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_

	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_

	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_

	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_

}

//	If the W.TxsdGlPipelineSettingsChoiceBlendFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparate) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceBlendFuncSeparate; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_.Walk()
	me.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_.Walk()
	me.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_.Walk()
	me.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_.Walk()
 }

type XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ struct {
	BlendFuncSeparate *TxsdGlPipelineSettingsChoiceBlendFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func_separate"`

}

//	If the W.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_; fn != nil { fn(me) }
	me.BlendFuncSeparate.Walk()
 }

type XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ struct {
	Value *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

//	If the W.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_; fn != nil { fn(me) }
	me.Value.Walk()
 }

type XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_; fn != nil { fn(me) }
 }

type TxsdGlPipelineSettingsChoiceTexture1D struct {
	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceTexture1D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture1D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture1D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture1D) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceTexture1D; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_.Walk()
	me.XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ struct {
	Texture1D *TxsdGlPipelineSettingsChoiceTexture1D `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D"`

}

//	If the W.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ instance.
func (me *XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_; fn != nil { fn(me) }
	me.Texture1D.Walk()
 }

type TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

//	If the W.TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`

}

//	If the W.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_; fn != nil { fn(me) }
	me.LightModelTwoSideEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceLogicOpEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceLogicOpEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLogicOpEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLogicOpEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLogicOpEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceLogicOpEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ struct {
	LogicOpEnable *TxsdGlPipelineSettingsChoiceLogicOpEnable `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op_enable"`

}

//	If the W.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_; fn != nil { fn(me) }
	me.LogicOpEnable.Walk()
 }

type TxsdGlPipelineSettingsChoiceCullFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFaceType_Back

}

//	If the W.TxsdGlPipelineSettingsChoiceCullFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceCullFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceCullFace instance.
func (me *TxsdGlPipelineSettingsChoiceCullFace) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceCullFace; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`

}

//	If the W.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_; fn != nil { fn(me) }
	me.CullFace.Walk()
 }

type TxsdGlPipelineSettingsChoiceScissorTestEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

//	If the W.TxsdGlPipelineSettingsChoiceScissorTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceScissorTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceScissorTestEnable instance.
func (me *TxsdGlPipelineSettingsChoiceScissorTestEnable) Walk ()  { 
	if fn := W.TxsdGlPipelineSettingsChoiceScissorTestEnable; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlPipelineSettingsChoiceScissorTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`

}

//	If the W.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_; fn != nil { fn(me) }
	me.ScissorTestEnable.Walk()
 }

type XsdGoPkgHasGroup_GlPipelineSettings struct {
	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_

	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_

	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_

	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_

	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_

	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_

	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_

	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_

	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_

	XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_

	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_

	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_

	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_

	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_

	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_

	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_

	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_

	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_

	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_

	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_

	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_

	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_

	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_

	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_

	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_

	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_

	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_

	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_

	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_

	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_

	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_

	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_

	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_

	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_

	XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_

	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_

	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_

	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_GlHookAbstract

	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_

	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_

	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_

}

//	If the W.XsdGoPkgHasGroup_GlPipelineSettings function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlPipelineSettings instance as the single argument. Then calls the Walk() method on 109/109 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlPipelineSettings instance.
func (me *XsdGoPkgHasGroup_GlPipelineSettings) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_GlPipelineSettings; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_.Walk()
	me.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_.Walk()
	me.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_.Walk()
	me.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_.Walk()
	me.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_.Walk()
	me.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_.Walk()
	me.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_.Walk()
	me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_.Walk()
	me.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_.Walk()
	me.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_.Walk()
	me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_.Walk()
	me.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_.Walk()
	me.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_.Walk()
	me.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_.Walk()
	me.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_.Walk()
	me.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_.Walk()
	me.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_.Walk()
	me.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_.Walk()
	me.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_.Walk()
	me.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_.Walk()
	me.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_.Walk()
	me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_.Walk()
	me.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_.Walk()
	me.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_.Walk()
	me.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_.Walk()
	me.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_.Walk()
	me.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_.Walk()
	me.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_.Walk()
	me.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_.Walk()
	me.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_.Walk()
	me.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_.Walk()
	me.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_.Walk()
	me.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_.Walk()
	me.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_.Walk()
	me.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_.Walk()
	me.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_.Walk()
	me.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_.Walk()
	me.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_.Walk()
	me.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_.Walk()
	me.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_.Walk()
	me.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_.Walk()
	me.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_.Walk()
	me.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_.Walk()
	me.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_.Walk()
	me.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_.Walk()
	me.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_.Walk()
	me.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_.Walk()
	me.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_.Walk()
	me.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_.Walk()
	me.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_.Walk()
	me.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_.Walk()
	me.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_.Walk()
	me.XsdGoPkgHasElem_GlHookAbstract.Walk()
	me.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_.Walk()
	me.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_.Walk()
	me.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_.Walk()
	me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_.Walk()
	me.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_.Walk()
	me.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_.Walk()
	me.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_.Walk()
	me.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_.Walk()
	me.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_.Walk()
	me.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_.Walk()
	me.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_.Walk()
	me.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_.Walk()
	me.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_.Walk()
	me.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_.Walk()
	me.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_.Walk()
	me.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_.Walk()
	me.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_.Walk()
	me.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_.Walk()
	me.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_.Walk()
	me.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_.Walk()
	me.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_.Walk()
	me.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_.Walk()
	me.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_.Walk()
	me.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_.Walk()
	me.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_.Walk()
	me.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_.Walk()
	me.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_.Walk()
	me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_.Walk()
	me.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_.Walk()
	me.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_.Walk()
	me.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_.Walk()
	me.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_.Walk()
	me.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_.Walk()
	me.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_.Walk()
	me.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_.Walk()
	me.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_.Walk()
	me.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_.Walk()
	me.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_.Walk()
	me.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_.Walk()
	me.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_.Walk()
	me.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_.Walk()
	me.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_.Walk()
	me.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_.Walk()
	me.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_.Walk()
	me.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_.Walk()
	me.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_.Walk()
	me.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_.Walk()
	me.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_.Walk()
	me.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_.Walk()
	me.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_.Walk()
	me.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_.Walk()
	me.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_.Walk()
	me.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_.Walk()
	me.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_.Walk()
	me.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_.Walk()
	me.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_.Walk()
 }

type XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_ struct {
	Draw TfxDrawCommon `xml:"http://www.collada.org/2005/11/COLLADASchema draw"`

}

//	If the W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_ instance.
func (me *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0 struct {
	Index xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

//	Returns the default value for Index -- 0
func (me XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0) IndexDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type TfxClearcolorCommon struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

//	If the W.TfxClearcolorCommon function is not nil (ie. was set by outside code), calls it with this TfxClearcolorCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearcolorCommon instance.
func (me *TfxClearcolorCommon) Walk ()  { 
	if fn := W.TfxClearcolorCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ struct {
	ColorClears []*TfxClearcolorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`

}

//	If the W.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ instance.
func (me *XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_; fn != nil { fn(me) }
	for _, x := range me.ColorClears { x.Walk() }
 }

type TfxClearstencilCommon struct {
	XsdGoPkgValue xsdt.Byte `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

//	If the W.TfxClearstencilCommon function is not nil (ie. was set by outside code), calls it with this TfxClearstencilCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearstencilCommon instance.
func (me *TfxClearstencilCommon) Walk ()  { 
	if fn := W.TfxClearstencilCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ struct {
	StencilClears []*TfxClearstencilCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`

}

//	If the W.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_; fn != nil { fn(me) }
	for _, x := range me.StencilClears { x.Walk() }
 }

type XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0 struct {
	Mip xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`

}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0) MipDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0 struct {
	Slice xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`

}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0) SliceDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type TfxColortargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

}

//	If the W.TfxColortargetCommon function is not nil (ie. was set by outside code), calls it with this TfxColortargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxColortargetCommon instance.
func (me *TfxColortargetCommon) Walk ()  { 
	if fn := W.TfxColortargetCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ struct {
	ColorTargets []*TfxColortargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`

}

//	If the W.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ instance.
func (me *XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_; fn != nil { fn(me) }
	for _, x := range me.ColorTargets { x.Walk() }
 }

type TfxStenciltargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

}

//	If the W.TfxStenciltargetCommon function is not nil (ie. was set by outside code), calls it with this TfxStenciltargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxStenciltargetCommon instance.
func (me *TfxStenciltargetCommon) Walk ()  { 
	if fn := W.TfxStenciltargetCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ struct {
	StencilTargets []*TfxStenciltargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`

}

//	If the W.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_; fn != nil { fn(me) }
	for _, x := range me.StencilTargets { x.Walk() }
 }

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TglslPipelineStage xsdt.String

//	Since TglslPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslPipelineStage) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglslPipelineStage is "VERTEXPROGRAM".
func (me TglslPipelineStage) IsVertexprogram () bool { return me == "VERTEXPROGRAM" }

//	Returns true if the value of this enumerated TglslPipelineStage is "FRAGMENTPROGRAM".
func (me TglslPipelineStage) IsFragmentprogram () bool { return me == "FRAGMENTPROGRAM" }

//	This convenience method just performs a simple type conversion to TglslPipelineStage's alias type xsdt.String.
func (me TglslPipelineStage) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslPipelineStage is just a simple String type, this merely returns the current string value.
func (me TglslPipelineStage) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Stage_TglslPipelineStage_ struct {
//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	Stage TglslPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`

}

type XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

//	A string containing command-line operations for the shader compiler.
type XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ struct {
//	A string containing command-line operations for the shader compiler.
	CompilerOptions xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_options"`

}

//	If the W.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ instance.
func (me *XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_; fn != nil { fn(me) }
 }

//	Binds values to uniform inputs of a shader.
//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
type XsdGoPkgHasAttr_Symbol_XsdtNCName_ struct {
//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	Symbol xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema symbol,attr"`

}

type XsdGoPkgHasAttr_Ref_XsdtString_ struct {
	Ref xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtString_

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
	Param *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_; fn != nil { fn(me) }
	me.Param.Walk()
 }

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_

	XsdGoPkgHasGroup_GlslParamType

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_.Walk()
	me.XsdGoPkgHasGroup_GlslParamType.Walk()
 }

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

//	If the W.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_; fn != nil { fn(me) }
	for _, x := range me.Binds { x.Walk() }
 }

//	The entry symbol for the shader function.
type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	If the W.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_; fn != nil { fn(me) }
	me.Name.Walk()
 }

//	A string declaring which profile or platform the compiler is targeting this shader for.
type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget struct {
	XsdGoPkgValue xsdt.Nmtoken `xml:",chardata"`

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
//	A string declaring which profile or platform the compiler is targeting this shader for.
	CompilerTarget *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`

}

//	If the W.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance.
func (me *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_; fn != nil { fn(me) }
	me.CompilerTarget.Walk()
 }

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader struct {
//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_

//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

//	A string declaring which profile or platform the compiler is targeting this shader for.
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TglslPipelineStage_

	XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_.Walk()
	me.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_.Walk()
	me.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_.Walk()
	me.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_.Walk()
 }

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`

}

//	If the W.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ instance.
func (me *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_; fn != nil { fn(me) }
	for _, x := range me.Shaders { x.Walk() }
 }

type TfxDepthtargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

}

//	If the W.TfxDepthtargetCommon function is not nil (ie. was set by outside code), calls it with this TfxDepthtargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxDepthtargetCommon instance.
func (me *TfxDepthtargetCommon) Walk ()  { 
	if fn := W.TfxDepthtargetCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ struct {
	DepthTargets []*TfxDepthtargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`

}

//	If the W.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ instance.
func (me *XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_; fn != nil { fn(me) }
	for _, x := range me.DepthTargets { x.Walk() }
 }

type TfxCleardepthCommon struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

//	If the W.TfxCleardepthCommon function is not nil (ie. was set by outside code), calls it with this TfxCleardepthCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCleardepthCommon instance.
func (me *TfxCleardepthCommon) Walk ()  { 
	if fn := W.TfxCleardepthCommon; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ struct {
	DepthClears []*TfxCleardepthCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`

}

//	If the W.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ instance.
func (me *XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_; fn != nil { fn(me) }
	for _, x := range me.DepthClears { x.Walk() }
 }

type TxsdProfileGlslSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_

	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_

	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_

}

//	If the W.TxsdProfileGlslSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 11/12 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePass) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechniqueSequencePass; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasGroup_GlPipelineSettings.Walk()
	me.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_.Walk()
	me.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_.Walk()
	me.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_.Walk()
	me.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_.Walk()
	me.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_.Walk()
	me.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_.Walk()
	me.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_.Walk()
 }

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlslSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

//	If the W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_; fn != nil { fn(me) }
	for _, x := range me.Passes { x.Walk() }
 }

type XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_ struct {
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

type XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_ struct {
	Newparams []*TglslNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

type XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasAttr_Program_XsdtNCName_ struct {
	Program xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema program,attr"`

}

//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_; fn != nil { fn(me) }
 }

type TglslSetarrayType struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_GlslParamType

}

//	If the W.TglslSetarrayType function is not nil (ie. was set by outside code), calls it with this TglslSetarrayType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TglslSetarrayType instance.
func (me *TglslSetarrayType) Walk ()  { 
	if fn := W.TglslSetarrayType; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_.Walk()
	me.XsdGoPkgHasGroup_GlslParamType.Walk()
 }

type XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ struct {
	Array *TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_; fn != nil { fn(me) }
	me.Array.Walk()
 }

type TglslSetparam struct {
	XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasAttr_Ref_TglslIdentifier_

}

//	If the W.TglslSetparam function is not nil (ie. was set by outside code), calls it with this TglslSetparam instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TglslSetparam instance.
func (me *TglslSetparam) Walk ()  { 
	if fn := W.TglslSetparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_.Walk()
	me.XsdGoPkgHasGroup_GlslParamType.Walk()
 }

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ struct {
	Setparams []*TglslSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

type XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ struct {
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

type TxsdProfileGlslSequenceTechnique struct {
	XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_

	XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_Image

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdProfileGlslSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechnique instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechnique instance.
func (me *TxsdProfileGlslSequenceTechnique) Walk ()  { 
	if fn := W.TxsdProfileGlslSequenceTechnique; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_.Walk()
	me.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_.Walk()
	me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_.Walk()
	me.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlslSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_; fn != nil { fn(me) }
	for _, x := range me.Techniques { x.Walk() }
 }

type XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ struct {
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

type XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_ struct {
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

type TxsdProfileGlsl struct {
	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_Image

}

//	If the W.TxsdProfileGlsl function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlsl instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlsl instance.
func (me *TxsdProfileGlsl) Walk ()  { 
	if fn := W.TxsdProfileGlsl; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_.Walk()
	me.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_.Walk()
 }

type XsdGoPkgHasElems_ProfileGlsl struct {
//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsls []*TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`

}

//	If the W.XsdGoPkgHasElems_ProfileGlsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileGlsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileGlsl instance.
func (me *XsdGoPkgHasElems_ProfileGlsl) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ProfileGlsl; fn != nil { fn(me) }
	for _, x := range me.ProfileGlsls { x.Walk() }
 }

//	Opens a block of CG platform-specific data types and technique declarations.
type XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_ struct {
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_ struct {
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

type XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_ struct {
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

//	Assigns a new value to a previously defined parameter.
//	Creates a symbolic connection between two previously defined parameters.
type TcgIdentifier xsdt.Token

//	Since TcgIdentifier is just a simple String type, this merely returns the current string value.
func (me TcgIdentifier) String () string { return xsdt.Token(me).String() }

//	Since TcgIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgIdentifier) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgIdentifier's alias type xsdt.Token.
func (me TcgIdentifier) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Ref_TcgIdentifier_ struct {
	Ref TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TcgConnectParam struct {
	XsdGoPkgHasAttr_Ref_TcgIdentifier_

}

//	If the W.TcgConnectParam function is not nil (ie. was set by outside code), calls it with this TcgConnectParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcgConnectParam instance.
func (me *TcgConnectParam) Walk ()  { 
	if fn := W.TcgConnectParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParam *TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`

}

//	If the W.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ instance.
func (me *XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_; fn != nil { fn(me) }
	me.ConnectParam.Walk()
 }

//	Creates an instance of a structured class.
type XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ struct {
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	If the W.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_; fn != nil { fn(me) }
 }

//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
type XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ struct {
//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	Setparams []*TcgSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_; fn != nil { fn(me) }
 }

//	A group that specifies the allowable types for CG profile parameters.
type TcgHalf xsdt.Float

//	Returns a string representation of this TcgHalf's current non-string scalar value.
func (me TcgHalf) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf's alias type xsdt.Float.
func (me TcgHalf) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TcgHalf is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

type TcgListOfHalf xsdt.String

//	Since TcgListOfHalf is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfHalf) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TcgListOfHalf is just a simple String type, this merely returns the current string value.
func (me TcgListOfHalf) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcgListOfHalf's alias type xsdt.String.
func (me TcgListOfHalf) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TcgListOfHalf defines a String containing a whitespace-separated list of TcgHalf values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfHalf) Values () (list []TcgHalf) { var btv = new(TcgHalf); var svals = xsdt.ListValues(string(me)); list = make([]TcgHalf, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TcgHalf1X1 TcgListOfHalf

//	Since TcgHalf1X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X1) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X1's alias type TcgListOfHalf.
func (me TcgHalf1X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ struct {
	Half1X1 TcgHalf1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x1"`

}

//	If the W.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ instance.
func (me *XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_; fn != nil { fn(me) }
 }

type TcgHalf4X2 TcgListOfHalf

//	Since TcgHalf4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf4X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X2) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X2's alias type TcgListOfHalf.
func (me TcgHalf4X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ struct {
	Half4X2 TcgHalf4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x2"`

}

//	If the W.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ instance.
func (me *XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_; fn != nil { fn(me) }
 }

type TcgFloat xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFloat's alias type xsdt.Float.
func (me TcgFloat) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TcgFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgFloat's current non-string scalar value.
func (me TcgFloat) String () string { return xsdt.Float(me).String() }

type TcgListOfFloat xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfFloat's alias type xsdt.String.
func (me TcgListOfFloat) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TcgListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFloat) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TcgListOfFloat defines a String containing a whitespace-separated list of TcgFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFloat) Values () (list []TcgFloat) { var btv = new(TcgFloat); var svals = xsdt.ListValues(string(me)); list = make([]TcgFloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TcgListOfFloat is just a simple String type, this merely returns the current string value.
func (me TcgListOfFloat) String () string { return xsdt.String(me).String() }

type TcgFloat1X4 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat1X4's alias type TcgListOfFloat.
func (me TcgFloat1X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X4) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ struct {
	Float1X4 TcgFloat1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`

}

//	If the W.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ instance.
func (me *XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_; fn != nil { fn(me) }
 }

type TcgSampler2D struct {
	TfxSampler2DCommon

}

//	If the W.TcgSampler2D function is not nil (ie. was set by outside code), calls it with this TcgSampler2D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler2D instance.
func (me *TcgSampler2D) Walk ()  { 
	if fn := W.TcgSampler2D; fn != nil { fn(me) }
	me.TfxSampler2DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ struct {
	Sampler2D *TcgSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

//	If the W.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_; fn != nil { fn(me) }
	me.Sampler2D.Walk()
 }

type TcgFixed xsdt.Float

//	Since TcgFixed is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgFixed's current non-string scalar value.
func (me TcgFixed) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed's alias type xsdt.Float.
func (me TcgFixed) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ struct {
	Fixed TcgFixed `xml:"http://www.collada.org/2005/11/COLLADASchema fixed"`

}

//	If the W.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ instance.
func (me *XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_; fn != nil { fn(me) }
 }

type TcgFloat4X1 TcgListOfFloat

//	Since TcgFloat4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X1) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4X1's alias type TcgListOfFloat.
func (me TcgFloat4X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ struct {
	Float4X1 TcgFloat4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`

}

//	If the W.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ instance.
func (me *XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_; fn != nil { fn(me) }
 }

type TcgBool xsdt.Boolean

//	This convenience method just performs a simple type conversion to TcgBool's alias type xsdt.Boolean.
func (me TcgBool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TcgBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	Returns a string representation of this TcgBool's current non-string scalar value.
func (me TcgBool) String () string { return xsdt.Boolean(me).String() }

type TcgListOfBool xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfBool's alias type xsdt.String.
func (me TcgListOfBool) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TcgListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfBool) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TcgListOfBool is just a simple String type, this merely returns the current string value.
func (me TcgListOfBool) String () string { return xsdt.String(me).String() }

//	TcgListOfBool defines a String containing a whitespace-separated list of TcgBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfBool) Values () (list []TcgBool) { var btv = new(TcgBool); var svals = xsdt.ListValues(string(me)); list = make([]TcgBool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TcgBool4X3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X3's alias type TcgListOfBool.
func (me TcgBool4X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool4X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X3) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ struct {
	Bool4X3 TcgBool4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x3"`

}

//	If the W.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ instance.
func (me *XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_; fn != nil { fn(me) }
 }

type TcgBool1X4 TcgListOfBool

//	Since TcgBool1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool1X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X4) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X4's alias type TcgListOfBool.
func (me TcgBool1X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ struct {
	Bool1X4 TcgBool1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x4"`

}

//	If the W.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ instance.
func (me *XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_; fn != nil { fn(me) }
 }

type TcgFloat4X2 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat4X2's alias type TcgListOfFloat.
func (me TcgFloat4X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X2) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ struct {
	Float4X2 TcgFloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`

}

//	If the W.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ instance.
func (me *XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_; fn != nil { fn(me) }
 }

type TcgSamplerCUBE struct {
	TfxSamplerCUBECommon

}

//	If the W.TcgSamplerCUBE function is not nil (ie. was set by outside code), calls it with this TcgSamplerCUBE instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerCUBE instance.
func (me *TcgSamplerCUBE) Walk ()  { 
	if fn := W.TcgSamplerCUBE; fn != nil { fn(me) }
	me.TfxSamplerCUBECommon.Walk()
 }

type XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ struct {
	SamplerCUBE *TcgSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

//	If the W.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_; fn != nil { fn(me) }
	me.SamplerCUBE.Walk()
 }

type TcgFixed1 xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFixed1's alias type xsdt.Float.
func (me TcgFixed1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TcgFixed1's current non-string scalar value.
func (me TcgFixed1) String () string { return xsdt.Float(me).String() }

//	Since TcgFixed1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ struct {
	Fixed1 TcgFixed1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1"`

}

//	If the W.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ instance.
func (me *XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_; fn != nil { fn(me) }
 }

type TcgInt xsdt.Int

//	This convenience method just performs a simple type conversion to TcgInt's alias type xsdt.Int.
func (me TcgInt) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

//	Returns a string representation of this TcgInt's current non-string scalar value.
func (me TcgInt) String () string { return xsdt.Int(me).String() }

//	Since TcgInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

type TcgListOfInt xsdt.String

//	Since TcgListOfInt is just a simple String type, this merely returns the current string value.
func (me TcgListOfInt) String () string { return xsdt.String(me).String() }

//	TcgListOfInt defines a String containing a whitespace-separated list of TcgInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfInt) Values () (list []TcgInt) { var btv = new(TcgInt); var svals = xsdt.ListValues(string(me)); list = make([]TcgInt, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TcgListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfInt) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgListOfInt's alias type xsdt.String.
func (me TcgListOfInt) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TcgInt2X2 TcgListOfInt

//	Since TcgInt2X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt2X2's alias type TcgListOfInt.
func (me TcgInt2X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ struct {
	Int2X2 TcgInt2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x2"`

}

//	If the W.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ instance.
func (me *XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_; fn != nil { fn(me) }
 }

type TcgBool2X4 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool2X4's alias type TcgListOfBool.
func (me TcgBool2X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool2X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X4) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ struct {
	Bool2X4 TcgBool2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x4"`

}

//	If the W.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ instance.
func (me *XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_; fn != nil { fn(me) }
 }

type TcgBool4X2 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X2's alias type TcgListOfBool.
func (me TcgBool4X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool4X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X2) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ struct {
	Bool4X2 TcgBool4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x2"`

}

//	If the W.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ instance.
func (me *XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_; fn != nil { fn(me) }
 }

type TcgHalf3X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X4's alias type TcgListOfHalf.
func (me TcgHalf3X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ struct {
	Half3X4 TcgHalf3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x4"`

}

//	If the W.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ instance.
func (me *XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_; fn != nil { fn(me) }
 }

type TcgListOfFixed xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfFixed's alias type xsdt.String.
func (me TcgListOfFixed) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TcgListOfFixed defines a String containing a whitespace-separated list of TcgFixed values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFixed) Values () (list []TcgFixed) { var btv = new(TcgFixed); var svals = xsdt.ListValues(string(me)); list = make([]TcgFixed, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TcgListOfFixed is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFixed) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TcgListOfFixed is just a simple String type, this merely returns the current string value.
func (me TcgListOfFixed) String () string { return xsdt.String(me).String() }

type TcgFixed4X1 TcgListOfFixed

//	Since TcgFixed4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X1) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed4X1's alias type TcgListOfFixed.
func (me TcgFixed4X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ struct {
	Fixed4X1 TcgFixed4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x1"`

}

//	If the W.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ instance.
func (me *XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_; fn != nil { fn(me) }
 }

type TcgHalf4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf4's alias type TcgListOfHalf.
func (me TcgHalf4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ struct {
	Half4 TcgHalf4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4"`

}

//	If the W.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ instance.
func (me *XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_; fn != nil { fn(me) }
 }

type TcgInt4X3 TcgListOfInt

//	Since TcgInt4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt4X3's alias type TcgListOfInt.
func (me TcgInt4X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X3) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ struct {
	Int4X3 TcgInt4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x3"`

}

//	If the W.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ instance.
func (me *XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_; fn != nil { fn(me) }
 }

type TcgFloat1X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat1X3's alias type TcgListOfFloat.
func (me TcgFloat1X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X3) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ struct {
	Float1X3 TcgFloat1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`

}

//	If the W.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ instance.
func (me *XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_; fn != nil { fn(me) }
 }

type TcgFloat1X1 TcgListOfFloat

//	Since TcgFloat1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X1) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat1X1's alias type TcgListOfFloat.
func (me TcgFloat1X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ struct {
	Float1X1 TcgFloat1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`

}

//	If the W.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ instance.
func (me *XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_; fn != nil { fn(me) }
 }

type TcgHalf3X2 TcgListOfHalf

//	Since TcgHalf3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf3X2's alias type TcgListOfHalf.
func (me TcgHalf3X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X2) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ struct {
	Half3X2 TcgHalf3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x2"`

}

//	If the W.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ instance.
func (me *XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_; fn != nil { fn(me) }
 }

type TcgInt1X4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt1X4's alias type TcgListOfInt.
func (me TcgInt1X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X4) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ struct {
	Int1X4 TcgInt1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x4"`

}

//	If the W.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ instance.
func (me *XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_; fn != nil { fn(me) }
 }

type TcgInt4 TcgListOfInt

//	Since TcgInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt4's alias type TcgListOfInt.
func (me TcgInt4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ struct {
	Int4 TcgInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

//	If the W.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ instance.
func (me *XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_; fn != nil { fn(me) }
 }

type TcgInt3X4 TcgListOfInt

//	Since TcgInt3X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X4) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3X4's alias type TcgListOfInt.
func (me TcgInt3X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ struct {
	Int3X4 TcgInt3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x4"`

}

//	If the W.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ instance.
func (me *XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_; fn != nil { fn(me) }
 }

type TcgInt1X2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt1X2's alias type TcgListOfInt.
func (me TcgInt1X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt1X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X2) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ struct {
	Int1X2 TcgInt1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x2"`

}

//	If the W.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ instance.
func (me *XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_; fn != nil { fn(me) }
 }

type TcgSamplerDEPTH struct {
	TfxSamplerDEPTHCommon

}

//	If the W.TcgSamplerDEPTH function is not nil (ie. was set by outside code), calls it with this TcgSamplerDEPTH instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerDEPTH instance.
func (me *TcgSamplerDEPTH) Walk ()  { 
	if fn := W.TcgSamplerDEPTH; fn != nil { fn(me) }
	me.TfxSamplerDEPTHCommon.Walk()
 }

type XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ struct {
	SamplerDEPTH *TcgSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

//	If the W.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_; fn != nil { fn(me) }
	me.SamplerDEPTH.Walk()
 }

type TcgFloat4X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat4X3's alias type TcgListOfFloat.
func (me TcgFloat4X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X3) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ struct {
	Float4X3 TcgFloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`

}

//	If the W.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ instance.
func (me *XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_; fn != nil { fn(me) }
 }

type TcgInt1X1 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt1X1's alias type TcgListOfInt.
func (me TcgInt1X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt1X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X1) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ struct {
	Int1X1 TcgInt1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x1"`

}

//	If the W.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ instance.
func (me *XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_; fn != nil { fn(me) }
 }

type TcgHalf2 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf2's alias type TcgListOfHalf.
func (me TcgHalf2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ struct {
	Half2 TcgHalf2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2"`

}

//	If the W.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ instance.
func (me *XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ struct {
	Int TcgInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

//	If the W.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ instance.
func (me *XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_; fn != nil { fn(me) }
 }

type TcgInt2X4 TcgListOfInt

//	Since TcgInt2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt2X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X4) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2X4's alias type TcgListOfInt.
func (me TcgInt2X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ struct {
	Int2X4 TcgInt2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x4"`

}

//	If the W.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ instance.
func (me *XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_; fn != nil { fn(me) }
 }

type TcgInt4X2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt4X2's alias type TcgListOfInt.
func (me TcgInt4X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ struct {
	Int4X2 TcgInt4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x2"`

}

//	If the W.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ instance.
func (me *XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_; fn != nil { fn(me) }
 }

type TcgFixed2X1 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X1's alias type TcgListOfFixed.
func (me TcgFixed2X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X1) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ struct {
	Fixed2X1 TcgFixed2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x1"`

}

//	If the W.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ instance.
func (me *XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_; fn != nil { fn(me) }
 }

type TcgBool3X3 TcgListOfBool

//	Since TcgBool3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool3X3's alias type TcgListOfBool.
func (me TcgBool3X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X3) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ struct {
	Bool3X3 TcgBool3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x3"`

}

//	If the W.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ instance.
func (me *XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_; fn != nil { fn(me) }
 }

type TcgFixed1X3 TcgListOfFixed

//	Since TcgFixed1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1X3's alias type TcgListOfFixed.
func (me TcgFixed1X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X3) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ struct {
	Fixed1X3 TcgFixed1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x3"`

}

//	If the W.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ instance.
func (me *XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_; fn != nil { fn(me) }
 }

type TcgFloat3 TcgListOfFloat

//	Since TcgFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3's alias type TcgListOfFloat.
func (me TcgFloat3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ struct {
	Float3 TcgFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

//	If the W.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_; fn != nil { fn(me) }
 }

type TcgFloat3X3 TcgListOfFloat

//	Since TcgFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X3) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X3's alias type TcgListOfFloat.
func (me TcgFloat3X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ struct {
	Float3X3 TcgFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

//	If the W.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_; fn != nil { fn(me) }
 }

type TcgInt2X3 TcgListOfInt

//	Since TcgInt2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt2X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X3) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2X3's alias type TcgListOfInt.
func (me TcgInt2X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ struct {
	Int2X3 TcgInt2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x3"`

}

//	If the W.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ instance.
func (me *XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_; fn != nil { fn(me) }
 }

type TcgBool4 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4's alias type TcgListOfBool.
func (me TcgBool4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ struct {
	Bool4 TcgBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

//	If the W.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_; fn != nil { fn(me) }
 }

type TcgBool4X4 TcgListOfBool

//	Since TcgBool4X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X4) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool4X4's alias type TcgListOfBool.
func (me TcgBool4X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ struct {
	Bool4X4 TcgBool4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x4"`

}

//	If the W.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ instance.
func (me *XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_; fn != nil { fn(me) }
 }

type TcgBool2X1 TcgListOfBool

//	Since TcgBool2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool2X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2X1's alias type TcgListOfBool.
func (me TcgBool2X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ struct {
	Bool2X1 TcgBool2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x1"`

}

//	If the W.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ instance.
func (me *XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_; fn != nil { fn(me) }
 }

type TcgBool3X1 TcgListOfBool

//	Since TcgBool3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool3X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool3X1's alias type TcgListOfBool.
func (me TcgBool3X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ struct {
	Bool3X1 TcgBool3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x1"`

}

//	If the W.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ instance.
func (me *XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_; fn != nil { fn(me) }
 }

type TcgFloat2X2 TcgListOfFloat

//	Since TcgFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X2) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat2X2's alias type TcgListOfFloat.
func (me TcgFloat2X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ struct {
	Float2X2 TcgFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	If the W.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_; fn != nil { fn(me) }
 }

type TcgBool3X4 TcgListOfBool

//	Since TcgBool3X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X4) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool3X4's alias type TcgListOfBool.
func (me TcgBool3X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ struct {
	Bool3X4 TcgBool3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x4"`

}

//	If the W.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ instance.
func (me *XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_; fn != nil { fn(me) }
 }

type TcgHalf4X1 TcgListOfHalf

//	Since TcgHalf4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf4X1's alias type TcgListOfHalf.
func (me TcgHalf4X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X1) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ struct {
	Half4X1 TcgHalf4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x1"`

}

//	If the W.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ instance.
func (me *XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_; fn != nil { fn(me) }
 }

type TcgFixed3 TcgListOfFixed

//	Since TcgFixed3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed3's alias type TcgListOfFixed.
func (me TcgFixed3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ struct {
	Fixed3 TcgFixed3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3"`

}

//	If the W.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ instance.
func (me *XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_; fn != nil { fn(me) }
 }

type TcgBool3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3's alias type TcgListOfBool.
func (me TcgBool3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ struct {
	Bool3 TcgBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

//	If the W.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_; fn != nil { fn(me) }
 }

type TcgSamplerRECT struct {
	TfxSamplerRECTCommon

}

//	If the W.TcgSamplerRECT function is not nil (ie. was set by outside code), calls it with this TcgSamplerRECT instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerRECT instance.
func (me *TcgSamplerRECT) Walk ()  { 
	if fn := W.TcgSamplerRECT; fn != nil { fn(me) }
	me.TfxSamplerRECTCommon.Walk()
 }

type XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ struct {
	SamplerRECT *TcgSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

//	If the W.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_; fn != nil { fn(me) }
	me.SamplerRECT.Walk()
 }

type TcgFixed4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4's alias type TcgListOfFixed.
func (me TcgFixed4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ struct {
	Fixed4 TcgFixed4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4"`

}

//	If the W.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ instance.
func (me *XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_; fn != nil { fn(me) }
 }

type TcgBool1 xsdt.Boolean

//	Since TcgBool1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool1) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool1's alias type xsdt.Boolean.
func (me TcgBool1) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Returns a string representation of this TcgBool1's current non-string scalar value.
func (me TcgBool1) String () string { return xsdt.Boolean(me).String() }

type XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ struct {
	Bool1 TcgBool1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1"`

}

//	If the W.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ instance.
func (me *XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_; fn != nil { fn(me) }
 }

type TcgInt3X2 TcgListOfInt

//	Since TcgInt3X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt3X2's alias type TcgListOfInt.
func (me TcgInt3X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ struct {
	Int3X2 TcgInt3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x2"`

}

//	If the W.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ instance.
func (me *XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_; fn != nil { fn(me) }
 }

type TcgHalf4X3 TcgListOfHalf

//	Since TcgHalf4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf4X3's alias type TcgListOfHalf.
func (me TcgHalf4X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X3) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ struct {
	Half4X3 TcgHalf4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x3"`

}

//	If the W.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ instance.
func (me *XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_; fn != nil { fn(me) }
 }

type TcgFloat4 TcgListOfFloat

//	Since TcgFloat4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4's alias type TcgListOfFloat.
func (me TcgFloat4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ struct {
	Float4 TcgFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

//	If the W.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_; fn != nil { fn(me) }
 }

type TcgFloat4X4 TcgListOfFloat

//	Since TcgFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X4) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4X4's alias type TcgListOfFloat.
func (me TcgFloat4X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ struct {
	Float4X4 TcgFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

//	If the W.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_; fn != nil { fn(me) }
 }

type TcgFloat2X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X3's alias type TcgListOfFloat.
func (me TcgFloat2X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X3) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ struct {
	Float2X3 TcgFloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`

}

//	If the W.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ instance.
func (me *XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_; fn != nil { fn(me) }
 }

type TcgBool2X2 TcgListOfBool

//	Since TcgBool2X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X2) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2X2's alias type TcgListOfBool.
func (me TcgBool2X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ struct {
	Bool2X2 TcgBool2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x2"`

}

//	If the W.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ instance.
func (me *XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_; fn != nil { fn(me) }
 }

type TcgHalf2X1 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf2X1's alias type TcgListOfHalf.
func (me TcgHalf2X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X1) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ struct {
	Half2X1 TcgHalf2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x1"`

}

//	If the W.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ instance.
func (me *XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_; fn != nil { fn(me) }
 }

type TcgFloat3X2 TcgListOfFloat

//	Since TcgFloat3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X2) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X2's alias type TcgListOfFloat.
func (me TcgFloat3X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ struct {
	Float3X2 TcgFloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`

}

//	If the W.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ instance.
func (me *XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_; fn != nil { fn(me) }
 }

type TcgInt3X1 TcgListOfInt

//	Since TcgInt3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt3X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X1) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3X1's alias type TcgListOfInt.
func (me TcgInt3X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ struct {
	Int3X1 TcgInt3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x1"`

}

//	If the W.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ instance.
func (me *XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_; fn != nil { fn(me) }
 }

type TcgBool2X3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool2X3's alias type TcgListOfBool.
func (me TcgBool2X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X3) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ struct {
	Bool2X3 TcgBool2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x3"`

}

//	If the W.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ instance.
func (me *XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema string"`

}

//	If the W.XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_ instance.
func (me *XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_; fn != nil { fn(me) }
 }

type TcgFloat1X2 TcgListOfFloat

//	Since TcgFloat1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X2) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat1X2's alias type TcgListOfFloat.
func (me TcgFloat1X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ struct {
	Float1X2 TcgFloat1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`

}

//	If the W.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ instance.
func (me *XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_; fn != nil { fn(me) }
 }

type TcgBool3X2 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3X2's alias type TcgListOfBool.
func (me TcgBool3X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool3X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X2) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ struct {
	Bool3X2 TcgBool3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x2"`

}

//	If the W.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ instance.
func (me *XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_; fn != nil { fn(me) }
 }

type TcgFixed4X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X4's alias type TcgListOfFixed.
func (me TcgFixed4X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X4) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ struct {
	Fixed4X4 TcgFixed4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x4"`

}

//	If the W.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ instance.
func (me *XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_; fn != nil { fn(me) }
 }

type TcgFixed2X2 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X2's alias type TcgListOfFixed.
func (me TcgFixed2X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X2) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ struct {
	Fixed2X2 TcgFixed2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x2"`

}

//	If the W.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ instance.
func (me *XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_; fn != nil { fn(me) }
 }

type TcgFloat2X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X1's alias type TcgListOfFloat.
func (me TcgFloat2X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X1) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ struct {
	Float2X1 TcgFloat2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`

}

//	If the W.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ instance.
func (me *XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_; fn != nil { fn(me) }
 }

type TcgInt3X3 TcgListOfInt

//	Since TcgInt3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt3X3's alias type TcgListOfInt.
func (me TcgInt3X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X3) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ struct {
	Int3X3 TcgInt3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x3"`

}

//	If the W.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ instance.
func (me *XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_; fn != nil { fn(me) }
 }

type TcgFixed4X2 TcgListOfFixed

//	Since TcgFixed4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X2) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed4X2's alias type TcgListOfFixed.
func (me TcgFixed4X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ struct {
	Fixed4X2 TcgFixed4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x2"`

}

//	If the W.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ instance.
func (me *XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_; fn != nil { fn(me) }
 }

type TcgFixed1X2 TcgListOfFixed

//	Since TcgFixed1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X2) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1X2's alias type TcgListOfFixed.
func (me TcgFixed1X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ struct {
	Fixed1X2 TcgFixed1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x2"`

}

//	If the W.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ instance.
func (me *XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_; fn != nil { fn(me) }
 }

type TcgSampler3D struct {
	TfxSampler3DCommon

}

//	If the W.TcgSampler3D function is not nil (ie. was set by outside code), calls it with this TcgSampler3D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler3D instance.
func (me *TcgSampler3D) Walk ()  { 
	if fn := W.TcgSampler3D; fn != nil { fn(me) }
	me.TfxSampler3DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ struct {
	Sampler3D *TcgSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

//	If the W.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_; fn != nil { fn(me) }
	me.Sampler3D.Walk()
 }

type TcgFixed2X4 TcgListOfFixed

//	Since TcgFixed2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X4) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2X4's alias type TcgListOfFixed.
func (me TcgFixed2X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ struct {
	Fixed2X4 TcgFixed2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x4"`

}

//	If the W.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ instance.
func (me *XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_; fn != nil { fn(me) }
 }

type TcgFloat1 xsdt.Float

//	Returns a string representation of this TcgFloat1's current non-string scalar value.
func (me TcgFloat1) String () string { return xsdt.Float(me).String() }

//	Since TcgFloat1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat1's alias type xsdt.Float.
func (me TcgFloat1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ struct {
	Float1 TcgFloat1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1"`

}

//	If the W.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ instance.
func (me *XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_; fn != nil { fn(me) }
 }

//	Declares a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	A procedural surface generator for the cg profile.
//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
type XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ struct {
//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

//	If the W.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_; fn != nil { fn(me) }
	for _, x := range me.Includes { x.Walk() }
 }

//	Assigns a new value to a previously defined parameter.
type XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TcgSetparamSimple struct {
	XsdGoPkgHasAttr_Ref_TcgIdentifier_

	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_

}

//	If the W.TcgSetparamSimple function is not nil (ie. was set by outside code), calls it with this TcgSetparamSimple instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TcgSetparamSimple instance.
func (me *TcgSetparamSimple) Walk ()  { 
	if fn := W.TcgSetparamSimple; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_.Walk()
 }

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ struct {
//	Assigns a new value to a previously defined parameter.
	Setparams []*TcgSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ instance.
func (me *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

//	The annotate element allows you to specify an annotation for this generator.
type XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this generator.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

//	The entry symbol for the shader function.
type TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_

}

//	If the W.TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance.
func (me *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName) Walk ()  { 
	if fn := W.TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	If the W.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_; fn != nil { fn(me) }
	me.Name.Walk()
 }

//	The code element allows you to embed cg sourcecode for the surface generator.
type XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ struct {
//	The code element allows you to embed cg sourcecode for the surface generator.
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

type TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator struct {
//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

//	Assigns a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_

//	The annotate element allows you to specify an annotation for this generator.
	XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

//	The code element allows you to embed cg sourcecode for the surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

}

//	If the W.TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator function is not nil (ie. was set by outside code), calls it with this TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator instance.
func (me *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator) Walk ()  { 
	if fn := W.TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_.Walk()
	me.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_.Walk()
	me.XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_.Walk()
	me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_.Walk()
 }

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
//	A procedural surface generator for the cg profile.
	Generator *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`

}

//	If the W.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ instance.
func (me *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_; fn != nil { fn(me) }
	me.Generator.Walk()
 }

type TcgSurfaceType struct {
//	A procedural surface generator for the cg profile.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_

	TfxSurfaceCommon

}

//	If the W.TcgSurfaceType function is not nil (ie. was set by outside code), calls it with this TcgSurfaceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcgSurfaceType instance.
func (me *TcgSurfaceType) Walk ()  { 
	if fn := W.TcgSurfaceType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_.Walk()
	me.TfxSurfaceCommon.Walk()
 }

type XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ struct {
	Surface *TcgSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

//	If the W.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ instance.
func (me *XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_; fn != nil { fn(me) }
	me.Surface.Walk()
 }

type TcgBool2 TcgListOfBool

//	Since TcgBool2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool2's alias type TcgListOfBool.
func (me TcgBool2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ struct {
	Bool2 TcgBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	If the W.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_; fn != nil { fn(me) }
 }

type TcgFixed2X3 TcgListOfFixed

//	Since TcgFixed2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X3) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2X3's alias type TcgListOfFixed.
func (me TcgFixed2X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ struct {
	Fixed2X3 TcgFixed2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x3"`

}

//	If the W.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ instance.
func (me *XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_; fn != nil { fn(me) }
 }

type TcgHalf3X3 TcgListOfHalf

//	Since TcgHalf3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf3X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3X3's alias type TcgListOfHalf.
func (me TcgHalf3X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ struct {
	Half3X3 TcgHalf3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x3"`

}

//	If the W.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ instance.
func (me *XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_; fn != nil { fn(me) }
 }

type TcgFixed3X2 TcgListOfFixed

//	Since TcgFixed3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X2's alias type TcgListOfFixed.
func (me TcgFixed3X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X2) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ struct {
	Fixed3X2 TcgFixed3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x2"`

}

//	If the W.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ instance.
func (me *XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_; fn != nil { fn(me) }
 }

type TcgFixed3X3 TcgListOfFixed

//	Since TcgFixed3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X3) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X3's alias type TcgListOfFixed.
func (me TcgFixed3X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ struct {
	Fixed3X3 TcgFixed3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x3"`

}

//	If the W.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ instance.
func (me *XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_; fn != nil { fn(me) }
 }

type TcgInt2X1 TcgListOfInt

//	Since TcgInt2X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X1) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2X1's alias type TcgListOfInt.
func (me TcgInt2X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ struct {
	Int2X1 TcgInt2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x1"`

}

//	If the W.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ instance.
func (me *XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ struct {
	Enum TglEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	If the W.XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ instance.
func (me *XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_; fn != nil { fn(me) }
 }

type TcgFloat3X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat3X1's alias type TcgListOfFloat.
func (me TcgFloat3X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X1) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ struct {
	Float3X1 TcgFloat3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`

}

//	If the W.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ instance.
func (me *XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_; fn != nil { fn(me) }
 }

type TcgBool1X1 TcgListOfBool

//	Since TcgBool1X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X1's alias type TcgListOfBool.
func (me TcgBool1X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ struct {
	Bool1X1 TcgBool1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x1"`

}

//	If the W.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ instance.
func (me *XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_; fn != nil { fn(me) }
 }

type TcgFloat2X4 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X4's alias type TcgListOfFloat.
func (me TcgFloat2X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X4) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ struct {
	Float2X4 TcgFloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`

}

//	If the W.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ instance.
func (me *XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_; fn != nil { fn(me) }
 }

type TcgInt4X4 TcgListOfInt

//	Since TcgInt4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt4X4's alias type TcgListOfInt.
func (me TcgInt4X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X4) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ struct {
	Int4X4 TcgInt4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x4"`

}

//	If the W.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ instance.
func (me *XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_; fn != nil { fn(me) }
 }

type TcgHalf1X3 TcgListOfHalf

//	Since TcgHalf1X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X3's alias type TcgListOfHalf.
func (me TcgHalf1X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ struct {
	Half1X3 TcgHalf1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x3"`

}

//	If the W.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ instance.
func (me *XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_; fn != nil { fn(me) }
 }

type TcgInt2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2's alias type TcgListOfInt.
func (me TcgInt2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ struct {
	Int2 TcgInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

//	If the W.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ instance.
func (me *XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_; fn != nil { fn(me) }
 }

type TcgBool1X3 TcgListOfBool

//	Since TcgBool1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool1X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X3) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X3's alias type TcgListOfBool.
func (me TcgBool1X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ struct {
	Bool1X3 TcgBool1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x3"`

}

//	If the W.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ instance.
func (me *XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_; fn != nil { fn(me) }
 }

type TcgInt3 TcgListOfInt

//	Since TcgInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3's alias type TcgListOfInt.
func (me TcgInt3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ struct {
	Int3 TcgInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	If the W.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ instance.
func (me *XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_; fn != nil { fn(me) }
 }

type TcgFixed1X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed1X4's alias type TcgListOfFixed.
func (me TcgFixed1X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ struct {
	Fixed1X4 TcgFixed1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x4"`

}

//	If the W.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ instance.
func (me *XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_; fn != nil { fn(me) }
 }

type TcgSampler1D struct {
	TfxSampler1DCommon

}

//	If the W.TcgSampler1D function is not nil (ie. was set by outside code), calls it with this TcgSampler1D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler1D instance.
func (me *TcgSampler1D) Walk ()  { 
	if fn := W.TcgSampler1D; fn != nil { fn(me) }
	me.TfxSampler1DCommon.Walk()
 }

type XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ struct {
	Sampler1D *TcgSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

//	If the W.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_; fn != nil { fn(me) }
	me.Sampler1D.Walk()
 }

type TcgFixed4X3 TcgListOfFixed

//	Since TcgFixed4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed4X3's alias type TcgListOfFixed.
func (me TcgFixed4X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X3) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ struct {
	Fixed4X3 TcgFixed4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x3"`

}

//	If the W.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ instance.
func (me *XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_; fn != nil { fn(me) }
 }

type TcgBool4X1 TcgListOfBool

//	Since TcgBool4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool4X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool4X1's alias type TcgListOfBool.
func (me TcgBool4X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ struct {
	Bool4X1 TcgBool4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x1"`

}

//	If the W.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ instance.
func (me *XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_; fn != nil { fn(me) }
 }

type TcgFixed1X1 TcgListOfFixed

//	Since TcgFixed1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X1) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed1X1's alias type TcgListOfFixed.
func (me TcgFixed1X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ struct {
	Fixed1X1 TcgFixed1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x1"`

}

//	If the W.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ instance.
func (me *XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_; fn != nil { fn(me) }
 }

type TcgHalf1X2 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf1X2's alias type TcgListOfHalf.
func (me TcgHalf1X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf1X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X2) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ struct {
	Half1X2 TcgHalf1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x2"`

}

//	If the W.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ instance.
func (me *XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_; fn != nil { fn(me) }
 }

type TcgHalf3 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3's alias type TcgListOfHalf.
func (me TcgHalf3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ struct {
	Half3 TcgHalf3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3"`

}

//	If the W.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ instance.
func (me *XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_; fn != nil { fn(me) }
 }

type TcgBool1X2 TcgListOfBool

//	Since TcgBool1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool1X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X2) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X2's alias type TcgListOfBool.
func (me TcgBool1X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ struct {
	Bool1X2 TcgBool1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x2"`

}

//	If the W.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ instance.
func (me *XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_; fn != nil { fn(me) }
 }

type TcgHalf3X1 TcgListOfHalf

//	Since TcgHalf3X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X1) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3X1's alias type TcgListOfHalf.
func (me TcgHalf3X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ struct {
	Half3X1 TcgHalf3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x1"`

}

//	If the W.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ instance.
func (me *XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_; fn != nil { fn(me) }
 }

type TcgFloat3X4 TcgListOfFloat

//	Since TcgFloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X4) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X4's alias type TcgListOfFloat.
func (me TcgFloat3X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ struct {
	Float3X4 TcgFloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`

}

//	If the W.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ instance.
func (me *XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_; fn != nil { fn(me) }
 }

type TcgFixed2 TcgListOfFixed

//	Since TcgFixed2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2's alias type TcgListOfFixed.
func (me TcgFixed2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ struct {
	Fixed2 TcgFixed2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2"`

}

//	If the W.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ instance.
func (me *XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_; fn != nil { fn(me) }
 }

type TcgFloat2 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2's alias type TcgListOfFloat.
func (me TcgFloat2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ struct {
	Float2 TcgFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

//	If the W.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_; fn != nil { fn(me) }
 }

type TcgFixed3X1 TcgListOfFixed

//	Since TcgFixed3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X1's alias type TcgListOfFixed.
func (me TcgFixed3X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X1) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ struct {
	Fixed3X1 TcgFixed3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x1"`

}

//	If the W.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ instance.
func (me *XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_; fn != nil { fn(me) }
 }

type TcgInt1 xsdt.Int

//	Since TcgInt1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt1) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt1's alias type xsdt.Int.
func (me TcgInt1) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

//	Returns a string representation of this TcgInt1's current non-string scalar value.
func (me TcgInt1) String () string { return xsdt.Int(me).String() }

type XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ struct {
	Int1 TcgInt1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1"`

}

//	If the W.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ instance.
func (me *XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_; fn != nil { fn(me) }
 }

type TcgHalf2X2 TcgListOfHalf

//	Since TcgHalf2X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X2) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf2X2's alias type TcgListOfHalf.
func (me TcgHalf2X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ struct {
	Half2X2 TcgHalf2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x2"`

}

//	If the W.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ instance.
func (me *XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_; fn != nil { fn(me) }
 }

type TcgHalf2X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf2X4's alias type TcgListOfHalf.
func (me TcgHalf2X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ struct {
	Half2X4 TcgHalf2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x4"`

}

//	If the W.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ instance.
func (me *XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ struct {
	Bool TcgBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

//	If the W.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ instance.
func (me *XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_; fn != nil { fn(me) }
 }

type TcgInt4X1 TcgListOfInt

//	Since TcgInt4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt4X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X1) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt4X1's alias type TcgListOfInt.
func (me TcgInt4X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ struct {
	Int4X1 TcgInt4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x1"`

}

//	If the W.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ instance.
func (me *XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_; fn != nil { fn(me) }
 }

type TcgHalf1X4 TcgListOfHalf

//	Since TcgHalf1X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf1X4's alias type TcgListOfHalf.
func (me TcgHalf1X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ struct {
	Half1X4 TcgHalf1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x4"`

}

//	If the W.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ instance.
func (me *XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_; fn != nil { fn(me) }
 }

type TcgHalf4X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf4X4's alias type TcgListOfHalf.
func (me TcgHalf4X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf4X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X4) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ struct {
	Half4X4 TcgHalf4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x4"`

}

//	If the W.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ instance.
func (me *XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_; fn != nil { fn(me) }
 }

type TcgHalf2X3 TcgListOfHalf

//	Since TcgHalf2X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf2X3's alias type TcgListOfHalf.
func (me TcgHalf2X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ struct {
	Half2X3 TcgHalf2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x3"`

}

//	If the W.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ instance.
func (me *XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ struct {
	Half TcgHalf `xml:"http://www.collada.org/2005/11/COLLADASchema half"`

}

//	If the W.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ instance.
func (me *XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_; fn != nil { fn(me) }
 }

type TcgHalf1 xsdt.Float

//	Since TcgHalf1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgHalf1's current non-string scalar value.
func (me TcgHalf1) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1's alias type xsdt.Float.
func (me TcgHalf1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ struct {
	Half1 TcgHalf1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1"`

}

//	If the W.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ instance.
func (me *XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ struct {
	Float TcgFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

//	If the W.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_; fn != nil { fn(me) }
 }

type TcgInt1X3 TcgListOfInt

//	Since TcgInt1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt1X3's alias type TcgListOfInt.
func (me TcgInt1X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X3) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ struct {
	Int1X3 TcgInt1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x3"`

}

//	If the W.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ instance.
func (me *XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_; fn != nil { fn(me) }
 }

type TcgFixed3X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed3X4's alias type TcgListOfFixed.
func (me TcgFixed3X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ struct {
	Fixed3X4 TcgFixed3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x4"`

}

//	If the W.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ instance.
func (me *XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_; fn != nil { fn(me) }
 }

type XsdGoPkgHasGroup_CgParamType struct {
	XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_

	XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_

	XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_

	XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_

	XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_

	XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_

	XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_

	XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_

	XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_

	XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_

	XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_

	XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_

	XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_

	XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_

	XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_

	XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_

	XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_

	XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_

	XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_

	XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_

	XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_

	XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_

	XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_

	XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_

	XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_

	XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_

	XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_

	XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_

	XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_

	XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_

	XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_

	XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_

	XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_

	XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_

	XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_

	XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_

	XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_

	XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_

	XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_

	XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_

	XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_

	XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_

	XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_

	XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_

	XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_

	XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_

	XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_

	XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_

	XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_

	XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_

	XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_

	XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_

	XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_

	XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_

	XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_

	XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_

	XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_

	XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_

	XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_

	XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_

	XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_

	XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_

	XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_

	XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_

	XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_

	XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_

	XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_

	XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_

	XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_

	XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_

	XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_

	XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_

	XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_

	XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_

	XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_

	XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_

	XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_

	XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_

	XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_

	XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_

	XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_

	XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_

	XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_

	XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_

	XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_

	XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_

	XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_

	XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_

	XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_

	XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_

	XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_

	XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_

	XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_

	XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_

	XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_

	XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_

	XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_

	XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_

	XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_

	XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_

	XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_

	XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_

	XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_

	XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_

	XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_

	XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_

	XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_

	XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_

	XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_

	XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_

	XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_

	XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_

	XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_

}

//	If the W.XsdGoPkgHasGroup_CgParamType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_CgParamType instance as the single argument. Then calls the Walk() method on 114/114 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_CgParamType instance.
func (me *XsdGoPkgHasGroup_CgParamType) Walk ()  { 
	if fn := W.XsdGoPkgHasGroup_CgParamType; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_.Walk()
	me.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_.Walk()
	me.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_.Walk()
	me.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_.Walk()
	me.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_.Walk()
	me.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_.Walk()
	me.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_.Walk()
	me.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_.Walk()
	me.XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_.Walk()
	me.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_.Walk()
	me.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_.Walk()
	me.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_.Walk()
	me.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_.Walk()
	me.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_.Walk()
	me.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_.Walk()
	me.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_.Walk()
	me.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_.Walk()
	me.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_.Walk()
	me.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_.Walk()
	me.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_.Walk()
	me.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_.Walk()
	me.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_.Walk()
	me.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_.Walk()
	me.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_.Walk()
	me.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_.Walk()
	me.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_.Walk()
	me.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_.Walk()
	me.XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_.Walk()
	me.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_.Walk()
	me.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_.Walk()
	me.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_.Walk()
	me.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_.Walk()
	me.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_.Walk()
	me.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_.Walk()
	me.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_.Walk()
	me.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_.Walk()
	me.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_.Walk()
	me.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_.Walk()
	me.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_.Walk()
	me.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_.Walk()
	me.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_.Walk()
	me.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_.Walk()
	me.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_.Walk()
	me.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_.Walk()
	me.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_.Walk()
	me.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_.Walk()
	me.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_.Walk()
	me.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_.Walk()
	me.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_.Walk()
	me.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_.Walk()
	me.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_.Walk()
	me.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_.Walk()
	me.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_.Walk()
	me.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_.Walk()
	me.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_.Walk()
	me.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_.Walk()
	me.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_.Walk()
	me.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_.Walk()
	me.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_.Walk()
	me.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_.Walk()
	me.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_.Walk()
	me.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_.Walk()
	me.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_.Walk()
	me.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_.Walk()
	me.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_.Walk()
	me.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_.Walk()
	me.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_.Walk()
	me.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_.Walk()
	me.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_.Walk()
	me.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_.Walk()
	me.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_.Walk()
	me.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_.Walk()
	me.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_.Walk()
	me.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_.Walk()
	me.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_.Walk()
	me.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_.Walk()
	me.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_.Walk()
	me.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_.Walk()
	me.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_.Walk()
	me.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_.Walk()
	me.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_.Walk()
	me.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_.Walk()
	me.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_.Walk()
	me.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_.Walk()
	me.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_.Walk()
	me.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_.Walk()
	me.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_.Walk()
	me.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_.Walk()
	me.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_.Walk()
	me.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_.Walk()
	me.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_.Walk()
	me.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_.Walk()
	me.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_.Walk()
	me.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_.Walk()
	me.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_.Walk()
	me.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_.Walk()
	me.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_.Walk()
	me.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_.Walk()
	me.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_.Walk()
	me.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_.Walk()
	me.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_.Walk()
	me.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_.Walk()
	me.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_.Walk()
	me.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_.Walk()
	me.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_.Walk()
	me.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_.Walk()
	me.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_.Walk()
	me.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_.Walk()
	me.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_.Walk()
	me.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_.Walk()
	me.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_.Walk()
	me.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_.Walk()
	me.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_.Walk()
	me.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_.Walk()
 }

type XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParams []*TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`

}

//	If the W.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ instance.
func (me *XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_; fn != nil { fn(me) }
	for _, x := range me.ConnectParams { x.Walk() }
 }

//	Creates a parameter of a one-dimensional array type.
//	The usertype element allows you to create arrays of usertypes.
type XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ struct {
//	The usertype element allows you to create arrays of usertypes.
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	If the W.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_; fn != nil { fn(me) }
 }

//	Nested array elements allow you to create multidemensional arrays.
type XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ struct {
//	Nested array elements allow you to create multidemensional arrays.
	Arrays []*TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_; fn != nil { fn(me) }
 }

type TcgSetarrayType struct {
//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_

//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_

	XsdGoPkgHasGroup_CgParamType

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

}

//	If the W.TcgSetarrayType function is not nil (ie. was set by outside code), calls it with this TcgSetarrayType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TcgSetarrayType instance.
func (me *TcgSetarrayType) Walk ()  { 
	if fn := W.TcgSetarrayType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_CgParamType.Walk()
	me.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_.Walk()
	me.XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_.Walk()
 }

type XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ struct {
	Arrays []*TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_; fn != nil { fn(me) }
	for _, x := range me.Arrays { x.Walk() }
 }

type XsdGoPkgHasAttr_Name_TcgIdentifier_ struct {
	Name TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

type TcgSetuserType struct {
	XsdGoPkgHasAttr_Name_TcgIdentifier_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_

//	Reference a code or include element which defines the usertype
	XsdGoPkgHasAttr_Source_XsdtNCName_

//	Some usertypes do not have data.  They may be used only to implement interface functions.
//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasGroup_CgParamType

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_

}

//	If the W.TcgSetuserType function is not nil (ie. was set by outside code), calls it with this TcgSetuserType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TcgSetuserType instance.
func (me *TcgSetuserType) Walk ()  { 
	if fn := W.TcgSetuserType; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_.Walk()
	me.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_.Walk()
	me.XsdGoPkgHasGroup_CgParamType.Walk()
	me.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_.Walk()
	me.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_.Walk()
 }

type XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ struct {
	Usertype *TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	If the W.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_; fn != nil { fn(me) }
	me.Usertype.Walk()
 }

type XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ struct {
	Array *TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_; fn != nil { fn(me) }
	me.Array.Walk()
 }

type TcgSetparam struct {
	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasAttr_Ref_TcgIdentifier_

	XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_

	XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_

}

//	If the W.TcgSetparam function is not nil (ie. was set by outside code), calls it with this TcgSetparam instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TcgSetparam instance.
func (me *TcgSetparam) Walk ()  { 
	if fn := W.TcgSetparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_.Walk()
	me.XsdGoPkgHasGroup_CgParamType.Walk()
	me.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_.Walk()
	me.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_.Walk()
 }

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ struct {
	Setparams []*TcgSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	If the W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_; fn != nil { fn(me) }
	for _, x := range me.Setparams { x.Walk() }
 }

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	Binds values to uniform inputs of a shader.
//	References a predefined parameter in shader binding declarations.
type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
//	References a predefined parameter in shader binding declarations.
	Param *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_; fn != nil { fn(me) }
	me.Param.Walk()
 }

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
//	References a predefined parameter in shader binding declarations.
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_

//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasGroup_CgParamType

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_.Walk()
	me.XsdGoPkgHasGroup_CgParamType.Walk()
 }

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

//	If the W.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_; fn != nil { fn(me) }
	for _, x := range me.Binds { x.Walk() }
 }

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TcgPipelineStage xsdt.String

//	Returns true if the value of this enumerated TcgPipelineStage is "FRAGMENT".
func (me TcgPipelineStage) IsFragment () bool { return me == "FRAGMENT" }

//	Since TcgPipelineStage is just a simple String type, this merely returns the current string value.
func (me TcgPipelineStage) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TcgPipelineStage is "VERTEX".
func (me TcgPipelineStage) IsVertex () bool { return me == "VERTEX" }

//	Since TcgPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgPipelineStage) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgPipelineStage's alias type xsdt.String.
func (me TcgPipelineStage) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Stage_TcgPipelineStage_ struct {
//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	Stage TcgPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`

}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget struct {
	XsdGoPkgValue xsdt.Nmtoken `xml:",chardata"`

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
	CompilerTarget *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`

}

//	If the W.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance.
func (me *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_; fn != nil { fn(me) }
	me.CompilerTarget.Walk()
 }

//	A string containing command-line operations for the shader compiler.
type XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ struct {
//	A string containing command-line operations for the shader compiler.
	CompilerOptions xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_options"`

}

//	If the W.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ instance.
func (me *XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_; fn != nil { fn(me) }
 }

//	The entry symbol for the shader function.
type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	If the W.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_; fn != nil { fn(me) }
	me.Name.Walk()
 }

type XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader struct {
	XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_

//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TcgPipelineStage_

	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_

//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_.Walk()
	me.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_.Walk()
	me.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_.Walk()
	me.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_.Walk()
 }

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`

}

//	If the W.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ instance.
func (me *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_; fn != nil { fn(me) }
	for _, x := range me.Shaders { x.Walk() }
 }

type XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ struct {
	StencilTargets []*TfxStenciltargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`

}

//	If the W.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_; fn != nil { fn(me) }
	for _, x := range me.StencilTargets { x.Walk() }
 }

type XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ struct {
	ColorClears []*TfxClearcolorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`

}

//	If the W.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ instance.
func (me *XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_; fn != nil { fn(me) }
	for _, x := range me.ColorClears { x.Walk() }
 }

type XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ struct {
	StencilClears []*TfxClearstencilCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`

}

//	If the W.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_; fn != nil { fn(me) }
	for _, x := range me.StencilClears { x.Walk() }
 }

type XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ struct {
	ColorTargets []*TfxColortargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`

}

//	If the W.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ instance.
func (me *XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_; fn != nil { fn(me) }
	for _, x := range me.ColorTargets { x.Walk() }
 }

type XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ struct {
	DepthClears []*TfxCleardepthCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`

}

//	If the W.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ instance.
func (me *XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_; fn != nil { fn(me) }
	for _, x := range me.DepthClears { x.Walk() }
 }

type XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_ struct {
	Draw TfxDrawCommon `xml:"http://www.collada.org/2005/11/COLLADASchema draw"`

}

//	If the W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_ instance.
func (me *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ struct {
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ struct {
	DepthTargets []*TfxDepthtargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`

}

//	If the W.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ instance.
func (me *XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_; fn != nil { fn(me) }
	for _, x := range me.DepthTargets { x.Walk() }
 }

type TxsdProfileCgSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_

}

//	If the W.TxsdProfileCgSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 11/12 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePass instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePass) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechniqueSequencePass; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_.Walk()
	me.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_.Walk()
	me.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_.Walk()
	me.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_.Walk()
	me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_.Walk()
	me.XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_.Walk()
	me.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_.Walk()
	me.XsdGoPkgHasGroup_GlPipelineSettings.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_.Walk()
 }

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileCgSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

//	If the W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_; fn != nil { fn(me) }
	for _, x := range me.Passes { x.Walk() }
 }

//	Create a new, named param object in the CG Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	The modifier element allows you to specify a modifier for this new param.
type XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_ struct {
//	The modifier element allows you to specify a modifier for this new param.
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`

}

//	If the W.XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_ instance.
func (me *XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_; fn != nil { fn(me) }
 }

//	The semantic element allows you to specify a semantic for this new param.
type XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_ struct {
//	The semantic element allows you to specify a semantic for this new param.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

//	If the W.XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_; fn != nil { fn(me) }
 }

//	The annotate element allows you to specify an annotation for this new param.
type XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this new param.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_ struct {
	Usertype *TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	If the W.XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_; fn != nil { fn(me) }
	me.Usertype.Walk()
 }

type XsdGoPkgHasAttr_Sid_TcgIdentifier_ struct {
	Sid TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

//	Creates a parameter of a one-dimensional array type.
type XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParams []*TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`

}

//	If the W.XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_ instance.
func (me *XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_; fn != nil { fn(me) }
	for _, x := range me.ConnectParams { x.Walk() }
 }

//	The usertype element allows you to create arrays of usertypes.
type XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ struct {
//	The usertype element allows you to create arrays of usertypes.
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	If the W.XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_; fn != nil { fn(me) }
	for _, x := range me.Usertypes { x.Walk() }
 }

//	Nested array elements allow you to create multidemensional arrays.
type XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ struct {
//	Nested array elements allow you to create multidemensional arrays.
	Arrays []*TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_; fn != nil { fn(me) }
 }

type TcgNewarrayType struct {
	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_

//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_

}

//	If the W.TcgNewarrayType function is not nil (ie. was set by outside code), calls it with this TcgNewarrayType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TcgNewarrayType instance.
func (me *TcgNewarrayType) Walk ()  { 
	if fn := W.TcgNewarrayType; fn != nil { fn(me) }
	me.XsdGoPkgHasGroup_CgParamType.Walk()
	me.XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_.Walk()
	me.XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_.Walk()
	me.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_.Walk()
 }

type XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ struct {
	Array *TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

//	If the W.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_; fn != nil { fn(me) }
	me.Array.Walk()
 }

type TcgNewparam struct {
//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_

	XsdGoPkgHasGroup_CgParamType

//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_

	XsdGoPkgHasAttr_Sid_TcgIdentifier_

	XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_

}

//	If the W.TcgNewparam function is not nil (ie. was set by outside code), calls it with this TcgNewparam instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TcgNewparam instance.
func (me *TcgNewparam) Walk ()  { 
	if fn := W.TcgNewparam; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_.Walk()
	me.XsdGoPkgHasGroup_CgParamType.Walk()
	me.XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_.Walk()
	me.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_.Walk()
	me.XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_.Walk()
 }

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ struct {
	Newparams []*TcgNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

type TxsdProfileCgSequenceTechnique struct {
	XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_

	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_

//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdProfileCgSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechnique instance as the single argument. Then calls the Walk() method on 9/11 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechnique instance.
func (me *TxsdProfileCgSequenceTechnique) Walk ()  { 
	if fn := W.TxsdProfileCgSequenceTechnique; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_.Walk()
	me.XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_.Walk()
	me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_.Walk()
	me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileCgSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_; fn != nil { fn(me) }
	for _, x := range me.Techniques { x.Walk() }
 }

type XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_ struct {
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	If the W.XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_; fn != nil { fn(me) }
	for _, x := range me.Codes { x.Walk() }
 }

type XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_ struct {
	Newparams []*TcgNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

type TxsdProfileCg struct {
	XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_

	XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_Image

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdProfileCg function is not nil (ie. was set by outside code), calls it with this TxsdProfileCg instance as the single argument. Then calls the Walk() method on 7/9 embed(s) and 0/0 field(s) belonging to this TxsdProfileCg instance.
func (me *TxsdProfileCg) Walk ()  { 
	if fn := W.TxsdProfileCg; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_.Walk()
	me.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_.Walk()
	me.XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Image.Walk()
 }

type XsdGoPkgHasElems_ProfileCg struct {
//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCgs []*TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`

}

//	If the W.XsdGoPkgHasElems_ProfileCg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileCg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileCg instance.
func (me *XsdGoPkgHasElems_ProfileCg) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ProfileCg; fn != nil { fn(me) }
	for _, x := range me.ProfileCgs { x.Walk() }
 }

type XsdGoPkgHasElems_FxProfileAbstract struct {
//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCommon

//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGlsl

//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCg

//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGles

}

//	If the W.XsdGoPkgHasElems_FxProfileAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FxProfileAbstract instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FxProfileAbstract instance.
func (me *XsdGoPkgHasElems_FxProfileAbstract) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_FxProfileAbstract; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_ProfileGles.Walk()
	me.XsdGoPkgHasElems_ProfileCommon.Walk()
	me.XsdGoPkgHasElems_ProfileGlsl.Walk()
	me.XsdGoPkgHasElems_ProfileCg.Walk()
 }

//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
//	This element creates a new, named param object in the FX Runtime, assigns it a type, an initial value, and additional attributes at declaration time.
//	The modifier element allows you to specify a modifier for this new param.
type XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ struct {
//	The modifier element allows you to specify a modifier for this new param.
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`

}

//	If the W.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ instance.
func (me *XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_; fn != nil { fn(me) }
 }

//	The semantic element allows you to specify a semantic for this new param.
type XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ struct {
//	The semantic element allows you to specify a semantic for this new param.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

//	If the W.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_; fn != nil { fn(me) }
 }

//	The annotate element allows you to specify an annotation for this new param.
type XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this new param.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TfxNewparamCommon struct {
//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_FxBasicTypeCommon

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

}

//	If the W.TfxNewparamCommon function is not nil (ie. was set by outside code), calls it with this TfxNewparamCommon instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TfxNewparamCommon instance.
func (me *TfxNewparamCommon) Walk ()  { 
	if fn := W.TfxNewparamCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk()
	me.XsdGoPkgHasGroup_FxBasicTypeCommon.Walk()
	me.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_.Walk()
	me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk()
 }

type XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ struct {
//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	Newparams []*TfxNewparamCommon `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	If the W.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_; fn != nil { fn(me) }
	for _, x := range me.Newparams { x.Walk() }
 }

//	The annotate element allows you to specify an annotation on this effect.
type XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation on this effect.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	If the W.XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_; fn != nil { fn(me) }
	for _, x := range me.Annotates { x.Walk() }
 }

type TxsdEffect struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The effect element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_

//	The annotate element allows you to specify an annotation on this effect.
	XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_

//	The image element allows you to create image resources which can be shared by multipe profiles.
	XsdGoPkgHasElems_Image

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	This is the substituion group hook which allows you to swap in other COLLADA FX profiles.
	XsdGoPkgHasElems_FxProfileAbstract

}

//	If the W.TxsdEffect function is not nil (ie. was set by outside code), calls it with this TxsdEffect instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdEffect instance.
func (me *TxsdEffect) Walk ()  { 
	if fn := W.TxsdEffect; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Image.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_FxProfileAbstract.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_.Walk()
	me.XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_.Walk()
 }

type XsdGoPkgHasElems_Effect struct {
//	A self contained description of a shader effect.
	Effects []*TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`

}

//	If the W.XsdGoPkgHasElems_Effect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Effect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Effect instance.
func (me *XsdGoPkgHasElems_Effect) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Effect; fn != nil { fn(me) }
	for _, x := range me.Effects { x.Walk() }
 }

type TxsdLibraryEffects struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one effect element.
	XsdGoPkgHasElems_Effect

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The library_effects element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdLibraryEffects function is not nil (ie. was set by outside code), calls it with this TxsdLibraryEffects instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryEffects instance.
func (me *TxsdLibraryEffects) Walk ()  { 
	if fn := W.TxsdLibraryEffects; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Effect.Walk()
 }

type XsdGoPkgHasElems_LibraryEffects struct {
//	The library_effects element declares a module of effect elements.
	EffectsLibraries []*TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`

}

//	If the W.XsdGoPkgHasElems_LibraryEffects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryEffects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryEffects instance.
func (me *XsdGoPkgHasElems_LibraryEffects) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryEffects; fn != nil { fn(me) }
	for _, x := range me.EffectsLibraries { x.Walk() }
 }

//	The library_visual_scenes element declares a module of visual_scene elements.
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
type XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ struct {
//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
	Layers []xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema layer"`

}

//	If the W.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ instance.
func (me *XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_; fn != nil { fn(me) }
 }

//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
type XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_ struct {
//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
	CameraNode xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema camera_node,attr"`

}

type TxsdVisualSceneSequenceEvaluateSceneSequenceRender struct {
//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_

//	The instance_effect element specifies which effect to render in this compositing step
//	while evaluating the scene.
	XsdGoPkgHasElem_InstanceEffect

//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
	XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_

}

//	If the W.TxsdVisualSceneSequenceEvaluateSceneSequenceRender function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneSequenceEvaluateSceneSequenceRender instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneSequenceEvaluateSceneSequenceRender instance.
func (me *TxsdVisualSceneSequenceEvaluateSceneSequenceRender) Walk ()  { 
	if fn := W.TxsdVisualSceneSequenceEvaluateSceneSequenceRender; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_.Walk()
	me.XsdGoPkgHasElem_InstanceEffect.Walk()
 }

type XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ struct {
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
	Renders []*TxsdVisualSceneSequenceEvaluateSceneSequenceRender `xml:"http://www.collada.org/2005/11/COLLADASchema render"`

}

//	If the W.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ instance.
func (me *XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_; fn != nil { fn(me) }
	for _, x := range me.Renders { x.Walk() }
 }

type TxsdVisualSceneSequenceEvaluateScene struct {
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdVisualSceneSequenceEvaluateScene function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneSequenceEvaluateScene instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneSequenceEvaluateScene instance.
func (me *TxsdVisualSceneSequenceEvaluateScene) Walk ()  { 
	if fn := W.TxsdVisualSceneSequenceEvaluateScene; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_.Walk()
 }

type XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ struct {
//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
	EvaluateScenes []*TxsdVisualSceneSequenceEvaluateScene `xml:"http://www.collada.org/2005/11/COLLADASchema evaluate_scene"`

}

//	If the W.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ instance.
func (me *XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_; fn != nil { fn(me) }
	for _, x := range me.EvaluateScenes { x.Walk() }
 }

//	Nodes embody the hierarchical relationship of elements in the scene.
//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type TxsdRotate struct {
	XsdGoPkgValue Tfloat4 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdRotate function is not nil (ie. was set by outside code), calls it with this TxsdRotate instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRotate instance.
func (me *TxsdRotate) Walk ()  { 
	if fn := W.TxsdRotate; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Rotate struct {
//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotates []*TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`

}

//	If the W.XsdGoPkgHasElems_Rotate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rotate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rotate instance.
func (me *XsdGoPkgHasElems_Rotate) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Rotate; fn != nil { fn(me) }
	for _, x := range me.Rotates { x.Walk() }
 }

//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasElems_InstanceNode struct {
//	The instance_node element declares the instantiation of a COLLADA node resource.
	NodeInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`

}

//	If the W.XsdGoPkgHasElems_InstanceNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceNode instance.
func (me *XsdGoPkgHasElems_InstanceNode) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceNode; fn != nil { fn(me) }
	for _, x := range me.NodeInstances { x.Walk() }
 }

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElems_InstanceLight struct {
//	The instance_light element declares the instantiation of a COLLADA light resource.
	LightInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`

}

//	If the W.XsdGoPkgHasElems_InstanceLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceLight instance.
func (me *XsdGoPkgHasElems_InstanceLight) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceLight; fn != nil { fn(me) }
	for _, x := range me.LightInstances { x.Walk() }
 }

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
type XsdGoPkgHasAttr_Layer_TListOfNames_ struct {
//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
	Layer TListOfNames `xml:"http://www.collada.org/2005/11/COLLADASchema layer,attr"`

}

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
//	The instance_material element declares the instantiation of a COLLADA material resource.
//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
//	The input_semantic attribute specifies which input semantic to bind.
type XsdGoPkgHasAttr_InputSemantic_XsdtNCName_ struct {
//	The input_semantic attribute specifies which input semantic to bind.
	InputSemantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema input_semantic,attr"`

}

//	The input_set attribute specifies which input set to bind.
type XsdGoPkgHasAttr_InputSet_Tuint_ struct {
//	The input_set attribute specifies which input set to bind.
	InputSet Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema input_set,attr"`

}

type TxsdInstanceMaterialSequenceBindVertexInput struct {
//	The input_semantic attribute specifies which input semantic to bind.
	XsdGoPkgHasAttr_InputSemantic_XsdtNCName_

//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

//	The input_set attribute specifies which input set to bind.
	XsdGoPkgHasAttr_InputSet_Tuint_

}

//	If the W.TxsdInstanceMaterialSequenceBindVertexInput function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialSequenceBindVertexInput instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialSequenceBindVertexInput instance.
func (me *TxsdInstanceMaterialSequenceBindVertexInput) Walk ()  { 
	if fn := W.TxsdInstanceMaterialSequenceBindVertexInput; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ struct {
//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	BindVertexInputs []*TxsdInstanceMaterialSequenceBindVertexInput `xml:"http://www.collada.org/2005/11/COLLADASchema bind_vertex_input"`

}

//	If the W.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ instance.
func (me *XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_; fn != nil { fn(me) }
	for _, x := range me.BindVertexInputs { x.Walk() }
 }

//	The bind element binds values to effect parameters upon instantiation.
type TxsdInstanceMaterialSequenceBind struct {
//	The target attribute specifies the location of the value to bind to the specified semantic.
//	This text string is a path-name following a simple syntax described in the “Addressing Syntax”
//	section.
	XsdGoPkgHasAttr_Target_XsdtToken_

//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

}

//	If the W.TxsdInstanceMaterialSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialSequenceBind instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialSequenceBind instance.
func (me *TxsdInstanceMaterialSequenceBind) Walk ()  { 
	if fn := W.TxsdInstanceMaterialSequenceBind; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ struct {
//	The bind element binds values to effect parameters upon instantiation.
	Binds []*TxsdInstanceMaterialSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

//	If the W.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_; fn != nil { fn(me) }
	for _, x := range me.Binds { x.Walk() }
 }

//	The target attribute specifies the URL of the location of the object to instantiate.
type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
//	The target attribute specifies the URL of the location of the object to instantiate.
	Target xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`

}

type TxsdInstanceMaterial struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_

//	The bind element binds values to effect parameters upon instantiation.
	XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_

//	The target attribute specifies the URL of the location of the object to instantiate.
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

}

//	If the W.TxsdInstanceMaterial function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterial instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterial instance.
func (me *TxsdInstanceMaterial) Walk ()  { 
	if fn := W.TxsdInstanceMaterial; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_.Walk()
	me.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_.Walk()
 }

type XsdGoPkgHasElems_InstanceMaterial struct {
//	The instance_material element declares the instantiation of a COLLADA material resource.
	MaterialInstances []*TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`

}

//	If the W.XsdGoPkgHasElems_InstanceMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceMaterial instance.
func (me *XsdGoPkgHasElems_InstanceMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceMaterial; fn != nil { fn(me) }
	for _, x := range me.MaterialInstances { x.Walk() }
 }

type TxsdBindMaterialSequenceTechniqueCommon struct {
//	The instance_material element specifies the information needed to bind a geometry
//	to a material. This element must appear at least once.
	XsdGoPkgHasElems_InstanceMaterial

}

//	If the W.TxsdBindMaterialSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdBindMaterialSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdBindMaterialSequenceTechniqueCommon instance.
func (me *TxsdBindMaterialSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdBindMaterialSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_InstanceMaterial.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdBindMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdBindMaterial struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_

//	The bind_material element may contain any number of param elements.
	XsdGoPkgHasElems_Param

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdBindMaterial function is not nil (ie. was set by outside code), calls it with this TxsdBindMaterial instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdBindMaterial instance.
func (me *TxsdBindMaterial) Walk ()  { 
	if fn := W.TxsdBindMaterial; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Param.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_BindMaterial struct {
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	BindMaterial *TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`

}

//	If the W.XsdGoPkgHasElem_BindMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BindMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BindMaterial instance.
func (me *XsdGoPkgHasElem_BindMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_BindMaterial; fn != nil { fn(me) }
	me.BindMaterial.Walk()
 }

//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
type XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ struct {
//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
	Skeletons []xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema skeleton"`

}

//	If the W.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_; fn != nil { fn(me) }
 }

type TxsdInstanceController struct {
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The url attribute refers to resource. This may refer to a local resource using a relative
//	URL fragment identifier that begins with the “#” character. The url attribute may refer to an
//	external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	XsdGoPkgHasElem_BindMaterial

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
	XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_

}

//	If the W.TxsdInstanceController function is not nil (ie. was set by outside code), calls it with this TxsdInstanceController instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdInstanceController instance.
func (me *TxsdInstanceController) Walk ()  { 
	if fn := W.TxsdInstanceController; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_BindMaterial.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_.Walk()
 }

type XsdGoPkgHasElems_InstanceController struct {
//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	ControllerInstances []*TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`

}

//	If the W.XsdGoPkgHasElems_InstanceController function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceController instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceController instance.
func (me *XsdGoPkgHasElems_InstanceController) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceController; fn != nil { fn(me) }
	for _, x := range me.ControllerInstances { x.Walk() }
 }

//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
//	An enumerated type specifying the acceptable node types.
type TNodeType xsdt.String

//	Returns true if the value of this enumerated TNodeType is "JOINT".
func (me TNodeType) IsJoint () bool { return me == "JOINT" }

//	This convenience method just performs a simple type conversion to TNodeType's alias type xsdt.String.
func (me TNodeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TNodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNodeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TNodeType is "NODE".
func (me TNodeType) IsNode () bool { return me == "NODE" }

//	Since TNodeType is just a simple String type, this merely returns the current string value.
func (me TNodeType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Type_TNodeType_Node struct {
//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
	Type TNodeType `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	Returns the default value for Type -- "NODE"
func (me XsdGoPkgHasAttr_Type_TNodeType_Node) TypeDefault () TNodeType { return TNodeType("NODE") }

//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type Tfloat7 TListOfFloats

//	Since Tfloat7 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat7) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat7 is just a simple String type, this merely returns the current string value.
func (me Tfloat7) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat7's alias type TListOfFloats.
func (me Tfloat7) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type TxsdSkew struct {
	XsdGoPkgValue Tfloat7 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdSkew function is not nil (ie. was set by outside code), calls it with this TxsdSkew instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdSkew instance.
func (me *TxsdSkew) Walk ()  { 
	if fn := W.TxsdSkew; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Skew struct {
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
	Skews []*TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`

}

//	If the W.XsdGoPkgHasElems_Skew function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Skew instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Skew instance.
func (me *XsdGoPkgHasElems_Skew) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Skew; fn != nil { fn(me) }
	for _, x := range me.Skews { x.Walk() }
 }

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type TxsdLookat struct {
	XsdGoPkgValue Tfloat3X3 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdLookat function is not nil (ie. was set by outside code), calls it with this TxsdLookat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdLookat instance.
func (me *TxsdLookat) Walk ()  { 
	if fn := W.TxsdLookat; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Lookat struct {
//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
	Lookats []*TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`

}

//	If the W.XsdGoPkgHasElems_Lookat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lookat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lookat instance.
func (me *XsdGoPkgHasElems_Lookat) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Lookat; fn != nil { fn(me) }
	for _, x := range me.Lookats { x.Walk() }
 }

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
//	The TargetableFloat3 type is used to represent elements which contain a float3 value which can
//	be targeted for animation.
type TargetableFloat3 struct {
	XsdGoPkgValue Tfloat3 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TargetableFloat3 function is not nil (ie. was set by outside code), calls it with this TargetableFloat3 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TargetableFloat3 instance.
func (me *TargetableFloat3) Walk ()  { 
	if fn := W.TargetableFloat3; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Scale struct {
//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
	Scales []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`

}

//	If the W.XsdGoPkgHasElems_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scale instance.
func (me *XsdGoPkgHasElems_Scale) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Scale; fn != nil { fn(me) }
	for _, x := range me.Scales { x.Walk() }
 }

//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type TxsdMatrix struct {
	XsdGoPkgValue Tfloat4X4 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdMatrix function is not nil (ie. was set by outside code), calls it with this TxsdMatrix instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdMatrix instance.
func (me *TxsdMatrix) Walk ()  { 
	if fn := W.TxsdMatrix; fn != nil { fn(me) }
 }

type XsdGoPkgHasElems_Matrix struct {
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrixs []*TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`

}

//	If the W.XsdGoPkgHasElems_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Matrix instance.
func (me *XsdGoPkgHasElems_Matrix) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Matrix; fn != nil { fn(me) }
	for _, x := range me.Matrixs { x.Walk() }
 }

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElems_Translate struct {
//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
	Translates []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`

}

//	If the W.XsdGoPkgHasElems_Translate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Translate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Translate instance.
func (me *XsdGoPkgHasElems_Translate) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Translate; fn != nil { fn(me) }
	for _, x := range me.Translates { x.Walk() }
 }

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElems_InstanceCamera struct {
//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	CameraInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`

}

//	If the W.XsdGoPkgHasElems_InstanceCamera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceCamera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceCamera instance.
func (me *XsdGoPkgHasElems_InstanceCamera) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceCamera; fn != nil { fn(me) }
	for _, x := range me.CameraInstances { x.Walk() }
 }

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
type TxsdInstanceGeometry struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	XsdGoPkgHasElem_BindMaterial

//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

}

//	If the W.TxsdInstanceGeometry function is not nil (ie. was set by outside code), calls it with this TxsdInstanceGeometry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdInstanceGeometry instance.
func (me *TxsdInstanceGeometry) Walk ()  { 
	if fn := W.TxsdInstanceGeometry; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_BindMaterial.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_InstanceGeometry struct {
//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	GeometryInstances []*TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`

}

//	If the W.XsdGoPkgHasElems_InstanceGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceGeometry instance.
func (me *XsdGoPkgHasElems_InstanceGeometry) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceGeometry; fn != nil { fn(me) }
	for _, x := range me.GeometryInstances { x.Walk() }
 }

type TxsdNode struct {
//	The node element may be hierarchical and be the parent of any number of other node elements.
	XsdGoPkgHasElems_Node

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
	XsdGoPkgHasAttr_Layer_TListOfNames_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The node element may instance any number of controller objects.
	XsdGoPkgHasElems_InstanceController

//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
	XsdGoPkgHasAttr_Type_TNodeType_Node

//	The node element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The node element may contain any number of skew elements.
	XsdGoPkgHasElems_Skew

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The node element may contain any number of lookat elements.
	XsdGoPkgHasElems_Lookat

//	The node element may contain any number of scale elements.
	XsdGoPkgHasElems_Scale

//	The node element may contain any number of matrix elements.
	XsdGoPkgHasElems_Matrix

//	The node element may contain any number of translate elements.
	XsdGoPkgHasElems_Translate

//	The node element may instance any number of camera objects.
	XsdGoPkgHasElems_InstanceCamera

//	The node element may instance any number of geometry objects.
	XsdGoPkgHasElems_InstanceGeometry

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The node element may contain any number of rotate elements.
	XsdGoPkgHasElems_Rotate

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The node element may instance any number of node elements or hierarchies objects.
	XsdGoPkgHasElems_InstanceNode

//	The node element may instance any number of light objects.
	XsdGoPkgHasElems_InstanceLight

}

//	If the W.TxsdNode function is not nil (ie. was set by outside code), calls it with this TxsdNode instance as the single argument. Then calls the Walk() method on 13/19 embed(s) and 0/0 field(s) belonging to this TxsdNode instance.
func (me *TxsdNode) Walk ()  { 
	if fn := W.TxsdNode; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_InstanceController.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Skew.Walk()
	me.XsdGoPkgHasElems_Lookat.Walk()
	me.XsdGoPkgHasElems_Scale.Walk()
	me.XsdGoPkgHasElems_Matrix.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
	me.XsdGoPkgHasElems_InstanceCamera.Walk()
	me.XsdGoPkgHasElems_InstanceGeometry.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
	me.XsdGoPkgHasElems_InstanceNode.Walk()
	me.XsdGoPkgHasElems_InstanceLight.Walk()
 }

type XsdGoPkgHasElems_Node struct {
//	Nodes embody the hierarchical relationship of elements in the scene.
	Nodes []*TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`

}

//	If the W.XsdGoPkgHasElems_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Node instance.
func (me *XsdGoPkgHasElems_Node) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Node; fn != nil { fn(me) }
	for _, x := range me.Nodes { x.Walk() }
 }

type TxsdVisualScene struct {
//	The id attribute is a text string containing the unique identifier of this element. This
//	value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The visual_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
	XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_

//	The visual_scene element must have at least one node element.
	XsdGoPkgHasElems_Node

}

//	If the W.TxsdVisualScene function is not nil (ie. was set by outside code), calls it with this TxsdVisualScene instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdVisualScene instance.
func (me *TxsdVisualScene) Walk ()  { 
	if fn := W.TxsdVisualScene; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_.Walk()
	me.XsdGoPkgHasElems_Node.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_VisualScene struct {
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
	VisualScenes []*TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`

}

//	If the W.XsdGoPkgHasElems_VisualScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VisualScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VisualScene instance.
func (me *XsdGoPkgHasElems_VisualScene) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_VisualScene; fn != nil { fn(me) }
	for _, x := range me.VisualScenes { x.Walk() }
 }

type TxsdLibraryVisualScenes struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There must be at least one visual_scene element.
	XsdGoPkgHasElems_VisualScene

//	The library_visual_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdLibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryVisualScenes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryVisualScenes instance.
func (me *TxsdLibraryVisualScenes) Walk ()  { 
	if fn := W.TxsdLibraryVisualScenes; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_VisualScene.Walk()
 }

type XsdGoPkgHasElems_LibraryVisualScenes struct {
//	The library_visual_scenes element declares a module of visual_scene elements.
	VisualScenesLibraries []*TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`

}

//	If the W.XsdGoPkgHasElems_LibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryVisualScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryVisualScenes instance.
func (me *XsdGoPkgHasElems_LibraryVisualScenes) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryVisualScenes; fn != nil { fn(me) }
	for _, x := range me.VisualScenesLibraries { x.Walk() }
 }

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
type XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ struct {
//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
	InstanceVisualScene *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_visual_scene"`

}

//	If the W.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_; fn != nil { fn(me) }
	me.InstanceVisualScene.Walk()
 }

//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
type XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ struct {
//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
	PhysicsSceneInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_scene"`

}

//	If the W.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_; fn != nil { fn(me) }
	for _, x := range me.PhysicsSceneInstances { x.Walk() }
 }

type TxsdColladaSequenceScene struct {
//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_

//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdColladaSequenceScene function is not nil (ie. was set by outside code), calls it with this TxsdColladaSequenceScene instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdColladaSequenceScene instance.
func (me *TxsdColladaSequenceScene) Walk ()  { 
	if fn := W.TxsdColladaSequenceScene; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_.Walk()
	me.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ struct {
//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
	Scene *TxsdColladaSequenceScene `xml:"http://www.collada.org/2005/11/COLLADASchema scene"`

}

//	If the W.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance.
func (me *XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_; fn != nil { fn(me) }
	me.Scene.Walk()
 }

//	The library_force_fields element declares a module of force_field elements.
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type TxsdForceField struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The force_field element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

}

//	If the W.TxsdForceField function is not nil (ie. was set by outside code), calls it with this TxsdForceField instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdForceField instance.
func (me *TxsdForceField) Walk ()  { 
	if fn := W.TxsdForceField; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
 }

type XsdGoPkgHasElems_ForceField struct {
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceFields []*TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`

}

//	If the W.XsdGoPkgHasElems_ForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceField instance.
func (me *XsdGoPkgHasElems_ForceField) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ForceField; fn != nil { fn(me) }
	for _, x := range me.ForceFields { x.Walk() }
 }

type TxsdLibraryForceFields struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one force_field element.
	XsdGoPkgHasElems_ForceField

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_force_fields element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdLibraryForceFields function is not nil (ie. was set by outside code), calls it with this TxsdLibraryForceFields instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryForceFields instance.
func (me *TxsdLibraryForceFields) Walk ()  { 
	if fn := W.TxsdLibraryForceFields; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_ForceField.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryForceFields struct {
//	The library_force_fields element declares a module of force_field elements.
	ForceFieldsLibraries []*TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`

}

//	If the W.XsdGoPkgHasElems_LibraryForceFields function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryForceFields instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryForceFields instance.
func (me *XsdGoPkgHasElems_LibraryForceFields) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryForceFields; fn != nil { fn(me) }
	for _, x := range me.ForceFieldsLibraries { x.Walk() }
 }

//	The library_lights element declares a module of light elements.
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 struct {
//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	QuadraticAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema quadratic_attenuation"`

}

//	If the W.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00; fn != nil { fn(me) }
	me.QuadraticAttenuation.Walk()
 }

//	Returns the default value for QuadraticAttenuation -- 0.0
func (me XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) QuadraticAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 struct {
//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	LinearAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema linear_attenuation"`

}

//	Returns the default value for LinearAttenuation -- 0.0
func (me XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) LinearAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	If the W.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00; fn != nil { fn(me) }
	me.LinearAttenuation.Walk()
 }

//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

//	If the W.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_; fn != nil { fn(me) }
	me.Color.Walk()
 }

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 struct {
//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	ConstantAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema constant_attenuation"`

}

//	If the W.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10; fn != nil { fn(me) }
	me.ConstantAttenuation.Walk()
 }

//	Returns the default value for ConstantAttenuation -- 1.0
func (me XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) ConstantAttenuationDefault () Tfloat { return Tfloat(1.0) }

type TxsdLightSequenceTechniqueCommonChoicePoint struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

}

//	If the W.TxsdLightSequenceTechniqueCommonChoicePoint function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoicePoint instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoicePoint instance.
func (me *TxsdLightSequenceTechniqueCommonChoicePoint) Walk ()  { 
	if fn := W.TxsdLightSequenceTechniqueCommonChoicePoint; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk()
	me.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10.Walk()
	me.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00.Walk()
 }

type XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ struct {
//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
	Point *TxsdLightSequenceTechniqueCommonChoicePoint `xml:"http://www.collada.org/2005/11/COLLADASchema point"`

}

//	If the W.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ instance.
func (me *XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_; fn != nil { fn(me) }
	me.Point.Walk()
 }

//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

//	If the W.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_; fn != nil { fn(me) }
	me.Color.Walk()
 }

type TxsdLightSequenceTechniqueCommonChoiceAmbient struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

}

//	If the W.TxsdLightSequenceTechniqueCommonChoiceAmbient function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceAmbient instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceAmbient instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceAmbient) Walk ()  { 
	if fn := W.TxsdLightSequenceTechniqueCommonChoiceAmbient; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk()
 }

type XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ struct {
//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	Ambient *TxsdLightSequenceTechniqueCommonChoiceAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

//	If the W.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ instance.
func (me *XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_; fn != nil { fn(me) }
	me.Ambient.Walk()
 }

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 struct {
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	FalloffExponent *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_exponent"`

}

//	Returns the default value for FalloffExponent -- 0.0
func (me XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00) FalloffExponentDefault () Tfloat { return Tfloat(0.0) }

//	If the W.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00; fn != nil { fn(me) }
	me.FalloffExponent.Walk()
 }

//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

//	If the W.XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_; fn != nil { fn(me) }
	me.Color.Walk()
 }

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 struct {
//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	ConstantAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema constant_attenuation"`

}

//	Returns the default value for ConstantAttenuation -- 1.0
func (me XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) ConstantAttenuationDefault () Tfloat { return Tfloat(1.0) }

//	If the W.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10; fn != nil { fn(me) }
	me.ConstantAttenuation.Walk()
 }

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 struct {
//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	LinearAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema linear_attenuation"`

}

//	If the W.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00; fn != nil { fn(me) }
	me.LinearAttenuation.Walk()
 }

//	Returns the default value for LinearAttenuation -- 0.0
func (me XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) LinearAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 struct {
//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	FalloffAngle *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_angle"`

}

//	If the W.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 instance.
func (me *XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800; fn != nil { fn(me) }
	me.FalloffAngle.Walk()
 }

//	Returns the default value for FalloffAngle -- 180.0
func (me XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800) FalloffAngleDefault () Tfloat { return Tfloat(180.0) }

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 struct {
//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	QuadraticAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema quadratic_attenuation"`

}

//	Returns the default value for QuadraticAttenuation -- 0.0
func (me XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) QuadraticAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	If the W.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00; fn != nil { fn(me) }
	me.QuadraticAttenuation.Walk()
 }

type TxsdLightSequenceTechniqueCommonChoiceSpot struct {
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00

//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

}

//	If the W.TxsdLightSequenceTechniqueCommonChoiceSpot function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceSpot instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceSpot instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceSpot) Walk ()  { 
	if fn := W.TxsdLightSequenceTechniqueCommonChoiceSpot; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk()
	me.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10.Walk()
	me.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800.Walk()
 }

type XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ struct {
//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
	Spot *TxsdLightSequenceTechniqueCommonChoiceSpot `xml:"http://www.collada.org/2005/11/COLLADASchema spot"`

}

//	If the W.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ instance.
func (me *XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_; fn != nil { fn(me) }
	me.Spot.Walk()
 }

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

//	If the W.XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_; fn != nil { fn(me) }
	me.Color.Walk()
 }

type TxsdLightSequenceTechniqueCommonChoiceDirectional struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

}

//	If the W.TxsdLightSequenceTechniqueCommonChoiceDirectional function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceDirectional instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceDirectional instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceDirectional) Walk ()  { 
	if fn := W.TxsdLightSequenceTechniqueCommonChoiceDirectional; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk()
 }

type XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ struct {
//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
	Directional *TxsdLightSequenceTechniqueCommonChoiceDirectional `xml:"http://www.collada.org/2005/11/COLLADASchema directional"`

}

//	If the W.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ instance.
func (me *XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_; fn != nil { fn(me) }
	me.Directional.Walk()
 }

type TxsdLightSequenceTechniqueCommon struct {
//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_

//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_

}

//	If the W.TxsdLightSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommon instance.
func (me *TxsdLightSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdLightSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_.Walk()
	me.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_.Walk()
	me.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_.Walk()
	me.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
	TechniqueCommon *TxsdLightSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdLight struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The light element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdLight function is not nil (ie. was set by outside code), calls it with this TxsdLight instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdLight instance.
func (me *TxsdLight) Walk ()  { 
	if fn := W.TxsdLight; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_Light struct {
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
	Lights []*TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`

}

//	If the W.XsdGoPkgHasElems_Light function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Light instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Light instance.
func (me *XsdGoPkgHasElems_Light) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Light; fn != nil { fn(me) }
	for _, x := range me.Lights { x.Walk() }
 }

type TxsdLibraryLights struct {
//	The library_lights element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one light element.
	XsdGoPkgHasElems_Light

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

//	If the W.TxsdLibraryLights function is not nil (ie. was set by outside code), calls it with this TxsdLibraryLights instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryLights instance.
func (me *TxsdLibraryLights) Walk ()  { 
	if fn := W.TxsdLibraryLights; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Light.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryLights struct {
//	The library_lights element declares a module of light elements.
	LightsLibraries []*TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`

}

//	If the W.XsdGoPkgHasElems_LibraryLights function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryLights instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryLights instance.
func (me *XsdGoPkgHasElems_LibraryLights) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryLights; fn != nil { fn(me) }
	for _, x := range me.LightsLibraries { x.Walk() }
 }

//	The library_physics_models element declares a module of physics_model elements.
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
//	This element allows instancing physics model within another physics model, or in a physics scene.
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElems_InstanceForceField struct {
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	ForceFieldInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`

}

//	If the W.XsdGoPkgHasElems_InstanceForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceForceField instance.
func (me *XsdGoPkgHasElems_InstanceForceField) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceForceField; fn != nil { fn(me) }
	for _, x := range me.ForceFieldInstances { x.Walk() }
 }

//	This element allows instancing a rigid_body within an instance_physics_model.
//	The body attribute indicates which rigid_body to instantiate. Required attribute.
type XsdGoPkgHasAttr_Body_XsdtNCName_ struct {
//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	Body xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema body,attr"`

}

//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
type XsdGoPkgHasElem_PhysicsMaterial struct {
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterial *TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`

}

//	If the W.XsdGoPkgHasElem_PhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsMaterial instance.
func (me *XsdGoPkgHasElem_PhysicsMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_PhysicsMaterial; fn != nil { fn(me) }
	me.PhysicsMaterial.Walk()
 }

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
type XsdGoPkgHasElem_InstanceGeometry struct {
//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	InstanceGeometry *TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`

}

//	If the W.XsdGoPkgHasElem_InstanceGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceGeometry instance.
func (me *XsdGoPkgHasElem_InstanceGeometry) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceGeometry; fn != nil { fn(me) }
	me.InstanceGeometry.Walk()
 }

//	An infinite plane primitive.
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
type XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ struct {
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	Equation Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema equation"`

}

//	If the W.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_; fn != nil { fn(me) }
 }

type TxsdPlane struct {
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdPlane function is not nil (ie. was set by outside code), calls it with this TxsdPlane instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPlane instance.
func (me *TxsdPlane) Walk ()  { 
	if fn := W.TxsdPlane; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_Plane struct {
//	An infinite plane primitive.
	Plane *TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`

}

//	If the W.XsdGoPkgHasElem_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Plane instance.
func (me *XsdGoPkgHasElem_Plane) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Plane; fn != nil { fn(me) }
	me.Plane.Walk()
 }

type XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ struct {
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`

}

//	If the W.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_; fn != nil { fn(me) }
	me.Mass.Walk()
 }

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
//	A float value that represents the length of the cylinder along the Y axis.
type XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ struct {
//	A float value that represents the length of the cylinder along the Y axis.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`

}

//	If the W.XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ instance.
func (me *XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_; fn != nil { fn(me) }
 }

//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
type XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
	Radius1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius1"`

}

//	If the W.XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_; fn != nil { fn(me) }
 }

//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
type XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
	Radius2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius2"`

}

//	If the W.XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_; fn != nil { fn(me) }
 }

type TxsdTaperedCylinder struct {
//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_

//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_

}

//	If the W.TxsdTaperedCylinder function is not nil (ie. was set by outside code), calls it with this TxsdTaperedCylinder instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdTaperedCylinder instance.
func (me *TxsdTaperedCylinder) Walk ()  { 
	if fn := W.TxsdTaperedCylinder; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_.Walk()
	me.XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_.Walk()
 }

type XsdGoPkgHasElem_TaperedCylinder struct {
//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinder *TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`

}

//	If the W.XsdGoPkgHasElem_TaperedCylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaperedCylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaperedCylinder instance.
func (me *XsdGoPkgHasElem_TaperedCylinder) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_TaperedCylinder; fn != nil { fn(me) }
	me.TaperedCylinder.Walk()
 }

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
//	float2 values that represent the radii of the cylinder.
type XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_ struct {
//	float2 values that represent the radii of the cylinder.
	Radius Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`

}

//	If the W.XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_; fn != nil { fn(me) }
 }

//	A float value that represents the length of the cylinder along the Y axis.
type XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_ struct {
//	A float value that represents the length of the cylinder along the Y axis.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`

}

//	If the W.XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_ instance.
func (me *XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_; fn != nil { fn(me) }
 }

type TxsdCylinder struct {
//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_

//	float2 values that represent the radii of the cylinder.
	XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdCylinder function is not nil (ie. was set by outside code), calls it with this TxsdCylinder instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCylinder instance.
func (me *TxsdCylinder) Walk ()  { 
	if fn := W.TxsdCylinder; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_.Walk()
 }

type XsdGoPkgHasElem_Cylinder struct {
//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinder *TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`

}

//	If the W.XsdGoPkgHasElem_Cylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cylinder instance.
func (me *XsdGoPkgHasElem_Cylinder) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Cylinder; fn != nil { fn(me) }
	me.Cylinder.Walk()
 }

//	A centered sphere primitive.
//	A float value that represents the radius of the sphere
type XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ struct {
//	A float value that represents the radius of the sphere
	Radius Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`

}

//	If the W.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ instance.
func (me *XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_; fn != nil { fn(me) }
 }

type TxsdSphere struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the radius of the sphere
	XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_

}

//	If the W.TxsdSphere function is not nil (ie. was set by outside code), calls it with this TxsdSphere instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSphere instance.
func (me *TxsdSphere) Walk ()  { 
	if fn := W.TxsdSphere; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_Sphere struct {
//	A centered sphere primitive.
	Sphere *TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`

}

//	If the W.XsdGoPkgHasElem_Sphere function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sphere instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sphere instance.
func (me *XsdGoPkgHasElem_Sphere) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Sphere; fn != nil { fn(me) }
	me.Sphere.Walk()
 }

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type XsdGoPkgHasElem_InstancePhysicsMaterial struct {
//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
	InstancePhysicsMaterial *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`

}

//	If the W.XsdGoPkgHasElem_InstancePhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstancePhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstancePhysicsMaterial instance.
func (me *XsdGoPkgHasElem_InstancePhysicsMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstancePhysicsMaterial; fn != nil { fn(me) }
	me.InstancePhysicsMaterial.Walk()
 }

//	A capsule primitive that is centered on and aligned with the local Y axis.
//	Two float values that represent the radii of the capsule (it may be elliptical)
type XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ struct {
//	Two float values that represent the radii of the capsule (it may be elliptical)
	Radius Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`

}

//	If the W.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_; fn != nil { fn(me) }
 }

//	A float value that represents the length of the line segment connecting the centers
//	of the capping hemispheres.
type XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_ struct {
//	A float value that represents the length of the line segment connecting the centers
//	of the capping hemispheres.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`

}

//	If the W.XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_ instance.
func (me *XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_; fn != nil { fn(me) }
 }

type TxsdCapsule struct {
//	A float value that represents the length of the line segment connecting the centers
//	of the capping hemispheres.
	XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Two float values that represent the radii of the capsule (it may be elliptical)
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_

}

//	If the W.TxsdCapsule function is not nil (ie. was set by outside code), calls it with this TxsdCapsule instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCapsule instance.
func (me *TxsdCapsule) Walk ()  { 
	if fn := W.TxsdCapsule; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_.Walk()
 }

type XsdGoPkgHasElem_Capsule struct {
//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsule *TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`

}

//	If the W.XsdGoPkgHasElem_Capsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Capsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Capsule instance.
func (me *XsdGoPkgHasElem_Capsule) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Capsule; fn != nil { fn(me) }
	me.Capsule.Walk()
 }

type XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ struct {
	Density *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema density"`

}

//	If the W.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_; fn != nil { fn(me) }
	me.Density.Walk()
 }

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element. This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow) Walk ()  { 
	if fn := W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	Hollow *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`

}

//	If the W.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_; fn != nil { fn(me) }
	me.Hollow.Walk()
 }

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
//	A float value that represents the length of the line segment connecting the centers of the
//	capping hemispheres.
type XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ struct {
//	A float value that represents the length of the line segment connecting the centers of the
//	capping hemispheres.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`

}

//	If the W.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ instance.
func (me *XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_; fn != nil { fn(me) }
 }

//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
type XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	Radius2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius2"`

}

//	If the W.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_; fn != nil { fn(me) }
 }

//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
type XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	Radius1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius1"`

}

//	If the W.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_; fn != nil { fn(me) }
 }

type TxsdTaperedCapsule struct {
//	A float value that represents the length of the line segment connecting the centers of the
//	capping hemispheres.
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_

//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_

//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdTaperedCapsule function is not nil (ie. was set by outside code), calls it with this TxsdTaperedCapsule instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdTaperedCapsule instance.
func (me *TxsdTaperedCapsule) Walk ()  { 
	if fn := W.TxsdTaperedCapsule; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_.Walk()
	me.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_.Walk()
	me.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_TaperedCapsule struct {
//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsule *TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`

}

//	If the W.XsdGoPkgHasElem_TaperedCapsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaperedCapsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaperedCapsule instance.
func (me *XsdGoPkgHasElem_TaperedCapsule) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_TaperedCapsule; fn != nil { fn(me) }
	me.TaperedCapsule.Walk()
 }

//	An axis-aligned, centered box primitive.
//	3 float values that represent the extents of the box
type XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ struct {
//	3 float values that represent the extents of the box
	HalfExtents Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema half_extents"`

}

//	If the W.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_; fn != nil { fn(me) }
 }

type TxsdBox struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	3 float values that represent the extents of the box
	XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_

}

//	If the W.TxsdBox function is not nil (ie. was set by outside code), calls it with this TxsdBox instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdBox instance.
func (me *TxsdBox) Walk ()  { 
	if fn := W.TxsdBox; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_Box struct {
//	An axis-aligned, centered box primitive.
	Box *TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`

}

//	If the W.XsdGoPkgHasElem_Box function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Box instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Box instance.
func (me *XsdGoPkgHasElem_Box) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Box; fn != nil { fn(me) }
	me.Box.Walk()
 }

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape struct {
	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElem_TaperedCylinder

	XsdGoPkgHasElems_Translate

	XsdGoPkgHasElems_Rotate

	XsdGoPkgHasElem_Cylinder

	XsdGoPkgHasElem_Sphere

	XsdGoPkgHasElem_InstancePhysicsMaterial

	XsdGoPkgHasElem_Capsule

	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_

	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

	XsdGoPkgHasElem_TaperedCapsule

	XsdGoPkgHasElem_Box

	XsdGoPkgHasElem_InstanceGeometry

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_Plane

	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

}

//	If the W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape) Walk ()  { 
	if fn := W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_PhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_TaperedCylinder.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
	me.XsdGoPkgHasElem_Cylinder.Walk()
	me.XsdGoPkgHasElem_Sphere.Walk()
	me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_Capsule.Walk()
	me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk()
	me.XsdGoPkgHasElem_TaperedCapsule.Walk()
	me.XsdGoPkgHasElem_Box.Walk()
	me.XsdGoPkgHasElem_InstanceGeometry.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Plane.Walk()
 }

type XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ struct {
	Shapes []*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`

}

//	If the W.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_; fn != nil { fn(me) }
	for _, x := range me.Shapes { x.Walk() }
 }

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
type XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 struct {
//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
	AngularVelocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema angular_velocity"`

}

//	Returns the default value for AngularVelocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000) AngularVelocityDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	If the W.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 instance.
func (me *XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ struct {
	Inertia *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema inertia"`

}

//	If the W.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_; fn != nil { fn(me) }
	me.Inertia.Walk()
 }

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic) Walk ()  { 
	if fn := W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
	Dynamic *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`

}

//	If the W.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_; fn != nil { fn(me) }
	me.Dynamic.Walk()
 }

type XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ struct {
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`

}

//	If the W.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_; fn != nil { fn(me) }
	me.Mass.Walk()
 }

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_Translate

	XsdGoPkgHasElems_Rotate

}

//	If the W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame) Walk ()  { 
	if fn := W.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Translate.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
 }

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
	MassFrame *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`

}

//	If the W.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_; fn != nil { fn(me) }
	me.MassFrame.Walk()
 }

//	Specifies the initial linear velocity of the rigid_body instance.
type XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 struct {
//	Specifies the initial linear velocity of the rigid_body instance.
	Velocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema velocity"`

}

//	Returns the default value for Velocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000) VelocityDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	If the W.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 instance.
func (me *XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000; fn != nil { fn(me) }
 }

type TxsdInstanceRigidBodySequenceTechniqueCommon struct {
	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_

	XsdGoPkgHasElem_InstancePhysicsMaterial

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000

	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_

	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_

	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_

//	Specifies the initial linear velocity of the rigid_body instance.
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000

}

//	If the W.TxsdInstanceRigidBodySequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommon instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdInstanceRigidBodySequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_.Walk()
	me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000.Walk()
	me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_.Walk()
	me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_.Walk()
	me.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_.Walk()
	me.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000.Walk()
	me.XsdGoPkgHasElem_PhysicsMaterial.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ struct {
//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdInstanceRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdInstanceRigidBody struct {
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	XsdGoPkgHasAttr_Body_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The target attribute indicates which node is influenced by this rigid_body instance.
//	Required attribute
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_

}

//	If the W.TxsdInstanceRigidBody function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBody instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBody instance.
func (me *TxsdInstanceRigidBody) Walk ()  { 
	if fn := W.TxsdInstanceRigidBody; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_InstanceRigidBody struct {
//	This element allows instancing a rigid_body within an instance_physics_model.
	RigidBodyInstances []*TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`

}

//	If the W.XsdGoPkgHasElems_InstanceRigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceRigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceRigidBody instance.
func (me *XsdGoPkgHasElems_InstanceRigidBody) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceRigidBody; fn != nil { fn(me) }
	for _, x := range me.RigidBodyInstances { x.Walk() }
 }

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
type XsdGoPkgHasAttr_Parent_XsdtAnyURI_ struct {
//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
	Parent xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema parent,attr"`

}

//	This element allows instancing a rigid_constraint within an instance_physics_model.
//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
type XsdGoPkgHasAttr_Constraint_XsdtNCName_ struct {
//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	Constraint xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema constraint,attr"`

}

type TxsdInstanceRigidConstraint struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	XsdGoPkgHasAttr_Constraint_XsdtNCName_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdInstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidConstraint instance.
func (me *TxsdInstanceRigidConstraint) Walk ()  { 
	if fn := W.TxsdInstanceRigidConstraint; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_InstanceRigidConstraint struct {
//	This element allows instancing a rigid_constraint within an instance_physics_model.
	RigidConstraintInstances []*TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`

}

//	If the W.XsdGoPkgHasElems_InstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceRigidConstraint instance.
func (me *XsdGoPkgHasElems_InstanceRigidConstraint) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceRigidConstraint; fn != nil { fn(me) }
	for _, x := range me.RigidConstraintInstances { x.Walk() }
 }

type TxsdInstancePhysicsModel struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The instance_physics_model element may instance any number of rigid_body elements.
	XsdGoPkgHasElems_InstanceRigidBody

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
	XsdGoPkgHasAttr_Parent_XsdtAnyURI_

//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The instance_physics_model element may instance any number of rigid_constraint elements.
	XsdGoPkgHasElems_InstanceRigidConstraint

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The instance_physics_model element may instance any number of force_field elements.
	XsdGoPkgHasElems_InstanceForceField

}

//	If the W.TxsdInstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this TxsdInstancePhysicsModel instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdInstancePhysicsModel instance.
func (me *TxsdInstancePhysicsModel) Walk ()  { 
	if fn := W.TxsdInstancePhysicsModel; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_InstanceRigidBody.Walk()
	me.XsdGoPkgHasElems_InstanceRigidConstraint.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_InstanceForceField.Walk()
 }

type XsdGoPkgHasElems_InstancePhysicsModel struct {
//	This element allows instancing physics model within another physics model, or in a physics scene.
	PhysicsModelInstances []*TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`

}

//	If the W.XsdGoPkgHasElems_InstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstancePhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstancePhysicsModel instance.
func (me *XsdGoPkgHasElems_InstancePhysicsModel) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstancePhysicsModel; fn != nil { fn(me) }
	for _, x := range me.PhysicsModelInstances { x.Walk() }
 }

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
//	The minimum values for the limit.
type XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 struct {
//	The minimum values for the limit.
	Min *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema min"`

}

//	Returns the default value for Min -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) MinDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	If the W.XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000; fn != nil { fn(me) }
	me.Min.Walk()
 }

//	The maximum values for the limit.
type XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 struct {
//	The maximum values for the limit.
	Max *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema max"`

}

//	Returns the default value for Max -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) MaxDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	If the W.XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000; fn != nil { fn(me) }
	me.Max.Walk()
 }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist struct {
//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000.Walk()
	me.XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000.Walk()
 }

type XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ struct {
//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	SwingConeAndTwist *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist `xml:"http://www.collada.org/2005/11/COLLADASchema swing_cone_and_twist"`

}

//	If the W.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance.
func (me *XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_; fn != nil { fn(me) }
	me.SwingConeAndTwist.Walk()
 }

//	The linear element describes linear (translational) limits along each axis.
//	The maximum values for the limit.
type XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 struct {
//	The maximum values for the limit.
	Max *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema max"`

}

//	If the W.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000; fn != nil { fn(me) }
	me.Max.Walk()
 }

//	Returns the default value for Max -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) MaxDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	The minimum values for the limit.
type XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 struct {
//	The minimum values for the limit.
	Min *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema min"`

}

//	If the W.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000; fn != nil { fn(me) }
	me.Min.Walk()
 }

//	Returns the default value for Min -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) MinDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear struct {
//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000.Walk()
	me.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000.Walk()
 }

type XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ struct {
//	The linear element describes linear (translational) limits along each axis.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`

}

//	If the W.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_; fn != nil { fn(me) }
	me.Linear.Walk()
 }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits struct {
//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_

//	The linear element describes linear (translational) limits along each axis.
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_.Walk()
	me.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_.Walk()
 }

type XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ struct {
//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
	Limits *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits `xml:"http://www.collada.org/2005/11/COLLADASchema limits"`

}

//	If the W.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ instance.
func (me *XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_; fn != nil { fn(me) }
	me.Limits.Walk()
 }

//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
type TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True struct {
//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	Enabled *TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled `xml:"http://www.collada.org/2005/11/COLLADASchema enabled"`

}

//	Returns the default value for Enabled -- true
func (me XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True) EnabledDefault () Tbool { return Tbool(true) }

//	If the W.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True instance.
func (me *XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True; fn != nil { fn(me) }
	me.Enabled.Walk()
 }

//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
//	The linear spring properties.
//	The spring's target or resting distance.
type XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 struct {
//	The spring's target or resting distance.
	TargetValue *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema target_value"`

}

//	If the W.XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00; fn != nil { fn(me) }
	me.TargetValue.Walk()
 }

//	Returns the default value for TargetValue -- 0.0
func (me XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) TargetValueDefault () Tfloat { return Tfloat(0.0) }

//	The spring damping coefficient.
type XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 struct {
//	The spring damping coefficient.
	Damping *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema damping"`

}

//	Returns the default value for Damping -- 0.0
func (me XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) DampingDefault () Tfloat { return Tfloat(0.0) }

//	If the W.XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00; fn != nil { fn(me) }
	me.Damping.Walk()
 }

//	The stiffness (also called spring coefficient) has units of force/distance.
type XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 struct {
//	The stiffness (also called spring coefficient) has units of force/distance.
	Stiffness *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema stiffness"`

}

//	If the W.XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10; fn != nil { fn(me) }
	me.Stiffness.Walk()
 }

//	Returns the default value for Stiffness -- 1.0
func (me XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) StiffnessDefault () Tfloat { return Tfloat(1.0) }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear struct {
//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00

//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

//	The stiffness (also called spring coefficient) has units of force/distance.
	XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10.Walk()
	me.XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00.Walk()
 }

type XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ struct {
//	The linear spring properties.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`

}

//	If the W.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_; fn != nil { fn(me) }
	me.Linear.Walk()
 }

//	The angular spring properties.
//	The spring damping coefficient.
type XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 struct {
//	The spring damping coefficient.
	Damping *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema damping"`

}

//	If the W.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00; fn != nil { fn(me) }
	me.Damping.Walk()
 }

//	Returns the default value for Damping -- 0.0
func (me XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) DampingDefault () Tfloat { return Tfloat(0.0) }

//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
type XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 struct {
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	Stiffness *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema stiffness"`

}

//	If the W.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10; fn != nil { fn(me) }
	me.Stiffness.Walk()
 }

//	Returns the default value for Stiffness -- 1.0
func (me XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) StiffnessDefault () Tfloat { return Tfloat(1.0) }

//	The spring's target or resting distance.
type XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 struct {
//	The spring's target or resting distance.
	TargetValue *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema target_value"`

}

//	Returns the default value for TargetValue -- 0.0
func (me XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) TargetValueDefault () Tfloat { return Tfloat(0.0) }

//	If the W.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00; fn != nil { fn(me) }
	me.TargetValue.Walk()
 }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular struct {
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10

//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00

//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00.Walk()
	me.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10.Walk()
	me.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00.Walk()
 }

type XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ struct {
//	The angular spring properties.
	Angular *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular `xml:"http://www.collada.org/2005/11/COLLADASchema angular"`

}

//	If the W.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance.
func (me *XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_; fn != nil { fn(me) }
	me.Angular.Walk()
 }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring struct {
//	The linear spring properties.
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_

//	The angular spring properties.
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_.Walk()
	me.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_.Walk()
 }

type XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ struct {
//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	Spring *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring `xml:"http://www.collada.org/2005/11/COLLADASchema spring"`

}

//	If the W.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ instance.
func (me *XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_; fn != nil { fn(me) }
	me.Spring.Walk()
 }

//	Indicates whether the attached rigid bodies may inter-penetrate.
type TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False struct {
//	Indicates whether the attached rigid bodies may inter-penetrate.
	Interpenetrate *TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate `xml:"http://www.collada.org/2005/11/COLLADASchema interpenetrate"`

}

//	Returns the default value for Interpenetrate -- false
func (me XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False) InterpenetrateDefault () Tbool { return Tbool(false) }

//	If the W.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False instance.
func (me *XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False; fn != nil { fn(me) }
	me.Interpenetrate.Walk()
 }

type TxsdRigidConstraintSequenceTechniqueCommon struct {
//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_

//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True

//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_

//	Indicates whether the attached rigid bodies may inter-penetrate.
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False

}

//	If the W.TxsdRigidConstraintSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommon instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_.Walk()
	me.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False.Walk()
	me.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_.Walk()
	me.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidConstraintSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

//	Defines an attachment to a rigid-body or a node.
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
//	physics_model.
type XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_ struct {
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
//	physics_model.
	RigidBody xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body,attr"`

}

type TxsdRigidConstraintSequenceAttachment struct {
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Rotate

//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Translate

}

//	If the W.TxsdRigidConstraintSequenceAttachment function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceAttachment instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceAttachment instance.
func (me *TxsdRigidConstraintSequenceAttachment) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceAttachment; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
 }

type XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ struct {
//	Defines an attachment to a rigid-body or a node.
	Attachment *TxsdRigidConstraintSequenceAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema attachment"`

}

//	If the W.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ instance.
func (me *XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_; fn != nil { fn(me) }
	me.Attachment.Walk()
 }

//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
type TxsdRigidConstraintSequenceRefAttachment struct {
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
//	physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_

//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Translate

//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Rotate

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdRigidConstraintSequenceRefAttachment function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceRefAttachment instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceRefAttachment instance.
func (me *TxsdRigidConstraintSequenceRefAttachment) Walk ()  { 
	if fn := W.TxsdRigidConstraintSequenceRefAttachment; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
 }

type XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ struct {
//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	RefAttachment *TxsdRigidConstraintSequenceRefAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema ref_attachment"`

}

//	If the W.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ instance.
func (me *XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_; fn != nil { fn(me) }
	me.RefAttachment.Walk()
 }

type TxsdRigidConstraint struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	Defines an attachment to a rigid-body or a node.
	XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_

//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_

}

//	If the W.TxsdRigidConstraint function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraint instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraint instance.
func (me *TxsdRigidConstraint) Walk ()  { 
	if fn := W.TxsdRigidConstraint; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_.Walk()
 }

type XsdGoPkgHasElems_RigidConstraint struct {
//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
	RigidConstraints []*TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`

}

//	If the W.XsdGoPkgHasElems_RigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RigidConstraint instance.
func (me *XsdGoPkgHasElems_RigidConstraint) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_RigidConstraint; fn != nil { fn(me) }
	for _, x := range me.RigidConstraints { x.Walk() }
 }

//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
//	If false, the rigid_body is not moveable
type TxsdRigidBodySequenceTechniqueCommonSequenceDynamic struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdRigidBodySequenceTechniqueCommonSequenceDynamic function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommonSequenceDynamic instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommonSequenceDynamic instance.
func (me *TxsdRigidBodySequenceTechniqueCommonSequenceDynamic) Walk ()  { 
	if fn := W.TxsdRigidBodySequenceTechniqueCommonSequenceDynamic; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
//	If false, the rigid_body is not moveable
	Dynamic *TxsdRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`

}

//	If the W.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_; fn != nil { fn(me) }
	me.Dynamic.Walk()
 }

//	This element allows for describing components of a rigid_body.
//	If true, the mass is distributed along the surface of the shape
type TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

//	If the W.TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow instance.
func (me *TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow) Walk ()  { 
	if fn := W.TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow; fn != nil { fn(me) }
 }

type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
//	If true, the mass is distributed along the surface of the shape
	Hollow *TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`

}

//	If the W.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_; fn != nil { fn(me) }
	me.Hollow.Walk()
 }

//	The mass of the shape.
type XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ struct {
//	The mass of the shape.
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`

}

//	If the W.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_; fn != nil { fn(me) }
	me.Mass.Walk()
 }

//	The density of the shape.
type XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_ struct {
//	The density of the shape.
	Density *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema density"`

}

//	If the W.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_; fn != nil { fn(me) }
	me.Density.Walk()
 }

type TxsdRigidBodySequenceTechniqueCommonSequenceShape struct {
//	Defines a tapered_capsule to use for this shape.
	XsdGoPkgHasElem_TaperedCapsule

//	Defines a capsule to use for this shape.
	XsdGoPkgHasElem_Capsule

//	Defines a plane to use for this shape.
	XsdGoPkgHasElem_Plane

//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Rotate

//	Defines a cyliner to use for this shape.
	XsdGoPkgHasElem_Cylinder

//	References a physics_material for the shape.
	XsdGoPkgHasElem_InstancePhysicsMaterial

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Translate

//	If true, the mass is distributed along the surface of the shape
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

//	Defines a box to use for this shape.
	XsdGoPkgHasElem_Box

//	Defines a tapered_cylinder to use for this shape.
	XsdGoPkgHasElem_TaperedCylinder

//	The mass of the shape.
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_

//	Defines a physics_material for the shape.
	XsdGoPkgHasElem_PhysicsMaterial

//	Instances a geometry to use to define this shape.
	XsdGoPkgHasElem_InstanceGeometry

//	The density of the shape.
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_

//	Defines a sphere to use for this shape.
	XsdGoPkgHasElem_Sphere

}

//	If the W.TxsdRigidBodySequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommonSequenceShape instance.
func (me *TxsdRigidBodySequenceTechniqueCommonSequenceShape) Walk ()  { 
	if fn := W.TxsdRigidBodySequenceTechniqueCommonSequenceShape; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
	me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk()
	me.XsdGoPkgHasElem_Box.Walk()
	me.XsdGoPkgHasElem_TaperedCylinder.Walk()
	me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_PhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_InstanceGeometry.Walk()
	me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_Sphere.Walk()
	me.XsdGoPkgHasElem_TaperedCapsule.Walk()
	me.XsdGoPkgHasElem_Capsule.Walk()
	me.XsdGoPkgHasElem_Plane.Walk()
	me.XsdGoPkgHasElems_Rotate.Walk()
	me.XsdGoPkgHasElem_Cylinder.Walk()
	me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk()
 }

type XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ struct {
//	This element allows for describing components of a rigid_body.
	Shapes []*TxsdRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`

}

//	If the W.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_; fn != nil { fn(me) }
	for _, x := range me.Shapes { x.Walk() }
 }

//	The total mass of the rigid-body
type XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ struct {
//	The total mass of the rigid-body
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`

}

//	If the W.XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_; fn != nil { fn(me) }
	me.Mass.Walk()
 }

//	float3 – The diagonal elements of the inertia tensor (moments of inertia), which is represented
//	in the local frame of the center of mass. See above.
type XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_ struct {
//	float3 – The diagonal elements of the inertia tensor (moments of inertia), which is represented
//	in the local frame of the center of mass. See above.
	Inertia *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema inertia"`

}

//	If the W.XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_; fn != nil { fn(me) }
	me.Inertia.Walk()
 }

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
type TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_Rotate

	XsdGoPkgHasElems_Translate

}

//	If the W.TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame instance.
func (me *TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame) Walk ()  { 
	if fn := W.TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Rotate.Walk()
	me.XsdGoPkgHasElems_Translate.Walk()
 }

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
	MassFrame *TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`

}

//	If the W.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_; fn != nil { fn(me) }
	me.MassFrame.Walk()
 }

type TxsdRigidBodySequenceTechniqueCommon struct {
//	The total mass of the rigid-body
	XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_

//	References a physics_material for the rigid_body.
	XsdGoPkgHasElem_InstancePhysicsMaterial

//	float3 – The diagonal elements of the inertia tensor (moments of inertia), which is represented
//	in the local frame of the center of mass. See above.
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_

//	If false, the rigid_body is not moveable
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_

//	Defines a physics_material for the rigid_body.
	XsdGoPkgHasElem_PhysicsMaterial

//	This element allows for describing components of a rigid_body.
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_

}

//	If the W.TxsdRigidBodySequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommon instance.
func (me *TxsdRigidBodySequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdRigidBodySequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk()
	me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_.Walk()
	me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_.Walk()
	me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_.Walk()
	me.XsdGoPkgHasElem_PhysicsMaterial.Walk()
	me.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_.Walk()
	me.XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ struct {
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdRigidBody struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdRigidBody function is not nil (ie. was set by outside code), calls it with this TxsdRigidBody instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdRigidBody instance.
func (me *TxsdRigidBody) Walk ()  { 
	if fn := W.TxsdRigidBody; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_RigidBody struct {
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBodies []*TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`

}

//	If the W.XsdGoPkgHasElems_RigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RigidBody instance.
func (me *XsdGoPkgHasElems_RigidBody) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_RigidBody; fn != nil { fn(me) }
	for _, x := range me.RigidBodies { x.Walk() }
 }

type TxsdPhysicsModel struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The physics_model may instance any number of other physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The physics_model may define any number of rigid_constraint elements.
	XsdGoPkgHasElems_RigidConstraint

//	The physics_model element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The physics_model may define any number of rigid_body elements.
	XsdGoPkgHasElems_RigidBody

}

//	If the W.TxsdPhysicsModel function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsModel instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsModel instance.
func (me *TxsdPhysicsModel) Walk ()  { 
	if fn := W.TxsdPhysicsModel; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_InstancePhysicsModel.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_RigidConstraint.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_RigidBody.Walk()
 }

type XsdGoPkgHasElems_PhysicsModel struct {
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
	PhysicsModels []*TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`

}

//	If the W.XsdGoPkgHasElems_PhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsModel instance.
func (me *XsdGoPkgHasElems_PhysicsModel) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_PhysicsModel; fn != nil { fn(me) }
	for _, x := range me.PhysicsModels { x.Walk() }
 }

type TxsdLibraryPhysicsModels struct {
//	There must be at least one physics_model element.
	XsdGoPkgHasElems_PhysicsModel

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The library_physics_models element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

//	If the W.TxsdLibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsModels instance.
func (me *TxsdLibraryPhysicsModels) Walk ()  { 
	if fn := W.TxsdLibraryPhysicsModels; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_PhysicsModel.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
 }

type XsdGoPkgHasElems_LibraryPhysicsModels struct {
//	The library_physics_models element declares a module of physics_model elements.
	PhysicsModelsLibraries []*TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`

}

//	If the W.XsdGoPkgHasElems_LibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsModels instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsModels) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryPhysicsModels; fn != nil { fn(me) }
	for _, x := range me.PhysicsModelsLibraries { x.Walk() }
 }

//	The library_geometries element declares a module of geometry elements.
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type XsdGoPkgHasElem_P struct {
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
	P TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`

}

//	If the W.XsdGoPkgHasElem_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_P instance.
func (me *XsdGoPkgHasElem_P) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_P; fn != nil { fn(me) }
 }

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
type XsdGoPkgHasAttr_Material_XsdtNCName_ struct {
//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
	Material xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema material,attr"`

}

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
type XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdTriangles struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The triangles element may have any number of p elements.
	XsdGoPkgHasElem_P

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. Optional attribute. If the material attribute is not specified then
//	the lighting and shading results are application defined.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The count attribute indicates the number of triangle primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

}

//	If the W.TxsdTriangles function is not nil (ie. was set by outside code), calls it with this TxsdTriangles instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTriangles instance.
func (me *TxsdTriangles) Walk ()  { 
	if fn := W.TxsdTriangles; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_P.Walk()
 }

type XsdGoPkgHasElems_Triangles struct {
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangleses []*TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`

}

//	If the W.XsdGoPkgHasElems_Triangles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Triangles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Triangles instance.
func (me *XsdGoPkgHasElems_Triangles) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Triangles; fn != nil { fn(me) }
	for _, x := range me.Triangleses { x.Walk() }
 }

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
type XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdLines struct {
//	The count attribute indicates the number of line primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The p element may occur once.
	XsdGoPkgHasElem_P

}

//	If the W.TxsdLines function is not nil (ie. was set by outside code), calls it with this TxsdLines instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdLines instance.
func (me *TxsdLines) Walk ()  { 
	if fn := W.TxsdLines; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_P.Walk()
	me.XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_.Walk()
 }

type XsdGoPkgHasElems_Lines struct {
//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
	Lineses []*TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`

}

//	If the W.XsdGoPkgHasElems_Lines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lines instance.
func (me *XsdGoPkgHasElems_Lines) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Lines; fn != nil { fn(me) }
	for _, x := range me.Lineses { x.Walk() }
 }

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type XsdGoPkgHasElems_P struct {
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
	Ps []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`

}

//	If the W.XsdGoPkgHasElems_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_P instance.
func (me *XsdGoPkgHasElems_P) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_P; fn != nil { fn(me) }
 }

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
type XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdTristrips struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The count attribute indicates the number of triangle strip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The tristrips element may have any number of p elements.
	XsdGoPkgHasElems_P

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_

}

//	If the W.TxsdTristrips function is not nil (ie. was set by outside code), calls it with this TxsdTristrips instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTristrips instance.
func (me *TxsdTristrips) Walk ()  { 
	if fn := W.TxsdTristrips; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_P.Walk()
	me.XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_.Walk()
 }

type XsdGoPkgHasElems_Tristrips struct {
//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristripses []*TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`

}

//	If the W.XsdGoPkgHasElems_Tristrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tristrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tristrips instance.
func (me *XsdGoPkgHasElems_Tristrips) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Tristrips; fn != nil { fn(me) }
	for _, x := range me.Tristripses { x.Walk() }
 }

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
type XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ struct {
//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
	Vcount TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema vcount"`

}

//	If the W.XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ instance.
func (me *XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_; fn != nil { fn(me) }
 }

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
type XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdPolylist struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The p element may occur once.
	XsdGoPkgHasElem_P

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_

//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_

//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

}

//	If the W.TxsdPolylist function is not nil (ie. was set by outside code), calls it with this TxsdPolylist instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdPolylist instance.
func (me *TxsdPolylist) Walk ()  { 
	if fn := W.TxsdPolylist; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_P.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_.Walk()
	me.XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_.Walk()
 }

type XsdGoPkgHasElems_Polylist struct {
//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
	Polylists []*TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`

}

//	If the W.XsdGoPkgHasElems_Polylist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Polylist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Polylist instance.
func (me *XsdGoPkgHasElems_Polylist) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Polylist; fn != nil { fn(me) }
	for _, x := range me.Polylists { x.Walk() }
 }

//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
type XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdLinestrips struct {
//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The linestrips element may have any number of p elements.
	XsdGoPkgHasElems_P

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The count attribute indicates the number of linestrip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

}

//	If the W.TxsdLinestrips function is not nil (ie. was set by outside code), calls it with this TxsdLinestrips instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdLinestrips instance.
func (me *TxsdLinestrips) Walk ()  { 
	if fn := W.TxsdLinestrips; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_P.Walk()
 }

type XsdGoPkgHasElems_Linestrips struct {
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
	Linestripses []*TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`

}

//	If the W.XsdGoPkgHasElems_Linestrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Linestrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Linestrips instance.
func (me *XsdGoPkgHasElems_Linestrips) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Linestrips; fn != nil { fn(me) }
	for _, x := range me.Linestripses { x.Walk() }
 }

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
//	The input element must occur at least one time. These inputs are local inputs.
type XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_ struct {
//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdVertices struct {
//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_

//	The id attribute is a text string containing the unique identifier of this element. This
//	value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdVertices function is not nil (ie. was set by outside code), calls it with this TxsdVertices instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdVertices instance.
func (me *TxsdVertices) Walk ()  { 
	if fn := W.TxsdVertices; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_.Walk()
 }

type XsdGoPkgHasElem_Vertices struct {
//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Vertices *TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`

}

//	If the W.XsdGoPkgHasElem_Vertices function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vertices instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vertices instance.
func (me *XsdGoPkgHasElem_Vertices) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Vertices; fn != nil { fn(me) }
	me.Vertices.Walk()
 }

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
//	The ph element descripes a polygon with holes.
//	The h element represents a hole in the polygon specified. There must be at least one h element.
type XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ struct {
//	The h element represents a hole in the polygon specified. There must be at least one h element.
	Hs []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema h"`

}

//	If the W.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ instance.
func (me *XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_; fn != nil { fn(me) }
 }

type TxsdPolygonsSequenceChoicePh struct {
//	Theere may only be one p element.
	XsdGoPkgHasElem_P

//	The h element represents a hole in the polygon specified. There must be at least one h element.
	XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_

}

//	If the W.TxsdPolygonsSequenceChoicePh function is not nil (ie. was set by outside code), calls it with this TxsdPolygonsSequenceChoicePh instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPolygonsSequenceChoicePh instance.
func (me *TxsdPolygonsSequenceChoicePh) Walk ()  { 
	if fn := W.TxsdPolygonsSequenceChoicePh; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_P.Walk()
	me.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_.Walk()
 }

type XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ struct {
//	The ph element descripes a polygon with holes.
	Phs []*TxsdPolygonsSequenceChoicePh `xml:"http://www.collada.org/2005/11/COLLADASchema ph"`

}

//	If the W.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ instance.
func (me *XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_; fn != nil { fn(me) }
	for _, x := range me.Phs { x.Walk() }
 }

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
type XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdPolygons struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The ph element descripes a polygon with holes.
	XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The p element may occur any number of times.
	XsdGoPkgHasElems_P

}

//	If the W.TxsdPolygons function is not nil (ie. was set by outside code), calls it with this TxsdPolygons instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdPolygons instance.
func (me *TxsdPolygons) Walk ()  { 
	if fn := W.TxsdPolygons; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_P.Walk()
	me.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_.Walk()
 }

type XsdGoPkgHasElems_Polygons struct {
//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygonses []*TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`

}

//	If the W.XsdGoPkgHasElems_Polygons function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Polygons instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Polygons instance.
func (me *XsdGoPkgHasElems_Polygons) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Polygons; fn != nil { fn(me) }
	for _, x := range me.Polygonses { x.Walk() }
 }

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
type XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdTrifans struct {
//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The count attribute indicates the number of triangle fan primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The trifans element may have any number of p elements.
	XsdGoPkgHasElems_P

}

//	If the W.TxsdTrifans function is not nil (ie. was set by outside code), calls it with this TxsdTrifans instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTrifans instance.
func (me *TxsdTrifans) Walk ()  { 
	if fn := W.TxsdTrifans; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_P.Walk()
	me.XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_.Walk()
 }

type XsdGoPkgHasElems_Trifans struct {
//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifanses []*TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`

}

//	If the W.XsdGoPkgHasElems_Trifans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Trifans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Trifans instance.
func (me *XsdGoPkgHasElems_Trifans) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Trifans; fn != nil { fn(me) }
	for _, x := range me.Trifanses { x.Walk() }
 }

type TxsdMesh struct {
//	The mesh element may contain any number of trifans elements.
	XsdGoPkgHasElems_Trifans

//	The mesh element may contain any number of triangles elements.
	XsdGoPkgHasElems_Triangles

//	The mesh element may contain any number of lines elements.
	XsdGoPkgHasElems_Lines

//	The mesh element may contain any number of tristrips elements.
	XsdGoPkgHasElems_Tristrips

//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

//	The mesh element may contain any number of polylist elements.
	XsdGoPkgHasElems_Polylist

//	The mesh element may contain any number of linestrips elements.
	XsdGoPkgHasElems_Linestrips

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The mesh element must contain one vertices element.
	XsdGoPkgHasElem_Vertices

//	The mesh element may contain any number of polygons elements.
	XsdGoPkgHasElems_Polygons

}

//	If the W.TxsdMesh function is not nil (ie. was set by outside code), calls it with this TxsdMesh instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdMesh instance.
func (me *TxsdMesh) Walk ()  { 
	if fn := W.TxsdMesh; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_Trifans.Walk()
	me.XsdGoPkgHasElems_Triangles.Walk()
	me.XsdGoPkgHasElems_Lines.Walk()
	me.XsdGoPkgHasElems_Tristrips.Walk()
	me.XsdGoPkgHasElems_Source.Walk()
	me.XsdGoPkgHasElems_Polylist.Walk()
	me.XsdGoPkgHasElems_Linestrips.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Vertices.Walk()
	me.XsdGoPkgHasElems_Polygons.Walk()
 }

type XsdGoPkgHasElem_Mesh struct {
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Mesh *TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`

}

//	If the W.XsdGoPkgHasElem_Mesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mesh instance.
func (me *XsdGoPkgHasElem_Mesh) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Mesh; fn != nil { fn(me) }
	me.Mesh.Walk()
 }

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
type XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_ struct {
//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
	ConvexHullOf xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema convex_hull_of,attr"`

}

type TxsdConvexMesh struct {
	XsdGoPkgHasElems_Polygons

	XsdGoPkgHasElems_Polylist

//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
	XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_

	XsdGoPkgHasElems_Linestrips

	XsdGoPkgHasElems_Triangles

	XsdGoPkgHasElems_Lines

	XsdGoPkgHasElem_Vertices

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Tristrips

	XsdGoPkgHasElems_Source

	XsdGoPkgHasElems_Trifans

}

//	If the W.TxsdConvexMesh function is not nil (ie. was set by outside code), calls it with this TxsdConvexMesh instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TxsdConvexMesh instance.
func (me *TxsdConvexMesh) Walk ()  { 
	if fn := W.TxsdConvexMesh; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Vertices.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Tristrips.Walk()
	me.XsdGoPkgHasElems_Source.Walk()
	me.XsdGoPkgHasElems_Trifans.Walk()
	me.XsdGoPkgHasElems_Polygons.Walk()
	me.XsdGoPkgHasElems_Polylist.Walk()
	me.XsdGoPkgHasElems_Linestrips.Walk()
	me.XsdGoPkgHasElems_Triangles.Walk()
	me.XsdGoPkgHasElems_Lines.Walk()
 }

type XsdGoPkgHasElem_ConvexMesh struct {
//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMesh *TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`

}

//	If the W.XsdGoPkgHasElem_ConvexMesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConvexMesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConvexMesh instance.
func (me *XsdGoPkgHasElem_ConvexMesh) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ConvexMesh; fn != nil { fn(me) }
	me.ConvexMesh.Walk()
 }

//	The spline element contains control vertex information sufficient to describe basic splines.
type XsdGoPkgHasAttr_Closed_Tbool_False struct {
	Closed Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema closed,attr"`

}

//	Returns the default value for Closed -- false
func (me XsdGoPkgHasAttr_Closed_Tbool_False) ClosedDefault () Tbool { return Tbool(false) }

//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
//	The input element must occur at least one time. These inputs are local inputs.
type XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_ struct {
//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	If the W.XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_; fn != nil { fn(me) }
	for _, x := range me.Inputs { x.Walk() }
 }

type TxsdSplineSequenceControlVertices struct {
//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdSplineSequenceControlVertices function is not nil (ie. was set by outside code), calls it with this TxsdSplineSequenceControlVertices instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSplineSequenceControlVertices instance.
func (me *TxsdSplineSequenceControlVertices) Walk ()  { 
	if fn := W.TxsdSplineSequenceControlVertices; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ struct {
//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	ControlVertices *TxsdSplineSequenceControlVertices `xml:"http://www.collada.org/2005/11/COLLADASchema control_vertices"`

}

//	If the W.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ instance.
func (me *XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_; fn != nil { fn(me) }
	me.ControlVertices.Walk()
 }

type TxsdSpline struct {
//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

	XsdGoPkgHasAttr_Closed_Tbool_False

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_

}

//	If the W.TxsdSpline function is not nil (ie. was set by outside code), calls it with this TxsdSpline instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdSpline instance.
func (me *TxsdSpline) Walk ()  { 
	if fn := W.TxsdSpline; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_.Walk()
	me.XsdGoPkgHasElems_Source.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElem_Spline struct {
//	The spline element contains control vertex information sufficient to describe basic splines.
	Spline *TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`

}

//	If the W.XsdGoPkgHasElem_Spline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Spline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Spline instance.
func (me *XsdGoPkgHasElem_Spline) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Spline; fn != nil { fn(me) }
	me.Spline.Walk()
 }

type TxsdGeometry struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Spline

//	The geometry element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_Mesh

//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_ConvexMesh

}

//	If the W.TxsdGeometry function is not nil (ie. was set by outside code), calls it with this TxsdGeometry instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdGeometry instance.
func (me *TxsdGeometry) Walk ()  { 
	if fn := W.TxsdGeometry; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Spline.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Mesh.Walk()
	me.XsdGoPkgHasElem_ConvexMesh.Walk()
 }

type XsdGoPkgHasElems_Geometry struct {
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
	Geometries []*TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`

}

//	If the W.XsdGoPkgHasElems_Geometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Geometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Geometry instance.
func (me *XsdGoPkgHasElems_Geometry) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Geometry; fn != nil { fn(me) }
	for _, x := range me.Geometries { x.Walk() }
 }

type TxsdLibraryGeometries struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The library_geometries element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one geometry element.
	XsdGoPkgHasElems_Geometry

}

//	If the W.TxsdLibraryGeometries function is not nil (ie. was set by outside code), calls it with this TxsdLibraryGeometries instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryGeometries instance.
func (me *TxsdLibraryGeometries) Walk ()  { 
	if fn := W.TxsdLibraryGeometries; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Geometry.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_LibraryGeometries struct {
//	The library_geometries element declares a module of geometry elements.
	GeometriesLibraries []*TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`

}

//	If the W.XsdGoPkgHasElems_LibraryGeometries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryGeometries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryGeometries instance.
func (me *XsdGoPkgHasElems_LibraryGeometries) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryGeometries; fn != nil { fn(me) }
	for _, x := range me.GeometriesLibraries { x.Walk() }
 }

//	The library_physics_scenes element declares a module of physics_scene elements.
//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
//	The time_step for the physics_scene.
type XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ struct {
//	The time_step for the physics_scene.
	TimeStep *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema time_step"`

}

//	If the W.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_; fn != nil { fn(me) }
	me.TimeStep.Walk()
 }

//	The gravity vector to use for the physics_scene.
type XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ struct {
//	The gravity vector to use for the physics_scene.
	Gravity *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema gravity"`

}

//	If the W.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_; fn != nil { fn(me) }
	me.Gravity.Walk()
 }

type TxsdPhysicsSceneSequenceTechniqueCommon struct {
//	The gravity vector to use for the physics_scene.
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_

//	The time_step for the physics_scene.
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_

}

//	If the W.TxsdPhysicsSceneSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsSceneSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsSceneSequenceTechniqueCommon instance.
func (me *TxsdPhysicsSceneSequenceTechniqueCommon) Walk ()  { 
	if fn := W.TxsdPhysicsSceneSequenceTechniqueCommon; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_.Walk()
	me.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_.Walk()
 }

type XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsSceneSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	If the W.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_; fn != nil { fn(me) }
	me.TechniqueCommon.Walk()
 }

type TxsdPhysicsScene struct {
//	The physics_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	There may be any number of instance_force_field elements.
	XsdGoPkgHasElems_InstanceForceField

//	There may be any number of instance_physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdPhysicsScene function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsScene instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsScene instance.
func (me *TxsdPhysicsScene) Walk ()  { 
	if fn := W.TxsdPhysicsScene; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_InstancePhysicsModel.Walk()
	me.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_.Walk()
	me.XsdGoPkgHasElems_Technique.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_InstanceForceField.Walk()
 }

type XsdGoPkgHasElems_PhysicsScene struct {
	PhysicsScenes []*TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`

}

//	If the W.XsdGoPkgHasElems_PhysicsScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsScene instance.
func (me *XsdGoPkgHasElems_PhysicsScene) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_PhysicsScene; fn != nil { fn(me) }
	for _, x := range me.PhysicsScenes { x.Walk() }
 }

type TxsdLibraryPhysicsScenes struct {
//	There must be at least one physics_scene element.
	XsdGoPkgHasElems_PhysicsScene

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_physics_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

//	If the W.TxsdLibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsScenes instance.
func (me *TxsdLibraryPhysicsScenes) Walk ()  { 
	if fn := W.TxsdLibraryPhysicsScenes; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_PhysicsScene.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
 }

type XsdGoPkgHasElems_LibraryPhysicsScenes struct {
//	The library_physics_scenes element declares a module of physics_scene elements.
	PhysicsScenesLibraries []*TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`

}

//	If the W.XsdGoPkgHasElems_LibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsScenes instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsScenes) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryPhysicsScenes; fn != nil { fn(me) }
	for _, x := range me.PhysicsScenesLibraries { x.Walk() }
 }

//	The library_nodes element declares a module of node elements.
type TxsdLibraryNodes struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There must be at least one node element.
	XsdGoPkgHasElems_Node

//	The library_nodes element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

//	If the W.TxsdLibraryNodes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryNodes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryNodes instance.
func (me *TxsdLibraryNodes) Walk ()  { 
	if fn := W.TxsdLibraryNodes; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElems_Node.Walk()
 }

type XsdGoPkgHasElems_LibraryNodes struct {
//	The library_nodes element declares a module of node elements.
	NodesLibraries []*TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`

}

//	If the W.XsdGoPkgHasElems_LibraryNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryNodes instance.
func (me *XsdGoPkgHasElems_LibraryNodes) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_LibraryNodes; fn != nil { fn(me) }
	for _, x := range me.NodesLibraries { x.Walk() }
 }

type TxsdCollada struct {
//	The COLLADA element may contain any number of library_images elements.
	XsdGoPkgHasElems_LibraryImages

//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryMaterials

//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryPhysicsMaterials

//	The COLLADA element may contain any number of library_animation_clips elements.
	XsdGoPkgHasElems_LibraryAnimationClips

//	The COLLADA element may contain any number of library_cameras elements.
	XsdGoPkgHasElems_LibraryCameras

//	The COLLADA element may contain any number of library_effects elements.
	XsdGoPkgHasElems_LibraryEffects

//	The COLLADA element may contain any number of library_visual_scenes elements.
	XsdGoPkgHasElems_LibraryVisualScenes

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_

//	The COLLADA element may contain any number of library_force_fields elements.
	XsdGoPkgHasElems_LibraryForceFields

//	The xml:base attribute allows you to define the base URI for this COLLADA document. See
//	http://www.w3.org/TR/xmlbase/ for more information.
	xml.XsdGoPkgHasAttr_Base

//	The COLLADA element may contain any number of library_lights elements.
	XsdGoPkgHasElems_LibraryLights

//	The COLLADA element may contain any number of library_physics_models elements.
	XsdGoPkgHasElems_LibraryPhysicsModels

//	The COLLADA element may contain any number of library_geometriess elements.
	XsdGoPkgHasElems_LibraryGeometries

//	The COLLADA element may contain any number of library_physics_scenes elements.
	XsdGoPkgHasElems_LibraryPhysicsScenes

//	The COLLADA element must contain an asset element.
	XsdGoPkgHasElem_Asset

//	The COLLADA element may contain any number of library_nodes elements.
	XsdGoPkgHasElems_LibraryNodes

//	The COLLADA element may contain any number of library_animations elements.
	XsdGoPkgHasElems_LibraryAnimations

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
	XsdGoPkgHasAttr_Version_TVersionType_

//	The COLLADA element may contain any number of library_controllerss elements.
	XsdGoPkgHasElems_LibraryControllers

}

//	If the W.TxsdCollada function is not nil (ie. was set by outside code), calls it with this TxsdCollada instance as the single argument. Then calls the Walk() method on 18/20 embed(s) and 0/0 field(s) belonging to this TxsdCollada instance.
func (me *TxsdCollada) Walk ()  { 
	if fn := W.TxsdCollada; fn != nil { fn(me) }
	me.XsdGoPkgHasElems_LibraryAnimations.Walk()
	me.XsdGoPkgHasElems_LibraryControllers.Walk()
	me.XsdGoPkgHasElems_LibraryImages.Walk()
	me.XsdGoPkgHasElems_LibraryMaterials.Walk()
	me.XsdGoPkgHasElems_LibraryPhysicsMaterials.Walk()
	me.XsdGoPkgHasElems_LibraryAnimationClips.Walk()
	me.XsdGoPkgHasElems_LibraryCameras.Walk()
	me.XsdGoPkgHasElems_LibraryEffects.Walk()
	me.XsdGoPkgHasElems_LibraryVisualScenes.Walk()
	me.XsdGoPkgHasElems_Extra.Walk()
	me.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_.Walk()
	me.XsdGoPkgHasElems_LibraryForceFields.Walk()
	me.XsdGoPkgHasElems_LibraryLights.Walk()
	me.XsdGoPkgHasElems_LibraryPhysicsModels.Walk()
	me.XsdGoPkgHasElems_LibraryGeometries.Walk()
	me.XsdGoPkgHasElems_LibraryPhysicsScenes.Walk()
	me.XsdGoPkgHasElem_Asset.Walk()
	me.XsdGoPkgHasElems_LibraryNodes.Walk()
 }

type XsdGoPkgHasElem_Collada struct {
//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
	Collada *TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`

}

//	If the W.XsdGoPkgHasElem_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collada instance.
func (me *XsdGoPkgHasElem_Collada) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Collada; fn != nil { fn(me) }
	me.Collada.Walk()
 }

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
type XsdGoPkgHasElems_Collada struct {
//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
	Colladas []*TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`

}

//	If the W.XsdGoPkgHasElems_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collada instance.
func (me *XsdGoPkgHasElems_Collada) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Collada; fn != nil { fn(me) }
	for _, x := range me.Colladas { x.Walk() }
 }

//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type XsdGoPkgHasElems_IdrefArray struct {
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArrays []*TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`

}

//	If the W.XsdGoPkgHasElems_IdrefArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IdrefArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IdrefArray instance.
func (me *XsdGoPkgHasElems_IdrefArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_IdrefArray; fn != nil { fn(me) }
	for _, x := range me.IdrefArrays { x.Walk() }
 }

//	The Name_array element declares the storage for a homogenous array of Name string values.
type XsdGoPkgHasElems_NameArray struct {
//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArrays []*TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`

}

//	If the W.XsdGoPkgHasElems_NameArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameArray instance.
func (me *XsdGoPkgHasElems_NameArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_NameArray; fn != nil { fn(me) }
	for _, x := range me.NameArrays { x.Walk() }
 }

//	The bool_array element declares the storage for a homogenous array of boolean values.
type XsdGoPkgHasElems_BoolArray struct {
//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArrays []*TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`

}

//	If the W.XsdGoPkgHasElems_BoolArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BoolArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BoolArray instance.
func (me *XsdGoPkgHasElems_BoolArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_BoolArray; fn != nil { fn(me) }
	for _, x := range me.BoolArrays { x.Walk() }
 }

//	The float_array element declares the storage for a homogenous array of floating point values.
type XsdGoPkgHasElems_FloatArray struct {
//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArrays []*TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`

}

//	If the W.XsdGoPkgHasElems_FloatArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FloatArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FloatArray instance.
func (me *XsdGoPkgHasElems_FloatArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_FloatArray; fn != nil { fn(me) }
	for _, x := range me.FloatArrays { x.Walk() }
 }

//	The int_array element declares the storage for a homogenous array of integer values.
type XsdGoPkgHasElems_IntArray struct {
//	The int_array element declares the storage for a homogenous array of integer values.
	IntArrays []*TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`

}

//	If the W.XsdGoPkgHasElems_IntArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntArray instance.
func (me *XsdGoPkgHasElems_IntArray) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_IntArray; fn != nil { fn(me) }
	for _, x := range me.IntArrays { x.Walk() }
 }

//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
type XsdGoPkgHasElems_Accessor struct {
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
	Accessors []*TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`

}

//	If the W.XsdGoPkgHasElems_Accessor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Accessor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Accessor instance.
func (me *XsdGoPkgHasElems_Accessor) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Accessor; fn != nil { fn(me) }
	for _, x := range me.Accessors { x.Walk() }
 }

//	The param element declares parametric information regarding its parent element.
type XsdGoPkgHasElem_Param struct {
//	The param element declares parametric information regarding its parent element.
	Param *TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	If the W.XsdGoPkgHasElem_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Param instance.
func (me *XsdGoPkgHasElem_Param) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Param; fn != nil { fn(me) }
	me.Param.Walk()
 }

//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
type XsdGoPkgHasElem_Source struct {
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
	Source *TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	If the W.XsdGoPkgHasElem_Source function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Source instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Source instance.
func (me *XsdGoPkgHasElem_Source) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Source; fn != nil { fn(me) }
	me.Source.Walk()
 }

//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
type XsdGoPkgHasElem_Geometry struct {
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
	Geometry *TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`

}

//	If the W.XsdGoPkgHasElem_Geometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Geometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Geometry instance.
func (me *XsdGoPkgHasElem_Geometry) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Geometry; fn != nil { fn(me) }
	me.Geometry.Walk()
 }

//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
type XsdGoPkgHasElems_Mesh struct {
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Meshs []*TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`

}

//	If the W.XsdGoPkgHasElems_Mesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mesh instance.
func (me *XsdGoPkgHasElems_Mesh) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Mesh; fn != nil { fn(me) }
	for _, x := range me.Meshs { x.Walk() }
 }

//	The spline element contains control vertex information sufficient to describe basic splines.
type XsdGoPkgHasElems_Spline struct {
//	The spline element contains control vertex information sufficient to describe basic splines.
	Splines []*TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`

}

//	If the W.XsdGoPkgHasElems_Spline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Spline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Spline instance.
func (me *XsdGoPkgHasElems_Spline) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Spline; fn != nil { fn(me) }
	for _, x := range me.Splines { x.Walk() }
 }

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type XsdGoPkgHasElem_Lines struct {
//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
	Lines *TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`

}

//	If the W.XsdGoPkgHasElem_Lines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lines instance.
func (me *XsdGoPkgHasElem_Lines) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Lines; fn != nil { fn(me) }
	me.Lines.Walk()
 }

//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
type XsdGoPkgHasElem_Linestrips struct {
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
	Linestrips *TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`

}

//	If the W.XsdGoPkgHasElem_Linestrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Linestrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Linestrips instance.
func (me *XsdGoPkgHasElem_Linestrips) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Linestrips; fn != nil { fn(me) }
	me.Linestrips.Walk()
 }

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
type XsdGoPkgHasElem_Polygons struct {
//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygons *TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`

}

//	If the W.XsdGoPkgHasElem_Polygons function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Polygons instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Polygons instance.
func (me *XsdGoPkgHasElem_Polygons) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Polygons; fn != nil { fn(me) }
	me.Polygons.Walk()
 }

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
type XsdGoPkgHasElem_Polylist struct {
//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
	Polylist *TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`

}

//	If the W.XsdGoPkgHasElem_Polylist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Polylist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Polylist instance.
func (me *XsdGoPkgHasElem_Polylist) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Polylist; fn != nil { fn(me) }
	me.Polylist.Walk()
 }

//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
type XsdGoPkgHasElem_Triangles struct {
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangles *TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`

}

//	If the W.XsdGoPkgHasElem_Triangles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Triangles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Triangles instance.
func (me *XsdGoPkgHasElem_Triangles) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Triangles; fn != nil { fn(me) }
	me.Triangles.Walk()
 }

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
type XsdGoPkgHasElem_Trifans struct {
//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifans *TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`

}

//	If the W.XsdGoPkgHasElem_Trifans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Trifans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Trifans instance.
func (me *XsdGoPkgHasElem_Trifans) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Trifans; fn != nil { fn(me) }
	me.Trifans.Walk()
 }

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type XsdGoPkgHasElem_Tristrips struct {
//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristrips *TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`

}

//	If the W.XsdGoPkgHasElem_Tristrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tristrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tristrips instance.
func (me *XsdGoPkgHasElem_Tristrips) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Tristrips; fn != nil { fn(me) }
	me.Tristrips.Walk()
 }

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type XsdGoPkgHasElems_Vertices struct {
//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Verticeses []*TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`

}

//	If the W.XsdGoPkgHasElems_Vertices function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vertices instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vertices instance.
func (me *XsdGoPkgHasElems_Vertices) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Vertices; fn != nil { fn(me) }
	for _, x := range me.Verticeses { x.Walk() }
 }

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type XsdGoPkgHasElem_Lookat struct {
//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
	Lookat *TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`

}

//	If the W.XsdGoPkgHasElem_Lookat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lookat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lookat instance.
func (me *XsdGoPkgHasElem_Lookat) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Lookat; fn != nil { fn(me) }
	me.Lookat.Walk()
 }

//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type XsdGoPkgHasElem_Matrix struct {
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrix *TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`

}

//	If the W.XsdGoPkgHasElem_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Matrix instance.
func (me *XsdGoPkgHasElem_Matrix) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Matrix; fn != nil { fn(me) }
	me.Matrix.Walk()
 }

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type XsdGoPkgHasElem_Rotate struct {
//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotate *TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`

}

//	If the W.XsdGoPkgHasElem_Rotate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rotate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rotate instance.
func (me *XsdGoPkgHasElem_Rotate) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Rotate; fn != nil { fn(me) }
	me.Rotate.Walk()
 }

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type XsdGoPkgHasElem_Scale struct {
//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
	Scale *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`

}

//	If the W.XsdGoPkgHasElem_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Scale instance.
func (me *XsdGoPkgHasElem_Scale) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Scale; fn != nil { fn(me) }
	me.Scale.Walk()
 }

//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type XsdGoPkgHasElem_Skew struct {
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
	Skew *TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`

}

//	If the W.XsdGoPkgHasElem_Skew function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Skew instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Skew instance.
func (me *XsdGoPkgHasElem_Skew) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Skew; fn != nil { fn(me) }
	me.Skew.Walk()
 }

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElem_Translate struct {
//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
	Translate *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`

}

//	If the W.XsdGoPkgHasElem_Translate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Translate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Translate instance.
func (me *XsdGoPkgHasElem_Translate) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Translate; fn != nil { fn(me) }
	me.Translate.Walk()
 }

//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
type XsdGoPkgHasElem_Image struct {
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
	Image *TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`

}

//	If the W.XsdGoPkgHasElem_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Image instance.
func (me *XsdGoPkgHasElem_Image) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Image; fn != nil { fn(me) }
	me.Image.Walk()
 }

//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
type XsdGoPkgHasElem_Light struct {
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
	Light *TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`

}

//	If the W.XsdGoPkgHasElem_Light function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Light instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Light instance.
func (me *XsdGoPkgHasElem_Light) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Light; fn != nil { fn(me) }
	me.Light.Walk()
 }

//	Materials describe the visual appearance of a geometric object.
type XsdGoPkgHasElem_Material struct {
//	Materials describe the visual appearance of a geometric object.
	Material *TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`

}

//	If the W.XsdGoPkgHasElem_Material function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Material instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Material instance.
func (me *XsdGoPkgHasElem_Material) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Material; fn != nil { fn(me) }
	me.Material.Walk()
 }

//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
type XsdGoPkgHasElem_Camera struct {
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
	Camera *TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`

}

//	If the W.XsdGoPkgHasElem_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Camera instance.
func (me *XsdGoPkgHasElem_Camera) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Camera; fn != nil { fn(me) }
	me.Camera.Walk()
 }

//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
type XsdGoPkgHasElem_Animation struct {
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
	Animation *TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`

}

//	If the W.XsdGoPkgHasElem_Animation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Animation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Animation instance.
func (me *XsdGoPkgHasElem_Animation) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Animation; fn != nil { fn(me) }
	me.Animation.Walk()
 }

//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
type XsdGoPkgHasElem_AnimationClip struct {
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
	AnimationClip *TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`

}

//	If the W.XsdGoPkgHasElem_AnimationClip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnimationClip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnimationClip instance.
func (me *XsdGoPkgHasElem_AnimationClip) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_AnimationClip; fn != nil { fn(me) }
	me.AnimationClip.Walk()
 }

//	The channel element declares an output channel of an animation.
type XsdGoPkgHasElem_Channel struct {
//	The channel element declares an output channel of an animation.
	Channel *TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`

}

//	If the W.XsdGoPkgHasElem_Channel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Channel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Channel instance.
func (me *XsdGoPkgHasElem_Channel) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Channel; fn != nil { fn(me) }
	me.Channel.Walk()
 }

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
type XsdGoPkgHasElem_Sampler struct {
//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
	Sampler *TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`

}

//	If the W.XsdGoPkgHasElem_Sampler function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sampler instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sampler instance.
func (me *XsdGoPkgHasElem_Sampler) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Sampler; fn != nil { fn(me) }
	me.Sampler.Walk()
 }

//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
type XsdGoPkgHasElem_Controller struct {
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controller *TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`

}

//	If the W.XsdGoPkgHasElem_Controller function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Controller instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Controller instance.
func (me *XsdGoPkgHasElem_Controller) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Controller; fn != nil { fn(me) }
	me.Controller.Walk()
 }

//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
type XsdGoPkgHasElems_Skin struct {
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skins []*TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`

}

//	If the W.XsdGoPkgHasElems_Skin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Skin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Skin instance.
func (me *XsdGoPkgHasElems_Skin) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Skin; fn != nil { fn(me) }
	for _, x := range me.Skins { x.Walk() }
 }

//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
type XsdGoPkgHasElems_Morph struct {
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
	Morphs []*TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`

}

//	If the W.XsdGoPkgHasElems_Morph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Morph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Morph instance.
func (me *XsdGoPkgHasElems_Morph) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Morph; fn != nil { fn(me) }
	for _, x := range me.Morphs { x.Walk() }
 }

//	The asset element defines asset management information regarding its parent element.
type XsdGoPkgHasElems_Asset struct {
//	The asset element defines asset management information regarding its parent element.
	Assets []*TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`

}

//	If the W.XsdGoPkgHasElems_Asset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Asset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Asset instance.
func (me *XsdGoPkgHasElems_Asset) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Asset; fn != nil { fn(me) }
	for _, x := range me.Assets { x.Walk() }
 }

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
type XsdGoPkgHasElem_Technique struct {
//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Technique *TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	If the W.XsdGoPkgHasElem_Technique function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Technique instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Technique instance.
func (me *XsdGoPkgHasElem_Technique) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Technique; fn != nil { fn(me) }
	me.Technique.Walk()
 }

//	Nodes embody the hierarchical relationship of elements in the scene.
type XsdGoPkgHasElem_Node struct {
//	Nodes embody the hierarchical relationship of elements in the scene.
	Node *TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`

}

//	If the W.XsdGoPkgHasElem_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Node instance.
func (me *XsdGoPkgHasElem_Node) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Node; fn != nil { fn(me) }
	me.Node.Walk()
 }

//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
type XsdGoPkgHasElem_VisualScene struct {
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
	VisualScene *TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`

}

//	If the W.XsdGoPkgHasElem_VisualScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VisualScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VisualScene instance.
func (me *XsdGoPkgHasElem_VisualScene) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_VisualScene; fn != nil { fn(me) }
	me.VisualScene.Walk()
 }

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
type XsdGoPkgHasElems_BindMaterial struct {
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	BindMaterials []*TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`

}

//	If the W.XsdGoPkgHasElems_BindMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BindMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BindMaterial instance.
func (me *XsdGoPkgHasElems_BindMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_BindMaterial; fn != nil { fn(me) }
	for _, x := range me.BindMaterials { x.Walk() }
 }

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElem_InstanceCamera struct {
//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	InstanceCamera *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`

}

//	If the W.XsdGoPkgHasElem_InstanceCamera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceCamera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceCamera instance.
func (me *XsdGoPkgHasElem_InstanceCamera) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceCamera; fn != nil { fn(me) }
	me.InstanceCamera.Walk()
 }

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
type XsdGoPkgHasElem_InstanceController struct {
//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	InstanceController *TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`

}

//	If the W.XsdGoPkgHasElem_InstanceController function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceController instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceController instance.
func (me *XsdGoPkgHasElem_InstanceController) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceController; fn != nil { fn(me) }
	me.InstanceController.Walk()
 }

//	The instance_effect element declares the instantiation of a COLLADA effect resource.
type XsdGoPkgHasElems_InstanceEffect struct {
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	EffectInstances []*TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`

}

//	If the W.XsdGoPkgHasElems_InstanceEffect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceEffect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceEffect instance.
func (me *XsdGoPkgHasElems_InstanceEffect) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstanceEffect; fn != nil { fn(me) }
	for _, x := range me.EffectInstances { x.Walk() }
 }

//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElem_InstanceForceField struct {
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	InstanceForceField *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`

}

//	If the W.XsdGoPkgHasElem_InstanceForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceForceField instance.
func (me *XsdGoPkgHasElem_InstanceForceField) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceForceField; fn != nil { fn(me) }
	me.InstanceForceField.Walk()
 }

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElem_InstanceLight struct {
//	The instance_light element declares the instantiation of a COLLADA light resource.
	InstanceLight *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`

}

//	If the W.XsdGoPkgHasElem_InstanceLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceLight instance.
func (me *XsdGoPkgHasElem_InstanceLight) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceLight; fn != nil { fn(me) }
	me.InstanceLight.Walk()
 }

//	The instance_material element declares the instantiation of a COLLADA material resource.
type XsdGoPkgHasElem_InstanceMaterial struct {
//	The instance_material element declares the instantiation of a COLLADA material resource.
	InstanceMaterial *TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`

}

//	If the W.XsdGoPkgHasElem_InstanceMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceMaterial instance.
func (me *XsdGoPkgHasElem_InstanceMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceMaterial; fn != nil { fn(me) }
	me.InstanceMaterial.Walk()
 }

//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasElem_InstanceNode struct {
//	The instance_node element declares the instantiation of a COLLADA node resource.
	InstanceNode *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`

}

//	If the W.XsdGoPkgHasElem_InstanceNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceNode instance.
func (me *XsdGoPkgHasElem_InstanceNode) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceNode; fn != nil { fn(me) }
	me.InstanceNode.Walk()
 }

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type XsdGoPkgHasElems_InstancePhysicsMaterial struct {
//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
	PhysicsMaterialInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`

}

//	If the W.XsdGoPkgHasElems_InstancePhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstancePhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstancePhysicsMaterial instance.
func (me *XsdGoPkgHasElems_InstancePhysicsMaterial) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_InstancePhysicsMaterial; fn != nil { fn(me) }
	for _, x := range me.PhysicsMaterialInstances { x.Walk() }
 }

//	This element allows instancing physics model within another physics model, or in a physics scene.
type XsdGoPkgHasElem_InstancePhysicsModel struct {
//	This element allows instancing physics model within another physics model, or in a physics scene.
	InstancePhysicsModel *TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`

}

//	If the W.XsdGoPkgHasElem_InstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstancePhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstancePhysicsModel instance.
func (me *XsdGoPkgHasElem_InstancePhysicsModel) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstancePhysicsModel; fn != nil { fn(me) }
	me.InstancePhysicsModel.Walk()
 }

//	This element allows instancing a rigid_body within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidBody struct {
//	This element allows instancing a rigid_body within an instance_physics_model.
	InstanceRigidBody *TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`

}

//	If the W.XsdGoPkgHasElem_InstanceRigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceRigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceRigidBody instance.
func (me *XsdGoPkgHasElem_InstanceRigidBody) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceRigidBody; fn != nil { fn(me) }
	me.InstanceRigidBody.Walk()
 }

//	This element allows instancing a rigid_constraint within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidConstraint struct {
//	This element allows instancing a rigid_constraint within an instance_physics_model.
	InstanceRigidConstraint *TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`

}

//	If the W.XsdGoPkgHasElem_InstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceRigidConstraint instance.
func (me *XsdGoPkgHasElem_InstanceRigidConstraint) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_InstanceRigidConstraint; fn != nil { fn(me) }
	me.InstanceRigidConstraint.Walk()
 }

//	The library_animations element declares a module of animation elements.
type XsdGoPkgHasElem_LibraryAnimations struct {
//	The library_animations element declares a module of animation elements.
	LibraryAnimations *TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`

}

//	If the W.XsdGoPkgHasElem_LibraryAnimations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryAnimations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryAnimations instance.
func (me *XsdGoPkgHasElem_LibraryAnimations) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryAnimations; fn != nil { fn(me) }
	me.LibraryAnimations.Walk()
 }

//	The library_animation_clips element declares a module of animation_clip elements.
type XsdGoPkgHasElem_LibraryAnimationClips struct {
//	The library_animation_clips element declares a module of animation_clip elements.
	LibraryAnimationClips *TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`

}

//	If the W.XsdGoPkgHasElem_LibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryAnimationClips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryAnimationClips instance.
func (me *XsdGoPkgHasElem_LibraryAnimationClips) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryAnimationClips; fn != nil { fn(me) }
	me.LibraryAnimationClips.Walk()
 }

//	The library_cameras element declares a module of camera elements.
type XsdGoPkgHasElem_LibraryCameras struct {
//	The library_cameras element declares a module of camera elements.
	LibraryCameras *TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`

}

//	If the W.XsdGoPkgHasElem_LibraryCameras function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryCameras instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryCameras instance.
func (me *XsdGoPkgHasElem_LibraryCameras) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryCameras; fn != nil { fn(me) }
	me.LibraryCameras.Walk()
 }

//	The library_controllers element declares a module of controller elements.
type XsdGoPkgHasElem_LibraryControllers struct {
//	The library_controllers element declares a module of controller elements.
	LibraryControllers *TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`

}

//	If the W.XsdGoPkgHasElem_LibraryControllers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryControllers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryControllers instance.
func (me *XsdGoPkgHasElem_LibraryControllers) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryControllers; fn != nil { fn(me) }
	me.LibraryControllers.Walk()
 }

//	The library_geometries element declares a module of geometry elements.
type XsdGoPkgHasElem_LibraryGeometries struct {
//	The library_geometries element declares a module of geometry elements.
	LibraryGeometries *TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`

}

//	If the W.XsdGoPkgHasElem_LibraryGeometries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryGeometries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryGeometries instance.
func (me *XsdGoPkgHasElem_LibraryGeometries) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryGeometries; fn != nil { fn(me) }
	me.LibraryGeometries.Walk()
 }

//	The library_effects element declares a module of effect elements.
type XsdGoPkgHasElem_LibraryEffects struct {
//	The library_effects element declares a module of effect elements.
	LibraryEffects *TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`

}

//	If the W.XsdGoPkgHasElem_LibraryEffects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryEffects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryEffects instance.
func (me *XsdGoPkgHasElem_LibraryEffects) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryEffects; fn != nil { fn(me) }
	me.LibraryEffects.Walk()
 }

//	The library_force_fields element declares a module of force_field elements.
type XsdGoPkgHasElem_LibraryForceFields struct {
//	The library_force_fields element declares a module of force_field elements.
	LibraryForceFields *TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`

}

//	If the W.XsdGoPkgHasElem_LibraryForceFields function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryForceFields instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryForceFields instance.
func (me *XsdGoPkgHasElem_LibraryForceFields) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryForceFields; fn != nil { fn(me) }
	me.LibraryForceFields.Walk()
 }

//	The library_images element declares a module of image elements.
type XsdGoPkgHasElem_LibraryImages struct {
//	The library_images element declares a module of image elements.
	LibraryImages *TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`

}

//	If the W.XsdGoPkgHasElem_LibraryImages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryImages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryImages instance.
func (me *XsdGoPkgHasElem_LibraryImages) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryImages; fn != nil { fn(me) }
	me.LibraryImages.Walk()
 }

//	The library_lights element declares a module of light elements.
type XsdGoPkgHasElem_LibraryLights struct {
//	The library_lights element declares a module of light elements.
	LibraryLights *TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`

}

//	If the W.XsdGoPkgHasElem_LibraryLights function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryLights instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryLights instance.
func (me *XsdGoPkgHasElem_LibraryLights) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryLights; fn != nil { fn(me) }
	me.LibraryLights.Walk()
 }

//	The library_materials element declares a module of material elements.
type XsdGoPkgHasElem_LibraryMaterials struct {
//	The library_materials element declares a module of material elements.
	LibraryMaterials *TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`

}

//	If the W.XsdGoPkgHasElem_LibraryMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryMaterials instance.
func (me *XsdGoPkgHasElem_LibraryMaterials) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryMaterials; fn != nil { fn(me) }
	me.LibraryMaterials.Walk()
 }

//	The library_nodes element declares a module of node elements.
type XsdGoPkgHasElem_LibraryNodes struct {
//	The library_nodes element declares a module of node elements.
	LibraryNodes *TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`

}

//	If the W.XsdGoPkgHasElem_LibraryNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryNodes instance.
func (me *XsdGoPkgHasElem_LibraryNodes) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryNodes; fn != nil { fn(me) }
	me.LibraryNodes.Walk()
 }

//	The library_physics_materials element declares a module of physics_material elements.
type XsdGoPkgHasElem_LibraryPhysicsMaterials struct {
//	The library_physics_materials element declares a module of physics_material elements.
	LibraryPhysicsMaterials *TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`

}

//	If the W.XsdGoPkgHasElem_LibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsMaterials instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsMaterials) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryPhysicsMaterials; fn != nil { fn(me) }
	me.LibraryPhysicsMaterials.Walk()
 }

//	The library_physics_models element declares a module of physics_model elements.
type XsdGoPkgHasElem_LibraryPhysicsModels struct {
//	The library_physics_models element declares a module of physics_model elements.
	LibraryPhysicsModels *TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`

}

//	If the W.XsdGoPkgHasElem_LibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsModels instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsModels) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryPhysicsModels; fn != nil { fn(me) }
	me.LibraryPhysicsModels.Walk()
 }

//	The library_physics_scenes element declares a module of physics_scene elements.
type XsdGoPkgHasElem_LibraryPhysicsScenes struct {
//	The library_physics_scenes element declares a module of physics_scene elements.
	LibraryPhysicsScenes *TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`

}

//	If the W.XsdGoPkgHasElem_LibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsScenes instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsScenes) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryPhysicsScenes; fn != nil { fn(me) }
	me.LibraryPhysicsScenes.Walk()
 }

//	The library_visual_scenes element declares a module of visual_scene elements.
type XsdGoPkgHasElem_LibraryVisualScenes struct {
//	The library_visual_scenes element declares a module of visual_scene elements.
	LibraryVisualScenes *TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`

}

//	If the W.XsdGoPkgHasElem_LibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryVisualScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryVisualScenes instance.
func (me *XsdGoPkgHasElem_LibraryVisualScenes) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_LibraryVisualScenes; fn != nil { fn(me) }
	me.LibraryVisualScenes.Walk()
 }

//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of GLES platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGles struct {
//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGles *TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`

}

//	If the W.XsdGoPkgHasElem_ProfileGles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileGles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileGles instance.
func (me *XsdGoPkgHasElem_ProfileGles) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ProfileGles; fn != nil { fn(me) }
	me.ProfileGles.Walk()
 }

//	Opens a block of COMMON platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCommon struct {
//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommon *TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`

}

//	If the W.XsdGoPkgHasElem_ProfileCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileCommon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileCommon instance.
func (me *XsdGoPkgHasElem_ProfileCommon) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ProfileCommon; fn != nil { fn(me) }
	me.ProfileCommon.Walk()
 }

//	Opens a block of GLSL platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGlsl struct {
//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsl *TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`

}

//	If the W.XsdGoPkgHasElem_ProfileGlsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileGlsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileGlsl instance.
func (me *XsdGoPkgHasElem_ProfileGlsl) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ProfileGlsl; fn != nil { fn(me) }
	me.ProfileGlsl.Walk()
 }

//	Opens a block of CG platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCg struct {
//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCg *TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`

}

//	If the W.XsdGoPkgHasElem_ProfileCg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileCg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileCg instance.
func (me *XsdGoPkgHasElem_ProfileCg) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ProfileCg; fn != nil { fn(me) }
	me.ProfileCg.Walk()
 }

type XsdGoPkgHasElem_FxProfileAbstract struct {
//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGles

//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCommon

//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGlsl

//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCg

}

//	If the W.XsdGoPkgHasElem_FxProfileAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FxProfileAbstract instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FxProfileAbstract instance.
func (me *XsdGoPkgHasElem_FxProfileAbstract) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_FxProfileAbstract; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_ProfileCg.Walk()
	me.XsdGoPkgHasElem_ProfileGles.Walk()
	me.XsdGoPkgHasElem_ProfileCommon.Walk()
	me.XsdGoPkgHasElem_ProfileGlsl.Walk()
 }

//	A self contained description of a shader effect.
type XsdGoPkgHasElem_Effect struct {
//	A self contained description of a shader effect.
	Effect *TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`

}

//	If the W.XsdGoPkgHasElem_Effect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Effect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Effect instance.
func (me *XsdGoPkgHasElem_Effect) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Effect; fn != nil { fn(me) }
	me.Effect.Walk()
 }

type XsdGoPkgHasElems_GlHookAbstract struct {
	GlHookAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`

}

//	If the W.XsdGoPkgHasElems_GlHookAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlHookAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlHookAbstract instance.
func (me *XsdGoPkgHasElems_GlHookAbstract) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_GlHookAbstract; fn != nil { fn(me) }
 }

//	An axis-aligned, centered box primitive.
type XsdGoPkgHasElems_Box struct {
//	An axis-aligned, centered box primitive.
	Boxs []*TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`

}

//	If the W.XsdGoPkgHasElems_Box function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Box instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Box instance.
func (me *XsdGoPkgHasElems_Box) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Box; fn != nil { fn(me) }
	for _, x := range me.Boxs { x.Walk() }
 }

//	An infinite plane primitive.
type XsdGoPkgHasElems_Plane struct {
//	An infinite plane primitive.
	Planes []*TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`

}

//	If the W.XsdGoPkgHasElems_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Plane instance.
func (me *XsdGoPkgHasElems_Plane) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Plane; fn != nil { fn(me) }
	for _, x := range me.Planes { x.Walk() }
 }

//	A centered sphere primitive.
type XsdGoPkgHasElems_Sphere struct {
//	A centered sphere primitive.
	Spheres []*TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`

}

//	If the W.XsdGoPkgHasElems_Sphere function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sphere instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sphere instance.
func (me *XsdGoPkgHasElems_Sphere) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Sphere; fn != nil { fn(me) }
	for _, x := range me.Spheres { x.Walk() }
 }

type XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ struct {
	Size Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`

}

//	If the W.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_; fn != nil { fn(me) }
 }

type TxsdEllipsoid struct {
	XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_

}

//	If the W.TxsdEllipsoid function is not nil (ie. was set by outside code), calls it with this TxsdEllipsoid instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdEllipsoid instance.
func (me *TxsdEllipsoid) Walk ()  { 
	if fn := W.TxsdEllipsoid; fn != nil { fn(me) }
	me.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_.Walk()
 }

type XsdGoPkgHasElem_Ellipsoid struct {
	Ellipsoid *TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`

}

//	If the W.XsdGoPkgHasElem_Ellipsoid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ellipsoid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ellipsoid instance.
func (me *XsdGoPkgHasElem_Ellipsoid) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_Ellipsoid; fn != nil { fn(me) }
	me.Ellipsoid.Walk()
 }

type XsdGoPkgHasElems_Ellipsoid struct {
	Ellipsoids []*TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`

}

//	If the W.XsdGoPkgHasElems_Ellipsoid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ellipsoid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ellipsoid instance.
func (me *XsdGoPkgHasElems_Ellipsoid) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Ellipsoid; fn != nil { fn(me) }
	for _, x := range me.Ellipsoids { x.Walk() }
 }

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
type XsdGoPkgHasElems_Cylinder struct {
//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinders []*TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`

}

//	If the W.XsdGoPkgHasElems_Cylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cylinder instance.
func (me *XsdGoPkgHasElems_Cylinder) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Cylinder; fn != nil { fn(me) }
	for _, x := range me.Cylinders { x.Walk() }
 }

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_TaperedCylinder struct {
//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinders []*TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`

}

//	If the W.XsdGoPkgHasElems_TaperedCylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaperedCylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaperedCylinder instance.
func (me *XsdGoPkgHasElems_TaperedCylinder) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_TaperedCylinder; fn != nil { fn(me) }
	for _, x := range me.TaperedCylinders { x.Walk() }
 }

//	A capsule primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_Capsule struct {
//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsules []*TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`

}

//	If the W.XsdGoPkgHasElems_Capsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Capsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Capsule instance.
func (me *XsdGoPkgHasElems_Capsule) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_Capsule; fn != nil { fn(me) }
	for _, x := range me.Capsules { x.Walk() }
 }

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
type XsdGoPkgHasElems_TaperedCapsule struct {
//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsules []*TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`

}

//	If the W.XsdGoPkgHasElems_TaperedCapsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaperedCapsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaperedCapsule instance.
func (me *XsdGoPkgHasElems_TaperedCapsule) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_TaperedCapsule; fn != nil { fn(me) }
	for _, x := range me.TaperedCapsules { x.Walk() }
 }

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
type XsdGoPkgHasElems_ConvexMesh struct {
//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMeshs []*TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`

}

//	If the W.XsdGoPkgHasElems_ConvexMesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConvexMesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConvexMesh instance.
func (me *XsdGoPkgHasElems_ConvexMesh) Walk ()  { 
	if fn := W.XsdGoPkgHasElems_ConvexMesh; fn != nil { fn(me) }
	for _, x := range me.ConvexMeshs { x.Walk() }
 }

//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type XsdGoPkgHasElem_ForceField struct {
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceField *TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`

}

//	If the W.XsdGoPkgHasElem_ForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceField instance.
func (me *XsdGoPkgHasElem_ForceField) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_ForceField; fn != nil { fn(me) }
	me.ForceField.Walk()
 }

type XsdGoPkgHasElem_PhysicsScene struct {
	PhysicsScene *TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`

}

//	If the W.XsdGoPkgHasElem_PhysicsScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsScene instance.
func (me *XsdGoPkgHasElem_PhysicsScene) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_PhysicsScene; fn != nil { fn(me) }
	me.PhysicsScene.Walk()
 }

//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
type XsdGoPkgHasElem_RigidBody struct {
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBody *TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`

}

//	If the W.XsdGoPkgHasElem_RigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RigidBody instance.
func (me *XsdGoPkgHasElem_RigidBody) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_RigidBody; fn != nil { fn(me) }
	me.RigidBody.Walk()
 }

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
type XsdGoPkgHasElem_RigidConstraint struct {
//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
	RigidConstraint *TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`

}

//	If the W.XsdGoPkgHasElem_RigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RigidConstraint instance.
func (me *XsdGoPkgHasElem_RigidConstraint) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_RigidConstraint; fn != nil { fn(me) }
	me.RigidConstraint.Walk()
 }

//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
type XsdGoPkgHasElem_PhysicsModel struct {
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
	PhysicsModel *TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`

}

//	If the W.XsdGoPkgHasElem_PhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsModel instance.
func (me *XsdGoPkgHasElem_PhysicsModel) Walk ()  { 
	if fn := W.XsdGoPkgHasElem_PhysicsModel; fn != nil { fn(me) }
	me.PhysicsModel.Walk()
 }

//	Provides 1517 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
var W = struct {
	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ func (o *XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_)
	TxsdGlPipelineSettingsChoiceDepthFunc func (o *TxsdGlPipelineSettingsChoiceDepthFunc)
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ func (o *XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_)
	TcgConnectParam func (o *TcgConnectParam)
	TxsdLibraryForceFields func (o *TxsdLibraryForceFields)
	XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ func (o *XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_)
	TxsdGlPipelineSettingsChoiceRescaleNormalEnable func (o *TxsdGlPipelineSettingsChoiceRescaleNormalEnable)
	XsdGoPkgHasElems_LibraryForceFields func (o *XsdGoPkgHasElems_LibraryForceFields)
	XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ func (o *XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_)
	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ func (o *XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_)
	XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencefx_samplerRECT_commonschema_Mipfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ func (o *XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_)
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ func (o *XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_)
	TxsdGlPipelineSettingsChoiceBlendFunc func (o *TxsdGlPipelineSettingsChoiceBlendFunc)
	XsdGoPkgHasElem_ProfileCommon func (o *XsdGoPkgHasElem_ProfileCommon)
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ func (o *XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_)
	XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 func (o *XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10)
	TxsdGlPipelineSettingsChoiceTexture3DEnable func (o *TxsdGlPipelineSettingsChoiceTexture3DEnable)
	XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ func (o *XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_)
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_Sphere func (o *XsdGoPkgHasElem_Sphere)
	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ func (o *XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_)
	XsdGoPkgHasElems_LibraryGeometries func (o *XsdGoPkgHasElems_LibraryGeometries)
	XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ func (o *XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_)
	TxsdGlPipelineSettingsChoiceLightAmbient func (o *TxsdGlPipelineSettingsChoiceLightAmbient)
	TxsdRigidConstraintSequenceAttachment func (o *TxsdRigidConstraintSequenceAttachment)
	TxsdSkew func (o *TxsdSkew)
	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_ func (o *XsdGoPkgHasElem_bool2choicefx_annotate_type_commonschema_Bool2_Tbool2_)
	TxsdProfileGlslSequenceTechniqueSequencePass func (o *TxsdProfileGlslSequenceTechniqueSequencePass)
	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ func (o *XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_)
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ func (o *XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_)
	XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencelinesschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None)
	TxsdInstanceController func (o *TxsdInstanceController)
	XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_ func (o *XsdGoPkgHasElem_border_colorsequencefx_sampler2D_commonschema_BorderColor_TfxColorCommon_)
	TcgSurfaceType func (o *TcgSurfaceType)
	XsdGoPkgHasElems_Vertices func (o *XsdGoPkgHasElems_Vertices)
	XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_ func (o *XsdGoPkgHasElem_intchoicegles_basic_type_commonschema_Int_Tint_)
	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_)
	XsdGoPkgHasElems_P func (o *XsdGoPkgHasElems_P)
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ func (o *XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_)
	XsdGoPkgHasElems_Animation func (o *XsdGoPkgHasElems_Animation)
	XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ func (o *XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_)
	XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ func (o *XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_)
	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_)
	XsdGoPkgHasElems_PhysicsScene func (o *XsdGoPkgHasElems_PhysicsScene)
	XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ func (o *XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_)
	XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 func (o *XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00)
	TfxSampler3DCommon func (o *TfxSampler3DCommon)
	TxsdGlesPipelineSettingsChoiceStencilTestEnable func (o *TxsdGlesPipelineSettingsChoiceStencilTestEnable)
	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElems_ForceField func (o *XsdGoPkgHasElems_ForceField)
	TxsdGlPipelineSettingsChoiceSampleCoverageEnable func (o *TxsdGlPipelineSettingsChoiceSampleCoverageEnable)
	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ func (o *XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_)
	TxsdForceField func (o *TxsdForceField)
	XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ func (o *XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_)
	XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ func (o *XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_)
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ func (o *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_)
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 func (o *XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000)
	XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ func (o *XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_)
	XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ func (o *XsdGoPkgHasElem_colorsequencespotchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_)
	XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_sampler1D_commonschema_Source_XsdtNCName_)
	TfxSamplerRECTCommon func (o *TfxSamplerRECTCommon)
	XsdGoPkgHasElem_PhysicsMaterial func (o *XsdGoPkgHasElem_PhysicsMaterial)
	TfxSampler2DCommon func (o *TfxSampler2DCommon)
	XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ func (o *XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_)
	XsdGoPkgHasElem_BindMaterial func (o *XsdGoPkgHasElem_BindMaterial)
	XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_ func (o *XsdGoPkgHasElem_float1x3choicegles_basic_type_commonschema_Float1X3_Tfloat3_)
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True func (o *XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True)
	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ func (o *XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_)
	TcgSampler2D func (o *TcgSampler2D)
	TxsdProfileCommon func (o *TxsdProfileCommon)
	TxsdGlesPipelineSettingsChoiceColorMaterialEnable func (o *TxsdGlesPipelineSettingsChoiceColorMaterialEnable)
	XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ func (o *XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_)
	TxsdGlPipelineSettingsChoiceDitherEnable func (o *TxsdGlPipelineSettingsChoiceDitherEnable)
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ func (o *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_)
	XsdGoPkgHasElems_InstanceForceField func (o *XsdGoPkgHasElems_InstanceForceField)
	XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ func (o *XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_)
	XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ func (o *XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_)
	TxsdGlPipelineSettingsChoiceTexture3D func (o *TxsdGlPipelineSettingsChoiceTexture3D)
	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ func (o *XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_)
	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ func (o *XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_)
	XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_samplerRECT_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	TcommonNewparamType func (o *TcommonNewparamType)
	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ func (o *XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_)
	XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ func (o *XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_)
	TglSamplerDEPTH func (o *TglSamplerDEPTH)
	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ func (o *XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_)
	XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ func (o *XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_)
	XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ func (o *XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_)
	XsdGoPkgHasElem_InstancePhysicsModel func (o *XsdGoPkgHasElem_InstancePhysicsModel)
	TxsdMesh func (o *TxsdMesh)
	TxsdGlesPipelineSettingsChoiceCullFace func (o *TxsdGlesPipelineSettingsChoiceCullFace)
	XsdGoPkgHasElem_Controller func (o *XsdGoPkgHasElem_Controller)
	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_)
	TcgSetparamSimple func (o *TcgSetparamSimple)
	TxsdGlesPipelineSettingsChoiceLightPosition func (o *TxsdGlesPipelineSettingsChoiceLightPosition)
	XsdGoPkgHasElem_Capsule func (o *XsdGoPkgHasElem_Capsule)
	XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ func (o *XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_)
	XsdGoPkgHasElem_InstanceEffect func (o *XsdGoPkgHasElem_InstanceEffect)
	TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable func (o *TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable)
	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ func (o *XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_)
	TfxClearcolorCommon func (o *TfxClearcolorCommon)
	XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ func (o *XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_)
	TxsdTaperedCapsule func (o *TxsdTaperedCapsule)
	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ func (o *XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_)
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ func (o *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_)
	XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ func (o *XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_)
	TxsdGlPipelineSettingsChoiceStencilMaskSeparate func (o *TxsdGlPipelineSettingsChoiceStencilMaskSeparate)
	XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_ func (o *XsdGoPkgHasElem_intchoicefx_annotate_type_commonschema_Int_Tint_)
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ func (o *XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits)
	XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencefx_sampler2D_commonschema_Mipfilter_TfxSamplerFilterCommon_None)
	TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable func (o *TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable)
	XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_GLSLschema_Code_TfxCodeProfile_)
	XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencetristripsschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_PhysicsScene func (o *XsdGoPkgHasElem_PhysicsScene)
	TxsdFxSurfaceInitPlanarCommonChoiceAll func (o *TxsdFxSurfaceInitPlanarCommonChoiceAll)
	XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_ func (o *XsdGoPkgHasElem_floatchoicefx_annotate_type_commonschema_Float_Tfloat_)
	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ func (o *XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_)
	XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequencetechniquesequenceprofile_CGschema_Code_TfxCodeProfile_)
	XsdGoPkgHasElem_Skin func (o *XsdGoPkgHasElem_Skin)
	TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation func (o *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation)
	XsdGoPkgHasElem_Morph func (o *XsdGoPkgHasElem_Morph)
	XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ func (o *XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_)
	XsdGoPkgHasElem_InstanceRigidBody func (o *XsdGoPkgHasElem_InstanceRigidBody)
	TxsdGlPipelineSettingsChoiceFogEnable func (o *TxsdGlPipelineSettingsChoiceFogEnable)
	XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_ func (o *XsdGoPkgHasElem_int2choicegles_basic_type_commonschema_Int2_Tint2_)
	TxsdGlPipelineSettingsChoiceStencilFuncSeparate func (o *TxsdGlPipelineSettingsChoiceStencilFuncSeparate)
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ func (o *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_)
	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ func (o *XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_)
	XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_emissionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_)
	XsdGoPkgHasElems_Effect func (o *XsdGoPkgHasElems_Effect)
	TxsdGlPipelineSettingsChoicePointSmoothEnable func (o *TxsdGlPipelineSettingsChoicePointSmoothEnable)
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerRECT_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255)
	XsdGoPkgHasElems_LibraryControllers func (o *XsdGoPkgHasElems_LibraryControllers)
	TxsdGlPipelineSettingsChoiceLogicOp func (o *TxsdGlPipelineSettingsChoiceLogicOp)
	TxsdNode func (o *TxsdNode)
	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ func (o *XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_)
	XsdGoPkgHasElems_InstanceGeometry func (o *XsdGoPkgHasElems_InstanceGeometry)
	TxsdGlPipelineSettingsChoiceModelViewMatrix func (o *TxsdGlPipelineSettingsChoiceModelViewMatrix)
	XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_samplerRECT_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ func (o *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_)
	TxsdGlPipelineSettingsChoicePointSizeMax func (o *TxsdGlPipelineSettingsChoicePointSizeMax)
	TxsdAssetSequenceUnit func (o *TxsdAssetSequenceUnit)
	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ func (o *XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_)
	XsdGoPkgHasElem_InstanceLight func (o *XsdGoPkgHasElem_InstanceLight)
	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ func (o *XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_)
	XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ func (o *XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_)
	XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_ func (o *XsdGoPkgHasElem_int3choicegles_basic_type_commonschema_Int3_Tint3_)
	TxsdGlPipelineSettingsChoicePolygonModeSequenceFace func (o *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace)
	TxsdGlesPipelineSettingsChoiceLightingEnable func (o *TxsdGlesPipelineSettingsChoiceLightingEnable)
	TxsdGlPipelineSettingsChoiceScissorTestEnable func (o *TxsdGlPipelineSettingsChoiceScissorTestEnable)
	TInputLocalOffset func (o *TInputLocalOffset)
	TxsdIdrefArray func (o *TxsdIdrefArray)
	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ func (o *XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_)
	XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ func (o *XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_)
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ func (o *XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_)
	TxsdMatrix func (o *TxsdMatrix)
	XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ func (o *XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_)
	XsdGoPkgHasElem_LibraryPhysicsScenes func (o *XsdGoPkgHasElem_LibraryPhysicsScenes)
	XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_samplerCUBE_commonschema_Source_XsdtNCName_)
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler2D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255)
	TxsdGlPipelineSettingsChoicePolygonModeSequenceMode func (o *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode)
	XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ func (o *XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_)
	TcommonFloatOrParamType func (o *TcommonFloatOrParamType)
	XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ func (o *XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_)
	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ func (o *XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_)
	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ func (o *XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_)
	TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective func (o *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective)
	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ func (o *XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_)
	XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ func (o *XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_)
	TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable func (o *TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable)
	XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ func (o *XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_)
	TxsdGlesPipelineSettingsChoicePointFadeThresholdSize func (o *TxsdGlesPipelineSettingsChoicePointFadeThresholdSize)
	XsdGoPkgHasElem_InstanceNode func (o *XsdGoPkgHasElem_InstanceNode)
	XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ func (o *XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_)
	XsdGoPkgHasElem_NameArray func (o *XsdGoPkgHasElem_NameArray)
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ func (o *XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_)
	XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_ func (o *XsdGoPkgHasElem_float4x1choicegles_basic_type_commonschema_Float4X1_Tfloat4_)
	XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ func (o *XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_)
	TxsdGlPipelineSettingsChoicePolygonSmoothEnable func (o *TxsdGlPipelineSettingsChoicePolygonSmoothEnable)
	TxsdGlPipelineSettingsChoiceProjectionMatrix func (o *TxsdGlPipelineSettingsChoiceProjectionMatrix)
	XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_ func (o *XsdGoPkgHasElem_semanticsequencegles_newparamschema_Semantic_XsdtNCName_)
	XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_ func (o *XsdGoPkgHasElem_float3choicesequencecommon_newparam_typeschema_Float3_Tfloat3_)
	XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_sampler2D_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc func (o *TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc)
	XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencetrifansschema_Input_TInputLocalOffset_)
	TxsdBox func (o *TxsdBox)
	XsdGoPkgHasElems_Tristrips func (o *XsdGoPkgHasElems_Tristrips)
	XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ func (o *XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_)
	XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetexture3Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	TxsdGlesPipelineSettingsChoiceNormalizeEnable func (o *TxsdGlesPipelineSettingsChoiceNormalizeEnable)
	XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_ func (o *XsdGoPkgHasElem_float3choicefx_annotate_type_commonschema_Float3_Tfloat3_)
	XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_ func (o *XsdGoPkgHasElem_modifiersequencecg_newparamschema_Modifier_TfxModifierEnumCommon_)
	XsdGoPkgHasElem_RigidBody func (o *XsdGoPkgHasElem_RigidBody)
	TxsdCameraSequenceImager func (o *TxsdCameraSequenceImager)
	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ func (o *XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_)
	TxsdGlPipelineSettingsChoiceTextureRECT func (o *TxsdGlPipelineSettingsChoiceTextureRECT)
	XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ func (o *XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_)
	XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ func (o *XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_)
	XsdGoPkgHasElems_ProfileGlsl func (o *XsdGoPkgHasElems_ProfileGlsl)
	XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ func (o *XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_)
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ func (o *XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_)
	TxsdInstanceRigidConstraint func (o *TxsdInstanceRigidConstraint)
	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ func (o *XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_)
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ func (o *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_)
	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ func (o *XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_)
	XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceglsl_setparamschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_Technique func (o *XsdGoPkgHasElem_Technique)
	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ func (o *XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_)
	XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_)
	XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ func (o *XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_)
	XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ func (o *XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_)
	TxsdGlPipelineSettingsChoiceCullFaceEnable func (o *TxsdGlPipelineSettingsChoiceCullFaceEnable)
	TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass func (o *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass)
	XsdGoPkgHasElem_Animation func (o *XsdGoPkgHasElem_Animation)
	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ func (o *XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_)
	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ func (o *XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_)
	XsdGoPkgHasElems_ProfileCommon func (o *XsdGoPkgHasElems_ProfileCommon)
	XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequenceprofile_CGschema_Newparam_TcgNewparam_)
	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_)
	TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask func (o *TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask)
	XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_samplerRECT_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencegles_sampler_stateschema_Magfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ func (o *XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_)
	XsdGoPkgHasElem_Vertices func (o *XsdGoPkgHasElem_Vertices)
	TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail func (o *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail)
	XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ func (o *XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_)
	XsdGoPkgHasElems_Box func (o *XsdGoPkgHasElems_Box)
	TglesTexcombinerCommandAlphaType func (o *TglesTexcombinerCommandAlphaType)
	XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ func (o *XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_)
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ func (o *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_)
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ func (o *XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_)
	TglslSurfaceType func (o *TglslSurfaceType)
	XsdGoPkgHasElems_Rotate func (o *XsdGoPkgHasElems_Rotate)
	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ func (o *XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_)
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ func (o *XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_)
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ func (o *XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_)
	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ func (o *XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_)
	TxsdGlesPipelineSettingsChoiceLightSpotCutoff func (o *TxsdGlesPipelineSettingsChoiceLightSpotCutoff)
	XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ func (o *XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_)
	TxsdGlesPipelineSettingsChoiceFogEnable func (o *TxsdGlesPipelineSettingsChoiceFogEnable)
	XsdGoPkgHasElem_Effect func (o *XsdGoPkgHasElem_Effect)
	TxsdLightSequenceTechniqueCommonChoiceSpot func (o *TxsdLightSequenceTechniqueCommonChoiceSpot)
	XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_)
	TxsdCollada func (o *TxsdCollada)
	TxsdLibraryMaterials func (o *TxsdLibraryMaterials)
	XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_sampler1D_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	TxsdProfileGlesSequenceTechniqueSequencePass func (o *TxsdProfileGlesSequenceTechniqueSequencePass)
	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ func (o *XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_)
	TxsdGlPipelineSettingsChoiceBlendEquation func (o *TxsdGlPipelineSettingsChoiceBlendEquation)
	TxsdGlPipelineSettingsChoiceClearStencil func (o *TxsdGlPipelineSettingsChoiceClearStencil)
	TxsdChannel func (o *TxsdChannel)
	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ func (o *XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_)
	XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_reflectivesequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ func (o *XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_)
	TxsdLightSequenceTechniqueCommonChoicePoint func (o *TxsdLightSequenceTechniqueCommonChoicePoint)
	TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow func (o *TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow)
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ func (o *XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_)
	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_)
	TxsdInstanceMaterialSequenceBind func (o *TxsdInstanceMaterialSequenceBind)
	XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ func (o *XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_)
	TxsdSpline func (o *TxsdSpline)
	XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ func (o *XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_)
	TxsdGlesPipelineSettingsChoiceProjectionMatrix func (o *TxsdGlesPipelineSettingsChoiceProjectionMatrix)
	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ func (o *XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_)
	XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ func (o *XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_)
	XsdGoPkgHasElems_RigidBody func (o *XsdGoPkgHasElems_RigidBody)
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ func (o *XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_)
	TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName func (o *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName)
	XsdGoPkgHasElem_Cylinder func (o *XsdGoPkgHasElem_Cylinder)
	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ func (o *XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_)
	TxsdInstanceMaterialSequenceBindVertexInput func (o *TxsdInstanceMaterialSequenceBindVertexInput)
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ func (o *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_)
	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ func (o *XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_)
	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ func (o *XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_)
	TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha func (o *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha)
	XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencefx_samplerCUBE_commonschema_Mipfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_)
	XsdGoPkgHasGroup_GlesBasicTypeCommon func (o *XsdGoPkgHasGroup_GlesBasicTypeCommon)
	XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ func (o *XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_)
	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ func (o *XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_)
	XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ func (o *XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_)
	XsdGoPkgHasElem_ProfileGles func (o *XsdGoPkgHasElem_ProfileGles)
	XsdGoPkgHasElems_Matrix func (o *XsdGoPkgHasElems_Matrix)
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ func (o *XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_)
	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ func (o *XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_)
	XsdGoPkgHasGroup_CgParamType func (o *XsdGoPkgHasGroup_CgParamType)
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ func (o *XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_)
	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ func (o *XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_)
	XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ func (o *XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_)
	TxsdInstanceEffect func (o *TxsdInstanceEffect)
	XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ func (o *XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_)
	TxsdGlPipelineSettingsChoiceAutoNormalEnable func (o *TxsdGlPipelineSettingsChoiceAutoNormalEnable)
	TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName func (o *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName)
	XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_ func (o *XsdGoPkgHasElem_stringchoicecg_param_typeschema_String_XsdtString_)
	XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_ func (o *XsdGoPkgHasElem_float2choicefx_annotate_type_commonschema_Float2_Tfloat2_)
	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ func (o *XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_)
	XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ func (o *XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_)
	XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ func (o *XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_)
	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ func (o *XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_)
	XsdGoPkgHasGroup_FxAnnotateTypeCommon func (o *XsdGoPkgHasGroup_FxAnnotateTypeCommon)
	XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElems_InstanceRigidConstraint func (o *XsdGoPkgHasElems_InstanceRigidConstraint)
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind func (o *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind)
	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ func (o *XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_)
	TxsdGlPipelineSettingsChoiceTextureCUBE func (o *TxsdGlPipelineSettingsChoiceTextureCUBE)
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_)
	XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ func (o *XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_)
	XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ func (o *XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_)
	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ func (o *XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_)
	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ func (o *XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_)
	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ func (o *XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_)
	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ func (o *XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_)
	XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ func (o *XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_)
	TxsdGlPipelineSettingsChoiceNormalizeEnable func (o *TxsdGlPipelineSettingsChoiceNormalizeEnable)
	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ func (o *XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_)
	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ func (o *XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_)
	XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ func (o *XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_)
	XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_ func (o *XsdGoPkgHasElem_float3x2choicegles_basic_type_commonschema_Float3X2_Tfloat3X2_)
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ func (o *XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_)
	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ func (o *XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_)
	XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ func (o *XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_)
	TxsdLightSequenceTechniqueCommonChoiceAmbient func (o *TxsdLightSequenceTechniqueCommonChoiceAmbient)
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ func (o *XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_)
	XsdGoPkgHasElems_Source func (o *XsdGoPkgHasElems_Source)
	XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_ func (o *XsdGoPkgHasElem_semanticsequencecommon_newparam_typeschema_Semantic_XsdtNCName_)
	XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ func (o *XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_)
	TxsdPhysicsMaterialSequenceTechniqueCommon func (o *TxsdPhysicsMaterialSequenceTechniqueCommon)
	TfxSurfaceInitVolumeCommon func (o *TfxSurfaceInitVolumeCommon)
	XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ func (o *XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_)
	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ func (o *XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_)
	TxsdRigidConstraintSequenceTechniqueCommon func (o *TxsdRigidConstraintSequenceTechniqueCommon)
	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ func (o *XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_)
	XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_ func (o *XsdGoPkgHasElems_connect_paramchoicecg_newarray_typeschema_ConnectParam_TcgConnectParam_)
	XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ func (o *XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_)
	TxsdGlesPipelineSettingsChoiceLightSpotExponent func (o *TxsdGlesPipelineSettingsChoiceLightSpotExponent)
	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ func (o *XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_)
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 func (o *XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10)
	TxsdGlPipelineSettingsChoiceLineWidth func (o *TxsdGlPipelineSettingsChoiceLineWidth)
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ func (o *XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_)
	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_)
	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_)
	TxsdGlPipelineSettingsChoiceBlendColor func (o *TxsdGlPipelineSettingsChoiceBlendColor)
	XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ func (o *XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_)
	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ func (o *XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_)
	TxsdTriangles func (o *TxsdTriangles)
	XsdGoPkgHasElem_InstanceController func (o *XsdGoPkgHasElem_InstanceController)
	TxsdLibraryCameras func (o *TxsdLibraryCameras)
	TxsdCommonColorOrTextureTypeChoiceParam func (o *TxsdCommonColorOrTextureTypeChoiceParam)
	TglSamplerCUBE func (o *TglSamplerCUBE)
	TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack func (o *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack)
	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ func (o *XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_)
	XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencegles_sampler_stateschema_Minfilter_TfxSamplerFilterCommon_None)
	TxsdGlPipelineSettingsChoiceDepthTestEnable func (o *TxsdGlPipelineSettingsChoiceDepthTestEnable)
	XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ func (o *XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_)
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ func (o *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_)
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ func (o *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_)
	XsdGoPkgHasElems_Translate func (o *XsdGoPkgHasElems_Translate)
	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_)
	XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ func (o *XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_)
	XsdGoPkgHasElem_InstanceGeometry func (o *XsdGoPkgHasElem_InstanceGeometry)
	TxsdGlesPipelineSettingsChoiceClearStencil func (o *TxsdGlesPipelineSettingsChoiceClearStencil)
	XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ func (o *XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_)
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ func (o *XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_)
	XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ func (o *XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_)
	TxsdBindMaterialSequenceTechniqueCommon func (o *TxsdBindMaterialSequenceTechniqueCommon)
	TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable func (o *TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable)
	XsdGoPkgHasElem_GlHookAbstract func (o *XsdGoPkgHasElem_GlHookAbstract)
	TxsdProfileGlslSequenceTechnique func (o *TxsdProfileGlslSequenceTechnique)
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ func (o *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_)
	XsdGoPkgHasElem_LibraryPhysicsMaterials func (o *XsdGoPkgHasElem_LibraryPhysicsMaterials)
	XsdGoPkgHasElems_Camera func (o *XsdGoPkgHasElems_Camera)
	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ func (o *XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_)
	XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_ func (o *XsdGoPkgHasElem_floatchoicesequencecommon_newparam_typeschema_Float_Tfloat_)
	XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_ func (o *XsdGoPkgHasElem_modifiersequenceglsl_newparamschema_Modifier_TfxModifierEnumCommon_)
	XsdGoPkgHasElems_Capsule func (o *XsdGoPkgHasElems_Capsule)
	TxsdGlesPipelineSettingsChoiceColorLogicOpEnable func (o *TxsdGlesPipelineSettingsChoiceColorLogicOpEnable)
	TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation func (o *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation)
	TxsdGlPipelineSettingsChoicePolygonStippleEnable func (o *TxsdGlPipelineSettingsChoicePolygonStippleEnable)
	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ func (o *XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_)
	XsdGoPkgHasElem_Spline func (o *XsdGoPkgHasElem_Spline)
	TxsdGlPipelineSettingsChoiceColorLogicOpEnable func (o *TxsdGlPipelineSettingsChoiceColorLogicOpEnable)
	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ func (o *XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_)
	XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ func (o *XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_)
	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ func (o *XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_)
	XsdGoPkgHasElem_Plane func (o *XsdGoPkgHasElem_Plane)
	XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ func (o *XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_)
	TxsdGlPipelineSettingsChoiceLogicOpEnable func (o *TxsdGlPipelineSettingsChoiceLogicOpEnable)
	TxsdVertices func (o *TxsdVertices)
	TglSampler2D func (o *TglSampler2D)
	XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ func (o *XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_)
	TxsdGlesPipelineSettingsChoiceLightLinearAttenutation func (o *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation)
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ func (o *XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_)
	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ func (o *XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_)
	XsdGoPkgHasGroup_FxBasicTypeCommon func (o *XsdGoPkgHasGroup_FxBasicTypeCommon)
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_samplerCUBE_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255)
	XsdGoPkgHasElem_FloatArray func (o *XsdGoPkgHasElem_FloatArray)
	XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ func (o *XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_)
	XsdGoPkgHasElem_Asset func (o *XsdGoPkgHasElem_Asset)
	XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ func (o *XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_)
	XsdGoPkgHasElem_Camera func (o *XsdGoPkgHasElem_Camera)
	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ func (o *XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_)
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_)
	TxsdFxSurfaceInitVolumeCommonChoicePrimary func (o *TxsdFxSurfaceInitVolumeCommonChoicePrimary)
	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ func (o *XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_)
	TxsdGlPipelineSettingsChoiceMaterialSpecular func (o *TxsdGlPipelineSettingsChoiceMaterialSpecular)
	TxsdGlPipelineSettingsChoiceColorMaterialEnable func (o *TxsdGlPipelineSettingsChoiceColorMaterialEnable)
	TxsdGlesPipelineSettingsChoiceScissorTestEnable func (o *TxsdGlesPipelineSettingsChoiceScissorTestEnable)
	TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail func (o *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail)
	XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_samplerRECT_commonschema_Source_XsdtNCName_)
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ func (o *XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_)
	TxsdPhysicsScene func (o *TxsdPhysicsScene)
	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ func (o *XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_)
	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ func (o *XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_)
	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ func (o *XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_)
	TxsdProfileGlsl func (o *TxsdProfileGlsl)
	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ func (o *XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_)
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ func (o *XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_)
	XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ func (o *XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_)
	TxsdGlesPipelineSettingsChoiceClipPlaneEnable func (o *TxsdGlesPipelineSettingsChoiceClipPlaneEnable)
	TxsdGlesPipelineSettingsChoiceTexturePipeline func (o *TxsdGlesPipelineSettingsChoiceTexturePipeline)
	TxsdEffect func (o *TxsdEffect)
	XsdGoPkgHasElems_AnimationClip func (o *XsdGoPkgHasElems_AnimationClip)
	XsdGoPkgHasElems_Trifans func (o *XsdGoPkgHasElems_Trifans)
	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ func (o *XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_)
	TxsdLibraryPhysicsMaterials func (o *TxsdLibraryPhysicsMaterials)
	XsdGoPkgHasElem_Triangles func (o *XsdGoPkgHasElem_Triangles)
	XsdGoPkgHasElem_Image func (o *XsdGoPkgHasElem_Image)
	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ func (o *XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_)
	TInputLocal func (o *TInputLocal)
	XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencetrianglesschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_)
	TargetableFloat func (o *TargetableFloat)
	XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_GLSLschema_Include_TfxIncludeCommon_)
	XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ func (o *XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_)
	XsdGoPkgHasElems_Morph func (o *XsdGoPkgHasElems_Morph)
	XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ func (o *XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_)
	TxsdInstanceEffectSequenceTechniqueHint func (o *TxsdInstanceEffectSequenceTechniqueHint)
	XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ func (o *XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_)
	XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ func (o *XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_)
	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ func (o *XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_)
	TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail func (o *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail)
	XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ func (o *XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_)
	TxsdGlPipelineSettingsChoiceCullFace func (o *TxsdGlPipelineSettingsChoiceCullFace)
	XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ func (o *XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_)
	TxsdGlPipelineSettingsChoiceAlphaTestEnable func (o *TxsdGlPipelineSettingsChoiceAlphaTestEnable)
	XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ func (o *XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_)
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic func (o *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic)
	XsdGoPkgHasElem_Channel func (o *XsdGoPkgHasElem_Channel)
	XsdGoPkgHasElems_LibraryLights func (o *XsdGoPkgHasElems_LibraryLights)
	XsdGoPkgHasElem_Matrix func (o *XsdGoPkgHasElem_Matrix)
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ func (o *XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_)
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255)
	TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb func (o *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb)
	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ func (o *XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_)
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ func (o *XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_)
	TxsdGlesPipelineSettingsChoicePointSize func (o *TxsdGlesPipelineSettingsChoicePointSize)
	XsdGoPkgHasElems_LibraryPhysicsMaterials func (o *XsdGoPkgHasElems_LibraryPhysicsMaterials)
	TxsdGlesPipelineSettingsChoiceMultisampleEnable func (o *TxsdGlesPipelineSettingsChoiceMultisampleEnable)
	XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ func (o *XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_)
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ func (o *XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_)
	TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable func (o *TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable)
	TxsdGlPipelineSettingsChoicePointSize func (o *TxsdGlPipelineSettingsChoicePointSize)
	TfxSurfaceInitCubeCommon func (o *TfxSurfaceInitCubeCommon)
	XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceglsl_setparam_simpleschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ func (o *XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_)
	XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ func (o *XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_)
	XsdGoPkgHasElems_Skin func (o *XsdGoPkgHasElems_Skin)
	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00)
	XsdGoPkgHasGroup_GlPipelineSettings func (o *XsdGoPkgHasGroup_GlPipelineSettings)
	XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ func (o *XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_)
	TxsdGlesPipelineSettingsChoiceAlphaTestEnable func (o *TxsdGlesPipelineSettingsChoiceAlphaTestEnable)
	XsdGoPkgHasElems_InstanceEffect func (o *XsdGoPkgHasElems_InstanceEffect)
	TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest func (o *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest)
	XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetexture1Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	TxsdGlesTextureUnitSequenceTexcoord func (o *TxsdGlesTextureUnitSequenceTexcoord)
	XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ func (o *XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_)
	TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator func (o *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator)
	TxsdLibraryControllers func (o *TxsdLibraryControllers)
	XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_ func (o *XsdGoPkgHasElem_float1x1choicegles_basic_type_commonschema_Float1X1_Tfloat_)
	TxsdGlPipelineSettingsChoiceMaterialShininess func (o *TxsdGlPipelineSettingsChoiceMaterialShininess)
	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ func (o *XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_)
	TxsdGlPipelineSettingsChoiceLightSpotCutoff func (o *TxsdGlPipelineSettingsChoiceLightSpotCutoff)
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ func (o *XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_)
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ func (o *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_)
	TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc func (o *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc)
	XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ func (o *XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_)
	XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ func (o *XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_)
	TxsdGlPipelineSettingsChoiceTextureCUBEEnable func (o *TxsdGlPipelineSettingsChoiceTextureCUBEEnable)
	XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ func (o *XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_)
	TxsdGlesPipelineSettingsChoiceLogicOp func (o *TxsdGlesPipelineSettingsChoiceLogicOp)
	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ func (o *XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_)
	XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_ func (o *XsdGoPkgHasElem_heightsequencecylinderschema_Height_Tfloat_)
	XsdGoPkgHasGroup_GlslParamType func (o *XsdGoPkgHasGroup_GlslParamType)
	XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ func (o *XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_)
	TxsdCommonFloatOrParamTypeChoiceFloat func (o *TxsdCommonFloatOrParamTypeChoiceFloat)
	TfxSamplerDEPTHCommon func (o *TfxSamplerDEPTHCommon)
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ func (o *XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_)
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ func (o *XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_)
	XsdGoPkgHasElems_LibraryPhysicsModels func (o *XsdGoPkgHasElems_LibraryPhysicsModels)
	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ func (o *XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_)
	TxsdGlPipelineSettingsChoiceLightPosition func (o *TxsdGlPipelineSettingsChoiceLightPosition)
	XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ func (o *XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_)
	XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 func (o *XsdGoPkgHasElem_maxsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000)
	TxsdTechnique func (o *TxsdTechnique)
	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ func (o *XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_)
	XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ func (o *XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_)
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ func (o *XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_)
	TxsdLines func (o *TxsdLines)
	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ func (o *XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_)
	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ func (o *XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_)
	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ func (o *XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_)
	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ func (o *XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_)
	TxsdGlesPipelineSettingsChoiceClearDepth func (o *TxsdGlesPipelineSettingsChoiceClearDepth)
	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ func (o *XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_)
	XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_ func (o *XsdGoPkgHasElem_float4choicegles_basic_type_commonschema_Float4_Tfloat4_)
	XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 func (o *XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00)
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ func (o *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_)
	TxsdLibraryGeometries func (o *TxsdLibraryGeometries)
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ func (o *XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_)
	XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ func (o *XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_)
	TxsdGlPipelineSettingsChoiceDepthBounds func (o *TxsdGlPipelineSettingsChoiceDepthBounds)
	XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ func (o *XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_)
	XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_ func (o *XsdGoPkgHasElem_float2x3choicegles_basic_type_commonschema_Float2X3_Tfloat2X3_)
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam func (o *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam)
	XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ func (o *XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_)
	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ func (o *XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_)
	TxsdGlesPipelineSettingsChoiceCullFaceEnable func (o *TxsdGlesPipelineSettingsChoiceCullFaceEnable)
	TfxSurfaceFormatHintCommon func (o *TfxSurfaceFormatHintCommon)
	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ func (o *XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_)
	TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable func (o *TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable)
	XsdGoPkgHasElems_BindMaterial func (o *XsdGoPkgHasElems_BindMaterial)
	TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable func (o *TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable)
	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ func (o *XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_)
	XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ func (o *XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_)
	TxsdGlPipelineSettingsChoiceLightModelColorControl func (o *TxsdGlPipelineSettingsChoiceLightModelColorControl)
	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ func (o *XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_)
	XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ func (o *XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_)
	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ func (o *XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_)
	TxsdGlPipelineSettingsChoiceAlphaFunc func (o *TxsdGlPipelineSettingsChoiceAlphaFunc)
	TxsdPolygonsSequenceChoicePh func (o *TxsdPolygonsSequenceChoicePh)
	XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_transparencysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_VisualScene func (o *XsdGoPkgHasElem_VisualScene)
	XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ func (o *XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_)
	XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ func (o *XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_)
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ func (o *XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_)
	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ func (o *XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_)
	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ func (o *XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_)
	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ func (o *XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_)
	TxsdGlPipelineSettingsChoiceClearColor func (o *TxsdGlPipelineSettingsChoiceClearColor)
	TxsdGlesPipelineSettingsChoiceDepthRange func (o *TxsdGlesPipelineSettingsChoiceDepthRange)
	TxsdGlesPipelineSettingsChoiceRescaleNormalEnable func (o *TxsdGlesPipelineSettingsChoiceRescaleNormalEnable)
	XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ func (o *XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear)
	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ func (o *XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_)
	TxsdGlPipelineSettingsChoiceColorMaterial func (o *TxsdGlPipelineSettingsChoiceColorMaterial)
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ func (o *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_)
	TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass func (o *TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass)
	TxsdFxSurfaceInitCubeCommonChoiceFace func (o *TxsdFxSurfaceInitCubeCommonChoiceFace)
	XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ func (o *XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_)
	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ func (o *XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_)
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_)
	TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass func (o *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass)
	XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencegles_newparamschema_Annotate_TfxAnnotateCommon_)
	TxsdFxSurfaceInitVolumeCommonChoiceAll func (o *TxsdFxSurfaceInitVolumeCommonChoiceAll)
	XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ func (o *XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_)
	XsdGoPkgHasElems_InstancePhysicsMaterial func (o *XsdGoPkgHasElems_InstancePhysicsMaterial)
	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ func (o *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_)
	XsdGoPkgHasElems_NameArray func (o *XsdGoPkgHasElems_NameArray)
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow func (o *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow)
	XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_ func (o *XsdGoPkgHasElem_boolchoicegles_basic_type_commonschema_Bool_Tbool_)
	TxsdGlesPipelineSettingsChoicePointDistanceAttenuation func (o *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation)
	XsdGoPkgHasGroup_FxSurfaceInitCommon func (o *XsdGoPkgHasGroup_FxSurfaceInitCommon)
	XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ func (o *XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_)
	XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_ func (o *XsdGoPkgHasElem_float4x3choicegles_basic_type_commonschema_Float4X3_Tfloat4X3_)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled)
	XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_samplerCUBE_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	TglslSetparamSimple func (o *TglslSetparamSimple)
	TxsdSkinSequenceJoints func (o *TxsdSkinSequenceJoints)
	TcgSampler3D func (o *TcgSampler3D)
	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ func (o *XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_)
	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ func (o *XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_)
	XsdGoPkgHasElems_Light func (o *XsdGoPkgHasElems_Light)
	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ func (o *XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_)
	XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_ func (o *XsdGoPkgHasElem_radiussequencecylinderschema_Radius_Tfloat2_)
	XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ func (o *XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_)
	XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ func (o *XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_)
	TxsdGlPipelineSettingsChoiceTextureEnvMode func (o *TxsdGlPipelineSettingsChoiceTextureEnvMode)
	XsdGoPkgHasElem_BoolArray func (o *XsdGoPkgHasElem_BoolArray)
	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ func (o *XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_)
	TxsdGlesPipelineSettingsChoiceLineSmoothEnable func (o *TxsdGlesPipelineSettingsChoiceLineSmoothEnable)
	TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront func (o *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront)
	TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha func (o *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha)
	TxsdGeometry func (o *TxsdGeometry)
	XsdGoPkgHasElem_Material func (o *XsdGoPkgHasElem_Material)
	TxsdGlPipelineSettingsChoiceFrontFace func (o *TxsdGlPipelineSettingsChoiceFrontFace)
	TxsdInstanceGeometry func (o *TxsdInstanceGeometry)
	XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ func (o *XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_)
	TglesTexenvCommandType func (o *TglesTexenvCommandType)
	XsdGoPkgHasElems_Polylist func (o *XsdGoPkgHasElems_Polylist)
	XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_ func (o *XsdGoPkgHasElem_surfacechoicesequencecommon_newparam_typeschema_Surface_TfxSurfaceCommon_)
	TfxSurfaceInitPlanarCommon func (o *TfxSurfaceInitPlanarCommon)
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind func (o *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind)
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ func (o *XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_)
	XsdGoPkgHasElems_FxProfileAbstract func (o *XsdGoPkgHasElems_FxProfileAbstract)
	TxsdRigidConstraint func (o *TxsdRigidConstraint)
	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ func (o *XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_)
	TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant func (o *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant)
	XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ func (o *XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_)
	TfxSurfaceInitFromCommon func (o *TfxSurfaceInitFromCommon)
	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ func (o *XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_)
	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ func (o *XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_)
	XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ func (o *XsdGoPkgHasElem_transparentsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_)
	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ func (o *XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_)
	XsdGoPkgHasElems_InstancePhysicsModel func (o *XsdGoPkgHasElems_InstancePhysicsModel)
	TcommonTransparentType func (o *TcommonTransparentType)
	TxsdExtra func (o *TxsdExtra)
	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ func (o *XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_)
	XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_tsequencefx_samplerRECT_commonschema_WrapT_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ func (o *XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_)
	XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ func (o *XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_)
	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ func (o *XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_)
	TxsdGlPipelineSettingsChoiceStencilOpSeparate func (o *TxsdGlPipelineSettingsChoiceStencilOpSeparate)
	XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ func (o *XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_)
	XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ func (o *XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_)
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ func (o *XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_)
	XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_sampler2D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	TxsdGlPipelineSettingsChoiceStencilOpSequenceFail func (o *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail)
	XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_samplerCUBE_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	TxsdAsset func (o *TxsdAsset)
	TglesNewparam func (o *TglesNewparam)
	TxsdGlPipelineSettingsChoiceFogDensity func (o *TxsdGlPipelineSettingsChoiceFogDensity)
	XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_ func (o *XsdGoPkgHasElem_usertypechoicesequencecg_newparamschema_Usertype_TcgSetuserType_)
	XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ func (o *XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_)
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ func (o *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_)
	TxsdRigidConstraintSequenceRefAttachment func (o *TxsdRigidConstraintSequenceRefAttachment)
	XsdGoPkgHasElem_Translate func (o *XsdGoPkgHasElem_Translate)
	TxsdSourceSequenceTechniqueCommon func (o *TxsdSourceSequenceTechniqueCommon)
	XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ func (o *XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_)
	XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ func (o *XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_)
	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ func (o *XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_)
	TxsdVisualScene func (o *TxsdVisualScene)
	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ func (o *XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_)
	XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ func (o *XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_)
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ func (o *XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_)
	XsdGoPkgHasElem_LibraryControllers func (o *XsdGoPkgHasElem_LibraryControllers)
	XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencefx_sampler2D_commonschema_MipmapBias_XsdtFloat_00)
	XsdGoPkgHasElem_Trifans func (o *XsdGoPkgHasElem_Trifans)
	TxsdGlPipelineSettingsChoiceTextureEnvColor func (o *TxsdGlPipelineSettingsChoiceTextureEnvColor)
	XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ func (o *XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_)
	TxsdGlPipelineSettingsChoiceLightConstantAttenuation func (o *TxsdGlPipelineSettingsChoiceLightConstantAttenuation)
	XsdGoPkgHasElems_RigidConstraint func (o *XsdGoPkgHasElems_RigidConstraint)
	TxsdLibraryEffects func (o *TxsdLibraryEffects)
	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ func (o *XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_)
	TxsdColladaSequenceScene func (o *TxsdColladaSequenceScene)
	TcommonColorOrTextureType func (o *TcommonColorOrTextureType)
	XsdGoPkgHasElem_ForceField func (o *XsdGoPkgHasElem_ForceField)
	XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ func (o *XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_)
	TxsdGlesPipelineSettingsChoiceLightEnable func (o *TxsdGlesPipelineSettingsChoiceLightEnable)
	TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace func (o *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace)
	XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ func (o *XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_)
	TxsdLibraryAnimations func (o *TxsdLibraryAnimations)
	XsdGoPkgHasElem_Geometry func (o *XsdGoPkgHasElem_Geometry)
	XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_)
	XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ func (o *XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_)
	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ func (o *XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_)
	XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_ func (o *XsdGoPkgHasElems_inputsequencetargetssequencemorphschema_Input_TInputLocal_)
	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ func (o *XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_)
	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ func (o *XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_)
	TxsdGlPipelineSettingsChoiceDepthClampEnable func (o *TxsdGlPipelineSettingsChoiceDepthClampEnable)
	TxsdLibraryImages func (o *TxsdLibraryImages)
	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ func (o *XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_)
	TxsdGlPipelineSettingsChoiceFogEnd func (o *TxsdGlPipelineSettingsChoiceFogEnd)
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ func (o *XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_)
	TxsdGlesPipelineSettingsChoiceDepthTestEnable func (o *TxsdGlesPipelineSettingsChoiceDepthTestEnable)
	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ func (o *XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_)
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ func (o *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_)
	TxsdGlPipelineSettingsChoiceDepthBoundsEnable func (o *TxsdGlPipelineSettingsChoiceDepthBoundsEnable)
	XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ func (o *XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_)
	TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue func (o *TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue)
	TargetableFloat3 func (o *TargetableFloat3)
	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ func (o *XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_)
	TxsdSphere func (o *TxsdSphere)
	TxsdGlPipelineSettingsChoiceScissor func (o *TxsdGlPipelineSettingsChoiceScissor)
	XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ func (o *XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_)
	TxsdCameraSequenceOptics func (o *TxsdCameraSequenceOptics)
	TxsdRigidBody func (o *TxsdRigidBody)
	XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ func (o *XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_)
	XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_ func (o *XsdGoPkgHasElem_bool3choicefx_annotate_type_commonschema_Bool3_Tbool3_)
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 func (o *XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10)
	TxsdGlPipelineSettingsChoiceStencilTestEnable func (o *TxsdGlPipelineSettingsChoiceStencilTestEnable)
	XsdGoPkgHasElems_LibraryImages func (o *XsdGoPkgHasElems_LibraryImages)
	XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 func (o *XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11)
	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_)
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget func (o *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget)
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ func (o *XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_)
	XsdGoPkgHasElems_Plane func (o *XsdGoPkgHasElems_Plane)
	TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable func (o *TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable)
	XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ func (o *XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_)
	XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ func (o *XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_)
	TxsdGlPipelineSettingsChoiceTexture2D func (o *TxsdGlPipelineSettingsChoiceTexture2D)
	TxsdGlPipelineSettingsChoicePolygonMode func (o *TxsdGlPipelineSettingsChoicePolygonMode)
	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ func (o *XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_)
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc func (o *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc)
	TxsdLinestrips func (o *TxsdLinestrips)
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ func (o *XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_)
	TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue func (o *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue)
	XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ func (o *XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_)
	TxsdSkin func (o *TxsdSkin)
	XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ func (o *XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_)
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False func (o *XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False)
	XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp func (o *XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp)
	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ func (o *XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_)
	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ func (o *XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_)
	TxsdMaterial func (o *TxsdMaterial)
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam func (o *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam)
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 func (o *XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000)
	XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_ func (o *XsdGoPkgHasElem_border_colorsequencefx_samplerRECT_commonschema_BorderColor_TfxColorCommon_)
	TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic func (o *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic)
	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ func (o *XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_)
	TxsdAnimationClip func (o *TxsdAnimationClip)
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ func (o *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_)
	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ func (o *XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_)
	TxsdGlesPipelineSettingsChoiceMaterialSpecular func (o *TxsdGlesPipelineSettingsChoiceMaterialSpecular)
	TxsdGlPipelineSettingsChoiceClipPlaneEnable func (o *TxsdGlPipelineSettingsChoiceClipPlaneEnable)
	XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ func (o *XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_)
	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ func (o *XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_)
	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ func (o *XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_)
	XsdGoPkgHasElem_InstanceMaterial func (o *XsdGoPkgHasElem_InstanceMaterial)
	XsdGoPkgHasElems_InstanceCamera func (o *XsdGoPkgHasElems_InstanceCamera)
	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ func (o *XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_)
	XsdGoPkgHasElem_LibraryForceFields func (o *XsdGoPkgHasElem_LibraryForceFields)
	XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencecg_newparamschema_Annotate_TfxAnnotateCommon_)
	TxsdPolygons func (o *TxsdPolygons)
	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ func (o *XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_)
	XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ func (o *XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_)
	TxsdGlPipelineSettingsChoiceClipPlane func (o *TxsdGlPipelineSettingsChoiceClipPlane)
	XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ func (o *XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_)
	XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ func (o *XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_)
	XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencecg_setparam_simpleschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ func (o *XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_)
	XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ func (o *XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_)
	XsdGoPkgHasElem_LibraryEffects func (o *XsdGoPkgHasElem_LibraryEffects)
	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap)
	TxsdConvexMesh func (o *TxsdConvexMesh)
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 func (o *XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000)
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ func (o *XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_)
	XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ func (o *XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_)
	TxsdFxSurfaceInitCubeCommonChoicePrimary func (o *TxsdFxSurfaceInitCubeCommonChoicePrimary)
	XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ func (o *XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_)
	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ func (o *XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_)
	TxsdGlesPipelineSettingsChoiceTexturePipelineEnable func (o *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable)
	XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ func (o *XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_)
	XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ func (o *XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_)
	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ func (o *XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_)
	TxsdGlPipelineSettingsChoiceDepthMask func (o *TxsdGlPipelineSettingsChoiceDepthMask)
	TglslNewparam func (o *TglslNewparam)
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ func (o *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_)
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ func (o *XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_)
	TxsdGlPipelineSettingsChoiceBlendFuncSeparate func (o *TxsdGlPipelineSettingsChoiceBlendFuncSeparate)
	XsdGoPkgHasElems_Spline func (o *XsdGoPkgHasElems_Spline)
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget func (o *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget)
	XsdGoPkgHasElem_P func (o *XsdGoPkgHasElem_P)
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ func (o *XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_)
	TfxColortargetCommon func (o *TfxColortargetCommon)
	XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 func (o *XsdGoPkgHasElem_target_valuesequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00)
	XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ func (o *XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_)
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 func (o *XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00)
	XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ func (o *XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_)
	TxsdGlesPipelineSettingsChoiceDepthMask func (o *TxsdGlesPipelineSettingsChoiceDepthMask)
	XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_ func (o *XsdGoPkgHasElem_float1x4choicegles_basic_type_commonschema_Float1X4_Tfloat4_)
	XsdGoPkgHasElems_LibraryNodes func (o *XsdGoPkgHasElems_LibraryNodes)
	XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ func (o *XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_)
	XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencepolylistschema_Input_TInputLocalOffset_)
	TxsdFloatArray func (o *TxsdFloatArray)
	XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ func (o *XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_)
	XsdGoPkgHasElem_InstanceCamera func (o *XsdGoPkgHasElem_InstanceCamera)
	TcgSamplerDEPTH func (o *TcgSamplerDEPTH)
	XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_ func (o *XsdGoPkgHasElem_float3choicegles_basic_type_commonschema_Float3_Tfloat3_)
	XsdGoPkgHasElem_LibraryPhysicsModels func (o *XsdGoPkgHasElem_LibraryPhysicsModels)
	TxsdGlesPipelineSettingsChoiceFogStart func (o *TxsdGlesPipelineSettingsChoiceFogStart)
	XsdGoPkgHasElems_IntArray func (o *XsdGoPkgHasElems_IntArray)
	XsdGoPkgHasElems_Mesh func (o *XsdGoPkgHasElems_Mesh)
	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ func (o *XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_)
	XsdGoPkgHasElems_InstanceNode func (o *XsdGoPkgHasElems_InstanceNode)
	TxsdGlPipelineSettingsChoiceLightModelAmbient func (o *TxsdGlPipelineSettingsChoiceLightModelAmbient)
	XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ func (o *XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_)
	TxsdGlesPipelineSettingsChoiceFogMode func (o *TxsdGlesPipelineSettingsChoiceFogMode)
	TxsdGlPipelineSettingsChoiceClearDepth func (o *TxsdGlPipelineSettingsChoiceClearDepth)
	TxsdGlesPipelineSettingsChoiceLightSpotDirection func (o *TxsdGlesPipelineSettingsChoiceLightSpotDirection)
	XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_ func (o *XsdGoPkgHasElem_modifiersequencegles_newparamschema_Modifier_TfxModifierEnumCommon_)
	TxsdCylinder func (o *TxsdCylinder)
	XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_ func (o *XsdGoPkgHasElem_float4choicesequencecommon_newparam_typeschema_Float4_Tfloat4_)
	XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_)
	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ func (o *XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_)
	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_)
	XsdGoPkgHasElems_InstanceController func (o *XsdGoPkgHasElems_InstanceController)
	TglSampler3D func (o *TglSampler3D)
	XsdGoPkgHasElems_Skew func (o *XsdGoPkgHasElems_Skew)
	XsdGoPkgHasElems_Scale func (o *XsdGoPkgHasElems_Scale)
	TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator func (o *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator)
	TcgSampler1D func (o *TcgSampler1D)
	XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ func (o *XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_)
	TxsdGlesPipelineSettingsChoicePointSmoothEnable func (o *TxsdGlesPipelineSettingsChoicePointSmoothEnable)
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ func (o *XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_)
	TxsdInstanceRigidBodySequenceTechniqueCommon func (o *TxsdInstanceRigidBodySequenceTechniqueCommon)
	XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ func (o *XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_)
	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_)
	XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_)
	TxsdGlesPipelineSettingsChoiceMaterialAmbient func (o *TxsdGlesPipelineSettingsChoiceMaterialAmbient)
	TxsdGlPipelineSettingsChoiceMaterialDiffuse func (o *TxsdGlPipelineSettingsChoiceMaterialDiffuse)
	TxsdMorph func (o *TxsdMorph)
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ func (o *XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_)
	XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ func (o *XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_)
	XsdGoPkgHasElem_IdrefArray func (o *XsdGoPkgHasElem_IdrefArray)
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 func (o *XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00)
	TxsdGlPipelineSettingsChoicePointFadeThresholdSize func (o *TxsdGlPipelineSettingsChoicePointFadeThresholdSize)
	XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ func (o *XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_)
	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_ func (o *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_CGschema_Draw_TfxDrawCommon_)
	TglesTexcombinerCommandType func (o *TglesTexcombinerCommandType)
	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ func (o *XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_)
	TxsdCommonFloatOrParamTypeChoiceParam func (o *TxsdCommonFloatOrParamTypeChoiceParam)
	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ func (o *XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_)
	XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ func (o *XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_)
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ func (o *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_)
	XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 func (o *XsdGoPkgHasElem_dampingsequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00)
	XsdGoPkgHasElems_LibraryEffects func (o *XsdGoPkgHasElems_LibraryEffects)
	XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ func (o *XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_)
	XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ func (o *XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_)
	XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ func (o *XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_)
	XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceeffectschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ func (o *XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_)
	TxsdGlesPipelineSettingsChoiceStencilOp func (o *TxsdGlesPipelineSettingsChoiceStencilOp)
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ func (o *XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_)
	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ func (o *XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_)
	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ func (o *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_)
	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ func (o *XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_)
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ func (o *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_)
	XsdGoPkgHasElem_LibraryImages func (o *XsdGoPkgHasElem_LibraryImages)
	XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencefx_samplerRECT_commonschema_MipmapBias_XsdtFloat_00)
	TxsdInstanceRigidBody func (o *TxsdInstanceRigidBody)
	XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ func (o *XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_)
	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ func (o *XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_)
	XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequenceprofile_GLSLschema_Code_TfxCodeProfile_)
	XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_)
	TxsdGlesPipelineSettingsChoiceBlendFunc func (o *TxsdGlesPipelineSettingsChoiceBlendFunc)
	XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ func (o *XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_)
	TxsdGlPipelineSettingsChoiceMultisampleEnable func (o *TxsdGlPipelineSettingsChoiceMultisampleEnable)
	XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_ func (o *XsdGoPkgHasElem_float2x1choicegles_basic_type_commonschema_Float2X1_Tfloat2_)
	XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 func (o *XsdGoPkgHasElem_minsequenceswing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000)
	TInstanceWithExtra func (o *TInstanceWithExtra)
	XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_ func (o *XsdGoPkgHasElem_bool4choicefx_annotate_type_commonschema_Bool4_Tbool4_)
	TfxClearstencilCommon func (o *TfxClearstencilCommon)
	XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencesetparamchoicesequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_)
	TcgNewparam func (o *TcgNewparam)
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ func (o *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_)
	TxsdGlesPipelineSettingsChoiceLineWidth func (o *TxsdGlesPipelineSettingsChoiceLineWidth)
	XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ func (o *XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_)
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ func (o *XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_)
	TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable func (o *TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable)
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ func (o *XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_)
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ func (o *XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_)
	TxsdEllipsoid func (o *TxsdEllipsoid)
	XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ func (o *XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_)
	TxsdCamera func (o *TxsdCamera)
	XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ func (o *XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_)
	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_)
	XsdGoPkgHasElems_InstanceRigidBody func (o *XsdGoPkgHasElems_InstanceRigidBody)
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ func (o *XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_)
	XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ func (o *XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_)
	XsdGoPkgHasElem_Scale func (o *XsdGoPkgHasElem_Scale)
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ func (o *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_)
	XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ func (o *XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_)
	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ func (o *XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_)
	TxsdPhysicsSceneSequenceTechniqueCommon func (o *TxsdPhysicsSceneSequenceTechniqueCommon)
	XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_ func (o *XsdGoPkgHasElem_surfacechoicegles_basic_type_commonschema_Surface_TfxSurfaceCommon_)
	TxsdGlPipelineSettingsChoiceMaterialEmission func (o *TxsdGlPipelineSettingsChoiceMaterialEmission)
	TxsdGlesPipelineSettingsChoiceScissor func (o *TxsdGlesPipelineSettingsChoiceScissor)
	TcgSamplerRECT func (o *TcgSamplerRECT)
	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_)
	XsdGoPkgHasElems_InstanceLight func (o *XsdGoPkgHasElems_InstanceLight)
	XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ func (o *XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring)
	TxsdGlesPipelineSettingsChoiceModelViewMatrix func (o *TxsdGlesPipelineSettingsChoiceModelViewMatrix)
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ func (o *XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_)
	XsdGoPkgHasElem_Lookat func (o *XsdGoPkgHasElem_Lookat)
	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ func (o *XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_)
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ func (o *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_)
	XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ func (o *XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_)
	XsdGoPkgHasElems_LibraryCameras func (o *XsdGoPkgHasElems_LibraryCameras)
	XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_ func (o *XsdGoPkgHasElem_int2choicefx_annotate_type_commonschema_Int2_Tint2_)
	TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail func (o *TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail)
	XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ func (o *XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_)
	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ func (o *XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_)
	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ func (o *XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_)
	TxsdGlPipelineSettingsChoiceStencilFunc func (o *TxsdGlPipelineSettingsChoiceStencilFunc)
	TxsdGlPipelineSettingsChoiceLightSpotExponent func (o *TxsdGlPipelineSettingsChoiceLightSpotExponent)
	XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ func (o *XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_)
	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ func (o *XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_)
	XsdGoPkgHasElem_RigidConstraint func (o *XsdGoPkgHasElem_RigidConstraint)
	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ func (o *XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_)
	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ func (o *XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_)
	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ func (o *XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_)
	XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ func (o *XsdGoPkgHasElem_aspect_ratiosequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_)
	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ func (o *XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_)
	XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ func (o *XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_)
	XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ func (o *XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_)
	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ func (o *XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_)
	TxsdLightSequenceTechniqueCommonChoiceDirectional func (o *TxsdLightSequenceTechniqueCommonChoiceDirectional)
	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ func (o *XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_)
	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ func (o *XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_)
	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ func (o *XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_)
	XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ func (o *XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_)
	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ func (o *XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_)
	XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ func (o *XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_)
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ func (o *XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_)
	XsdGoPkgHasElem_Rotate func (o *XsdGoPkgHasElem_Rotate)
	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ func (o *XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_)
	TxsdGlesPipelineSettingsChoiceFrontFace func (o *TxsdGlesPipelineSettingsChoiceFrontFace)
	XsdGoPkgHasElem_ProfileCg func (o *XsdGoPkgHasElem_ProfileCg)
	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ func (o *XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_)
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ func (o *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_)
	XsdGoPkgHasElem_LibraryAnimationClips func (o *XsdGoPkgHasElem_LibraryAnimationClips)
	XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ func (o *XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_)
	XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ func (o *XsdGoPkgHasElem_colorsequencedirectionalchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_)
	TxsdGlPipelineSettingsChoiceFogColor func (o *TxsdGlPipelineSettingsChoiceFogColor)
	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ func (o *XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_)
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 func (o *XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00)
	TxsdSplineSequenceControlVertices func (o *TxsdSplineSequenceControlVertices)
	XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ func (o *XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_)
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ func (o *XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_)
	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ func (o *XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_)
	XsdGoPkgHasElem_Param func (o *XsdGoPkgHasElem_Param)
	XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ func (o *XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_)
	XsdGoPkgHasElem_PhysicsModel func (o *XsdGoPkgHasElem_PhysicsModel)
	TxsdRotate func (o *TxsdRotate)
	TfxCleardepthCommon func (o *TfxCleardepthCommon)
	XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_ func (o *XsdGoPkgHasElem_float2x2choicegles_basic_type_commonschema_Float2X2_Tfloat2X2_)
	TxsdLibraryLights func (o *TxsdLibraryLights)
	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ func (o *XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_)
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName func (o *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName)
	XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_ func (o *XsdGoPkgHasElem_float2x4choicegles_basic_type_commonschema_Float2X4_Tfloat2X4_)
	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ func (o *XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_)
	TxsdGlesPipelineSettingsChoicePointSizeMin func (o *TxsdGlesPipelineSettingsChoicePointSizeMin)
	XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ func (o *XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_)
	XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ func (o *XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_)
	XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_ func (o *XsdGoPkgHasElem_int4choicegles_basic_type_commonschema_Int4_Tint4_)
	XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ func (o *XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_)
	TglslNewarrayType func (o *TglslNewarrayType)
	XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_sampler1D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ func (o *XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_)
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0)
	XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ func (o *XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_)
	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_ func (o *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLSLschema_Draw_TfxDrawCommon_)
	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ func (o *XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_)
	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ func (o *XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_)
	TxsdGlPipelineSettingsChoiceStencilMask func (o *TxsdGlPipelineSettingsChoiceStencilMask)
	XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ func (o *XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_)
	XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ func (o *XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_)
	TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef func (o *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef)
	XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_ func (o *XsdGoPkgHasElem_float3x1choicegles_basic_type_commonschema_Float3X1_Tfloat3_)
	TxsdGlPipelineSettingsChoicePointSizeMin func (o *TxsdGlPipelineSettingsChoicePointSizeMin)
	XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ func (o *XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_)
	XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_tsequencefx_samplerCUBE_commonschema_WrapT_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ func (o *XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_)
	XsdGoPkgHasElems_LibraryAnimations func (o *XsdGoPkgHasElems_LibraryAnimations)
	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_)
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ func (o *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_)
	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_samplerCUBE_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ func (o *XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_)
	XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ func (o *XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_)
	XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ func (o *XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_)
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 func (o *XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00)
	TglslSetarrayType func (o *TglslSetarrayType)
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ func (o *XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_)
	XsdGoPkgHasElem_Box func (o *XsdGoPkgHasElem_Box)
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 func (o *XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000)
	TxsdSkinSequenceVertexWeights func (o *TxsdSkinSequenceVertexWeights)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular)
	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ func (o *XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_)
	XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ func (o *XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_)
	TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc func (o *TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc)
	XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ func (o *XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_)
	XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ func (o *XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_)
	TxsdLibraryPhysicsModels func (o *TxsdLibraryPhysicsModels)
	XsdGoPkgHasElem_LibraryNodes func (o *XsdGoPkgHasElem_LibraryNodes)
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ func (o *XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_)
	XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ func (o *XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_)
	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ func (o *XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_)
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_ func (o *XsdGoPkgHasElem_inertiasequencetechnique_commonsequencerigid_bodyschema_Inertia_TargetableFloat3_)
	XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ func (o *XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_)
	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ func (o *XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_)
	XsdGoPkgHasElems_FloatArray func (o *XsdGoPkgHasElems_FloatArray)
	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ func (o *XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_)
	XsdGoPkgHasElems_BoolArray func (o *XsdGoPkgHasElems_BoolArray)
	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ func (o *XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_)
	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ func (o *XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_)
	XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_ func (o *XsdGoPkgHasElems_inputsequencecontrol_verticessequencesplineschema_Input_TInputLocal_)
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ func (o *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_)
	TxsdGlPipelineSettingsChoiceLineStippleEnable func (o *TxsdGlPipelineSettingsChoiceLineStippleEnable)
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ func (o *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_)
	TxsdCameraSequenceOpticsSequenceTechniqueCommon func (o *TxsdCameraSequenceOpticsSequenceTechniqueCommon)
	XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ func (o *XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_)
	TxsdPlane func (o *TxsdPlane)
	XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ func (o *XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_)
	XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetextureRECTchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	TxsdVisualSceneSequenceEvaluateScene func (o *TxsdVisualSceneSequenceEvaluateScene)
	XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_)
	TxsdGlesPipelineSettingsChoiceLightConstantAttenuation func (o *TxsdGlesPipelineSettingsChoiceLightConstantAttenuation)
	XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_ func (o *XsdGoPkgHasElem_floatchoicegles_basic_type_commonschema_Float_Tfloat_)
	TxsdGlesPipelineSettingsChoiceLightAmbient func (o *TxsdGlesPipelineSettingsChoiceLightAmbient)
	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_)
	TxsdVisualSceneSequenceEvaluateSceneSequenceRender func (o *TxsdVisualSceneSequenceEvaluateSceneSequenceRender)
	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ func (o *XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_)
	TxsdGlesPipelineSettingsChoiceFogEnd func (o *TxsdGlesPipelineSettingsChoiceFogEnd)
	TxsdLightSequenceTechniqueCommon func (o *TxsdLightSequenceTechniqueCommon)
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName func (o *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName)
	TglSamplerRECT func (o *TglSamplerRECT)
	TglslSetparam func (o *TglslSetparam)
	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ func (o *XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_)
	XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_ func (o *XsdGoPkgHasElem_float3x3choicegles_basic_type_commonschema_Float3X3_Tfloat3X3_)
	XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ func (o *XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_)
	TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb func (o *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb)
	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ func (o *XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_)
	XsdGoPkgHasElem_ConvexMesh func (o *XsdGoPkgHasElem_ConvexMesh)
	TcgSetarrayType func (o *TcgSetarrayType)
	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ func (o *XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_)
	XsdGoPkgHasElems_IdrefArray func (o *XsdGoPkgHasElems_IdrefArray)
	XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_ func (o *XsdGoPkgHasElem_float4x4choicegles_basic_type_commonschema_Float4X4_Tfloat4X4_)
	TxsdProfileCgSequenceTechniqueSequencePass func (o *TxsdProfileCgSequenceTechniqueSequencePass)
	TxsdGlesPipelineSettingsChoiceStencilMask func (o *TxsdGlesPipelineSettingsChoiceStencilMask)
	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ func (o *XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_)
	TxsdGlPipelineSettingsChoiceBlendEnable func (o *TxsdGlPipelineSettingsChoiceBlendEnable)
	XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ func (o *XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_)
	TxsdGlPipelineSettingsChoiceLineSmoothEnable func (o *TxsdGlPipelineSettingsChoiceLineSmoothEnable)
	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ func (o *XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_)
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ func (o *XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_)
	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ func (o *XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_)
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_)
	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ func (o *XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_)
	TxsdGlesPipelineSettingsChoiceDepthFunc func (o *TxsdGlesPipelineSettingsChoiceDepthFunc)
	XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequenceprofile_GLSLschema_Include_TfxIncludeCommon_)
	XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ func (o *XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_)
	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ func (o *XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_)
	XsdGoPkgHasElem_AnimationClip func (o *XsdGoPkgHasElem_AnimationClip)
	TxsdImage func (o *TxsdImage)
	XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ func (o *XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_)
	TfxNewparamCommon func (o *TfxNewparamCommon)
	TxsdBoolArray func (o *TxsdBoolArray)
	XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_ func (o *XsdGoPkgHasElem_float3x4choicegles_basic_type_commonschema_Float3X4_Tfloat3X4_)
	XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 func (o *XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0)
	XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ func (o *XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_)
	XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255 func (o *XsdGoPkgHasElem_mipmap_maxlevelsequencegles_sampler_stateschema_MipmapMaxlevel_XsdtUnsignedByte_255)
	XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_ func (o *XsdGoPkgHasElem_int4choicefx_annotate_type_commonschema_Int4_Tint4_)
	XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_reflectivitysequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ func (o *XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_)
	XsdGoPkgHasElems_Asset func (o *XsdGoPkgHasElems_Asset)
	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ func (o *XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_)
	TxsdGlesPipelineSettingsChoiceClearColor func (o *TxsdGlesPipelineSettingsChoiceClearColor)
	TglesTexcombinerCommandRGBType func (o *TglesTexcombinerCommandRGBType)
	TxsdGlesPipelineSettingsChoiceBlendEnable func (o *TxsdGlesPipelineSettingsChoiceBlendEnable)
	TxsdGlesPipelineSettingsChoiceFogDensity func (o *TxsdGlesPipelineSettingsChoiceFogDensity)
	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	TxsdGlPipelineSettingsChoiceFogCoordSrc func (o *TxsdGlPipelineSettingsChoiceFogCoordSrc)
	XsdGoPkgHasElems_Triangles func (o *XsdGoPkgHasElems_Triangles)
	XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ func (o *XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_)
	XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencegles_sampler_stateschema_MipmapBias_XsdtFloat_00)
	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ func (o *XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_)
	XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ func (o *XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_)
	TxsdAccessor func (o *TxsdAccessor)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist)
	XsdGoPkgHasElems_ProfileGles func (o *XsdGoPkgHasElems_ProfileGles)
	XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ func (o *XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_)
	XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 func (o *XsdGoPkgHasElem_stiffnesssequencelinearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10)
	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElems_PhysicsMaterial func (o *XsdGoPkgHasElems_PhysicsMaterial)
	TglesTextureConstantType func (o *TglesTextureConstantType)
	XsdGoPkgHasElems_LibraryAnimationClips func (o *XsdGoPkgHasElems_LibraryAnimationClips)
	XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequencetechniquesequenceprofile_CGschema_Include_TfxIncludeCommon_)
	XsdGoPkgHasElems_LibraryMaterials func (o *XsdGoPkgHasElems_LibraryMaterials)
	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ func (o *XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_)
	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ func (o *XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_)
	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ func (o *XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_)
	XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ func (o *XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_)
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ func (o *XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_)
	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLSLschema_Newparam_TglslNewparam_)
	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ func (o *XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_)
	XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ func (o *XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_)
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ func (o *XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_)
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ func (o *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_)
	TxsdProfileCommonSequenceTechniqueSequenceChoicePhong func (o *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong)
	TxsdGlPipelineSettingsChoiceMaterialAmbient func (o *TxsdGlPipelineSettingsChoiceMaterialAmbient)
	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ func (o *XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_)
	TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask func (o *TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask)
	TxsdLibraryNodes func (o *TxsdLibraryNodes)
	XsdGoPkgHasElem_Node func (o *XsdGoPkgHasElem_Node)
	XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Annotate_TfxAnnotateCommon_)
	TxsdGlesPipelineSettingsChoiceLightSpecular func (o *TxsdGlesPipelineSettingsChoiceLightSpecular)
	TxsdGlesPipelineSettingsChoiceFogColor func (o *TxsdGlesPipelineSettingsChoiceFogColor)
	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ func (o *XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_)
	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ func (o *XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_)
	XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_ func (o *XsdGoPkgHasElem_bool2choicegles_basic_type_commonschema_Bool2_Tbool2_)
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef func (o *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef)
	XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ func (o *XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_)
	TxsdProfileCgSequenceTechnique func (o *TxsdProfileCgSequenceTechnique)
	TglesTextureUnit func (o *TglesTextureUnit)
	XsdGoPkgHasElems_Node func (o *XsdGoPkgHasElems_Node)
	TxsdGlesPipelineSettingsChoiceAlphaFunc func (o *TxsdGlesPipelineSettingsChoiceAlphaFunc)
	XsdGoPkgHasElem_InstanceForceField func (o *XsdGoPkgHasElem_InstanceForceField)
	TfxDepthtargetCommon func (o *TfxDepthtargetCommon)
	XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_index_of_refractionsequenceconstantchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_)
	TxsdGlPipelineSettingsChoiceColorMask func (o *TxsdGlPipelineSettingsChoiceColorMask)
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ func (o *XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_)
	XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_ func (o *XsdGoPkgHasElem_masssequencetechnique_commonsequencerigid_bodyschema_Mass_TargetableFloat_)
	TxsdGlesPipelineSettingsChoiceStencilFunc func (o *TxsdGlesPipelineSettingsChoiceStencilFunc)
	TxsdGlesPipelineSettingsChoiceLightDiffuse func (o *TxsdGlesPipelineSettingsChoiceLightDiffuse)
	TxsdTaperedCylinder func (o *TxsdTaperedCylinder)
	XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ func (o *XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_)
	TxsdLibraryAnimationClips func (o *TxsdLibraryAnimationClips)
	TcgNewarrayType func (o *TcgNewarrayType)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear)
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ func (o *XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_)
	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLESschema_Annotate_TfxAnnotateCommon_)
	TxsdGlPipelineSettingsChoiceFogMode func (o *TxsdGlPipelineSettingsChoiceFogMode)
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_)
	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ func (o *XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_)
	TxsdParam func (o *TxsdParam)
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ func (o *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_)
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ func (o *XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_)
	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ func (o *XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_)
	TcgSetparam func (o *TcgSetparam)
	XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ func (o *XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_)
	XsdGoPkgHasElems_Polygons func (o *XsdGoPkgHasElems_Polygons)
	XsdGoPkgHasElem_Polylist func (o *XsdGoPkgHasElem_Polylist)
	TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb func (o *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb)
	TxsdPolylist func (o *TxsdPolylist)
	XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ func (o *XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_)
	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ func (o *XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_)
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ func (o *XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_)
	TxsdGlPipelineSettingsChoiceTexture1DEnable func (o *TxsdGlPipelineSettingsChoiceTexture1DEnable)
	XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_ func (o *XsdGoPkgHasElem_float3x3choicefx_annotate_type_commonschema_Float3X3_Tfloat3X3_)
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ func (o *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_)
	XsdGoPkgHasElem_Tristrips func (o *XsdGoPkgHasElem_Tristrips)
	XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_ func (o *XsdGoPkgHasElem_sampler2Dchoicesequencecommon_newparam_typeschema_Sampler2D_TfxSampler2DCommon_)
	XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ func (o *XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_)
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ func (o *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_)
	XsdGoPkgHasElem_Mesh func (o *XsdGoPkgHasElem_Mesh)
	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ func (o *XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_)
	XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ func (o *XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_)
	TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef func (o *TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef)
	TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable func (o *TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable)
	TxsdGlesPipelineSettingsChoiceMaterialEmission func (o *TxsdGlesPipelineSettingsChoiceMaterialEmission)
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ func (o *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_)
	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ func (o *XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_)
	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ func (o *XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_)
	XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ func (o *XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_)
	TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc func (o *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc)
	TcgSamplerCUBE func (o *TcgSamplerCUBE)
	TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode func (o *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode)
	TglesSamplerState func (o *TglesSamplerState)
	XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ func (o *XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_)
	TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate func (o *TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate)
	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ func (o *XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_)
	XsdGoPkgHasElems_Technique func (o *XsdGoPkgHasElems_Technique)
	TxsdGlPipelineSettingsChoicePolygonOffset func (o *TxsdGlPipelineSettingsChoicePolygonOffset)
	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ func (o *XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_)
	XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ func (o *XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_)
	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ func (o *XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_)
	XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ func (o *XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_)
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ func (o *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_)
	XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat func (o *XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat)
	XsdGoPkgHasElems_Lookat func (o *XsdGoPkgHasElems_Lookat)
	XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ func (o *XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_)
	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ func (o *XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_)
	TxsdLookat func (o *TxsdLookat)
	XsdGoPkgHasElem_LibraryCameras func (o *XsdGoPkgHasElem_LibraryCameras)
	TxsdGlesPipelineSettingsChoiceColorMask func (o *TxsdGlesPipelineSettingsChoiceColorMask)
	TxsdSampler func (o *TxsdSampler)
	XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ func (o *XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_)
	XsdGoPkgHasElems_GlHookAbstract func (o *XsdGoPkgHasElems_GlHookAbstract)
	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ func (o *XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_)
	XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_ func (o *XsdGoPkgHasElem_int3choicefx_annotate_type_commonschema_Int3_Tint3_)
	XsdGoPkgHasElems_ConvexMesh func (o *XsdGoPkgHasElems_ConvexMesh)
	XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ func (o *XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_)
	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ func (o *XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_)
	TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace func (o *TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace)
	TxsdIntArray func (o *TxsdIntArray)
	XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ func (o *XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_)
	XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ func (o *XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_)
	TxsdAssetSequenceContributor func (o *TxsdAssetSequenceContributor)
	XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat func (o *XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat)
	XsdGoPkgHasElem_FxProfileAbstract func (o *XsdGoPkgHasElem_FxProfileAbstract)
	TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace func (o *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace)
	XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ func (o *XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_)
	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ func (o *XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_)
	XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ func (o *XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_)
	XsdGoPkgHasElems_LibraryVisualScenes func (o *XsdGoPkgHasElems_LibraryVisualScenes)
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_ func (o *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequencerigid_bodyschema_Density_TargetableFloat_)
	TxsdGlesPipelineSettingsChoicePolygonOffset func (o *TxsdGlesPipelineSettingsChoicePolygonOffset)
	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ func (o *XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_)
	XsdGoPkgHasElems_Ellipsoid func (o *XsdGoPkgHasElems_Ellipsoid)
	XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ func (o *XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_)
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape func (o *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape)
	XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ func (o *XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_)
	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ func (o *XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_)
	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ func (o *XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_)
	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ func (o *XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_)
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ func (o *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_)
	XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ func (o *XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_)
	TglesTexcombinerArgumentRGBType func (o *TglesTexcombinerArgumentRGBType)
	XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ func (o *XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_)
	TxsdTrifans func (o *TxsdTrifans)
	TxsdGlPipelineSettingsChoiceTexture1D func (o *TxsdGlPipelineSettingsChoiceTexture1D)
	TglesTexcombinerArgumentAlphaType func (o *TglesTexcombinerArgumentAlphaType)
	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ func (o *XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_)
	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ func (o *XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_)
	XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ func (o *XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_)
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ func (o *XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_)
	XsdGoPkgHasElems_Cylinder func (o *XsdGoPkgHasElems_Cylinder)
	XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequenceprofile_CGschema_Code_TfxCodeProfile_)
	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ func (o *XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_)
	XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetextureDEPTHchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_ func (o *XsdGoPkgHasElem_heightsequencecapsuleschema_Height_Tfloat_)
	XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ func (o *XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_)
	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ func (o *XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_)
	XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ func (o *XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_)
	XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ func (o *XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_)
	TxsdGlPipelineSettingsChoiceTextureDEPTHEnable func (o *TxsdGlPipelineSettingsChoiceTextureDEPTHEnable)
	XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_)
	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ func (o *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_)
	XsdGoPkgHasElem_ProfileGlsl func (o *XsdGoPkgHasElem_ProfileGlsl)
	XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_ func (o *XsdGoPkgHasElems_inputsequencejointssequenceskinschema_Input_TInputLocal_)
	TxsdRigidBodySequenceTechniqueCommonSequenceDynamic func (o *TxsdRigidBodySequenceTechniqueCommonSequenceDynamic)
	TxsdProfileGlesSequenceTechnique func (o *TxsdProfileGlesSequenceTechnique)
	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ func (o *XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_)
	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ func (o *XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_)
	XsdGoPkgHasElem_LibraryAnimations func (o *XsdGoPkgHasElem_LibraryAnimations)
	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ func (o *XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_)
	XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ func (o *XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_)
	XsdGoPkgHasElems_Extra func (o *XsdGoPkgHasElems_Extra)
	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ func (o *XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_)
	TxsdGlPipelineSettingsChoiceLightingEnable func (o *TxsdGlPipelineSettingsChoiceLightingEnable)
	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ func (o *XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_)
	XsdGoPkgHasElem_Light func (o *XsdGoPkgHasElem_Light)
	TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam func (o *TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam)
	XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ func (o *XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_)
	TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn func (o *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn)
	XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ func (o *XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_)
	XsdGoPkgHasElem_TaperedCylinder func (o *XsdGoPkgHasElem_TaperedCylinder)
	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ func (o *XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_)
	TxsdPhysicsModel func (o *TxsdPhysicsModel)
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader func (o *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader)
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ func (o *XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_)
	TglesTexturePipeline func (o *TglesTexturePipeline)
	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ func (o *XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_)
	XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequencepasssequencetechniquesequenceprofile_GLSLschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 func (o *XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00)
	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ func (o *XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_)
	TxsdGlPipelineSettingsChoiceDepthRange func (o *TxsdGlPipelineSettingsChoiceDepthRange)
	TfxSampler1DCommon func (o *TfxSampler1DCommon)
	TxsdGlesPipelineSettingsChoiceSampleCoverageEnable func (o *TxsdGlesPipelineSettingsChoiceSampleCoverageEnable)
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ func (o *XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_)
	XsdGoPkgHasElem_Sampler func (o *XsdGoPkgHasElem_Sampler)
	XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ func (o *XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_)
	TxsdGlPipelineSettingsChoiceBlendEquationSeparate func (o *TxsdGlPipelineSettingsChoiceBlendEquationSeparate)
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ func (o *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_)
	XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_ func (o *XsdGoPkgHasElem_bool3choicegles_basic_type_commonschema_Bool3_Tbool3_)
	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ func (o *XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_)
	TxsdGlesPipelineSettingsChoiceClipPlane func (o *TxsdGlesPipelineSettingsChoiceClipPlane)
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ func (o *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_)
	TxsdLibraryPhysicsScenes func (o *TxsdLibraryPhysicsScenes)
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ func (o *XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_)
	TxsdGlesPipelineSettingsChoicePointSizeMax func (o *TxsdGlesPipelineSettingsChoicePointSizeMax)
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_)
	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElems_Sampler func (o *XsdGoPkgHasElems_Sampler)
	TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask func (o *TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask)
	XsdGoPkgHasElems_VisualScene func (o *XsdGoPkgHasElems_VisualScene)
	TxsdTristrips func (o *TxsdTristrips)
	XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_ func (o *XsdGoPkgHasElems_includechoicesequenceprofile_CGschema_Include_TfxIncludeCommon_)
	XsdGoPkgHasElem_LibraryVisualScenes func (o *XsdGoPkgHasElem_LibraryVisualScenes)
	XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_ func (o *XsdGoPkgHasElem_border_colorsequencefx_samplerCUBE_commonschema_BorderColor_TfxColorCommon_)
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame func (o *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame)
	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00)
	TxsdGlPipelineSettingsChoiceStencilOp func (o *TxsdGlPipelineSettingsChoiceStencilOp)
	TxsdInstanceEffectSequenceSetparam func (o *TxsdInstanceEffectSequenceSetparam)
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 func (o *XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800)
	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ func (o *XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_)
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ func (o *XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_)
	XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ func (o *XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_)
	XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_ func (o *XsdGoPkgHasElem_float2x2choicefx_annotate_type_commonschema_Float2X2_Tfloat2X2_)
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ func (o *XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_)
	TxsdGlPipelineSettingsChoiceShadeModel func (o *TxsdGlPipelineSettingsChoiceShadeModel)
	XsdGoPkgHasElem_IntArray func (o *XsdGoPkgHasElem_IntArray)
	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ func (o *XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_)
	XsdGoPkgHasElems_LibraryPhysicsScenes func (o *XsdGoPkgHasElems_LibraryPhysicsScenes)
	XsdGoPkgHasElem_Linestrips func (o *XsdGoPkgHasElem_Linestrips)
	XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ func (o *XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_)
	TxsdProfileGles func (o *TxsdProfileGles)
	XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ func (o *XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_)
	TxsdProfileCommonSequenceTechnique func (o *TxsdProfileCommonSequenceTechnique)
	XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_psequencefx_samplerCUBE_commonschema_WrapP_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ func (o *XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_)
	TxsdRigidBodySequenceTechniqueCommonSequenceShape func (o *TxsdRigidBodySequenceTechniqueCommonSequenceShape)
	XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_ func (o *XsdGoPkgHasElem_float4choicefx_annotate_type_commonschema_Float4_Tfloat4_)
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ func (o *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_)
	XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_ func (o *XsdGoPkgHasElem_float4x2choicegles_basic_type_commonschema_Float4X2_Tfloat4X2_)
	TxsdProfileCg func (o *TxsdProfileCg)
	XsdGoPkgHasElem_Source func (o *XsdGoPkgHasElem_Source)
	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ func (o *XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_)
	XsdGoPkgHasElems_Material func (o *XsdGoPkgHasElems_Material)
	XsdGoPkgHasElem_Collada func (o *XsdGoPkgHasElem_Collada)
	TxsdInstanceMaterial func (o *TxsdInstanceMaterial)
	TxsdCommonColorOrTextureTypeChoiceTexture func (o *TxsdCommonColorOrTextureTypeChoiceTexture)
	XsdGoPkgHasElems_ProfileCg func (o *XsdGoPkgHasElems_ProfileCg)
	TxsdGlPipelineSettingsChoiceLightDiffuse func (o *TxsdGlPipelineSettingsChoiceLightDiffuse)
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ func (o *XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_)
	TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail func (o *TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail)
	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ func (o *XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_)
	XsdGoPkgHasElems_Channel func (o *XsdGoPkgHasElems_Channel)
	XsdGoPkgHasElem_Ellipsoid func (o *XsdGoPkgHasElem_Ellipsoid)
	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ func (o *XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_)
	XsdGoPkgHasElem_Lines func (o *XsdGoPkgHasElem_Lines)
	XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_minfiltersequencefx_sampler2D_commonschema_Minfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ func (o *XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_)
	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ func (o *XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_)
	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ func (o *XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_)
	TfxSamplerCUBECommon func (o *TfxSamplerCUBECommon)
	TxsdGlesPipelineSettingsChoiceMaterialDiffuse func (o *TxsdGlesPipelineSettingsChoiceMaterialDiffuse)
	XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ func (o *XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_)
	TxsdGlPipelineSettingsChoiceTextureDEPTH func (o *TxsdGlPipelineSettingsChoiceTextureDEPTH)
	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ func (o *XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_)
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ func (o *XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_)
	TxsdGlPipelineSettingsChoiceLightSpotDirection func (o *TxsdGlPipelineSettingsChoiceLightSpotDirection)
	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ func (o *XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_)
	TxsdGlPipelineSettingsChoiceLightSpecular func (o *TxsdGlPipelineSettingsChoiceLightSpecular)
	XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ func (o *XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_)
	XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ func (o *XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_)
	TxsdNameArray func (o *TxsdNameArray)
	TxsdGlesPipelineSettingsChoiceShadeModel func (o *TxsdGlesPipelineSettingsChoiceShadeModel)
	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ func (o *XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_)
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ func (o *XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_)
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ func (o *XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_)
	TxsdController func (o *TxsdController)
	XsdGoPkgHasElem_LibraryGeometries func (o *XsdGoPkgHasElem_LibraryGeometries)
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ func (o *XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_)
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ func (o *XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_)
	XsdGoPkgHasElem_InstanceRigidConstraint func (o *XsdGoPkgHasElem_InstanceRigidConstraint)
	XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ func (o *XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_)
	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_)
	XsdGoPkgHasElem_Accessor func (o *XsdGoPkgHasElem_Accessor)
	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ func (o *XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_)
	XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00 func (o *XsdGoPkgHasElem_mipmap_biassequencefx_samplerCUBE_commonschema_MipmapBias_XsdtFloat_00)
	XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ func (o *XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_)
	TxsdFxSurfaceInitCubeCommonChoiceAll func (o *TxsdFxSurfaceInitCubeCommonChoiceAll)
	XsdGoPkgHasElem_LibraryLights func (o *XsdGoPkgHasElem_LibraryLights)
	TxsdPhysicsMaterial func (o *TxsdPhysicsMaterial)
	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ func (o *XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_)
	TxsdGlPipelineSettingsChoiceLightEnable func (o *TxsdGlPipelineSettingsChoiceLightEnable)
	TxsdGlPipelineSettingsChoiceTextureRECTEnable func (o *TxsdGlPipelineSettingsChoiceTextureRECTEnable)
	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ func (o *XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_)
	XsdGoPkgHasElems_Param func (o *XsdGoPkgHasElems_Param)
	XsdGoPkgHasElems_Sphere func (o *XsdGoPkgHasElems_Sphere)
	XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_ func (o *XsdGoPkgHasElem_semanticsequencecg_newparamschema_Semantic_XsdtNCName_)
	XsdGoPkgHasGroup_GlesPipelineSettings func (o *XsdGoPkgHasGroup_GlesPipelineSettings)
	XsdGoPkgHasElems_TaperedCapsule func (o *XsdGoPkgHasElems_TaperedCapsule)
	TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc func (o *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc)
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ func (o *XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_)
	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ func (o *XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_)
	TxsdLight func (o *TxsdLight)
	TfxAnnotateCommon func (o *TfxAnnotateCommon)
	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ func (o *XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_)
	XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_ func (o *XsdGoPkgHasElem_float1x2choicegles_basic_type_commonschema_Float1X2_Tfloat2_)
	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ func (o *XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_)
	TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest func (o *TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest)
	XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_)
	TxsdGlesPipelineSettingsChoiceMaterialShininess func (o *TxsdGlesPipelineSettingsChoiceMaterialShininess)
	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ func (o *XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_)
	XsdGoPkgHasElems_InstanceMaterial func (o *XsdGoPkgHasElems_InstanceMaterial)
	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ func (o *XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_)
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ func (o *XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_)
	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ func (o *XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_)
	XsdGoPkgHasElems_Lines func (o *XsdGoPkgHasElems_Lines)
	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ func (o *XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_)
	TxsdAnimation func (o *TxsdAnimation)
	XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ func (o *XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_)
	XsdGoPkgHasElems_Controller func (o *XsdGoPkgHasElems_Controller)
	XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ func (o *XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_)
	XsdGoPkgHasElem_Polygons func (o *XsdGoPkgHasElem_Polygons)
	XsdGoPkgHasElems_Accessor func (o *XsdGoPkgHasElems_Accessor)
	XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ func (o *XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_)
	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ func (o *XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_)
	XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ func (o *XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_)
	TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha func (o *TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha)
	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ func (o *XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_)
	XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_ func (o *XsdGoPkgHasElem_bool4choicegles_basic_type_commonschema_Bool4_Tbool4_)
	XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_sampler2D_commonschema_Source_XsdtNCName_)
	TxsdInstancePhysicsModel func (o *TxsdInstancePhysicsModel)
	XsdGoPkgHasElem_LibraryMaterials func (o *XsdGoPkgHasElem_LibraryMaterials)
	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ func (o *XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_)
	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElems_TaperedCylinder func (o *XsdGoPkgHasElems_TaperedCylinder)
	XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ func (o *XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_)
	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ func (o *XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_)
	TfxIncludeCommon func (o *TfxIncludeCommon)
	XsdGoPkgHasElem_Extra func (o *XsdGoPkgHasElem_Extra)
	XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_ func (o *XsdGoPkgHasElems_annotatesequenceglsl_newparamschema_Annotate_TfxAnnotateCommon_)
	XsdGoPkgHasElem_TaperedCapsule func (o *XsdGoPkgHasElem_TaperedCapsule)
	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ func (o *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_)
	XsdGoPkgHasElems_Image func (o *XsdGoPkgHasElems_Image)
	XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ func (o *XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_)
	TxsdCommonColorOrTextureTypeChoiceColor func (o *TxsdCommonColorOrTextureTypeChoiceColor)
	TxsdLibraryVisualScenes func (o *TxsdLibraryVisualScenes)
	TxsdGlPipelineSettingsChoiceLineStipple func (o *TxsdGlPipelineSettingsChoiceLineStipple)
	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ func (o *XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_)
	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ func (o *XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_)
	XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 func (o *XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000)
	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ func (o *XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_)
	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ func (o *XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_)
	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ func (o *XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_)
	TfxStenciltargetCommon func (o *TfxStenciltargetCommon)
	XsdGoPkgHasElems_Collada func (o *XsdGoPkgHasElems_Collada)
	TglSampler1D func (o *TglSampler1D)
	XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ func (o *XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_)
	TxsdRigidBodySequenceTechniqueCommon func (o *TxsdRigidBodySequenceTechniqueCommon)
	TfxCodeProfile func (o *TfxCodeProfile)
	TxsdMorphSequenceTargets func (o *TxsdMorphSequenceTargets)
	TxsdGlPipelineSettingsChoicePointDistanceAttenuation func (o *TxsdGlPipelineSettingsChoicePointDistanceAttenuation)
	TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame func (o *TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame)
	XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ func (o *XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_)
	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ func (o *XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_)
	TcgSetuserType func (o *TcgSetuserType)
	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ func (o *XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_)
	XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ func (o *XsdGoPkgHasElem_ymagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_)
	XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ func (o *XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_)
	XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ func (o *XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_)
	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ func (o *XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_)
	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ func (o *XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_)
	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ func (o *XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_)
	XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap func (o *XsdGoPkgHasElem_wrap_tsequencefx_sampler2D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap)
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ func (o *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_)
	XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ func (o *XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_)
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ func (o *XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_)
	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ func (o *XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_)
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ func (o *XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_)
	TxsdSource func (o *TxsdSource)
	XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ func (o *XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_)
	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ func (o *XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_)
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ func (o *XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_)
	TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert func (o *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert)
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader func (o *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader)
	XsdGoPkgHasElem_InstancePhysicsMaterial func (o *XsdGoPkgHasElem_InstancePhysicsMaterial)
	XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ func (o *XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_)
	XsdGoPkgHasElems_Linestrips func (o *XsdGoPkgHasElems_Linestrips)
	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ func (o *XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_)
	TxsdGlesPipelineSettingsChoiceDitherEnable func (o *TxsdGlesPipelineSettingsChoiceDitherEnable)
	TxsdGlPipelineSettingsChoiceLightLinearAttenuation func (o *TxsdGlPipelineSettingsChoiceLightLinearAttenuation)
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask func (o *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask)
	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ func (o *XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_)
	XsdGoPkgHasElems_Geometry func (o *XsdGoPkgHasElems_Geometry)
	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ func (o *XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_)
	XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ func (o *XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_)
	XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ func (o *XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_)
	XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ func (o *XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_)
	TfxSurfaceCommon func (o *TfxSurfaceCommon)
	XsdGoPkgHasElems_PhysicsModel func (o *XsdGoPkgHasElems_PhysicsModel)
	XsdGoPkgHasElem_Skew func (o *XsdGoPkgHasElem_Skew)
	XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_ func (o *XsdGoPkgHasElem_float4x4choicefx_annotate_type_commonschema_Float4X4_Tfloat4X4_)
	XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_ func (o *XsdGoPkgHasElem_boolchoicefx_annotate_type_commonschema_Bool_Tbool_)
	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ func (o *XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_)
	XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ func (o *XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_)
	XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_ func (o *XsdGoPkgHasElem_semanticsequenceglsl_newparamschema_Semantic_XsdtNCName_)
	XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_magfiltersequencefx_sampler1D_commonschema_Magfilter_TfxSamplerFilterCommon_None)
	XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ func (o *XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_)
	XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ func (o *XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_)
	XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ func (o *XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_)
	XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_ func (o *XsdGoPkgHasElem_float2choicegles_basic_type_commonschema_Float2_Tfloat2_)
	XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_ func (o *XsdGoPkgHasElems_inputsequencepolygonsschema_Input_TInputLocalOffset_)
	XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ func (o *XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_)
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ func (o *XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_)
	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ func (o *XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_)
	XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_ func (o *XsdGoPkgHasElems_inputsequenceverticesschema_Input_TInputLocal_)
	XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None func (o *XsdGoPkgHasElem_mipfiltersequencegles_sampler_stateschema_Mipfilter_TfxSamplerFilterCommon_None)
	TxsdGlPipelineSettingsChoiceTexture2DEnable func (o *TxsdGlPipelineSettingsChoiceTexture2DEnable)
	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ func (o *XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_)
	TxsdBindMaterial func (o *TxsdBindMaterial)
	XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ func (o *XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_)
	TxsdGlPipelineSettingsChoiceFogStart func (o *TxsdGlPipelineSettingsChoiceFogStart)
	TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable func (o *TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable)
	XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ func (o *XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_)
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ func (o *XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_)
	XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ func (o *XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_)
	XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ func (o *XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_)
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ func (o *XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_)
	TxsdGlesPipelineSettingsChoiceLightModelAmbient func (o *TxsdGlesPipelineSettingsChoiceLightModelAmbient)
	TxsdCapsule func (o *TxsdCapsule)
	XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_ func (o *XsdGoPkgHasElem_float2choicesequencecommon_newparam_typeschema_Float2_Tfloat2_)
} {}
