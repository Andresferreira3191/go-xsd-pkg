//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		khronos.org/files/collada_schema_1_4
package gopkg_KhronosOrgFilesColladaSchema14

//	COLLADA Schema
//	Version 1.4.1 (June 23, 2006)
//	Copyright (C) 2005, 2006 The Khronos Group Inc., Sony Computer Entertainment Inc.
//	All Rights Reserved.
//	Khronos is a trademark of The Khronos Group Inc.
//	COLLADA is a trademark of Sony Computer Entertainment Inc. used by permission by Khronos.
//	Note that this software document is distributed on an "AS IS" basis, with ALL EXPRESS AND
//	IMPLIED WARRANTIES AND CONDITIONS DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED
//	WARRANTIES AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR
//	PURPOSE, AND NON-INFRINGEMENT.


import (
	xml "github.com/metaleap/go-xsd-pkg/www.w3.org/2001/03/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
//	The library_physics_scenes element declares a module of physics_scene elements.
//	This element allows instancing physics model within another physics model, or in a physics scene.
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
type XsdGoPkgHasAttr_Url_XsdtAnyURI_ struct {
	Url xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema url,attr"`

}

//	This element allows instancing a rigid_constraint within an instance_physics_model.
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
type XsdGoPkgHasAttr_Sid_XsdtNCName_ struct {
	Sid xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

//	The extra element declares additional information regarding its parent element.
//	The asset element defines asset management information regarding its parent element.
//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
//	An enumerated type specifying the acceptable up-axis values.
type TUpAxisType xsdt.String

//	Returns true if the value of this enumerated TUpAxisType is "Y_UP".
func (me TUpAxisType) IsYUp () bool { return me == "Y_UP" }

//	This convenience method just performs a simple type conversion to TUpAxisType's alias type xsdt.String.
func (me TUpAxisType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TUpAxisType is "X_UP".
func (me TUpAxisType) IsXUp () bool { return me == "X_UP" }

//	Since TUpAxisType is just a simple String type, this merely returns the current string value.
func (me TUpAxisType) String () string { return xsdt.String(me).String() }

//	Since TUpAxisType is just a simple String type, this merely sets the current value from the specified string.
func (me *TUpAxisType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TUpAxisType is "Z_UP".
func (me TUpAxisType) IsZUp () bool { return me == "Z_UP" }

type XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp struct {
//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	UpAxis TUpAxisType `xml:"http://www.collada.org/2005/11/COLLADASchema up_axis"`

}

//	Returns the default value for UpAxis -- "Y_UP"
func (me XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp) UpAxisDefault () TUpAxisType { return TUpAxisType("Y_UP") }

//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
type Tfloat xsdt.Double

//	Returns a string representation of this Tfloat's current non-string scalar value.
func (me Tfloat) String () string { return xsdt.Double(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat's alias type xsdt.Double.
func (me Tfloat) ToXsdtDouble () xsdt.Double { return xsdt.Double(me) }

//	Since Tfloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tfloat) SetFromString (s string)  { (*xsdt.Double)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Meter_Tfloat_10 struct {
	Meter Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema meter,attr"`

}

//	Returns the default value for Meter -- 1.0
func (me XsdGoPkgHasAttr_Meter_Tfloat_10) MeterDefault () Tfloat { return Tfloat(1.0) }

//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
type XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter struct {
	Name xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

//	Returns the default value for Name -- "meter"
func (me XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter) NameDefault () xsdt.Nmtoken { return xsdt.Nmtoken("meter") }

type TxsdAssetSequenceUnit struct {
//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
	XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter

//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
	XsdGoPkgHasAttr_Meter_Tfloat_10

}

type XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ struct {
//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
	Unit *TxsdAssetSequenceUnit `xml:"http://www.collada.org/2005/11/COLLADASchema unit"`

}

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
type XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ struct {
//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	Created xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema created"`

}

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
type XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ struct {
//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	Modified xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema modified"`

}

//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
type XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ struct {
//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
	Title xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema title"`

}

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
type XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ struct {
//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
	Revision xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema revision"`

}

//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
type XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ struct {
//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
	Keywords xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema keywords"`

}

//	The contributor element defines authoring information for asset management
//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
type XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ struct {
//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
	SourceData xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source_data"`

}

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
type XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ struct {
//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
	AuthoringTool xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema authoring_tool"`

}

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
type XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ struct {
//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
	Comments xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema comments"`

}

//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
type XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ struct {
//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
	Copyright xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema copyright"`

}

//	The author element contains a string with the author's name.
//	There may be only one author element.
type XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ struct {
//	The author element contains a string with the author's name.
//	There may be only one author element.
	Author xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema author"`

}

type TxsdAssetSequenceContributor struct {
//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_

//	The author element contains a string with the author's name.
//	There may be only one author element.
	XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_

//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
	XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
	XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_

}

type XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ struct {
//	The contributor element defines authoring information for asset management
	Contributors []*TxsdAssetSequenceContributor `xml:"http://www.collada.org/2005/11/COLLADASchema contributor"`

}

//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
type XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ struct {
//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
	Subject xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema subject"`

}

type TxsdAsset struct {
//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
	XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_

//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp

//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
	XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_

//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
	XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
	XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_

//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
	XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_

//	The contributor element defines authoring information for asset management
	XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_

}

type XsdGoPkgHasElem_Asset struct {
//	The asset element defines asset management information regarding its parent element.
	Asset *TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`

}

//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
type XsdGoPkgHasAttr_Type_XsdtNmtoken_ struct {
	Type xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
type XsdGoPkgHasAttr_Profile_XsdtNmtoken_ struct {
	Profile xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`

}

type TxsdTechnique struct {
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
	XsdGoPkgHasAttr_Profile_XsdtNmtoken_

}

type XsdGoPkgHasElems_Technique struct {
//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Techniques []*TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.collada.org/2005/11/COLLADASchema id,attr"`

}

//	The name attribute is the text string name of this element. Optional attribute.
type XsdGoPkgHasAttr_Name_XsdtNCName_ struct {
	Name xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

type TxsdExtra struct {
//	The extra element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The type attribute indicates the type of the value data. This text string must be understood by
//	the application. Optional attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_Extra struct {
//	The extra element declares additional information regarding its parent element.
	Extras []*TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`

}

//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
type XsdGoPkgHasAttr_Constraint_XsdtNCName_ struct {
	Constraint xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema constraint,attr"`

}

type TxsdInstanceRigidConstraint struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	XsdGoPkgHasAttr_Constraint_XsdtNCName_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_InstanceRigidConstraint struct {
//	This element allows instancing a rigid_constraint within an instance_physics_model.
	InstanceRigidConstraints []*TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`

}

//	This element allows instancing a rigid_body within an instance_physics_model.
//	The body attribute indicates which rigid_body to instantiate. Required attribute.
type XsdGoPkgHasAttr_Body_XsdtNCName_ struct {
	Body xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema body,attr"`

}

//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
//	The TargetableFloat type is used to represent elements which contain a single float value which can
//	be targeted for animation.
type TargetableFloat struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ struct {
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`

}

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
type TListOfFloats xsdt.String

//	Since TListOfFloats is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfFloats) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TListOfFloats is just a simple String type, this merely returns the current string value.
func (me TListOfFloats) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TListOfFloats's alias type xsdt.String.
func (me TListOfFloats) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TListOfFloats defines a String containing a whitespace-separated list of Tfloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfFloats) Values () (list []Tfloat) { var btv = new(Tfloat); var svals = xsdt.ListValues(string(me)); list = make([]Tfloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type Tfloat3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3's alias type TListOfFloats.
func (me Tfloat3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3) String () string { return TListOfFloats(me).String() }

//	Since Tfloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 struct {
//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
	AngularVelocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema angular_velocity"`

}

//	Returns the default value for AngularVelocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000) AngularVelocityDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	The TargetableFloat3 type is used to represent elements which contain a float3 value which can
//	be targeted for animation.
type TargetableFloat3 struct {
	XsdGoPkgValue Tfloat3 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ struct {
	Inertia *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema inertia"`

}

type Tbool xsdt.Boolean

//	This convenience method just performs a simple type conversion to Tbool's alias type xsdt.Boolean.
func (me Tbool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Since Tbool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tbool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	Returns a string representation of this Tbool's current non-string scalar value.
func (me Tbool) String () string { return xsdt.Boolean(me).String() }

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
	Dynamic *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`

}

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type Tfloat4 TListOfFloats

//	Since Tfloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat4's alias type TListOfFloats.
func (me Tfloat4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4) String () string { return TListOfFloats(me).String() }

type TxsdRotate struct {
	XsdGoPkgValue Tfloat4 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_Rotate struct {
//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotates []*TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`

}

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElems_Translate struct {
//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
	Translates []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`

}

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_Translate

	XsdGoPkgHasElems_Rotate

}

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
	MassFrame *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`

}

//	Specifies the initial linear velocity of the rigid_body instance.
type XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 struct {
//	Specifies the initial linear velocity of the rigid_body instance.
	Velocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema velocity"`

}

//	Returns the default value for Velocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000) VelocityDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
//	The InstanceWithExtra type is used for all generic instance elements. A generic instance element
//	is one which does not have any specific child elements declared.
type TInstanceWithExtra struct {
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may occur any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_InstancePhysicsMaterial struct {
//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
	InstancePhysicsMaterial *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`

}

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
//	A float value that represents the length of the cylinder along the Y axis.
type XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_ struct {
//	A float value that represents the length of the cylinder along the Y axis.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`

}

//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
type Tfloat2 TListOfFloats

//	Since Tfloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat2's alias type TListOfFloats.
func (me Tfloat2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
	Radius1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius1"`

}

//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
type XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_ struct {
//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
	Radius2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius2"`

}

type TxsdTaperedCylinder struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_

//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
//	Y value. Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_

//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
//	Y value.Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_

}

type XsdGoPkgHasElem_TaperedCylinder struct {
//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinder *TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`

}

//	A capsule primitive that is centered on and aligned with the local Y axis.
//	Two float values that represent the radii of the capsule (it may be elliptical)
type XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ struct {
//	Two float values that represent the radii of the capsule (it may be elliptical)
	Radius Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`

}

type TxsdCapsule struct {
//	Two float values that represent the radii of the capsule (it may be elliptical)
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the length of the line segment connecting the centers
//	of the capping hemispheres.
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_

}

type XsdGoPkgHasElem_Capsule struct {
//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsule *TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`

}

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
type TxsdTaperedCapsule struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the length of the line segment connecting the centers of the
//	capping hemispheres.
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_

//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_cylinderschema_Radius2_Tfloat2_

//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_cylinderschema_Radius1_Tfloat2_

}

type XsdGoPkgHasElem_TaperedCapsule struct {
//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsule *TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`

}

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
//	The instance_material element declares the instantiation of a COLLADA material resource.
//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
type XsdGoPkgHasAttr_Symbol_XsdtNCName_ struct {
	Symbol xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema symbol,attr"`

}

//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
type XsdGoPkgHasAttr_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`

}

//	The input_set attribute specifies which input set to bind.
type Tuint xsdt.UnsignedLong

//	Returns a string representation of this Tuint's current non-string scalar value.
func (me Tuint) String () string { return xsdt.UnsignedLong(me).String() }

//	This convenience method just performs a simple type conversion to Tuint's alias type xsdt.UnsignedLong.
func (me Tuint) ToXsdtUnsignedLong () xsdt.UnsignedLong { return xsdt.UnsignedLong(me) }

//	Since Tuint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tuint) SetFromString (s string)  { (*xsdt.UnsignedLong)(me).SetFromString(s) }

type XsdGoPkgHasAttr_InputSet_Tuint_ struct {
	InputSet Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema input_set,attr"`

}

//	The input_semantic attribute specifies which input semantic to bind.
type XsdGoPkgHasAttr_InputSemantic_XsdtNCName_ struct {
	InputSemantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema input_semantic,attr"`

}

type TxsdInstanceMaterialSequenceBindVertexInput struct {
//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

//	The input_set attribute specifies which input set to bind.
	XsdGoPkgHasAttr_InputSet_Tuint_

//	The input_semantic attribute specifies which input semantic to bind.
	XsdGoPkgHasAttr_InputSemantic_XsdtNCName_

}

type XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ struct {
//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	BindVertexInputs []*TxsdInstanceMaterialSequenceBindVertexInput `xml:"http://www.collada.org/2005/11/COLLADASchema bind_vertex_input"`

}

//	The target attribute specifies the URL of the location of the object to instantiate.
type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
	Target xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`

}

//	The bind element binds values to effect parameters upon instantiation.
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
type XsdGoPkgHasAttr_Target_XsdtToken_ struct {
	Target xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`

}

type TxsdInstanceMaterialSequenceBind struct {
//	The target attribute specifies the location of the value to bind to the specified semantic.
//	This text string is a path-name following a simple syntax described in the “Addressing Syntax”
//	section.
	XsdGoPkgHasAttr_Target_XsdtToken_

//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

}

type XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ struct {
//	The bind element binds values to effect parameters upon instantiation.
	Binds []*TxsdInstanceMaterialSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

type TxsdInstanceMaterial struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_

//	The target attribute specifies the URL of the location of the object to instantiate.
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

//	The bind element binds values to effect parameters upon instantiation.
	XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_

}

type XsdGoPkgHasElems_InstanceMaterial struct {
//	The instance_material element declares the instantiation of a COLLADA material resource.
	InstanceMaterials []*TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`

}

type TxsdBindMaterialSequenceTechniqueCommon struct {
//	The instance_material element specifies the information needed to bind a geometry
//	to a material. This element must appear at least once.
	XsdGoPkgHasElems_InstanceMaterial

}

type XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdBindMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	The param element declares parametric information regarding its parent element.
//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
type XsdGoPkgHasAttr_Semantic_XsdtNmtoken_ struct {
	Semantic xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`

}

type TxsdParam struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The semantic attribute is the user-defined meaning of the parameter. Optional attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

}

type XsdGoPkgHasElems_Param struct {
//	The param element declares parametric information regarding its parent element.
	Params []*TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

type TxsdBindMaterial struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The bind_material element may contain any number of param elements.
	XsdGoPkgHasElems_Param

}

type XsdGoPkgHasElem_BindMaterial struct {
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	BindMaterial *TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`

}

type TxsdInstanceGeometry struct {
//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	XsdGoPkgHasElem_BindMaterial

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElem_InstanceGeometry struct {
//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	InstanceGeometry *TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`

}

//	A centered sphere primitive.
//	A float value that represents the radius of the sphere
type XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ struct {
//	A float value that represents the radius of the sphere
	Radius Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`

}

type TxsdSphere struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the radius of the sphere
	XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_

}

type XsdGoPkgHasElem_Sphere struct {
//	A centered sphere primitive.
	Sphere *TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`

}

//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
//	Dynamic friction coefficient
type XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ struct {
//	Dynamic friction coefficient
	DynamicFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic_friction"`

}

//	Static friction coefficient
type XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ struct {
//	Static friction coefficient
	StaticFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema static_friction"`

}

//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
type XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ struct {
//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	Restitution *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema restitution"`

}

type TxsdPhysicsMaterialSequenceTechniqueCommon struct {
//	Dynamic friction coefficient
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_

//	Static friction coefficient
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_

//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_

}

type XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdPhysicsMaterial struct {
//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_

//	The physics_material element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElem_PhysicsMaterial struct {
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterial *TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`

}

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
type TxsdCylinder struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencetapered_cylinderschema_Height_Tfloat_

//	float2 values that represent the radii of the cylinder.
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_

}

type XsdGoPkgHasElem_Cylinder struct {
//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinder *TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`

}

//	An infinite plane primitive.
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
type XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ struct {
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	Equation Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema equation"`

}

type TxsdPlane struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_

}

type XsdGoPkgHasElem_Plane struct {
//	An infinite plane primitive.
	Plane *TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`

}

//	An axis-aligned, centered box primitive.
//	3 float values that represent the extents of the box
type XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ struct {
//	3 float values that represent the extents of the box
	HalfExtents Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema half_extents"`

}

type TxsdBox struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	3 float values that represent the extents of the box
	XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_

}

type XsdGoPkgHasElem_Box struct {
//	An axis-aligned, centered box primitive.
	Box *TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`

}

type XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ struct {
	Density *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema density"`

}

type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	Hollow *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`

}

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape struct {
	XsdGoPkgHasElem_InstancePhysicsMaterial

	XsdGoPkgHasElem_TaperedCylinder

	XsdGoPkgHasElem_Capsule

	XsdGoPkgHasElem_TaperedCapsule

	XsdGoPkgHasElem_InstanceGeometry

	XsdGoPkgHasElems_Rotate

	XsdGoPkgHasElem_Sphere

	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_Cylinder

	XsdGoPkgHasElem_Plane

	XsdGoPkgHasElem_Box

	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_

	XsdGoPkgHasElems_Translate

	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ struct {
	Shapes []*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`

}

type TxsdInstanceRigidBodySequenceTechniqueCommon struct {
//	Specifies the initial linear velocity of the rigid_body instance.
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000

	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_

	XsdGoPkgHasElem_InstancePhysicsMaterial

	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000

	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_

	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_

	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_

}

type XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ struct {
//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdInstanceRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdInstanceRigidBody struct {
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_

//	The target attribute indicates which node is influenced by this rigid_body instance.
//	Required attribute
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	XsdGoPkgHasAttr_Body_XsdtNCName_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_InstanceRigidBody struct {
//	This element allows instancing a rigid_body within an instance_physics_model.
	InstanceRigidBodies []*TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`

}

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
type XsdGoPkgHasAttr_Parent_XsdtAnyURI_ struct {
	Parent xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema parent,attr"`

}

//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElems_InstanceForceField struct {
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	InstanceForceFields []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`

}

type TxsdInstancePhysicsModel struct {
//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The instance_physics_model element may instance any number of rigid_constraint elements.
	XsdGoPkgHasElems_InstanceRigidConstraint

//	The instance_physics_model element may instance any number of rigid_body elements.
	XsdGoPkgHasElems_InstanceRigidBody

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
	XsdGoPkgHasAttr_Parent_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The instance_physics_model element may instance any number of force_field elements.
	XsdGoPkgHasElems_InstanceForceField

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_InstancePhysicsModel struct {
//	This element allows instancing physics model within another physics model, or in a physics scene.
	InstancePhysicsModels []*TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`

}

//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
//	The time_step for the physics_scene.
type XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ struct {
//	The time_step for the physics_scene.
	TimeStep *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema time_step"`

}

//	The gravity vector to use for the physics_scene.
type XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ struct {
//	The gravity vector to use for the physics_scene.
	Gravity *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema gravity"`

}

type TxsdPhysicsSceneSequenceTechniqueCommon struct {
//	The time_step for the physics_scene.
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_

//	The gravity vector to use for the physics_scene.
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_

}

type XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsSceneSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdPhysicsScene struct {
//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There may be any number of instance_physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel

//	The physics_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There may be any number of instance_force_field elements.
	XsdGoPkgHasElems_InstanceForceField

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_PhysicsScene struct {
	PhysicsScenes []*TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`

}

type TxsdLibraryPhysicsScenes struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_physics_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	There must be at least one physics_scene element.
	XsdGoPkgHasElems_PhysicsScene

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_LibraryPhysicsScenes struct {
//	The library_physics_scenes element declares a module of physics_scene elements.
	LibraryPhysicsSceneses []*TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`

}

//	The library_nodes element declares a module of node elements.
//	Nodes embody the hierarchical relationship of elements in the scene.
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type Tfloat7 TListOfFloats

//	Since Tfloat7 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat7) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat7's alias type TListOfFloats.
func (me Tfloat7) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat7 is just a simple String type, this merely returns the current string value.
func (me Tfloat7) String () string { return TListOfFloats(me).String() }

type TxsdSkew struct {
	XsdGoPkgValue Tfloat7 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_Skew struct {
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
	Skews []*TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`

}

//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type Tfloat4X4 TListOfFloats

//	Since Tfloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat4X4's alias type TListOfFloats.
func (me Tfloat4X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X4) String () string { return TListOfFloats(me).String() }

type TxsdMatrix struct {
	XsdGoPkgValue Tfloat4X4 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_Matrix struct {
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrixs []*TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`

}

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElems_InstanceLight struct {
//	The instance_light element declares the instantiation of a COLLADA light resource.
	InstanceLights []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`

}

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type Tfloat3X3 TListOfFloats

//	Since Tfloat3X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X3) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3X3's alias type TListOfFloats.
func (me Tfloat3X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type TxsdLookat struct {
	XsdGoPkgValue Tfloat3X3 `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_Lookat struct {
//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
	Lookats []*TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`

}

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type XsdGoPkgHasElems_Scale struct {
//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
	Scales []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`

}

//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
//	An enumerated type specifying the acceptable node types.
type TNodeType xsdt.String

//	This convenience method just performs a simple type conversion to TNodeType's alias type xsdt.String.
func (me TNodeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TNodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNodeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TNodeType is "NODE".
func (me TNodeType) IsNode () bool { return me == "NODE" }

//	Since TNodeType is just a simple String type, this merely returns the current string value.
func (me TNodeType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TNodeType is "JOINT".
func (me TNodeType) IsJoint () bool { return me == "JOINT" }

type XsdGoPkgHasAttr_Type_TNodeType_Node struct {
	Type TNodeType `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	Returns the default value for Type -- "NODE"
func (me XsdGoPkgHasAttr_Type_TNodeType_Node) TypeDefault () TNodeType { return TNodeType("NODE") }

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
type XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ struct {
//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
	Skeletons []xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema skeleton"`

}

type TxsdInstanceController struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	XsdGoPkgHasElem_BindMaterial

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The url attribute refers to resource. This may refer to a local resource using a relative
//	URL fragment identifier that begins with the “#” character. The url attribute may refer to an
//	external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
	XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_

}

type XsdGoPkgHasElems_InstanceController struct {
//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	InstanceControllers []*TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`

}

//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasElems_InstanceNode struct {
//	The instance_node element declares the instantiation of a COLLADA node resource.
	InstanceNodes []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`

}

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
type TName xsdt.Name

//	Since TName is just a simple String type, this merely returns the current string value.
func (me TName) String () string { return xsdt.Name(me).String() }

//	Since TName is just a simple String type, this merely sets the current value from the specified string.
func (me *TName) SetFromString (s string)  { (*xsdt.Name)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TName's alias type xsdt.Name.
func (me TName) ToXsdtName () xsdt.Name { return xsdt.Name(me) }

type TListOfNames xsdt.String

//	Since TListOfNames is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfNames) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TListOfNames's alias type xsdt.String.
func (me TListOfNames) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfNames is just a simple String type, this merely returns the current string value.
func (me TListOfNames) String () string { return xsdt.String(me).String() }

//	TListOfNames defines a String containing a whitespace-separated list of TName values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfNames) Values () (list []TName) { var svals = xsdt.ListValues(string(me)); list = make([]TName, len(svals)); for i, s := range svals { list[i] = TName(s) }; return }

type XsdGoPkgHasAttr_Layer_TListOfNames_ struct {
	Layer TListOfNames `xml:"http://www.collada.org/2005/11/COLLADASchema layer,attr"`

}

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElems_InstanceCamera struct {
//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	InstanceCameras []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`

}

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
type XsdGoPkgHasElems_InstanceGeometry struct {
//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	InstanceGeometries []*TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`

}

type TxsdNode struct {
//	The node element may instance any number of light objects.
	XsdGoPkgHasElems_InstanceLight

//	The node element may contain any number of lookat elements.
	XsdGoPkgHasElems_Lookat

//	The node element may contain any number of scale elements.
	XsdGoPkgHasElems_Scale

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
	XsdGoPkgHasAttr_Type_TNodeType_Node

//	The node element may contain any number of rotate elements.
	XsdGoPkgHasElems_Rotate

//	The node element may instance any number of controller objects.
	XsdGoPkgHasElems_InstanceController

//	The node element may instance any number of node elements or hierarchies objects.
	XsdGoPkgHasElems_InstanceNode

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
	XsdGoPkgHasAttr_Layer_TListOfNames_

//	The node element may instance any number of camera objects.
	XsdGoPkgHasElems_InstanceCamera

//	The node element may be hierarchical and be the parent of any number of other node elements.
	XsdGoPkgHasElems_Node

//	The node element may instance any number of geometry objects.
	XsdGoPkgHasElems_InstanceGeometry

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The node element may contain any number of skew elements.
	XsdGoPkgHasElems_Skew

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The node element may contain any number of translate elements.
	XsdGoPkgHasElems_Translate

//	The node element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The node element may contain any number of matrix elements.
	XsdGoPkgHasElems_Matrix

}

type XsdGoPkgHasElems_Node struct {
//	Nodes embody the hierarchical relationship of elements in the scene.
	Nodes []*TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`

}

type TxsdLibraryNodes struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_nodes element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one node element.
	XsdGoPkgHasElems_Node

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_LibraryNodes struct {
//	The library_nodes element declares a module of node elements.
	LibraryNodeses []*TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`

}

//	The library_animations element declares a module of animation elements.
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
//	The float_array element declares the storage for a homogenous array of floating point values.
//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
type XsdGoPkgHasAttr_Magnitude_XsdtShort_38 struct {
	Magnitude xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema magnitude,attr"`

}

//	Returns the default value for Magnitude -- 38
func (me XsdGoPkgHasAttr_Magnitude_XsdtShort_38) MagnitudeDefault () xsdt.Short { return xsdt.Short(38) }

//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
type XsdGoPkgHasAttr_Digits_XsdtShort_6 struct {
	Digits xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema digits,attr"`

}

//	Returns the default value for Digits -- 6
func (me XsdGoPkgHasAttr_Digits_XsdtShort_6) DigitsDefault () xsdt.Short { return xsdt.Short(6) }

//	The count attribute indicates the number of values in the array. Required attribute.
type XsdGoPkgHasAttr_Count_Tuint_ struct {
	Count Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema count,attr"`

}

type TxsdFloatArray struct {
	XsdGoPkgValue TListOfFloats `xml:",chardata"`

//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
	XsdGoPkgHasAttr_Digits_XsdtShort_6

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
	XsdGoPkgHasAttr_Magnitude_XsdtShort_38

}

type XsdGoPkgHasElem_FloatArray struct {
//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArray *TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`

}

//	The bool_array element declares the storage for a homogenous array of boolean values.
type TListOfBools xsdt.String

//	TListOfBools defines a String containing a whitespace-separated list of Tbool values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfBools) Values () (list []Tbool) { var btv = new(Tbool); var svals = xsdt.ListValues(string(me)); list = make([]Tbool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TListOfBools's alias type xsdt.String.
func (me TListOfBools) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfBools is just a simple String type, this merely returns the current string value.
func (me TListOfBools) String () string { return xsdt.String(me).String() }

//	Since TListOfBools is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfBools) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TxsdBoolArray struct {
	XsdGoPkgValue TListOfBools `xml:",chardata"`

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElem_BoolArray struct {
//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArray *TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`

}

//	The int_array element declares the storage for a homogenous array of integer values.
//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
type XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648 struct {
	MinInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema minInclusive,attr"`

}

//	Returns the default value for MinInclusive -- -2147483648
func (me XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648) MinInclusiveDefault () xsdt.Integer { return xsdt.Integer(-2147483648) }

//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
type XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647 struct {
	MaxInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema maxInclusive,attr"`

}

//	Returns the default value for MaxInclusive -- 2147483647
func (me XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647) MaxInclusiveDefault () xsdt.Integer { return xsdt.Integer(2147483647) }

type Tint xsdt.Long

//	Returns a string representation of this Tint's current non-string scalar value.
func (me Tint) String () string { return xsdt.Long(me).String() }

//	This convenience method just performs a simple type conversion to Tint's alias type xsdt.Long.
func (me Tint) ToXsdtLong () xsdt.Long { return xsdt.Long(me) }

//	Since Tint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tint) SetFromString (s string)  { (*xsdt.Long)(me).SetFromString(s) }

type TListOfInts xsdt.String

//	This convenience method just performs a simple type conversion to TListOfInts's alias type xsdt.String.
func (me TListOfInts) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfInts is just a simple String type, this merely returns the current string value.
func (me TListOfInts) String () string { return xsdt.String(me).String() }

//	TListOfInts defines a String containing a whitespace-separated list of Tint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfInts) Values () (list []Tint) { var btv = new(Tint); var svals = xsdt.ListValues(string(me)); list = make([]Tint, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TListOfInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfInts) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TxsdIntArray struct {
	XsdGoPkgValue TListOfInts `xml:",chardata"`

//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
	XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647

//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
	XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElem_IntArray struct {
//	The int_array element declares the storage for a homogenous array of integer values.
	IntArray *TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`

}

//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type TxsdIdrefArray struct {
	XsdGoPkgValue xsdt.Idrefs `xml:",chardata"`

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElem_IdrefArray struct {
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArray *TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`

}

//	The technique common specifies the common method for accessing this source element's data.
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
type XsdGoPkgHasAttr_Stride_Tuint_1 struct {
	Stride Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema stride,attr"`

}

//	Returns the default value for Stride -- 1
func (me XsdGoPkgHasAttr_Stride_Tuint_1) StrideDefault () Tuint { return Tuint(1) }

//	The source attribute indicates the location of the data source. Required attribute.
type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
	Source xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
type XsdGoPkgHasAttr_Offset_Tuint_0 struct {
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`

}

//	Returns the default value for Offset -- 0
func (me XsdGoPkgHasAttr_Offset_Tuint_0) OffsetDefault () Tuint { return Tuint(0) }

type TxsdAccessor struct {
//	The source attribute indicates the location of the array to access using a URL expression. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The count attribute indicates the number of times the array is accessed. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
	XsdGoPkgHasAttr_Offset_Tuint_0

//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	XsdGoPkgHasAttr_Stride_Tuint_1

//	The accessor element may have any number of param elements.
	XsdGoPkgHasElems_Param

}

type XsdGoPkgHasElem_Accessor struct {
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
	Accessor *TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`

}

type TxsdSourceSequenceTechniqueCommon struct {
//	The source's technique_common must have one and only one accessor.
	XsdGoPkgHasElem_Accessor

}

type XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ struct {
//	The technique common specifies the common method for accessing this source element's data.
	TechniqueCommon *TxsdSourceSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	The Name_array element declares the storage for a homogenous array of Name string values.
type TxsdNameArray struct {
	XsdGoPkgValue TListOfNames `xml:",chardata"`

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

}

type XsdGoPkgHasElem_NameArray struct {
//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArray *TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`

}

type TxsdSource struct {
//	The source element may contain an IDREF_array.
	XsdGoPkgHasElem_IdrefArray

//	The technique common specifies the common method for accessing this source element's data.
	XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_

//	The source element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The source element may contain a Name_array.
	XsdGoPkgHasElem_NameArray

//	The source element may contain a float_array.
	XsdGoPkgHasElem_FloatArray

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The source element may contain a bool_array.
	XsdGoPkgHasElem_BoolArray

//	The source element may contain an int_array.
	XsdGoPkgHasElem_IntArray

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

}

type XsdGoPkgHasElems_Source struct {
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
	Sources []*TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	The channel element declares an output channel of an animation.
//	The source attribute indicates the location of the data source. Required attribute.
//	This type is used for URI reference which can only reference a resource declared within it's same document.
type TURIFragmentType xsdt.String

//	Since TURIFragmentType is just a simple String type, this merely sets the current value from the specified string.
func (me *TURIFragmentType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TURIFragmentType's alias type xsdt.String.
func (me TURIFragmentType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TURIFragmentType is just a simple String type, this merely returns the current string value.
func (me TURIFragmentType) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Source_TURIFragmentType_ struct {
	Source TURIFragmentType `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TxsdChannel struct {
//	The source attribute indicates the location of the sampler using a URL expression.
//	The sampler must be declared within the same document. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
	XsdGoPkgHasAttr_Target_XsdtToken_

}

type XsdGoPkgHasElems_Channel struct {
//	The channel element declares an output channel of an animation.
	Channels []*TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`

}

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
//	The input element must occur at least one time. These inputs are local inputs.
//	The InputLocal type is used to represent inputs that can only reference resources declared in the same document.
type TInputLocal struct {
//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

}

type XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ struct {
//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

type TxsdSampler struct {
//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_Sampler struct {
//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
	Samplers []*TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`

}

type TxsdAnimation struct {
//	The animation element may contain any number of source elements.
	XsdGoPkgHasElems_Source

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_Animation

//	The animation element may contain any number of channel elements.
	XsdGoPkgHasElems_Channel

//	The animation element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The animation element may contain any number of sampler elements.
	XsdGoPkgHasElems_Sampler

}

type XsdGoPkgHasElems_Animation struct {
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
	Animations []*TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`

}

type TxsdLibraryAnimations struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The library_animations element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	There must be at least one animation element.
	XsdGoPkgHasElems_Animation

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_LibraryAnimations struct {
//	The library_animations element declares a module of animation elements.
	LibraryAnimationses []*TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`

}

//	The library_force_fields element declares a module of force_field elements.
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type TxsdForceField struct {
//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The force_field element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_ForceField struct {
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceFields []*TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`

}

type TxsdLibraryForceFields struct {
//	The library_force_fields element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one force_field element.
	XsdGoPkgHasElems_ForceField

}

type XsdGoPkgHasElems_LibraryForceFields struct {
//	The library_force_fields element declares a module of force_field elements.
	LibraryForceFieldses []*TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`

}

//	The library_images element declares a module of image elements.
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
type XsdGoPkgHasAttr_Width_Tuint_ struct {
	Width Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema width,attr"`

}

//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
type XsdGoPkgHasAttr_Height_Tuint_ struct {
	Height Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema height,attr"`

}

//	The format attribute is a text string value that indicates the image format. Optional attribute.
type XsdGoPkgHasAttr_Format_XsdtToken_ struct {
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format,attr"`

}

//	The init_from element allows you to specify an external image file to use for the image element.
type XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ struct {
//	The init_from element allows you to specify an external image file to use for the image element.
	InitFrom xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`

}

//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
type TListOfHexBinary xsdt.String

//	TListOfHexBinary defines a String containing a whitespace-separated list of xsdt.HexBinary values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfHexBinary) Values () (list []xsdt.HexBinary) { var svals = xsdt.ListValues(string(me)); list = make([]xsdt.HexBinary, len(svals)); for i, s := range svals { list[i] = xsdt.HexBinary(s) }; return }

//	This convenience method just performs a simple type conversion to TListOfHexBinary's alias type xsdt.String.
func (me TListOfHexBinary) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TListOfHexBinary is just a simple String type, this merely returns the current string value.
func (me TListOfHexBinary) String () string { return xsdt.String(me).String() }

//	Since TListOfHexBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfHexBinary) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ struct {
//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
	Data TListOfHexBinary `xml:"http://www.collada.org/2005/11/COLLADASchema data"`

}

//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
type XsdGoPkgHasAttr_Depth_Tuint_1 struct {
	Depth Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema depth,attr"`

}

//	Returns the default value for Depth -- 1
func (me XsdGoPkgHasAttr_Depth_Tuint_1) DepthDefault () Tuint { return Tuint(1) }

type TxsdImage struct {
//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
	XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_

//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
	XsdGoPkgHasAttr_Depth_Tuint_1

//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
	XsdGoPkgHasAttr_Width_Tuint_

//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
	XsdGoPkgHasAttr_Height_Tuint_

//	The format attribute is a text string value that indicates the image format. Optional attribute.
	XsdGoPkgHasAttr_Format_XsdtToken_

//	The init_from element allows you to specify an external image file to use for the image element.
	XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The image element may contain an asset element.
	XsdGoPkgHasElem_Asset

}

type XsdGoPkgHasElems_Image struct {
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
	Images []*TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`

}

type TxsdLibraryImages struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The library_images element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	There must be at least one image element.
	XsdGoPkgHasElems_Image

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_LibraryImages struct {
//	The library_images element declares a module of image elements.
	LibraryImageses []*TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`

}

//	The library_cameras element declares a module of camera elements.
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
//	Imagers represent the image sensor of a camera (for example film or CCD).
type TxsdCameraSequenceImager struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	This element may contain any number of non-common profile techniques.
//	There is no common technique for imager.
	XsdGoPkgHasElems_Technique

}

type XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ struct {
//	Imagers represent the image sensor of a camera (for example film or CCD).
	Imager *TxsdCameraSequenceImager `xml:"http://www.collada.org/2005/11/COLLADASchema imager"`

}

//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
//	The perspective element describes the optics of a perspective camera.
type XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ struct {
	Yfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema yfov"`

}

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
type XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ struct {
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	Zfar *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema zfar"`

}

//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
type XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`

}

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
type XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ struct {
//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	Xfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xfov"`

}

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
type XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ struct {
//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	Znear *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema znear"`

}

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective struct {
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_

//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	XsdGoPkgHasElem_yfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_

}

type XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ struct {
//	The perspective element describes the optics of a perspective camera.
	Perspective *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective `xml:"http://www.collada.org/2005/11/COLLADASchema perspective"`

}

//	The orthographic element describes the field of view of an orthographic camera.
//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
type XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ struct {
//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
	Xmag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xmag"`

}

//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
type XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ struct {
//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
	Ymag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema ymag"`

}

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic struct {
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_

//	The aspect_ratio element contains a floating point number describing the aspect ratio of
//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
//	calculated from the xmag or ymag elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_

}

type XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ struct {
//	The orthographic element describes the field of view of an orthographic camera.
	Orthographic *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic `xml:"http://www.collada.org/2005/11/COLLADASchema orthographic"`

}

type TxsdCameraSequenceOpticsSequenceTechniqueCommon struct {
//	The orthographic element describes the field of view of an orthographic camera.
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_

//	The perspective element describes the optics of a perspective camera.
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_

}

type XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdCameraSequenceOpticsSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdCameraSequenceOptics struct {
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ struct {
//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	Optics *TxsdCameraSequenceOptics `xml:"http://www.collada.org/2005/11/COLLADASchema optics"`

}

type TxsdCamera struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Imagers represent the image sensor of a camera (for example film or CCD).
	XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The camera element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_

}

type XsdGoPkgHasElems_Camera struct {
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
	Cameras []*TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`

}

type TxsdLibraryCameras struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one camera element.
	XsdGoPkgHasElems_Camera

//	The library_cameras element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_LibraryCameras struct {
//	The library_cameras element declares a module of camera elements.
	LibraryCamerases []*TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`

}

//	The library_materials element declares a module of material elements.
//	Materials describe the visual appearance of a geometric object.
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
//	Assigns a new value to a previously defined parameter
type XsdGoPkgHasAttr_Ref_XsdtToken_ struct {
	Ref xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

//	A group that specifies the allowable types for effect scoped parameters.
type XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ struct {
	Float4X1 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`

}

//	A three-dimensional texture sampler.
type TfxSamplerWrapCommon xsdt.Nmtoken

//	Since TfxSamplerWrapCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerWrapCommon) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfxSamplerWrapCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerWrapCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "BORDER".
func (me TfxSamplerWrapCommon) IsBorder () bool { return me == "BORDER" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "CLAMP".
func (me TfxSamplerWrapCommon) IsClamp () bool { return me == "CLAMP" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "WRAP".
func (me TfxSamplerWrapCommon) IsWrap () bool { return me == "WRAP" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "NONE".
func (me TfxSamplerWrapCommon) IsNone () bool { return me == "NONE" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "MIRROR".
func (me TfxSamplerWrapCommon) IsMirror () bool { return me == "MIRROR" }

//	Since TfxSamplerWrapCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerWrapCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

type XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap struct {
	WrapP TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_p"`

}

//	Returns the default value for WrapP -- "WRAP"
func (me XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) WrapPDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type TfxColorCommon Tfloat4

//	This convenience method just performs a simple type conversion to TfxColorCommon's alias type Tfloat4.
func (me TfxColorCommon) ToTfloat4 () Tfloat4 { return Tfloat4(me) }

//	Since TfxColorCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxColorCommon) SetFromString (s string)  { (*Tfloat4)(me).SetFromString(s) }

//	Since TfxColorCommon is just a simple String type, this merely returns the current string value.
func (me TfxColorCommon) String () string { return Tfloat4(me).String() }

type XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`

}

type XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

type XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`

}

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault () xsdt.Float { return xsdt.Float(0.0) }

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type TfxSamplerFilterCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NONE".
func (me TfxSamplerFilterCommon) IsNone () bool { return me == "NONE" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR".
func (me TfxSamplerFilterCommon) IsLinear () bool { return me == "LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsNearestMipmapNearest () bool { return me == "NEAREST_MIPMAP_NEAREST" }

//	Since TfxSamplerFilterCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerFilterCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TfxSamplerFilterCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerFilterCommon) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfxSamplerFilterCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerFilterCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsLinearMipmapLinear () bool { return me == "LINEAR_MIPMAP_LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST".
func (me TfxSamplerFilterCommon) IsNearest () bool { return me == "NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsLinearMipmapNearest () bool { return me == "LINEAR_MIPMAP_NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsNearestMipmapLinear () bool { return me == "NEAREST_MIPMAP_LINEAR" }

type XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`

}

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`

}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`

}

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault () TfxSamplerFilterCommon { return TfxSamplerFilterCommon("NONE") }

type XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault () TfxSamplerWrapCommon { return TfxSamplerWrapCommon("WRAP") }

type TfxSampler3DCommon struct {
	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

}

type XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ struct {
	Sampler3D *TfxSampler3DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

type XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

type XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ struct {
	Float1X2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`

}

type XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ struct {
	Float4X4 Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

type Tbool4 TListOfBools

//	This convenience method just performs a simple type conversion to Tbool4's alias type TListOfBools.
func (me Tbool4) ToTListOfBools () TListOfBools { return TListOfBools(me) }

//	Since Tbool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

//	Since Tbool4 is just a simple String type, this merely returns the current string value.
func (me Tbool4) String () string { return TListOfBools(me).String() }

type XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ struct {
	Bool4 Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

type XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

type Tfloat3X2 TListOfFloats

//	Since Tfloat3X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X2) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3X2's alias type TListOfFloats.
func (me Tfloat3X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ struct {
	Float3X2 Tfloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`

}

//	A texture sampler for cube maps.
type TfxSamplerCUBECommon struct {
	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

}

type XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ struct {
	SamplerCUBE *TfxSamplerCUBECommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

//	The fx_surface_common type is used to declare a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
type XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 struct {
//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	MipLevels xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip_levels"`

}

//	Returns the default value for MipLevels -- 0
func (me XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0) MipLevelsDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
type XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ struct {
//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format"`

}

//	The surface should be sized to these exact dimensions
type Tint3 TListOfInts

//	This convenience method just performs a simple type conversion to Tint3's alias type TListOfInts.
func (me Tint3) ToTListOfInts () TListOfInts { return TListOfInts(me) }

//	Since Tint3 is just a simple String type, this merely returns the current string value.
func (me Tint3) String () string { return TListOfInts(me).String() }

//	Since Tint3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

type XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 struct {
//	The surface should be sized to these exact dimensions
	Size Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`

}

//	Returns the default value for Size -- "0 0 0"
func (me XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000) SizeDefault () Tint3 { return Tint3("0 0 0") }

//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
type XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ struct {
//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	MipmapGenerate xsdt.Boolean `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_generate"`

}

//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on type and other characteristics. described by the annotation docs on the child elements.
//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
//	This element is an IDREF which specifies the image to use to initialize a specific mip of a 1D or 2D surface, 3D slice, or Cube face.
type TfxSurfaceFaceEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Y".
func (me TfxSurfaceFaceEnum) IsPositiveY () bool { return me == "POSITIVE_Y" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Z".
func (me TfxSurfaceFaceEnum) IsPositiveZ () bool { return me == "POSITIVE_Z" }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFaceEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_X".
func (me TfxSurfaceFaceEnum) IsPositiveX () bool { return me == "POSITIVE_X" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Y".
func (me TfxSurfaceFaceEnum) IsNegativeY () bool { return me == "NEGATIVE_Y" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Z".
func (me TfxSurfaceFaceEnum) IsNegativeZ () bool { return me == "NEGATIVE_Z" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_X".
func (me TfxSurfaceFaceEnum) IsNegativeX () bool { return me == "NEGATIVE_X" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFaceEnum's alias type xsdt.String.
func (me TfxSurfaceFaceEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFaceEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX struct {
	Face TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema face,attr"`

}

//	Returns the default value for Face -- "POSITIVE_X"
func (me XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX) FaceDefault () TfxSurfaceFaceEnum { return TfxSurfaceFaceEnum("POSITIVE_X") }

type XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0 struct {
	Mip xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`

}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0) MipDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

type XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0 struct {
	Slice xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`

}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0) SliceDefault () xsdt.UnsignedInt { return xsdt.UnsignedInt(0) }

type TfxSurfaceInitFromCommon struct {
	XsdGoPkgValue xsdt.Idref `xml:",chardata"`

	XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

}

type XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ struct {
//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	InitFroms []*TfxSurfaceInitFromCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`

}

//	Init a 3D from a compound image such as DDS
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
type XsdGoPkgHasAttr_Ref_XsdtIdref_ struct {
	Ref xsdt.Idref `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TxsdFxSurfaceInitVolumeCommonChoicePrimary struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

}

type XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ struct {
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`

}

//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

type TfxSurfaceInitVolumeCommon struct {
//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_

//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_

}

type XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ struct {
//	Init a 3D from a compound image such as DDS
	InitVolume *TfxSurfaceInitVolumeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_volume"`

}

//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
type XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ struct {
//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	InitAsNull xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_null"`

}

//	Init a CUBE from a compound image such as DDS
//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
type XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ struct {
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	Orders []TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema order"`

}

type TxsdFxSurfaceInitCubeCommonChoicePrimary struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

//	This sequence exists to allow the order elements to be optional but require that if they exist there must be 6 of them.
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_

}

type XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ struct {
//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitCubeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`

}

//	Init each face mipchain with one compound image such as DDS
type XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ struct {
//	Init each face mipchain with one compound image such as DDS
	Faces []*TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

type TfxSurfaceInitCubeCommon struct {
//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_

//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_

//	Init each face mipchain with one compound image such as DDS
	XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_

}

type XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ struct {
//	Init a CUBE from a compound image such as DDS
	InitCube *TfxSurfaceInitCubeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_cube"`

}

//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
type XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ struct {
//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	InitAsTarget xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_target"`

}

//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
//	For 1D, 2D, RECT surface types
//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ struct {
//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitVolumeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema all"`

}

type TfxSurfaceInitPlanarCommon struct {
//	This choice exists for consistancy with other init types (volume and cube).  When other initialization methods are needed.
//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_

}

type XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ struct {
//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	InitPlanar *TfxSurfaceInitPlanarCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_planar"`

}

type XsdGoPkgHasGroup_FxSurfaceInitCommon struct {
//	Init a 3D from a compound image such as DDS
	XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_

//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_

//	Init a CUBE from a compound image such as DDS
	XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_

//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_

//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_

//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_

}

//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
type TfxSurfaceTypeEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "DEPTH".
func (me TfxSurfaceTypeEnum) IsDepth () bool { return me == "DEPTH" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "RECT".
func (me TfxSurfaceTypeEnum) IsRect () bool { return me == "RECT" }

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceTypeEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "CUBE".
func (me TfxSurfaceTypeEnum) IsCube () bool { return me == "CUBE" }

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceTypeEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "1D".
func (me TfxSurfaceTypeEnum) Is1D () bool { return me == "1D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "UNTYPED".
func (me TfxSurfaceTypeEnum) IsUntyped () bool { return me == "UNTYPED" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "3D".
func (me TfxSurfaceTypeEnum) Is3D () bool { return me == "3D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "2D".
func (me TfxSurfaceTypeEnum) Is2D () bool { return me == "2D" }

//	This convenience method just performs a simple type conversion to TfxSurfaceTypeEnum's alias type xsdt.String.
func (me TfxSurfaceTypeEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_ struct {
	Type TfxSurfaceTypeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`

}

//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	If the exact format cannot be resolve via other methods then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	Additional hints about data relationships and other things to help the application pick the best format.
//	Additional hints about data relationships and other things to help the application pick the best format.
type TfxSurfaceFormatHintOptionEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED4".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized4 () bool { return me == "NORMALIZED4" }

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintOptionEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "COMPRESSABLE".
func (me TfxSurfaceFormatHintOptionEnum) IsCompressable () bool { return me == "COMPRESSABLE" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED3".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized3 () bool { return me == "NORMALIZED3" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "SRGB_GAMMA".
func (me TfxSurfaceFormatHintOptionEnum) IsSrgbGamma () bool { return me == "SRGB_GAMMA" }

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintOptionEnum) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintOptionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintOptionEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ struct {
//	Additional hints about data relationships and other things to help the application pick the best format.
	Options []TfxSurfaceFormatHintOptionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema option"`

}

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
type TfxSurfaceFormatHintRangeEnum xsdt.String

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintRangeEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintRangeEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SINT".
func (me TfxSurfaceFormatHintRangeEnum) IsSint () bool { return me == "SINT" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "FLOAT".
func (me TfxSurfaceFormatHintRangeEnum) IsFloat () bool { return me == "FLOAT" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsUnorm () bool { return me == "UNORM" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintRangeEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UINT".
func (me TfxSurfaceFormatHintRangeEnum) IsUint () bool { return me == "UINT" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintRangeEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsSnorm () bool { return me == "SNORM" }

type XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ struct {
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	Range TfxSurfaceFormatHintRangeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema range"`

}

//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
type TfxSurfaceFormatHintChannelsEnum xsdt.String

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintChannelsEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintChannelsEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintChannelsEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "L".
func (me TfxSurfaceFormatHintChannelsEnum) IsL () bool { return me == "L" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZ".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyz () bool { return me == "XYZ" }

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintChannelsEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGB".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgb () bool { return me == "RGB" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGBA".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgba () bool { return me == "RGBA" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZW".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyzw () bool { return me == "XYZW" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "LA".
func (me TfxSurfaceFormatHintChannelsEnum) IsLa () bool { return me == "LA" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "D".
func (me TfxSurfaceFormatHintChannelsEnum) IsD () bool { return me == "D" }

type XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ struct {
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	Channels TfxSurfaceFormatHintChannelsEnum `xml:"http://www.collada.org/2005/11/COLLADASchema channels"`

}

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
type TfxSurfaceFormatHintPrecisionEnum xsdt.String

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintPrecisionEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintPrecisionEnum) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "LOW".
func (me TfxSurfaceFormatHintPrecisionEnum) IsLow () bool { return me == "LOW" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "MID".
func (me TfxSurfaceFormatHintPrecisionEnum) IsMid () bool { return me == "MID" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "HIGH".
func (me TfxSurfaceFormatHintPrecisionEnum) IsHigh () bool { return me == "HIGH" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintPrecisionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintPrecisionEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ struct {
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	Precision TfxSurfaceFormatHintPrecisionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema precision"`

}

type TfxSurfaceFormatHintCommon struct {
	XsdGoPkgHasElems_Extra

//	Additional hints about data relationships and other things to help the application pick the best format.
	XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_

//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_

}

type XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ struct {
//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	FormatHint *TfxSurfaceFormatHintCommon `xml:"http://www.collada.org/2005/11/COLLADASchema format_hint"`

}

//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
type XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 struct {
//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	ViewportRatio Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema viewport_ratio"`

}

//	Returns the default value for ViewportRatio -- "1 1"
func (me XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11) ViewportRatioDefault () Tfloat2 { return Tfloat2("1 1") }

type TfxSurfaceCommon struct {
//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_

//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on the type attribute and other characteristics described by the annotation docs on the choiced child elements of this type.
	XsdGoPkgHasGroup_FxSurfaceInitCommon

//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
	XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_

//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_

//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11

	XsdGoPkgHasElems_Extra

//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0

//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_

//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000

}

type XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ struct {
	Surface *TfxSurfaceCommon `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

type XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ struct {
	Enum xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

type Tint4 TListOfInts

//	Since Tint4 is just a simple String type, this merely returns the current string value.
func (me Tint4) String () string { return TListOfInts(me).String() }

//	Since Tint4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tint4's alias type TListOfInts.
func (me Tint4) ToTListOfInts () TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ struct {
	Int4 Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

type Tbool2 TListOfBools

//	Since Tbool2 is just a simple String type, this merely returns the current string value.
func (me Tbool2) String () string { return TListOfBools(me).String() }

//	Since Tbool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tbool2's alias type TListOfBools.
func (me Tbool2) ToTListOfBools () TListOfBools { return TListOfBools(me) }

type XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ struct {
	Bool2 Tbool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

//	A two-dimensional texture sampler.
type TfxSampler2DCommon struct {
	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ struct {
	Sampler2D *TfxSampler2DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

//	A two-dimensional texture sampler.
type TfxSamplerRECTCommon struct {
	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

}

type XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ struct {
	SamplerRECT *TfxSamplerRECTCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

type XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ struct {
	Float2X1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`

}

type XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ struct {
	Float1X3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`

}

type XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ struct {
	Float1X1 Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`

}

type XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ struct {
	Int Tint `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

type Tbool3 TListOfBools

//	This convenience method just performs a simple type conversion to Tbool3's alias type TListOfBools.
func (me Tbool3) ToTListOfBools () TListOfBools { return TListOfBools(me) }

//	Since Tbool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3) SetFromString (s string)  { (*TListOfBools)(me).SetFromString(s) }

//	Since Tbool3 is just a simple String type, this merely returns the current string value.
func (me Tbool3) String () string { return TListOfBools(me).String() }

type XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ struct {
	Bool3 Tbool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

type Tfloat3X4 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3X4's alias type TListOfFloats.
func (me Tfloat3X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	Since Tfloat3X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X4) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ struct {
	Float3X4 Tfloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`

}

type Tfloat2X4 TListOfFloats

//	Since Tfloat2X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X4) String () string { return TListOfFloats(me).String() }

//	Since Tfloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X4) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat2X4's alias type TListOfFloats.
func (me Tfloat2X4) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ struct {
	Float2X4 Tfloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`

}

type XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ struct {
	Float3X1 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`

}

type Tfloat2X2 TListOfFloats

//	Since Tfloat2X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X2) String () string { return TListOfFloats(me).String() }

//	Since Tfloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat2X2's alias type TListOfFloats.
func (me Tfloat2X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ struct {
	Float2X2 Tfloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

//	A one-dimensional texture sampler.
type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`

}

//	Returns the default value for MipmapMaxlevel -- 0
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0) MipmapMaxlevelDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(0) }

type TfxSampler1DCommon struct {
	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_border_colorsequencefx_sampler3D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

}

type XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ struct {
	Sampler1D *TfxSampler1DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

type XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ struct {
	Bool Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

type XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ struct {
	Float3X3 Tfloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

type XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ struct {
	Float Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

type Tfloat4X2 TListOfFloats

//	Since Tfloat4X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X2) String () string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat4X2's alias type TListOfFloats.
func (me Tfloat4X2) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X2) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ struct {
	Float4X2 Tfloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`

}

type XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ struct {
	Int3 Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

//	A texture sampler for depth maps.
type TfxSamplerDEPTHCommon struct {
	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_sourcesequencefx_sampler3D_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_ssequencefx_sampler3D_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_wrap_tsequencefx_sampler3D_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

}

type XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ struct {
	SamplerDEPTH *TfxSamplerDEPTHCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

type Tfloat2X3 TListOfFloats

//	Since Tfloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to Tfloat2X3's alias type TListOfFloats.
func (me Tfloat2X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X3) String () string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ struct {
	Float2X3 Tfloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`

}

type XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

type XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ struct {
	Float1X4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`

}

type Tfloat4X3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat4X3's alias type TListOfFloats.
func (me Tfloat4X3) ToTListOfFloats () TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X3) String () string { return TListOfFloats(me).String() }

//	Since Tfloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X3) SetFromString (s string)  { (*TListOfFloats)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ struct {
	Float4X3 Tfloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`

}

type Tint2 TListOfInts

//	Since Tint2 is just a simple String type, this merely returns the current string value.
func (me Tint2) String () string { return TListOfInts(me).String() }

//	This convenience method just performs a simple type conversion to Tint2's alias type TListOfInts.
func (me Tint2) ToTListOfInts () TListOfInts { return TListOfInts(me) }

//	Since Tint2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2) SetFromString (s string)  { (*TListOfInts)(me).SetFromString(s) }

type XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ struct {
	Int2 Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

type XsdGoPkgHasGroup_FxBasicTypeCommon struct {
	XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_

	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_

	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_

	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_

}

type TxsdInstanceEffectSequenceSetparam struct {
	XsdGoPkgHasAttr_Ref_XsdtToken_

	XsdGoPkgHasGroup_FxBasicTypeCommon

}

type XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ struct {
//	Assigns a new value to a previously defined parameter
	Setparams []*TxsdInstanceEffectSequenceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	Add a hint for a platform of which technique to use in this effect.
type XsdGoPkgHasAttr_Ref_XsdtNCName_ struct {
	Ref xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

//	A profile defines a string that specifies which API profile this is hint is aimed for.
type XsdGoPkgHasAttr_Profile_XsdtNCName_ struct {
	Profile xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`

}

//	A platform defines a string that specifies which platform this is hint is aimed for.
type XsdGoPkgHasAttr_Platform_XsdtNCName_ struct {
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`

}

type TxsdInstanceEffectSequenceTechniqueHint struct {
//	A reference to the technique to use for the specified platform.
	XsdGoPkgHasAttr_Ref_XsdtNCName_

//	A profile defines a string that specifies which API profile this is hint is aimed for.
	XsdGoPkgHasAttr_Profile_XsdtNCName_

//	A platform defines a string that specifies which platform this is hint is aimed for.
	XsdGoPkgHasAttr_Platform_XsdtNCName_

}

type XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ struct {
//	Add a hint for a platform of which technique to use in this effect.
	TechniqueHints []*TxsdInstanceEffectSequenceTechniqueHint `xml:"http://www.collada.org/2005/11/COLLADASchema technique_hint"`

}

type TxsdInstanceEffect struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Assigns a new value to a previously defined parameter
	XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_

//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	Add a hint for a platform of which technique to use in this effect.
	XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_

//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

}

type XsdGoPkgHasElem_InstanceEffect struct {
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	InstanceEffect *TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`

}

type TxsdMaterial struct {
//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The material element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material must instance an effect.
	XsdGoPkgHasElem_InstanceEffect

}

type XsdGoPkgHasElems_Material struct {
//	Materials describe the visual appearance of a geometric object.
	Materials []*TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`

}

type TxsdLibraryMaterials struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The library_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one material element.
	XsdGoPkgHasElems_Material

}

type XsdGoPkgHasElems_LibraryMaterials struct {
//	The library_materials element declares a module of material elements.
	LibraryMaterialses []*TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`

}

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
type XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ struct {
//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
	InstancePhysicsScenes []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_scene"`

}

//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
type XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ struct {
//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
	InstanceVisualScene *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_visual_scene"`

}

type TxsdColladaSequenceScene struct {
//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_

}

type XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ struct {
//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
	Scene *TxsdColladaSequenceScene `xml:"http://www.collada.org/2005/11/COLLADASchema scene"`

}

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
//	An enumerated type specifying the acceptable document versions.
type TVersionType xsdt.String

//	Returns true if the value of this enumerated TVersionType is "1.4.1".
func (me TVersionType) Is141 () bool { return me == "1.4.1" }

//	This convenience method just performs a simple type conversion to TVersionType's alias type xsdt.String.
func (me TVersionType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TVersionType is just a simple String type, this merely returns the current string value.
func (me TVersionType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TVersionType is "1.4.0".
func (me TVersionType) Is140 () bool { return me == "1.4.0" }

//	Since TVersionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TVersionType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Version_TVersionType_ struct {
	Version TVersionType `xml:"http://www.collada.org/2005/11/COLLADASchema version,attr"`

}

//	The library_geometries element declares a module of geometry elements.
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
//	The spline element contains control vertex information sufficient to describe basic splines.
//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
type TxsdSplineSequenceControlVertices struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

}

type XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ struct {
//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	ControlVertices *TxsdSplineSequenceControlVertices `xml:"http://www.collada.org/2005/11/COLLADASchema control_vertices"`

}

type XsdGoPkgHasAttr_Closed_Tbool_False struct {
	Closed Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema closed,attr"`

}

//	Returns the default value for Closed -- false
func (me XsdGoPkgHasAttr_Closed_Tbool_False) ClosedDefault () Tbool { return Tbool(false) }

type TxsdSpline struct {
//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_

//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

	XsdGoPkgHasAttr_Closed_Tbool_False

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_Spline struct {
//	The spline element contains control vertex information sufficient to describe basic splines.
	Spline *TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`

}

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
//	The InputLocalOffset type is used to represent indexed inputs that can only reference resources declared in the same document.
//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
type XsdGoPkgHasAttr_Offset_Tuint_ struct {
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`

}

//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
type XsdGoPkgHasAttr_Set_Tuint_ struct {
	Set Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema set,attr"`

}

type TInputLocalOffset struct {
//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
	XsdGoPkgHasAttr_Set_Tuint_

//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	XsdGoPkgHasAttr_Offset_Tuint_

}

type XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_ struct {
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`

}

//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type TListOfUInts xsdt.String

//	Since TListOfUInts is just a simple String type, this merely returns the current string value.
func (me TListOfUInts) String () string { return xsdt.String(me).String() }

//	Since TListOfUInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfUInts) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TListOfUInts's alias type xsdt.String.
func (me TListOfUInts) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TListOfUInts defines a String containing a whitespace-separated list of Tuint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfUInts) Values () (list []Tuint) { var btv = new(Tuint); var svals = xsdt.ListValues(string(me)); list = make([]Tuint, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type XsdGoPkgHasElems_P struct {
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
	Ps []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`

}

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
type XsdGoPkgHasAttr_Material_XsdtNCName_ struct {
	Material xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema material,attr"`

}

type TxsdLinestrips struct {
//	The count attribute indicates the number of linestrip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The linestrips element may have any number of p elements.
	XsdGoPkgHasElems_P

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

}

type XsdGoPkgHasElems_Linestrips struct {
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
	Linestripses []*TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`

}

//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
type XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_ struct {
	ConvexHullOf xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema convex_hull_of,attr"`

}

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type XsdGoPkgHasElem_P struct {
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
	P TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`

}

//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
type XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_ struct {
//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
	Vcount TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema vcount"`

}

type TxsdPolylist struct {
//	The vcount element contains a list of integers describing the number of sides for each polygon
//	described by the polylist element. The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The p element may occur once.
	XsdGoPkgHasElem_P

//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

}

type XsdGoPkgHasElems_Polylist struct {
//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
	Polylists []*TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`

}

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type TxsdVertices struct {
//	The id attribute is a text string containing the unique identifier of this element. This
//	value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElem_Vertices struct {
//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Vertices *TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`

}

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
//	The ph element descripes a polygon with holes.
//	The h element represents a hole in the polygon specified. There must be at least one h element.
type XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ struct {
//	The h element represents a hole in the polygon specified. There must be at least one h element.
	Hs []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema h"`

}

type TxsdPolygonsSequenceChoicePh struct {
//	Theere may only be one p element.
	XsdGoPkgHasElem_P

//	The h element represents a hole in the polygon specified. There must be at least one h element.
	XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_

}

type XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ struct {
//	The ph element descripes a polygon with holes.
	Phs []*TxsdPolygonsSequenceChoicePh `xml:"http://www.collada.org/2005/11/COLLADASchema ph"`

}

type TxsdPolygons struct {
//	The p element may occur any number of times.
	XsdGoPkgHasElems_P

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The ph element descripes a polygon with holes.
	XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_

//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

}

type XsdGoPkgHasElems_Polygons struct {
//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygonses []*TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`

}

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
type TxsdTrifans struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The count attribute indicates the number of triangle fan primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The trifans element may have any number of p elements.
	XsdGoPkgHasElems_P

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_Trifans struct {
//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifanses []*TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`

}

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type TxsdTristrips struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The tristrips element may have any number of p elements.
	XsdGoPkgHasElems_P

//	The count attribute indicates the number of triangle strip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The material attribute declares a symbol for a material. This symbol is bound to a material
//	at the time of instantiation. If the material attribute is not specified then the lighting
//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

}

type XsdGoPkgHasElems_Tristrips struct {
//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristripses []*TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`

}

//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
type TxsdTriangles struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The triangles element may have any number of p elements.
	XsdGoPkgHasElem_P

//	The input element may occur any number of times. This input is a local input with the
//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The count attribute indicates the number of triangle primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. Optional attribute. If the material attribute is not specified then
//	the lighting and shading results are application defined.
	XsdGoPkgHasAttr_Material_XsdtNCName_

}

type XsdGoPkgHasElems_Triangles struct {
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangleses []*TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`

}

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type TxsdLines struct {
//	The input element may occur any number of times. This input is a local input with the offset
//	and set attributes.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

//	The count attribute indicates the number of line primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The p element may occur once.
	XsdGoPkgHasElem_P

}

type XsdGoPkgHasElems_Lines struct {
//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
	Lineses []*TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`

}

type TxsdConvexMesh struct {
	XsdGoPkgHasElems_Tristrips

	XsdGoPkgHasElems_Triangles

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Lines

	XsdGoPkgHasElems_Source

	XsdGoPkgHasElems_Linestrips

//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
	XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_

	XsdGoPkgHasElems_Polylist

	XsdGoPkgHasElem_Vertices

	XsdGoPkgHasElems_Polygons

	XsdGoPkgHasElems_Trifans

}

type XsdGoPkgHasElem_ConvexMesh struct {
//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMesh *TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`

}

//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
type TxsdMesh struct {
//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

//	The mesh element must contain one vertices element.
	XsdGoPkgHasElem_Vertices

//	The mesh element may contain any number of polylist elements.
	XsdGoPkgHasElems_Polylist

//	The mesh element may contain any number of polygons elements.
	XsdGoPkgHasElems_Polygons

//	The mesh element may contain any number of lines elements.
	XsdGoPkgHasElems_Lines

//	The mesh element may contain any number of tristrips elements.
	XsdGoPkgHasElems_Tristrips

//	The mesh element may contain any number of trifans elements.
	XsdGoPkgHasElems_Trifans

//	The mesh element may contain any number of linestrips elements.
	XsdGoPkgHasElems_Linestrips

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The mesh element may contain any number of triangles elements.
	XsdGoPkgHasElems_Triangles

}

type XsdGoPkgHasElem_Mesh struct {
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Mesh *TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`

}

type TxsdGeometry struct {
//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_Mesh

	XsdGoPkgHasElem_Spline

//	The geometry element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_ConvexMesh

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_Geometry struct {
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
	Geometries []*TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`

}

type TxsdLibraryGeometries struct {
//	The library_geometries element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	There must be at least one geometry element.
	XsdGoPkgHasElems_Geometry

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_LibraryGeometries struct {
//	The library_geometries element declares a module of geometry elements.
	LibraryGeometrieses []*TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`

}

//	The library_effects element declares a module of effect elements.
//	A self contained description of a shader effect.
//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
//	This element creates a new, named param object in the FX Runtime, assigns it a type, an initial value, and additional attributes at declaration time.
//	The modifier element allows you to specify a modifier for this new param.
type TfxModifierEnumCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VARYING".
func (me TfxModifierEnumCommon) IsVarying () bool { return me == "VARYING" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "EXTERN".
func (me TfxModifierEnumCommon) IsExtern () bool { return me == "EXTERN" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "STATIC".
func (me TfxModifierEnumCommon) IsStatic () bool { return me == "STATIC" }

//	This convenience method just performs a simple type conversion to TfxModifierEnumCommon's alias type xsdt.Nmtoken.
func (me TfxModifierEnumCommon) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Since TfxModifierEnumCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxModifierEnumCommon) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "CONST".
func (me TfxModifierEnumCommon) IsConst () bool { return me == "CONST" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "UNIFORM".
func (me TfxModifierEnumCommon) IsUniform () bool { return me == "UNIFORM" }

//	Since TfxModifierEnumCommon is just a simple String type, this merely returns the current string value.
func (me TfxModifierEnumCommon) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VOLATILE".
func (me TfxModifierEnumCommon) IsVolatile () bool { return me == "VOLATILE" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "SHARED".
func (me TfxModifierEnumCommon) IsShared () bool { return me == "SHARED" }

type XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ struct {
//	The modifier element allows you to specify a modifier for this new param.
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`

}

//	The annotate element allows you to specify an annotation for this new param.
//	A group that specifies the allowable types for an annotation.
type XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema string"`

}

type XsdGoPkgHasGroup_FxAnnotateTypeCommon struct {
	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

}

type TfxAnnotateCommon struct {
	XsdGoPkgHasAttr_Name_XsdtNCName_

	XsdGoPkgHasGroup_FxAnnotateTypeCommon

}

type XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ struct {
//	The annotate element allows you to specify an annotation for this new param.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`

}

//	The semantic element allows you to specify a semantic for this new param.
type XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ struct {
//	The semantic element allows you to specify a semantic for this new param.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`

}

type TfxNewparamCommon struct {
//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasGroup_FxBasicTypeCommon

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

}

type XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ struct {
//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	Newparams []*TfxNewparamCommon `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of COMMON platform-specific data types and technique declarations.
type TcommonNewparamType struct {
	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ struct {
	Newparams []*TcommonNewparamType `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type TxsdCommonColorOrTextureTypeChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

type XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ struct {
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	The extra element declares additional information regarding its parent element.
type XsdGoPkgHasElem_Extra struct {
//	The extra element declares additional information regarding its parent element.
	Extra *TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`

}

type XsdGoPkgHasAttr_Texture_XsdtNCName_ struct {
	Texture xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texture,attr"`

}

type XsdGoPkgHasAttr_Texcoord_XsdtNCName_ struct {
	Texcoord xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord,attr"`

}

type TxsdCommonColorOrTextureTypeChoiceTexture struct {
	XsdGoPkgHasElem_Extra

	XsdGoPkgHasAttr_Texture_XsdtNCName_

	XsdGoPkgHasAttr_Texcoord_XsdtNCName_

}

type XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ struct {
	Texture *TxsdCommonColorOrTextureTypeChoiceTexture `xml:"http://www.collada.org/2005/11/COLLADASchema texture"`

}

type TxsdCommonColorOrTextureTypeChoiceColor struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ struct {
	Color *TxsdCommonColorOrTextureTypeChoiceColor `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

type TcommonColorOrTextureType struct {
	XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_

	XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_

	XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_

}

type XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ struct {
	Ambient *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

type TfxOpaqueEnum xsdt.String

//	Returns true if the value of this enumerated TfxOpaqueEnum is "RGB_ZERO".
func (me TfxOpaqueEnum) IsRgbZero () bool { return me == "RGB_ZERO" }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "A_ONE".
func (me TfxOpaqueEnum) IsAOne () bool { return me == "A_ONE" }

//	This convenience method just performs a simple type conversion to TfxOpaqueEnum's alias type xsdt.String.
func (me TfxOpaqueEnum) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TfxOpaqueEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxOpaqueEnum) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TfxOpaqueEnum is just a simple String type, this merely returns the current string value.
func (me TfxOpaqueEnum) String () string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne struct {
	Opaque TfxOpaqueEnum `xml:"http://www.collada.org/2005/11/COLLADASchema opaque,attr"`

}

//	Returns the default value for Opaque -- "A_ONE"
func (me XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne) OpaqueDefault () TfxOpaqueEnum { return TfxOpaqueEnum("A_ONE") }

type TcommonTransparentType struct {
	XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne

	TcommonColorOrTextureType

}

type XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`

}

type XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ struct {
	Float *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

type XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ struct {
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

type TcommonFloatOrParamType struct {
	XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_

	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_

}

type XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`

}

type XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ struct {
	Diffuse *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema diffuse"`

}

type XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ struct {
	Shininess *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema shininess"`

}

type XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`

}

type XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`

}

type XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`

}

type XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ struct {
	Specular *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema specular"`

}

type XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`

}

type TxsdProfileCommonSequenceTechniqueSequenceChoicePhong struct {
	XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

}

type XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ struct {
	Phong *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong `xml:"http://www.collada.org/2005/11/COLLADASchema phong"`

}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant struct {
	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

}

type XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ struct {
	Constant *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`

}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn struct {
	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_specularsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_shininesssequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

}

type XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ struct {
	Blinn *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn `xml:"http://www.collada.org/2005/11/COLLADASchema blinn"`

}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert struct {
	XsdGoPkgHasElem_ambientsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_diffusesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparencysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivitysequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequencephongchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

}

type XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ struct {
	Lambert *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert `xml:"http://www.collada.org/2005/11/COLLADASchema lambert"`

}

type TxsdProfileCommonSequenceTechnique struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_

	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_

}

type XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Technique *TxsdProfileCommonSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

type TxsdProfileCommon struct {
	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_

	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image

}

type XsdGoPkgHasElems_ProfileCommon struct {
//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommons []*TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`

}

//	Opens a block of GLES platform-specific data types and technique declarations.
//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
type XsdGoPkgHasAttr_Platform_XsdtNCName_Pc struct {
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`

}

//	Returns the default value for Platform -- "PC"
func (me XsdGoPkgHasAttr_Platform_XsdtNCName_Pc) PlatformDefault () xsdt.NCName { return xsdt.NCName("PC") }

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	Create a new, named param object in the GLES Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	A group that defines the available variable types for GLES parameters.
//	Defines a set of texturing commands that will be converted into multitexturing operations using glTexEnv in regular and combiner mode.
//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
type TglesTexenvModeEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "BLEND".
func (me TglesTexenvModeEnums) IsBlend () bool { return me == "BLEND" }

//	Since TglesTexenvModeEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexenvModeEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "MODULATE".
func (me TglesTexenvModeEnums) IsModulate () bool { return me == "MODULATE" }

//	This convenience method just performs a simple type conversion to TglesTexenvModeEnums's alias type xsdt.Token.
func (me TglesTexenvModeEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "DECAL".
func (me TglesTexenvModeEnums) IsDecal () bool { return me == "DECAL" }

//	Since TglesTexenvModeEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexenvModeEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "REPLACE".
func (me TglesTexenvModeEnums) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "ADD".
func (me TglesTexenvModeEnums) IsAdd () bool { return me == "ADD" }

type XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_ struct {
	Operator TglesTexenvModeEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type XsdGoPkgHasAttr_Unit_XsdtNCName_ struct {
	Unit xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema unit,attr"`

}

type XsdGoPkgHasAttr_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param,attr"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_ struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TglesTextureConstantType struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_

}

type XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ struct {
	Constant *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`

}

type TglesTexenvCommandType struct {
	XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_

	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_

}

type XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ struct {
//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	Texenvs []*TglesTexenvCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texenv"`

}

//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
type XsdGoPkgHasAttr_Scale_XsdtFloat_ struct {
	Scale xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema scale,attr"`

}

type TglBlendType xsdt.String

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_ALPHA".
func (me TglBlendType) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_ALPHA".
func (me TglBlendType) IsConstantAlpha () bool { return me == "CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA_SATURATE".
func (me TglBlendType) IsSrcAlphaSaturate () bool { return me == "SRC_ALPHA_SATURATE" }

//	Returns true if the value of this enumerated TglBlendType is "ZERO".
func (me TglBlendType) IsZero () bool { return me == "ZERO" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DST_ALPHA".
func (me TglBlendType) IsOneMinusDstAlpha () bool { return me == "ONE_MINUS_DST_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "DEST_COLOR".
func (me TglBlendType) IsDestColor () bool { return me == "DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_COLOR".
func (me TglBlendType) IsOneMinusSrcColor () bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Since TglBlendType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA".
func (me TglBlendType) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

//	This convenience method just performs a simple type conversion to TglBlendType's alias type xsdt.String.
func (me TglBlendType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_ALPHA".
func (me TglBlendType) IsOneMinusConstantAlpha () bool { return me == "ONE_MINUS_CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DEST_COLOR".
func (me TglBlendType) IsOneMinusDestColor () bool { return me == "ONE_MINUS_DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "DST_ALPHA".
func (me TglBlendType) IsDstAlpha () bool { return me == "DST_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_COLOR".
func (me TglBlendType) IsSrcColor () bool { return me == "SRC_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE".
func (me TglBlendType) IsOne () bool { return me == "ONE" }

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_COLOR".
func (me TglBlendType) IsConstantColor () bool { return me == "CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_COLOR".
func (me TglBlendType) IsOneMinusConstantColor () bool { return me == "ONE_MINUS_CONSTANT_COLOR" }

//	Since TglBlendType is just a simple String type, this merely returns the current string value.
func (me TglBlendType) String () string { return xsdt.String(me).String() }

type TglesTexcombinerOperandAlphaEnums TglBlendType

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandAlphaEnums) SetFromString (s string)  { (*TglBlendType)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandAlphaEnums) String () string { return TglBlendType(me).String() }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandAlphaEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandAlphaEnums) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha struct {
	Operand TglesTexcombinerOperandAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`

}

//	Returns the default value for Operand -- "SRC_ALPHA"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha) OperandDefault () TglesTexcombinerOperandAlphaEnums { return TglesTexcombinerOperandAlphaEnums("SRC_ALPHA") }

type TglesTexcombinerSourceEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "CONSTANT".
func (me TglesTexcombinerSourceEnums) IsConstant () bool { return me == "CONSTANT" }

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerSourceEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PRIMARY".
func (me TglesTexcombinerSourceEnums) IsPrimary () bool { return me == "PRIMARY" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PREVIOUS".
func (me TglesTexcombinerSourceEnums) IsPrevious () bool { return me == "PREVIOUS" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerSourceEnums's alias type xsdt.Token.
func (me TglesTexcombinerSourceEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerSourceEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "TEXTURE".
func (me TglesTexcombinerSourceEnums) IsTexture () bool { return me == "TEXTURE" }

type XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_ struct {
	Source TglesTexcombinerSourceEnums `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TglesTexcombinerArgumentAlphaType struct {
	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha

}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ struct {
	Arguments []*TglesTexcombinerArgumentAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`

}

type TglesTexcombinerOperatorAlphaEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "REPLACE".
func (me TglesTexcombinerOperatorAlphaEnums) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorAlphaEnums) IsSubtract () bool { return me == "SUBTRACT" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorAlphaEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorAlphaEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "MODULATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsModulate () bool { return me == "MODULATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorAlphaEnums) IsAddSigned () bool { return me == "ADD_SIGNED" }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorAlphaEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorAlphaEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD".
func (me TglesTexcombinerOperatorAlphaEnums) IsAdd () bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsInterpolate () bool { return me == "INTERPOLATE" }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_ struct {
	Operator TglesTexcombinerOperatorAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type TglesTexcombinerCommandAlphaType struct {
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_

	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_

	XsdGoPkgHasAttr_Scale_XsdtFloat_

}

type XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ struct {
	Alpha *TglesTexcombinerCommandAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`

}

//	Defines the RGB portion of a texture_pipeline command. This is a combiner-mode texturing operation.
type TglesTexcombinerOperandRGBEnums TglBlendType

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandRGBEnums) SetFromString (s string)  { (*TglBlendType)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandRGBEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandRGBEnums) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsSrcColor () bool { return me == "SRC_COLOR" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcColor () bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcAlpha () bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsSrcAlpha () bool { return me == "SRC_ALPHA" }

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandRGBEnums) String () string { return TglBlendType(me).String() }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor struct {
	Operand TglesTexcombinerOperandRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`

}

//	Returns the default value for Operand -- "SRC_COLOR"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor) OperandDefault () TglesTexcombinerOperandRGBEnums { return TglesTexcombinerOperandRGBEnums("SRC_COLOR") }

type TglesTexcombinerArgumentRGBType struct {
	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_

	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor

}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ struct {
	Arguments []*TglesTexcombinerArgumentRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`

}

type TglesTexcombinerOperatorRGBEnums xsdt.Token

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorRGBEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorRGBEnums) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD".
func (me TglesTexcombinerOperatorRGBEnums) IsAdd () bool { return me == "ADD" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorRGBEnums) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "REPLACE".
func (me TglesTexcombinerOperatorRGBEnums) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorRGBEnums) IsSubtract () bool { return me == "SUBTRACT" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGBA".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgba () bool { return me == "DOT3_RGBA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorRGBEnums) IsAddSigned () bool { return me == "ADD_SIGNED" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGB".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgb () bool { return me == "DOT3_RGB" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "MODULATE".
func (me TglesTexcombinerOperatorRGBEnums) IsModulate () bool { return me == "MODULATE" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorRGBEnums) String () string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorRGBEnums) IsInterpolate () bool { return me == "INTERPOLATE" }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_ struct {
	Operator TglesTexcombinerOperatorRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`

}

type TglesTexcombinerCommandRGBType struct {
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_

	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_

	XsdGoPkgHasAttr_Scale_XsdtFloat_

}

type XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ struct {
	Rgb *TglesTexcombinerCommandRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema RGB"`

}

type TglesTexcombinerCommandType struct {
	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_

	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_

	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_

}

type XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ struct {
//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	Texcombiners []*TglesTexcombinerCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texcombiner"`

}

type TglesTexturePipeline struct {
//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_

//	The extra element may appear any number of times.
//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ struct {
	TexturePipeline *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`

}

type XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ struct {
	SamplerState xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`

}

type TxsdGlesTextureUnitSequenceTexcoord struct {
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

}

type XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ struct {
	Texcoord *TxsdGlesTextureUnitSequenceTexcoord `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord"`

}

type XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ struct {
	Surface xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

type TglesTextureUnit struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_

	XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_

}

type XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ struct {
	TextureUnit *TglesTextureUnit `xml:"http://www.collada.org/2005/11/COLLADASchema texture_unit"`

}

type TglFrontFaceType xsdt.String

//	Returns true if the value of this enumerated TglFrontFaceType is "CCW".
func (me TglFrontFaceType) IsCcw () bool { return me == "CCW" }

//	Since TglFrontFaceType is just a simple String type, this merely returns the current string value.
func (me TglFrontFaceType) String () string { return xsdt.String(me).String() }

//	Since TglFrontFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFrontFaceType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglFrontFaceType's alias type xsdt.String.
func (me TglFrontFaceType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFrontFaceType is "CW".
func (me TglFrontFaceType) IsCw () bool { return me == "CW" }

type TglLightModelColorControlType xsdt.String

//	Since TglLightModelColorControlType is just a simple String type, this merely returns the current string value.
func (me TglLightModelColorControlType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglLightModelColorControlType's alias type xsdt.String.
func (me TglLightModelColorControlType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SEPARATE_SPECULAR_COLOR".
func (me TglLightModelColorControlType) IsSeparateSpecularColor () bool { return me == "SEPARATE_SPECULAR_COLOR" }

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SINGLE_COLOR".
func (me TglLightModelColorControlType) IsSingleColor () bool { return me == "SINGLE_COLOR" }

//	Since TglLightModelColorControlType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLightModelColorControlType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglFuncType xsdt.String

//	Since TglFuncType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFuncType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglFuncType is just a simple String type, this merely returns the current string value.
func (me TglFuncType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFuncType is "LEQUAL".
func (me TglFuncType) IsLequal () bool { return me == "LEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "NOTEQUAL".
func (me TglFuncType) IsNotequal () bool { return me == "NOTEQUAL" }

//	This convenience method just performs a simple type conversion to TglFuncType's alias type xsdt.String.
func (me TglFuncType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFuncType is "GREATER".
func (me TglFuncType) IsGreater () bool { return me == "GREATER" }

//	Returns true if the value of this enumerated TglFuncType is "GEQUAL".
func (me TglFuncType) IsGequal () bool { return me == "GEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "LESS".
func (me TglFuncType) IsLess () bool { return me == "LESS" }

//	Returns true if the value of this enumerated TglFuncType is "EQUAL".
func (me TglFuncType) IsEqual () bool { return me == "EQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "ALWAYS".
func (me TglFuncType) IsAlways () bool { return me == "ALWAYS" }

//	Returns true if the value of this enumerated TglFuncType is "NEVER".
func (me TglFuncType) IsNever () bool { return me == "NEVER" }

type TglFogType xsdt.String

//	Since TglFogType is just a simple String type, this merely returns the current string value.
func (me TglFogType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogType is "EXP2".
func (me TglFogType) IsExp2 () bool { return me == "EXP2" }

//	This convenience method just performs a simple type conversion to TglFogType's alias type xsdt.String.
func (me TglFogType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFogType is "EXP".
func (me TglFogType) IsExp () bool { return me == "EXP" }

//	Since TglFogType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglFogType is "LINEAR".
func (me TglFogType) IsLinear () bool { return me == "LINEAR" }

type TglPolygonModeType xsdt.String

//	Since TglPolygonModeType is just a simple String type, this merely returns the current string value.
func (me TglPolygonModeType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglPolygonModeType is "FILL".
func (me TglPolygonModeType) IsFill () bool { return me == "FILL" }

//	Returns true if the value of this enumerated TglPolygonModeType is "POINT".
func (me TglPolygonModeType) IsPoint () bool { return me == "POINT" }

//	Returns true if the value of this enumerated TglPolygonModeType is "LINE".
func (me TglPolygonModeType) IsLine () bool { return me == "LINE" }

//	Since TglPolygonModeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglPolygonModeType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglPolygonModeType's alias type xsdt.String.
func (me TglPolygonModeType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TglFaceType xsdt.String

//	Returns true if the value of this enumerated TglFaceType is "FRONT_AND_BACK".
func (me TglFaceType) IsFrontAndBack () bool { return me == "FRONT_AND_BACK" }

//	Since TglFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFaceType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglFaceType's alias type xsdt.String.
func (me TglFaceType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFaceType is "FRONT".
func (me TglFaceType) IsFront () bool { return me == "FRONT" }

//	Since TglFaceType is just a simple String type, this merely returns the current string value.
func (me TglFaceType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFaceType is "BACK".
func (me TglFaceType) IsBack () bool { return me == "BACK" }

type TglMaterialType xsdt.String

//	Returns true if the value of this enumerated TglMaterialType is "SPECULAR".
func (me TglMaterialType) IsSpecular () bool { return me == "SPECULAR" }

//	This convenience method just performs a simple type conversion to TglMaterialType's alias type xsdt.String.
func (me TglMaterialType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglMaterialType is "DIFFUSE".
func (me TglMaterialType) IsDiffuse () bool { return me == "DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT_AND_DIFFUSE".
func (me TglMaterialType) IsAmbientAndDiffuse () bool { return me == "AMBIENT_AND_DIFFUSE" }

//	Since TglMaterialType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglMaterialType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglMaterialType is "EMISSION".
func (me TglMaterialType) IsEmission () bool { return me == "EMISSION" }

//	Since TglMaterialType is just a simple String type, this merely returns the current string value.
func (me TglMaterialType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT".
func (me TglMaterialType) IsAmbient () bool { return me == "AMBIENT" }

type TglStencilOpType xsdt.String

//	Returns true if the value of this enumerated TglStencilOpType is "INCR".
func (me TglStencilOpType) IsIncr () bool { return me == "INCR" }

//	Returns true if the value of this enumerated TglStencilOpType is "INVERT".
func (me TglStencilOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR".
func (me TglStencilOpType) IsDecr () bool { return me == "DECR" }

//	Returns true if the value of this enumerated TglStencilOpType is "REPLACE".
func (me TglStencilOpType) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglStencilOpType is "KEEP".
func (me TglStencilOpType) IsKeep () bool { return me == "KEEP" }

//	Since TglStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglStencilOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglStencilOpType is "INCR_WRAP".
func (me TglStencilOpType) IsIncrWrap () bool { return me == "INCR_WRAP" }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR_WRAP".
func (me TglStencilOpType) IsDecrWrap () bool { return me == "DECR_WRAP" }

//	This convenience method just performs a simple type conversion to TglStencilOpType's alias type xsdt.String.
func (me TglStencilOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglStencilOpType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglStencilOpType is "ZERO".
func (me TglStencilOpType) IsZero () bool { return me == "ZERO" }

type TglLogicOpType xsdt.String

//	Returns true if the value of this enumerated TglLogicOpType is "AND_INVERTED".
func (me TglLogicOpType) IsAndInverted () bool { return me == "AND_INVERTED" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND".
func (me TglLogicOpType) IsAnd () bool { return me == "AND" }

//	Since TglLogicOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLogicOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglLogicOpType is "INVERT".
func (me TglLogicOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglLogicOpType is "OR".
func (me TglLogicOpType) IsOr () bool { return me == "OR" }

//	Returns true if the value of this enumerated TglLogicOpType is "NOOP".
func (me TglLogicOpType) IsNoop () bool { return me == "NOOP" }

//	Returns true if the value of this enumerated TglLogicOpType is "EQUIV".
func (me TglLogicOpType) IsEquiv () bool { return me == "EQUIV" }

//	Returns true if the value of this enumerated TglLogicOpType is "NAND".
func (me TglLogicOpType) IsNand () bool { return me == "NAND" }

//	Returns true if the value of this enumerated TglLogicOpType is "OR_REVERSE".
func (me TglLogicOpType) IsOrReverse () bool { return me == "OR_REVERSE" }

//	Returns true if the value of this enumerated TglLogicOpType is "XOR".
func (me TglLogicOpType) IsXor () bool { return me == "XOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "CLEAR".
func (me TglLogicOpType) IsClear () bool { return me == "CLEAR" }

//	Returns true if the value of this enumerated TglLogicOpType is "SET".
func (me TglLogicOpType) IsSet () bool { return me == "SET" }

//	This convenience method just performs a simple type conversion to TglLogicOpType's alias type xsdt.String.
func (me TglLogicOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLogicOpType is "NOR".
func (me TglLogicOpType) IsNor () bool { return me == "NOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY_INVERTED".
func (me TglLogicOpType) IsCopyInverted () bool { return me == "COPY_INVERTED" }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY".
func (me TglLogicOpType) IsCopy () bool { return me == "COPY" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND_REVERSE".
func (me TglLogicOpType) IsAndReverse () bool { return me == "AND_REVERSE" }

//	Since TglLogicOpType is just a simple String type, this merely returns the current string value.
func (me TglLogicOpType) String () string { return xsdt.String(me).String() }

type TglShadeModelType xsdt.String

//	This convenience method just performs a simple type conversion to TglShadeModelType's alias type xsdt.String.
func (me TglShadeModelType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglShadeModelType is just a simple String type, this merely returns the current string value.
func (me TglShadeModelType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglShadeModelType is "FLAT".
func (me TglShadeModelType) IsFlat () bool { return me == "FLAT" }

//	Returns true if the value of this enumerated TglShadeModelType is "SMOOTH".
func (me TglShadeModelType) IsSmooth () bool { return me == "SMOOTH" }

//	Since TglShadeModelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglShadeModelType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type TglesEnumeration xsdt.String

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglesEnumeration) ToTglBlendType () TglBlendType { return TglBlendType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglesEnumeration) ToTglPolygonModeType () TglPolygonModeType { return TglPolygonModeType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglesEnumeration) ToTglFaceType () TglFaceType { return TglFaceType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglesEnumeration) ToTglMaterialType () TglMaterialType { return TglMaterialType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglesEnumeration) ToTglStencilOpType () TglStencilOpType { return TglStencilOpType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglesEnumeration) ToTglLogicOpType () TglLogicOpType { return TglLogicOpType(me) }

//	This convenience method just performs a simple type conversion to TglesEnumeration's alias type xsdt.String.
func (me TglesEnumeration) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglesEnumeration) ToTglShadeModelType () TglShadeModelType { return TglShadeModelType(me) }

//	Since TglesEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesEnumeration) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglesEnumeration) ToTglFrontFaceType () TglFrontFaceType { return TglFrontFaceType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglesEnumeration) ToTglLightModelColorControlType () TglLightModelColorControlType { return TglLightModelColorControlType(me) }

//	Since TglesEnumeration is just a simple String type, this merely returns the current string value.
func (me TglesEnumeration) String () string { return xsdt.String(me).String() }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglesEnumeration) ToTglFuncType () TglFuncType { return TglFuncType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglesEnumeration) ToTglFogType () TglFogType { return TglFogType(me) }

type XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ struct {
	Enum TglesEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	Two-dimensional texture sampler state for profile_GLES. This is a bundle of sampler-specific states that will be referenced by one or more texture_units.
type TglesSamplerWrap xsdt.Nmtoken

//	Returns true if the value of this enumerated TglesSamplerWrap is "MIRRORED_REPEAT".
func (me TglesSamplerWrap) IsMirroredRepeat () bool { return me == "MIRRORED_REPEAT" }

//	This convenience method just performs a simple type conversion to TglesSamplerWrap's alias type xsdt.Nmtoken.
func (me TglesSamplerWrap) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP".
func (me TglesSamplerWrap) IsClamp () bool { return me == "CLAMP" }

//	Since TglesSamplerWrap is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesSamplerWrap) SetFromString (s string)  { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TglesSamplerWrap is just a simple String type, this merely returns the current string value.
func (me TglesSamplerWrap) String () string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP_TO_EDGE".
func (me TglesSamplerWrap) IsClampToEdge () bool { return me == "CLAMP_TO_EDGE" }

//	Returns true if the value of this enumerated TglesSamplerWrap is "REPEAT".
func (me TglesSamplerWrap) IsRepeat () bool { return me == "REPEAT" }

type XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat struct {
	WrapS TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`

}

//	Returns the default value for WrapS -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat) WrapSDefault () TglesSamplerWrap { return TglesSamplerWrap("REPEAT") }

type XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat struct {
	WrapT TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`

}

//	Returns the default value for WrapT -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat) WrapTDefault () TglesSamplerWrap { return TglesSamplerWrap("REPEAT") }

type TglesSamplerState struct {
//	The extra element may appear any number of times.
//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler3D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat

	XsdGoPkgHasElem_magfiltersequencefx_sampler3D_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_minfiltersequencefx_sampler3D_commonschema_Minfilter_TfxSamplerFilterCommon_None

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_mipfiltersequencefx_sampler3D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat

}

type XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ struct {
	SamplerState *TglesSamplerState `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`

}

type XsdGoPkgHasGroup_GlesBasicTypeCommon struct {
	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_

	XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

}

type TglesNewparam struct {
//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasGroup_GlesBasicTypeCommon

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

}

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_ struct {
	Newparams []*TglesNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

type TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam struct {
	XsdGoPkgHasGroup_GlesBasicTypeCommon

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasAttr_Ref_XsdtNCName_

}

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ struct {
	Setparams []*TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type TglesRendertargetCommon xsdt.NCName

//	Since TglesRendertargetCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesRendertargetCommon) SetFromString (s string)  { (*xsdt.NCName)(me).SetFromString(s) }

//	Since TglesRendertargetCommon is just a simple String type, this merely returns the current string value.
func (me TglesRendertargetCommon) String () string { return xsdt.NCName(me).String() }

//	This convenience method just performs a simple type conversion to TglesRendertargetCommon's alias type xsdt.NCName.
func (me TglesRendertargetCommon) ToXsdtNCName () xsdt.NCName { return xsdt.NCName(me) }

type XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ struct {
	DepthTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`

}

type XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ struct {
	DepthClear Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`

}

type XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ struct {
	ColorClear TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`

}

type XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ struct {
	StencilClear xsdt.Byte `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`

}

type XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ struct {
	StencilTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`

}

type TfxDrawCommon xsdt.String

//	Since TfxDrawCommon is just a simple String type, this merely returns the current string value.
func (me TfxDrawCommon) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TfxDrawCommon's alias type xsdt.String.
func (me TfxDrawCommon) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TfxDrawCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxDrawCommon) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ struct {
	Draw TfxDrawCommon `xml:"http://www.collada.org/2005/11/COLLADASchema draw"`

}

type XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ struct {
	ColorTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`

}

//	A group that contains the renderstates available for the GLES profile.
type XsdGoPkgHasAttr_Value_Tfloat_0 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tfloat_0) ValueDefault () Tfloat { return Tfloat(0) }

type TxsdGlesPipelineSettingsChoiceFogStart struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`

}

type XsdGoPkgHasAttr_Value_TglBlendType_Zero struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ZERO"
func (me XsdGoPkgHasAttr_Value_TglBlendType_Zero) ValueDefault () TglBlendType { return TglBlendType("ZERO") }

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendType_Zero

}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`

}

type XsdGoPkgHasAttr_Value_TglBlendType_One struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ONE"
func (me XsdGoPkgHasAttr_Value_TglBlendType_One) ValueDefault () TglBlendType { return TglBlendType("ONE") }

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc struct {
	XsdGoPkgHasAttr_Value_TglBlendType_One

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`

}

type TxsdGlesPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_

}

type XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlesPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`

}

type XsdGoPkgHasAttr_Value_Tbool_False struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- false
func (me XsdGoPkgHasAttr_Value_Tbool_False) ValueDefault () Tbool { return Tbool(false) }

type TxsdGlesPipelineSettingsChoiceDepthTestEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False

}

type XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`

}

type TglesMaxLightsIndex xsdt.NonNegativeInteger

//	Returns a string representation of this TglesMaxLightsIndex's current non-string scalar value.
func (me TglesMaxLightsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

//	This convenience method just performs a simple type conversion to TglesMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxLightsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Since TglesMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxLightsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_ struct {
	Index TglesMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type XsdGoPkgHasAttr_Value_Tfloat_180 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 180
func (me XsdGoPkgHasAttr_Value_Tfloat_180) ValueDefault () Tfloat { return Tfloat(180) }

type TxsdGlesPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat_180

}

type XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlesPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`

}

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`

}

type XsdGoPkgHasAttr_Value_Tfloat_1 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 1
func (me XsdGoPkgHasAttr_Value_Tfloat_1) ValueDefault () Tfloat { return Tfloat(1) }

type TxsdGlesPipelineSettingsChoicePointSizeMax struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

}

type XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`

}

type XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`

}

type XsdGoPkgHasAttr_Value_TglFaceType_Back struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_Back) ValueDefault () TglFaceType { return TglFaceType("BACK") }

type TxsdGlesPipelineSettingsChoiceCullFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_Back

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlesPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`

}

type TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`

}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_0010 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 1 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0010) ValueDefault () Tfloat4 { return Tfloat4("0 0 1 0") }

type TxsdGlesPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0010

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

}

type XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlesPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`

}

type XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`

}

type XsdGoPkgHasAttr_Value_Tfloat2_01 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat2_01) ValueDefault () Tfloat2 { return Tfloat2("0 1") }

type TxsdGlesPipelineSettingsChoiceDepthRange struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_01

}

type XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlesPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`

}

type XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`

}

type XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`

}

type XsdGoPkgHasAttr_Value_Tfloat_ struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceClearDepth struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_

}

type XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlesPipelineSettingsChoiceClearDepth `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`

}

type XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw struct {
	Value TglFrontFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "CCW"
func (me XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw) ValueDefault () TglFrontFaceType { return TglFrontFaceType("CCW") }

type TxsdGlesPipelineSettingsChoiceFrontFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw

}

type XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlesPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_0000 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0000) ValueDefault () Tfloat4 { return Tfloat4("0 0 0 0") }

type TxsdGlesPipelineSettingsChoiceLightDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

}

type XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlesPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`

}

type XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`

}

type XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_0001 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0001) ValueDefault () Tfloat4 { return Tfloat4("0 0 0 1") }

type TxsdGlesPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat4_0001

}

type XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlesPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`

}

type XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`

}

type XsdGoPkgHasAttr_Value_Tint_ struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Value_Tint_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlesPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_02020210 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0.2 0.2 0.2 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_02020210) ValueDefault () Tfloat4 { return Tfloat4("0.2 0.2 0.2 1.0") }

type TxsdGlesPipelineSettingsChoiceLightModelAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4_02020210

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlesPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`

}

type XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth struct {
	Value TglShadeModelType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "SMOOTH"
func (me XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth) ValueDefault () TglShadeModelType { return TglShadeModelType("SMOOTH") }

type TxsdGlesPipelineSettingsChoiceShadeModel struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth

}

type XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlesPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`

}

type XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlesPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`

}

type TglesMaxClipPlanesIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglesMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxClipPlanesIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Since TglesMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxClipPlanesIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	Returns a string representation of this TglesMaxClipPlanesIndex's current non-string scalar value.
func (me TglesMaxClipPlanesIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_ struct {
	Index TglesMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlesPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlesPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`

}

type TglesStencilOpType xsdt.String

//	Returns true if the value of this enumerated TglesStencilOpType is "REPLACE".
func (me TglesStencilOpType) IsReplace () bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesStencilOpType is "KEEP".
func (me TglesStencilOpType) IsKeep () bool { return me == "KEEP" }

//	Since TglesStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglesStencilOpType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglesStencilOpType is "INCR".
func (me TglesStencilOpType) IsIncr () bool { return me == "INCR" }

//	Since TglesStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesStencilOpType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglesStencilOpType is "ZERO".
func (me TglesStencilOpType) IsZero () bool { return me == "ZERO" }

//	This convenience method just performs a simple type conversion to TglesStencilOpType's alias type xsdt.String.
func (me TglesStencilOpType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglesStencilOpType is "INVERT".
func (me TglesStencilOpType) IsInvert () bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglesStencilOpType is "DECR".
func (me TglesStencilOpType) IsDecr () bool { return me == "DECR" }

type XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep struct {
	Value TglesStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep) ValueDefault () TglesStencilOpType { return TglesStencilOpType("KEEP") }

type TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail struct {
	XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

type XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

type TxsdGlesPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_

}

type XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlesPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`

}

type XsdGoPkgHasAttr_Value_TglLogicOpType_Copy struct {
	Value TglLogicOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "COPY"
func (me XsdGoPkgHasAttr_Value_TglLogicOpType_Copy) ValueDefault () TglLogicOpType { return TglLogicOpType("COPY") }

type TxsdGlesPipelineSettingsChoiceLogicOp struct {
	XsdGoPkgHasAttr_Value_TglLogicOpType_Copy

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlesPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`

}

type XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`

}

type XsdGoPkgHasAttr_Value_Tbool_True struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- true
func (me XsdGoPkgHasAttr_Value_Tbool_True) ValueDefault () Tbool { return Tbool(true) }

type TxsdGlesPipelineSettingsChoiceColorMaterialEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_True

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`

}

type XsdGoPkgHasAttr_Value_TglFuncType_Always struct {
	Value TglFuncType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "ALWAYS"
func (me XsdGoPkgHasAttr_Value_TglFuncType_Always) ValueDefault () TglFuncType { return TglFuncType("ALWAYS") }

type TxsdGlesPipelineSettingsChoiceDepthFunc struct {
	XsdGoPkgHasAttr_Value_TglFuncType_Always

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`

}

type XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`

}

type XsdGoPkgHasAttr_Value_Tint_4294967295 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 4294967295
func (me XsdGoPkgHasAttr_Value_Tint_4294967295) ValueDefault () Tint { return Tint(4294967295) }

type TxsdGlesPipelineSettingsChoiceStencilMask struct {
	XsdGoPkgHasAttr_Value_Tint_4294967295

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlesPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`

}

type XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`

}

type XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`

}

type XsdGoPkgHasAttr_Value_Tfloat3_001 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0 -1"
func (me XsdGoPkgHasAttr_Value_Tfloat3_001) ValueDefault () Tfloat3 { return Tfloat3("0 0 -1") }

type TxsdGlesPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3_001

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

}

type XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlesPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`

}

type XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001 struct {
	Value Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001) ValueDefault () Tfloat4X4 { return Tfloat4X4("1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1") }

type TxsdGlesPipelineSettingsChoiceProjectionMatrix struct {
	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlesPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`

}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

type TglAlphaValueType xsdt.Float

//	This convenience method just performs a simple type conversion to TglAlphaValueType's alias type xsdt.Float.
func (me TglAlphaValueType) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TglAlphaValueType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglAlphaValueType) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TglAlphaValueType's current non-string scalar value.
func (me TglAlphaValueType) String () string { return xsdt.Float(me).String() }

type XsdGoPkgHasAttr_Value_TglAlphaValueType_00 struct {
	Value TglAlphaValueType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0.0
func (me XsdGoPkgHasAttr_Value_TglAlphaValueType_00) ValueDefault () TglAlphaValueType { return TglAlphaValueType(0.0) }

type TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglAlphaValueType_00

}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlesPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_

	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_

}

type XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlesPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`

}

type XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ struct {
	LightLinearAttenutation *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenutation"`

}

type XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ struct {
	TexturePipelineEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline_enable"`

}

type XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`

}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 255
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255) ValueDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(255) }

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255

}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0) ValueDefault () xsdt.UnsignedByte { return xsdt.UnsignedByte(0) }

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0

}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

type TxsdGlesPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_

}

type XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlesPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`

}

type XsdGoPkgHasAttr_Value_Tbool4_ struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Value_Tbool4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

}

type XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlesPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`

}

type XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`

}

type TxsdGlesPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

}

type XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlesPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`

}

type XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`

}

type XsdGoPkgHasAttr_Value_Tint4_ struct {
	Value Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlesPipelineSettingsChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlesPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`

}

type XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`

}

type XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlesPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`

}

type XsdGoPkgHasAttr_Value_Tfloat2_00 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat2_00) ValueDefault () Tfloat2 { return Tfloat2("0 0") }

type TxsdGlesPipelineSettingsChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_00

}

type XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlesPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`

}

type XsdGoPkgHasAttr_Value_Tfloat4_08080810 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "0.8 0.8 0.8 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_08080810) ValueDefault () Tfloat4 { return Tfloat4("0.8 0.8 0.8 1.0") }

type TxsdGlesPipelineSettingsChoiceMaterialDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_08080810

}

type XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlesPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`

}

type XsdGoPkgHasAttr_Value_Tfloat3_100 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat3_100) ValueDefault () Tfloat3 { return Tfloat3("1 0 0") }

type TxsdGlesPipelineSettingsChoicePointDistanceAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3_100

}

type XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`

}

type XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`

}

type TxsdGlesPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool4_

}

type XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlesPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`

}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`

}

type XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`

}

type XsdGoPkgHasAttr_Value_TglFogType_Exp struct {
	Value TglFogType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "EXP"
func (me XsdGoPkgHasAttr_Value_TglFogType_Exp) ValueDefault () TglFogType { return TglFogType("EXP") }

type TxsdGlesPipelineSettingsChoiceFogMode struct {
	XsdGoPkgHasAttr_Value_TglFogType_Exp

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlesPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`

}

type XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`

}

type XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ struct {
	Value *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlesPipelineSettingsChoiceTexturePipeline struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_

}

type XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ struct {
	TexturePipeline *TxsdGlesPipelineSettingsChoiceTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`

}

type XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`

}

type XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlesPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`

}

type XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`

}

type XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`

}

type TxsdGlesPipelineSettingsChoiceLightSpotExponent struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat_0

}

type XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlesPipelineSettingsChoiceLightSpotExponent `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`

}

type TxsdGlesPipelineSettingsChoiceMaterialSpecular struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`

}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`

}

type XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`

}

type XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`

}

type TxsdGlesPipelineSettingsChoiceFogColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

}

type XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`

}

type XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`

}

type XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`

}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`

}

type XsdGoPkgHasGroup_GlesPipelineSettings struct {
	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_

	XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_

	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_

	XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_

	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_

	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_

	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_

}

type TxsdProfileGlesSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_

	XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_

	XsdGoPkgHasGroup_GlesPipelineSettings

	XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_

	XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_

	XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlesSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

type TxsdProfileGlesSequenceTechnique struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_

}

type XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlesSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

type TxsdProfileGles struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_GLESschema_Newparam_TglesNewparam_

	XsdGoPkgHasElem_Asset

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_ProfileGles struct {
//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGleses []*TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`

}

//	Opens a block of CG platform-specific data types and technique declarations.
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	Create a new, named param object in the CG Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	Creates a parameter of a one-dimensional array type.
//	The length attribute specifies the length of the array.
type XsdGoPkgHasAttr_Length_XsdtPositiveInteger_ struct {
	Length xsdt.PositiveInteger `xml:"http://www.collada.org/2005/11/COLLADASchema length,attr"`

}

//	A group that specifies the allowable types for CG profile parameters.
type TcgInt xsdt.Int

//	This convenience method just performs a simple type conversion to TcgInt's alias type xsdt.Int.
func (me TcgInt) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

//	Returns a string representation of this TcgInt's current non-string scalar value.
func (me TcgInt) String () string { return xsdt.Int(me).String() }

//	Since TcgInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

type TcgListOfInt xsdt.String

//	Since TcgListOfInt is just a simple String type, this merely returns the current string value.
func (me TcgListOfInt) String () string { return xsdt.String(me).String() }

//	Since TcgListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfInt) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TcgListOfInt defines a String containing a whitespace-separated list of TcgInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfInt) Values () (list []TcgInt) { var btv = new(TcgInt); var svals = xsdt.ListValues(string(me)); list = make([]TcgInt, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TcgListOfInt's alias type xsdt.String.
func (me TcgListOfInt) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TcgInt1X4 TcgListOfInt

//	Since TcgInt1X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X4) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt1X4's alias type TcgListOfInt.
func (me TcgInt1X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ struct {
	Int1X4 TcgInt1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x4"`

}

type TcgFloat xsdt.Float

//	Returns a string representation of this TcgFloat's current non-string scalar value.
func (me TcgFloat) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat's alias type xsdt.Float.
func (me TcgFloat) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TcgFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

type TcgListOfFloat xsdt.String

//	Since TcgListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFloat) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TcgListOfFloat is just a simple String type, this merely returns the current string value.
func (me TcgListOfFloat) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcgListOfFloat's alias type xsdt.String.
func (me TcgListOfFloat) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TcgListOfFloat defines a String containing a whitespace-separated list of TcgFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFloat) Values () (list []TcgFloat) { var btv = new(TcgFloat); var svals = xsdt.ListValues(string(me)); list = make([]TcgFloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TcgFloat1X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat1X1's alias type TcgListOfFloat.
func (me TcgFloat1X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X1) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ struct {
	Float1X1 TcgFloat1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`

}

type TcgSamplerRECT struct {
	TfxSamplerRECTCommon

}

type XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ struct {
	SamplerRECT *TcgSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

type TcgInt1X3 TcgListOfInt

//	Since TcgInt1X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X3) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt1X3's alias type TcgListOfInt.
func (me TcgInt1X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ struct {
	Int1X3 TcgInt1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x3"`

}

type TcgFloat3X2 TcgListOfFloat

//	Since TcgFloat3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X2) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X2's alias type TcgListOfFloat.
func (me TcgFloat3X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ struct {
	Float3X2 TcgFloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`

}

type TcgBool xsdt.Boolean

//	This convenience method just performs a simple type conversion to TcgBool's alias type xsdt.Boolean.
func (me TcgBool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TcgBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	Returns a string representation of this TcgBool's current non-string scalar value.
func (me TcgBool) String () string { return xsdt.Boolean(me).String() }

type TcgListOfBool xsdt.String

//	TcgListOfBool defines a String containing a whitespace-separated list of TcgBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfBool) Values () (list []TcgBool) { var btv = new(TcgBool); var svals = xsdt.ListValues(string(me)); list = make([]TcgBool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TcgListOfBool is just a simple String type, this merely returns the current string value.
func (me TcgListOfBool) String () string { return xsdt.String(me).String() }

//	Since TcgListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfBool) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgListOfBool's alias type xsdt.String.
func (me TcgListOfBool) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TcgBool1X4 TcgListOfBool

//	Since TcgBool1X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X4) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool1X4's alias type TcgListOfBool.
func (me TcgBool1X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ struct {
	Bool1X4 TcgBool1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x4"`

}

type TcgInt4X2 TcgListOfInt

//	Since TcgInt4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt4X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X2) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt4X2's alias type TcgListOfInt.
func (me TcgInt4X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ struct {
	Int4X2 TcgInt4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x2"`

}

type TcgFixed xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFixed's alias type xsdt.Float.
func (me TcgFixed) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TcgFixed is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgFixed's current non-string scalar value.
func (me TcgFixed) String () string { return xsdt.Float(me).String() }

type TcgListOfFixed xsdt.String

//	TcgListOfFixed defines a String containing a whitespace-separated list of TcgFixed values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFixed) Values () (list []TcgFixed) { var btv = new(TcgFixed); var svals = xsdt.ListValues(string(me)); list = make([]TcgFixed, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	Since TcgListOfFixed is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFixed) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgListOfFixed's alias type xsdt.String.
func (me TcgListOfFixed) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TcgListOfFixed is just a simple String type, this merely returns the current string value.
func (me TcgListOfFixed) String () string { return xsdt.String(me).String() }

type TcgFixed1X2 TcgListOfFixed

//	Since TcgFixed1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1X2's alias type TcgListOfFixed.
func (me TcgFixed1X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X2) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ struct {
	Fixed1X2 TcgFixed1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x2"`

}

type TcgFloat1X4 TcgListOfFloat

//	Since TcgFloat1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X4) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat1X4's alias type TcgListOfFloat.
func (me TcgFloat1X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ struct {
	Float1X4 TcgFloat1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`

}

type TcgInt2X2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2X2's alias type TcgListOfInt.
func (me TcgInt2X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ struct {
	Int2X2 TcgInt2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x2"`

}

type TcgHalf xsdt.Float

//	Returns a string representation of this TcgHalf's current non-string scalar value.
func (me TcgHalf) String () string { return xsdt.Float(me).String() }

//	Since TcgHalf is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf's alias type xsdt.Float.
func (me TcgHalf) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type TcgListOfHalf xsdt.String

//	Since TcgListOfHalf is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfHalf) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TcgListOfHalf is just a simple String type, this merely returns the current string value.
func (me TcgListOfHalf) String () string { return xsdt.String(me).String() }

//	TcgListOfHalf defines a String containing a whitespace-separated list of TcgHalf values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfHalf) Values () (list []TcgHalf) { var btv = new(TcgHalf); var svals = xsdt.ListValues(string(me)); list = make([]TcgHalf, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TcgListOfHalf's alias type xsdt.String.
func (me TcgListOfHalf) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TcgHalf3 TcgListOfHalf

//	Since TcgHalf3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3's alias type TcgListOfHalf.
func (me TcgHalf3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ struct {
	Half3 TcgHalf3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3"`

}

type TcgBool4X2 TcgListOfBool

//	Since TcgBool4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool4X2's alias type TcgListOfBool.
func (me TcgBool4X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X2) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ struct {
	Bool4X2 TcgBool4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x2"`

}

type TcgFloat4X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat4X3's alias type TcgListOfFloat.
func (me TcgFloat4X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X3) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ struct {
	Float4X3 TcgFloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`

}

type TcgInt4X4 TcgListOfInt

//	Since TcgInt4X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X4) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt4X4's alias type TcgListOfInt.
func (me TcgInt4X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ struct {
	Int4X4 TcgInt4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x4"`

}

type TcgInt4X1 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt4X1's alias type TcgListOfInt.
func (me TcgInt4X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt4X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X1) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ struct {
	Int4X1 TcgInt4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x1"`

}

type TcgFloat4X1 TcgListOfFloat

//	Since TcgFloat4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X1) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4X1's alias type TcgListOfFloat.
func (me TcgFloat4X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ struct {
	Float4X1 TcgFloat4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`

}

type TcgFixed4X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X4's alias type TcgListOfFixed.
func (me TcgFixed4X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ struct {
	Fixed4X4 TcgFixed4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x4"`

}

type TcgFloat2X4 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X4's alias type TcgListOfFloat.
func (me TcgFloat2X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X4) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ struct {
	Float2X4 TcgFloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`

}

type TcgInt2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2's alias type TcgListOfInt.
func (me TcgInt2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ struct {
	Int2 TcgInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

type TcgHalf3X1 TcgListOfHalf

//	Since TcgHalf3X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X1) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3X1's alias type TcgListOfHalf.
func (me TcgHalf3X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ struct {
	Half3X1 TcgHalf3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x1"`

}

type TcgSampler2D struct {
	TfxSampler2DCommon

}

type XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ struct {
	Sampler2D *TcgSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

type TcgHalf2X3 TcgListOfHalf

//	Since TcgHalf2X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X3) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2X3's alias type TcgListOfHalf.
func (me TcgHalf2X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ struct {
	Half2X3 TcgHalf2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x3"`

}

type TcgInt2X3 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2X3's alias type TcgListOfInt.
func (me TcgInt2X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X3) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ struct {
	Int2X3 TcgInt2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x3"`

}

type TcgFixed4X1 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X1's alias type TcgListOfFixed.
func (me TcgFixed4X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X1) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ struct {
	Fixed4X1 TcgFixed4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x1"`

}

type TcgFixed2X1 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X1's alias type TcgListOfFixed.
func (me TcgFixed2X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X1) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ struct {
	Fixed2X1 TcgFixed2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x1"`

}

type TcgInt1 xsdt.Int

//	Returns a string representation of this TcgInt1's current non-string scalar value.
func (me TcgInt1) String () string { return xsdt.Int(me).String() }

//	Since TcgInt1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt1) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt1's alias type xsdt.Int.
func (me TcgInt1) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

type XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ struct {
	Int1 TcgInt1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1"`

}

type TcgHalf1X2 TcgListOfHalf

//	Since TcgHalf1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf1X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X2) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X2's alias type TcgListOfHalf.
func (me TcgHalf1X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ struct {
	Half1X2 TcgHalf1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x2"`

}

type XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ struct {
	Int TcgInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

type XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ struct {
	Float TcgFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

type TcgHalf3X3 TcgListOfHalf

//	Since TcgHalf3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf3X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3X3's alias type TcgListOfHalf.
func (me TcgHalf3X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ struct {
	Half3X3 TcgHalf3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x3"`

}

type TcgInt2X4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2X4's alias type TcgListOfInt.
func (me TcgInt2X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt2X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X4) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ struct {
	Int2X4 TcgInt2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x4"`

}

type TcgFloat4X2 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat4X2's alias type TcgListOfFloat.
func (me TcgFloat4X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X2) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ struct {
	Float4X2 TcgFloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`

}

type TcgHalf1X3 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf1X3's alias type TcgListOfHalf.
func (me TcgHalf1X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf1X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X3) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ struct {
	Half1X3 TcgHalf1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x3"`

}

type TcgHalf1X1 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf1X1's alias type TcgListOfHalf.
func (me TcgHalf1X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X1) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ struct {
	Half1X1 TcgHalf1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x1"`

}

type TcgBool2X4 TcgListOfBool

//	Since TcgBool2X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X4) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool2X4's alias type TcgListOfBool.
func (me TcgBool2X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ struct {
	Bool2X4 TcgBool2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x4"`

}

type TcgHalf2X2 TcgListOfHalf

//	Since TcgHalf2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf2X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X2) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf2X2's alias type TcgListOfHalf.
func (me TcgHalf2X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ struct {
	Half2X2 TcgHalf2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x2"`

}

type TcgFloat3X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat3X3's alias type TcgListOfFloat.
func (me TcgFloat3X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X3) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ struct {
	Float3X3 TcgFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

type TcgBool3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3's alias type TcgListOfBool.
func (me TcgBool3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ struct {
	Bool3 TcgBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

type TcgBool4X4 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X4's alias type TcgListOfBool.
func (me TcgBool4X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool4X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X4) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ struct {
	Bool4X4 TcgBool4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x4"`

}

type TcgInt1X1 TcgListOfInt

//	Since TcgInt1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt1X1's alias type TcgListOfInt.
func (me TcgInt1X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X1) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ struct {
	Int1X1 TcgInt1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x1"`

}

type TcgHalf4X4 TcgListOfHalf

//	Since TcgHalf4X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X4) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X4's alias type TcgListOfHalf.
func (me TcgHalf4X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ struct {
	Half4X4 TcgHalf4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x4"`

}

type TcgHalf3X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X4's alias type TcgListOfHalf.
func (me TcgHalf3X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ struct {
	Half3X4 TcgHalf3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x4"`

}

type TcgFixed3X3 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed3X3's alias type TcgListOfFixed.
func (me TcgFixed3X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X3) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ struct {
	Fixed3X3 TcgFixed3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x3"`

}

type TcgHalf4X1 TcgListOfHalf

//	Since TcgHalf4X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X1) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X1's alias type TcgListOfHalf.
func (me TcgHalf4X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ struct {
	Half4X1 TcgHalf4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x1"`

}

type TcgBool3X4 TcgListOfBool

//	Since TcgBool3X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X4) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool3X4's alias type TcgListOfBool.
func (me TcgBool3X4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ struct {
	Bool3X4 TcgBool3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x4"`

}

type TcgFloat2X3 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X3's alias type TcgListOfFloat.
func (me TcgFloat2X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X3) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ struct {
	Float2X3 TcgFloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`

}

type TcgBool1X2 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool1X2's alias type TcgListOfBool.
func (me TcgBool1X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool1X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X2) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ struct {
	Bool1X2 TcgBool1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x2"`

}

type TcgInt3X1 TcgListOfInt

//	Since TcgInt3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt3X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X1) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3X1's alias type TcgListOfInt.
func (me TcgInt3X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ struct {
	Int3X1 TcgInt3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x1"`

}

type TcgFloat2X2 TcgListOfFloat

//	Since TcgFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X2) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat2X2's alias type TcgListOfFloat.
func (me TcgFloat2X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ struct {
	Float2X2 TcgFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

type TcgFloat4X4 TcgListOfFloat

//	Since TcgFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X4) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4X4's alias type TcgListOfFloat.
func (me TcgFloat4X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ struct {
	Float4X4 TcgFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

type TcgBool1X3 TcgListOfBool

//	Since TcgBool1X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X3) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X3's alias type TcgListOfBool.
func (me TcgBool1X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ struct {
	Bool1X3 TcgBool1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x3"`

}

type TcgBool3X1 TcgListOfBool

//	Since TcgBool3X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X1) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool3X1's alias type TcgListOfBool.
func (me TcgBool3X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ struct {
	Bool3X1 TcgBool3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x1"`

}

type TcgFloat1 xsdt.Float

//	Since TcgFloat1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgFloat1's current non-string scalar value.
func (me TcgFloat1) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat1's alias type xsdt.Float.
func (me TcgFloat1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ struct {
	Float1 TcgFloat1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1"`

}

type TcgInt2X1 TcgListOfInt

//	Since TcgInt2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X1) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt2X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X1) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2X1's alias type TcgListOfInt.
func (me TcgInt2X1) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ struct {
	Int2X1 TcgInt2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x1"`

}

type TcgInt3 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt3's alias type TcgListOfInt.
func (me TcgInt3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ struct {
	Int3 TcgInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

type TcgFixed2X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X4's alias type TcgListOfFixed.
func (me TcgFixed2X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ struct {
	Fixed2X4 TcgFixed2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x4"`

}

type TcgFloat3 TcgListOfFloat

//	Since TcgFloat3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3's alias type TcgListOfFloat.
func (me TcgFloat3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ struct {
	Float3 TcgFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

type XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ struct {
	Half TcgHalf `xml:"http://www.collada.org/2005/11/COLLADASchema half"`

}

type TcgSampler3D struct {
	TfxSampler3DCommon

}

type XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ struct {
	Sampler3D *TcgSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

type TcgBool2X1 TcgListOfBool

//	Since TcgBool2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool2X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2X1's alias type TcgListOfBool.
func (me TcgBool2X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ struct {
	Bool2X1 TcgBool2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x1"`

}

type TcgInt4X3 TcgListOfInt

//	Since TcgInt4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgInt4X3's alias type TcgListOfInt.
func (me TcgInt4X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X3) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ struct {
	Int4X3 TcgInt4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x3"`

}

type TcgFixed3 TcgListOfFixed

//	Since TcgFixed3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed3's alias type TcgListOfFixed.
func (me TcgFixed3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ struct {
	Fixed3 TcgFixed3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3"`

}

type TcgFixed3X2 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed3X2's alias type TcgListOfFixed.
func (me TcgFixed3X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X2) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ struct {
	Fixed3X2 TcgFixed3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x2"`

}

type TcgBool1 xsdt.Boolean

//	Since TcgBool1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool1) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool1's alias type xsdt.Boolean.
func (me TcgBool1) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Returns a string representation of this TcgBool1's current non-string scalar value.
func (me TcgBool1) String () string { return xsdt.Boolean(me).String() }

type XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ struct {
	Bool1 TcgBool1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1"`

}

type TcgInt3X4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt3X4's alias type TcgListOfInt.
func (me TcgInt3X4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt3X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X4) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ struct {
	Int3X4 TcgInt3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x4"`

}

type TcgInt3X2 TcgListOfInt

//	Since TcgInt3X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X2) String () string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3X2's alias type TcgListOfInt.
func (me TcgInt3X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ struct {
	Int3X2 TcgInt3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x2"`

}

type TcgHalf4X3 TcgListOfHalf

//	Since TcgHalf4X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X3) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X3's alias type TcgListOfHalf.
func (me TcgHalf4X3) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X3) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ struct {
	Half4X3 TcgHalf4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x3"`

}

type TcgBool2X2 TcgListOfBool

//	Since TcgBool2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool2X2's alias type TcgListOfBool.
func (me TcgBool2X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X2) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ struct {
	Bool2X2 TcgBool2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x2"`

}

type TcgHalf2 TcgListOfHalf

//	Since TcgHalf2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2's alias type TcgListOfHalf.
func (me TcgHalf2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ struct {
	Half2 TcgHalf2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2"`

}

type TcgSampler1D struct {
	TfxSampler1DCommon

}

type XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ struct {
	Sampler1D *TcgSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

type TcgFixed2 TcgListOfFixed

//	Since TcgFixed2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2's alias type TcgListOfFixed.
func (me TcgFixed2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ struct {
	Fixed2 TcgFixed2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2"`

}

type TcgFloat1X2 TcgListOfFloat

//	Since TcgFloat1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat1X2's alias type TcgListOfFloat.
func (me TcgFloat1X2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X2) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ struct {
	Float1X2 TcgFloat1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`

}

type TcgHalf2X1 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf2X1's alias type TcgListOfHalf.
func (me TcgHalf2X1) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X1) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf2X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X1) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ struct {
	Half2X1 TcgHalf2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x1"`

}

type TcgHalf4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf4's alias type TcgListOfHalf.
func (me TcgHalf4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	Since TcgHalf4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ struct {
	Half4 TcgHalf4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4"`

}

type TcgFixed1X1 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed1X1's alias type TcgListOfFixed.
func (me TcgFixed1X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X1) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ struct {
	Fixed1X1 TcgFixed1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x1"`

}

type TcgFixed1X3 TcgListOfFixed

//	Since TcgFixed1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X3) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed1X3's alias type TcgListOfFixed.
func (me TcgFixed1X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ struct {
	Fixed1X3 TcgFixed1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x3"`

}

type TcgBool2 TcgListOfBool

//	Since TcgBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2's alias type TcgListOfBool.
func (me TcgBool2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ struct {
	Bool2 TcgBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

type TcgBool4 TcgListOfBool

//	Since TcgBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool4's alias type TcgListOfBool.
func (me TcgBool4) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ struct {
	Bool4 TcgBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

type TcgFloat2X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2X1's alias type TcgListOfFloat.
func (me TcgFloat2X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X1) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ struct {
	Float2X1 TcgFloat2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`

}

type TcgFloat1X3 TcgListOfFloat

//	Since TcgFloat1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X3) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat1X3's alias type TcgListOfFloat.
func (me TcgFloat1X3) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X3) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ struct {
	Float1X3 TcgFloat1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`

}

type TcgFloat3X1 TcgListOfFloat

//	Since TcgFloat3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X1) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	Since TcgFloat3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X1) String () string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X1's alias type TcgListOfFloat.
func (me TcgFloat3X1) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ struct {
	Float3X1 TcgFloat3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`

}

type TcgSamplerDEPTH struct {
	TfxSamplerDEPTHCommon

}

type XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ struct {
	SamplerDEPTH *TcgSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

type TcgBool4X3 TcgListOfBool

//	Since TcgBool4X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X3) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool4X3's alias type TcgListOfBool.
func (me TcgBool4X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ struct {
	Bool4X3 TcgBool4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x3"`

}

type TcgFixed2X2 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X2's alias type TcgListOfFixed.
func (me TcgFixed2X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X2) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ struct {
	Fixed2X2 TcgFixed2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x2"`

}

type TcgInt3X3 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt3X3's alias type TcgListOfInt.
func (me TcgInt3X3) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X3) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X3) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ struct {
	Int3X3 TcgInt3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x3"`

}

type TcgSamplerCUBE struct {
	TfxSamplerCUBECommon

}

type XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ struct {
	SamplerCUBE *TcgSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

type TglBlendEquationType xsdt.String

//	Returns true if the value of this enumerated TglBlendEquationType is "MIN".
func (me TglBlendEquationType) IsMin () bool { return me == "MIN" }

//	Since TglBlendEquationType is just a simple String type, this merely returns the current string value.
func (me TglBlendEquationType) String () string { return xsdt.String(me).String() }

//	Since TglBlendEquationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendEquationType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_ADD".
func (me TglBlendEquationType) IsFuncAdd () bool { return me == "FUNC_ADD" }

//	Returns true if the value of this enumerated TglBlendEquationType is "MAX".
func (me TglBlendEquationType) IsMax () bool { return me == "MAX" }

//	This convenience method just performs a simple type conversion to TglBlendEquationType's alias type xsdt.String.
func (me TglBlendEquationType) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_REVERSE_SUBTRACT".
func (me TglBlendEquationType) IsFuncReverseSubtract () bool { return me == "FUNC_REVERSE_SUBTRACT" }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_SUBTRACT".
func (me TglBlendEquationType) IsFuncSubtract () bool { return me == "FUNC_SUBTRACT" }

type TglFogCoordSrcType xsdt.String

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FRAGMENT_DEPTH".
func (me TglFogCoordSrcType) IsFragmentDepth () bool { return me == "FRAGMENT_DEPTH" }

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FOG_COORDINATE".
func (me TglFogCoordSrcType) IsFogCoordinate () bool { return me == "FOG_COORDINATE" }

//	Since TglFogCoordSrcType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogCoordSrcType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglFogCoordSrcType is just a simple String type, this merely returns the current string value.
func (me TglFogCoordSrcType) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglFogCoordSrcType's alias type xsdt.String.
func (me TglFogCoordSrcType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TglEnumeration xsdt.String

//	Since TglEnumeration is just a simple String type, this merely returns the current string value.
func (me TglEnumeration) String () string { return xsdt.String(me).String() }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglEnumeration) ToTglFuncType () TglFuncType { return TglFuncType(me) }

//	Since TglEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglEnumeration) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglEnumeration) ToTglFaceType () TglFaceType { return TglFaceType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglEnumeration) ToTglMaterialType () TglMaterialType { return TglMaterialType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglEnumeration) ToTglStencilOpType () TglStencilOpType { return TglStencilOpType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglEnumeration) ToTglPolygonModeType () TglPolygonModeType { return TglPolygonModeType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendEquationType, but keep in mind the actual value may or may not be a valid TglBlendEquationType value.
func (me TglEnumeration) ToTglBlendEquationType () TglBlendEquationType { return TglBlendEquationType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglEnumeration) ToTglFogType () TglFogType { return TglFogType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglEnumeration) ToTglFrontFaceType () TglFrontFaceType { return TglFrontFaceType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglEnumeration) ToTglShadeModelType () TglShadeModelType { return TglShadeModelType(me) }

//	This convenience method just performs a simple type conversion to TglEnumeration's alias type xsdt.String.
func (me TglEnumeration) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglEnumeration) ToTglLogicOpType () TglLogicOpType { return TglLogicOpType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglEnumeration) ToTglLightModelColorControlType () TglLightModelColorControlType { return TglLightModelColorControlType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogCoordSrcType, but keep in mind the actual value may or may not be a valid TglFogCoordSrcType value.
func (me TglEnumeration) ToTglFogCoordSrcType () TglFogCoordSrcType { return TglFogCoordSrcType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglEnumeration) ToTglBlendType () TglBlendType { return TglBlendType(me) }

type XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_ struct {
	Enum TglEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`

}

//	Declares a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	A procedural surface generator for the cg profile.
//	The entry symbol for the shader function.
type XsdGoPkgHasAttr_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`

}

type TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_

}

type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	Assigns a new value to a previously defined parameter.
type TcgIdentifier xsdt.Token

//	Since TcgIdentifier is just a simple String type, this merely returns the current string value.
func (me TcgIdentifier) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TcgIdentifier's alias type xsdt.Token.
func (me TcgIdentifier) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Since TcgIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgIdentifier) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Ref_TcgIdentifier_ struct {
	Ref TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TcgSetparamSimple struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasAttr_Ref_TcgIdentifier_

}

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ struct {
//	Assigns a new value to a previously defined parameter.
	Setparams []*TcgSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

//	The code element allows you to embed cg sourcecode for the surface generator.
//	The fx_code_profile type allows you to specify an inline block of source code.
type TfxCodeProfile struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

}

type XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_ struct {
//	The code element allows you to embed cg sourcecode for the surface generator.
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`

}

//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
//	The include element is used to import source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
type TfxIncludeCommon struct {
//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

}

type XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_ struct {
//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`

}

type TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator struct {
//	The annotate element allows you to specify an annotation for this generator.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	Assigns a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_

//	The code element allows you to embed cg sourcecode for the surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

}

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
//	A procedural surface generator for the cg profile.
	Generator *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`

}

type TcgSurfaceType struct {
	TfxSurfaceCommon

//	A procedural surface generator for the cg profile.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_

}

type XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ struct {
	Surface *TcgSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

type XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ struct {
	Fixed TcgFixed `xml:"http://www.collada.org/2005/11/COLLADASchema fixed"`

}

type TcgHalf1 xsdt.Float

//	Since TcgHalf1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgHalf1's current non-string scalar value.
func (me TcgHalf1) String () string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1's alias type xsdt.Float.
func (me TcgHalf1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ struct {
	Half1 TcgHalf1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1"`

}

type TcgInt1X2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt1X2's alias type TcgListOfInt.
func (me TcgInt1X2) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X2) String () string { return TcgListOfInt(me).String() }

//	Since TcgInt1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X2) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

type XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ struct {
	Int1X2 TcgInt1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x2"`

}

type TcgBool4X1 TcgListOfBool

//	Since TcgBool4X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X1) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool4X1's alias type TcgListOfBool.
func (me TcgBool4X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ struct {
	Bool4X1 TcgBool4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x1"`

}

type TcgFixed3X1 TcgListOfFixed

//	Since TcgFixed3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X1) String () string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed3X1's alias type TcgListOfFixed.
func (me TcgFixed3X1) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X1) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ struct {
	Fixed3X1 TcgFixed3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x1"`

}

type TcgFloat3X4 TcgListOfFloat

//	Since TcgFloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat3X4's alias type TcgListOfFloat.
func (me TcgFloat3X4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X4) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ struct {
	Float3X4 TcgFloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`

}

type TcgBool1X1 TcgListOfBool

//	Since TcgBool1X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X1) String () string { return TcgListOfBool(me).String() }

//	Since TcgBool1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X1) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool1X1's alias type TcgListOfBool.
func (me TcgBool1X1) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ struct {
	Bool1X1 TcgBool1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x1"`

}

type TcgHalf3X2 TcgListOfHalf

//	Since TcgHalf3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf3X2's alias type TcgListOfHalf.
func (me TcgHalf3X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X2) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ struct {
	Half3X2 TcgHalf3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x2"`

}

type TcgHalf2X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf2X4's alias type TcgListOfHalf.
func (me TcgHalf2X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf2X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X4) String () string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ struct {
	Half2X4 TcgHalf2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x4"`

}

type TcgFixed1 xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFixed1's alias type xsdt.Float.
func (me TcgFixed1) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

//	Since TcgFixed1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed1) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	Returns a string representation of this TcgFixed1's current non-string scalar value.
func (me TcgFixed1) String () string { return xsdt.Float(me).String() }

type XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ struct {
	Fixed1 TcgFixed1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1"`

}

type TcgBool3X2 TcgListOfBool

//	Since TcgBool3X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X2) String () string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool3X2's alias type TcgListOfBool.
func (me TcgBool3X2) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X2) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

type XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ struct {
	Bool3X2 TcgBool3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x2"`

}

type TcgHalf4X2 TcgListOfHalf

//	Since TcgHalf4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X2) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgHalf4X2's alias type TcgListOfHalf.
func (me TcgHalf4X2) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X2) String () string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ struct {
	Half4X2 TcgHalf4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x2"`

}

type TcgBool2X3 TcgListOfBool

//	Since TcgBool2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgBool2X3's alias type TcgListOfBool.
func (me TcgBool2X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X3) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ struct {
	Bool2X3 TcgBool2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x3"`

}

type TcgFixed2X3 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed2X3's alias type TcgListOfFixed.
func (me TcgFixed2X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X3) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ struct {
	Fixed2X3 TcgFixed2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x3"`

}

type TcgFloat4 TcgListOfFloat

//	Since TcgFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFloat4's alias type TcgListOfFloat.
func (me TcgFloat4) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4) String () string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ struct {
	Float4 TcgFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

type TcgBool3X3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3X3's alias type TcgListOfBool.
func (me TcgBool3X3) ToTcgListOfBool () TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X3) SetFromString (s string)  { (*TcgListOfBool)(me).SetFromString(s) }

//	Since TcgBool3X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X3) String () string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ struct {
	Bool3X3 TcgBool3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x3"`

}

type XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ struct {
	Bool TcgBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

type TcgFixed4X2 TcgListOfFixed

//	Since TcgFixed4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X2) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X2) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed4X2's alias type TcgListOfFixed.
func (me TcgFixed4X2) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ struct {
	Fixed4X2 TcgFixed4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x2"`

}

type TcgFixed3X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed3X4's alias type TcgListOfFixed.
func (me TcgFixed3X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X4) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ struct {
	Fixed3X4 TcgFixed3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x4"`

}

type TcgInt4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt4's alias type TcgListOfInt.
func (me TcgInt4) ToTcgListOfInt () TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4) SetFromString (s string)  { (*TcgListOfInt)(me).SetFromString(s) }

//	Since TcgInt4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4) String () string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ struct {
	Int4 TcgInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

type TcgHalf1X4 TcgListOfHalf

//	Since TcgHalf1X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X4) String () string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X4's alias type TcgListOfHalf.
func (me TcgHalf1X4) ToTcgListOfHalf () TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X4) SetFromString (s string)  { (*TcgListOfHalf)(me).SetFromString(s) }

type XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ struct {
	Half1X4 TcgHalf1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x4"`

}

type TcgFixed4X3 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X3's alias type TcgListOfFixed.
func (me TcgFixed4X3) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X3) String () string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X3) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

type XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ struct {
	Fixed4X3 TcgFixed4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x3"`

}

type TcgFloat2 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat2's alias type TcgListOfFloat.
func (me TcgFloat2) ToTcgListOfFloat () TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2) String () string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2) SetFromString (s string)  { (*TcgListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ struct {
	Float2 TcgFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

type TcgFixed1X4 TcgListOfFixed

//	Since TcgFixed1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1X4's alias type TcgListOfFixed.
func (me TcgFixed1X4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ struct {
	Fixed1X4 TcgFixed1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x4"`

}

type TcgFixed4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4's alias type TcgListOfFixed.
func (me TcgFixed4) ToTcgListOfFixed () TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4) SetFromString (s string)  { (*TcgListOfFixed)(me).SetFromString(s) }

//	Since TcgFixed4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4) String () string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ struct {
	Fixed4 TcgFixed4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4"`

}

type XsdGoPkgHasGroup_CgParamType struct {
	XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_

	XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_

	XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_

	XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_

	XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_

	XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_

	XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_

	XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_

	XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_

	XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_

	XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_

	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_

	XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_

	XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_

	XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_

	XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_

	XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_

	XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_

	XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_

	XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_

	XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_

	XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_

	XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_

	XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_

	XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_

	XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_

	XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_

	XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_

	XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_

	XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_

	XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_

	XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_

	XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_

	XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_

	XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_

	XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_

	XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_

	XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_

	XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_

	XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_

	XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_

	XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_

	XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_

	XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_

	XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_

	XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_

	XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_

	XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_

	XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_

	XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_

	XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_

	XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_

	XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_

	XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_

	XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_

	XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_

	XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_

	XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_

	XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_

	XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_

	XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_

	XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_

	XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_

	XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_

	XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_

	XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_

	XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_

	XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_

	XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_

	XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_

	XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_

	XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_

	XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_

	XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_

	XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_

	XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_

	XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_

	XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_

	XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_

	XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_

	XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_

	XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_

	XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_

	XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_

	XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_

	XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_

	XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_

	XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_

	XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_

	XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_

	XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_

	XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_

	XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_

	XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_

	XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_

	XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_

	XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_

	XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_

	XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_

	XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_

	XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_

	XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_

	XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_

	XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_

	XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_

	XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_

	XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_

	XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_

	XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_

	XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_

	XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_

	XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_

	XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_

}

//	The usertype element allows you to create arrays of usertypes.
//	Creates an instance of a structured class.
type XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ struct {
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	Creates a symbolic connection between two previously defined parameters.
type TcgConnectParam struct {
	XsdGoPkgHasAttr_Ref_TcgIdentifier_

}

type XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParams []*TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`

}

//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
//	Assigns a new value to a previously defined parameter.
type XsdGoPkgHasAttr_Program_XsdtNCName_ struct {
	Program xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema program,attr"`

}

type XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParam *TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`

}

//	Creates a parameter of a one-dimensional array type.
//	Nested array elements allow you to create multidemensional arrays.
type XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_ struct {
//	Nested array elements allow you to create multidemensional arrays.
	Arrays []*TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type TcgSetarrayType struct {
//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_

//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_

	XsdGoPkgHasGroup_CgParamType

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

}

type XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ struct {
	Array *TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ struct {
	Usertype *TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

type TcgSetparam struct {
	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_

	XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_

	XsdGoPkgHasAttr_Ref_TcgIdentifier_

	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_

}

type XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ struct {
//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	Setparams []*TcgSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

type XsdGoPkgHasAttr_Name_TcgIdentifier_ struct {
	Name TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`

}

type TcgSetuserType struct {
//	Some usertypes do not have data.  They may be used only to implement interface functions.
//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_

	XsdGoPkgHasAttr_Name_TcgIdentifier_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_arraychoicecg_setarray_typeschema_Array_TcgSetarrayType_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_

//	Reference a code or include element which defines the usertype
	XsdGoPkgHasAttr_Source_XsdtNCName_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_

//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasGroup_CgParamType

}

type XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_ struct {
//	The usertype element allows you to create arrays of usertypes.
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`

}

//	Nested array elements allow you to create multidemensional arrays.
type XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ struct {
//	Nested array elements allow you to create multidemensional arrays.
	Arrays []*TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type TcgNewarrayType struct {
//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_CgParamType

//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicecg_newarray_typeschema_Usertype_TcgSetuserType_

	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_

//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_

}

type XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ struct {
	Array *TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type XsdGoPkgHasAttr_Sid_TcgIdentifier_ struct {
	Sid TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

type TcgNewparam struct {
	XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_

	XsdGoPkgHasAttr_Sid_TcgIdentifier_

//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_

	XsdGoPkgHasGroup_CgParamType

//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

}

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ struct {
	Newparams []*TcgNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0 struct {
	Index xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

//	Returns the default value for Index -- 0
func (me XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0) IndexDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type TfxCleardepthCommon struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

type XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_ struct {
	DepthClears []*TfxCleardepthCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`

}

type TfxClearstencilCommon struct {
	XsdGoPkgValue xsdt.Byte `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

type XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_ struct {
	StencilClears []*TfxClearstencilCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`

}

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	A string containing command-line operations for the shader compiler.
type XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_ struct {
//	A string containing command-line operations for the shader compiler.
	CompilerOptions xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_options"`

}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget struct {
	XsdGoPkgValue xsdt.Nmtoken `xml:",chardata"`

}

type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
	CompilerTarget *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`

}

//	Binds values to uniform inputs of a shader.
//	References a predefined parameter in shader binding declarations.
type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
//	References a predefined parameter in shader binding declarations.
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
//	References a predefined parameter in shader binding declarations.
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_

	XsdGoPkgHasGroup_CgParamType

//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

}

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TcgPipelineStage xsdt.String

//	This convenience method just performs a simple type conversion to TcgPipelineStage's alias type xsdt.String.
func (me TcgPipelineStage) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TcgPipelineStage is just a simple String type, this merely returns the current string value.
func (me TcgPipelineStage) String () string { return xsdt.String(me).String() }

//	Since TcgPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgPipelineStage) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TcgPipelineStage is "FRAGMENT".
func (me TcgPipelineStage) IsFragment () bool { return me == "FRAGMENT" }

//	Returns true if the value of this enumerated TcgPipelineStage is "VERTEX".
func (me TcgPipelineStage) IsVertex () bool { return me == "VERTEX" }

type XsdGoPkgHasAttr_Stage_TcgPipelineStage_ struct {
	Stage TcgPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`

}

//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader struct {
//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_

	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_

//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TcgPipelineStage_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

}

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`

}

type XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0 struct {
	Slice xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`

}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0) SliceDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0 struct {
	Mip xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`

}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0) MipDefault () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(0) }

type TfxStenciltargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

}

type XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_ struct {
	StencilTargets []*TfxStenciltargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`

}

type TfxDepthtargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

}

type XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_ struct {
	DepthTargets []*TfxDepthtargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`

}

type TfxClearcolorCommon struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

}

type XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_ struct {
	ColorClears []*TfxClearcolorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`

}

//	A group that defines all of the renderstates used for the CG and GLSL profiles.
type XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`

}

type XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`

}

type XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`

}

type XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ struct {
	LightModelLocalViewerEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_local_viewer_enable"`

}

type XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlesPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`

}

type XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ struct {
	LogicOpEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op_enable"`

}

type TglMaxLightsIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxLightsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Returns a string representation of this TglMaxLightsIndex's current non-string scalar value.
func (me TglMaxLightsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

//	Since TglMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxLightsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Index_TglMaxLightsIndex_ struct {
	Index TglMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Value_Tfloat3_001

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`

}

type XsdGoPkgHasAttr_Value_Tfloat2_ struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlPipelineSettingsChoiceDepthBounds struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_

}

type XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ struct {
	DepthBounds *TxsdGlPipelineSettingsChoiceDepthBounds `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds"`

}

type XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`

}

type XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`

}

type XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`

}

type XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`

}

type TglMaxTextureImageUnitsIndex xsdt.NonNegativeInteger

//	Since TglMaxTextureImageUnitsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxTextureImageUnitsIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglMaxTextureImageUnitsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxTextureImageUnitsIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Returns a string representation of this TglMaxTextureImageUnitsIndex's current non-string scalar value.
func (me TglMaxTextureImageUnitsIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_ struct {
	Index TglMaxTextureImageUnitsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlPipelineSettingsChoiceTexture1DEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ struct {
	Texture1DEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D_enable"`

}

type XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ struct {
	DestRgb *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest_rgb"`

}

type XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ struct {
	SrcAlpha *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src_alpha"`

}

type XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ struct {
	DestAlpha *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest_alpha"`

}

type XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ struct {
	SrcRgb *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src_rgb"`

}

type TxsdGlPipelineSettingsChoiceBlendFuncSeparate struct {
	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_

	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_

	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_

	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_

}

type XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ struct {
	BlendFuncSeparate *TxsdGlPipelineSettingsChoiceBlendFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func_separate"`

}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

type TxsdGlPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_

}

type XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`

}

type XsdGoPkgHasAttr_Value_TglStencilOpType_Keep struct {
	Value TglStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglStencilOpType_Keep) ValueDefault () TglStencilOpType { return TglStencilOpType("KEEP") }

type TxsdGlPipelineSettingsChoiceStencilOpSequenceFail struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

}

type XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

type TxsdGlPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_

}

type XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`

}

//	A cube map texture sampler for the GLSL profile.
type TglSamplerCUBE struct {
	TfxSamplerCUBECommon

}

type XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ struct {
	Value *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

type TxsdGlPipelineSettingsChoiceTextureCUBE struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

type XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ struct {
	TextureCUBE *TxsdGlPipelineSettingsChoiceTextureCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE"`

}

type XsdGoPkgHasAttr_Value_Tint_0 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tint_0) ValueDefault () Tint { return Tint(0) }

type TxsdGlPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint_0

}

type XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`

}

type XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`

}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`

}

//	A two-dimensional texture sampler for the GLSL profile.
type TglSamplerRECT struct {
	TfxSamplerRECTCommon

}

type XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ struct {
	Value *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlPipelineSettingsChoiceTextureRECT struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_

}

type XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ struct {
	TextureRECT *TxsdGlPipelineSettingsChoiceTextureRECT `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT"`

}

type XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`

}

type TxsdGlPipelineSettingsChoiceLightConstantAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlPipelineSettingsChoiceLightConstantAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`

}

type TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`

}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`

}

//	A three-dimensional texture sampler for the GLSL profile.
type TglSampler3D struct {
	TfxSampler3DCommon

}

type XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ struct {
	Value *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlPipelineSettingsChoiceTexture3D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

type XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ struct {
	Texture3D *TxsdGlPipelineSettingsChoiceTexture3D `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D"`

}

type XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd struct {
	Value TglBlendEquationType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FUNC_ADD"
func (me XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd) ValueDefault () TglBlendEquationType { return TglBlendEquationType("FUNC_ADD") }

type TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha struct {
	XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ struct {
	Alpha *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`

}

type XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ struct {
	Rgb *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema rgb"`

}

type TxsdGlPipelineSettingsChoiceBlendEquationSeparate struct {
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_

	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_

}

type XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ struct {
	BlendEquationSeparate *TxsdGlPipelineSettingsChoiceBlendEquationSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation_separate"`

}

type XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlesPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`

}

type XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`

}

type XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlesPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`

}

type XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`

}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`

}

type XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ struct {
	PolygonSmoothEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_smooth_enable"`

}

type XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`

}

type TxsdGlPipelineSettingsChoiceTextureEnvColor struct {
	XsdGoPkgHasAttr_Value_Tfloat4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

}

type XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ struct {
	TextureEnvColor *TxsdGlPipelineSettingsChoiceTextureEnvColor `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_color"`

}

type XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ struct {
	BlendEquation *TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation"`

}

type XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlesPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`

}

type XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ struct {
	DepthBoundsEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds_enable"`

}

type TglMaxClipPlanesIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxClipPlanesIndex) ToXsdtNonNegativeInteger () xsdt.NonNegativeInteger { return xsdt.NonNegativeInteger(me) }

//	Since TglMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxClipPlanesIndex) SetFromString (s string)  { (*xsdt.NonNegativeInteger)(me).SetFromString(s) }

//	Returns a string representation of this TglMaxClipPlanesIndex's current non-string scalar value.
func (me TglMaxClipPlanesIndex) String () string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_ struct {
	Index TglMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`

}

type TxsdGlPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

}

type XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`

}

type XsdGoPkgHasElem_GlHookAbstract struct {
	GlHookAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`

}

type XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`

}

type XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`

}

type XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`

}

type XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FRONT_AND_BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack) ValueDefault () TglFaceType { return TglFaceType("FRONT_AND_BACK") }

type TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

type TxsdGlPipelineSettingsChoiceStencilOpSeparate struct {
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_

	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_

	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_

}

type XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ struct {
	StencilOpSeparate *TxsdGlPipelineSettingsChoiceStencilOpSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op_separate"`

}

type XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ struct {
	TextureDEPTHEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH_enable"`

}

type XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`

}

type XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlesPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`

}

type XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlesPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`

}

type XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`

}

type XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ struct {
	Texture2DEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D_enable"`

}

type XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

type XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill struct {
	Value TglPolygonModeType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FILL"
func (me XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill) ValueDefault () TglPolygonModeType { return TglPolygonModeType("FILL") }

type TxsdGlPipelineSettingsChoicePolygonModeSequenceMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill

}

type XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`

}

type TxsdGlPipelineSettingsChoicePolygonMode struct {
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_

	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_

}

type XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ struct {
	PolygonMode *TxsdGlPipelineSettingsChoicePolygonMode `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_mode"`

}

type TxsdGlPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0010

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`

}

type XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ struct {
	LightLinearAttenuation *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenuation"`

}

type XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ struct {
	Back *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema back"`

}

type XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`

}

type XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ struct {
	Front *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema front"`

}

type XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

type TxsdGlPipelineSettingsChoiceStencilFuncSeparate struct {
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_

	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_

	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_

	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_

}

type XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ struct {
	StencilFuncSeparate *TxsdGlPipelineSettingsChoiceStencilFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func_separate"`

}

type XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`

}

type XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`

}

type XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ struct {
	DepthClampEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clamp_enable"`

}

type XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlesPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`

}

type XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`

}

type XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ struct {
	PolygonStippleEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_stipple_enable"`

}

type XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`

}

type XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ struct {
	PolygonOffsetLineEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_line_enable"`

}

type XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlesPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`

}

type TxsdGlPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0001

}

type XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`

}

type XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`

}

//	A one-dimensional texture sampler for the GLSL profile.
type TglSampler1D struct {
	TfxSampler1DCommon

}

type XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ struct {
	Value *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlPipelineSettingsChoiceTexture1D struct {
	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_

}

type XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ struct {
	Texture1D *TxsdGlPipelineSettingsChoiceTexture1D `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D"`

}

type TxsdGlPipelineSettingsChoiceLightSpecular struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`

}

type TxsdGlPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Value_Tfloat_180

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

}

type XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`

}

type XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor struct {
	Value TglLightModelColorControlType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "SINGLE_COLOR"
func (me XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor) ValueDefault () TglLightModelColorControlType { return TglLightModelColorControlType("SINGLE_COLOR") }

type TxsdGlPipelineSettingsChoiceLightModelColorControl struct {
	XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ struct {
	LightModelColorControl *TxsdGlPipelineSettingsChoiceLightModelColorControl `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_color_control"`

}

type XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlesPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`

}

type XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`

}

type XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`

}

type XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`

}

type XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`

}

type XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlesPipelineSettingsChoiceProjectionMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`

}

type XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`

}

type XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`

}

type XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ struct {
	TextureCUBEEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE_enable"`

}

type XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ struct {
	AutoNormalEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema auto_normal_enable"`

}

type XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`

}

//	A two-dimensional texture sampler for the GLSL profile.
type TglSampler2D struct {
	TfxSampler2DCommon

}

type XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ struct {
	Value *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlPipelineSettingsChoiceTexture2D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

type XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ struct {
	Texture2D *TxsdGlPipelineSettingsChoiceTexture2D `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D"`

}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceDepthFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`

}

type TxsdGlPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_

	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_

}

type XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`

}

type XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlesPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`

}

type XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlesPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`

}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`

}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`

}

type TxsdGlPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_

	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_

}

type XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`

}

type XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`

}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`

}

type XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

type XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse struct {
	Value TglMaterialType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "AMBIENT_AND_DIFFUSE"
func (me XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse) ValueDefault () TglMaterialType { return TglMaterialType("AMBIENT_AND_DIFFUSE") }

type TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode struct {
	XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`

}

type TxsdGlPipelineSettingsChoiceColorMaterial struct {
	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_

	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_

}

type XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ struct {
	ColorMaterial *TxsdGlPipelineSettingsChoiceColorMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema color_material"`

}

type XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlesPipelineSettingsChoiceLightModelAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`

}

type XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`

}

type XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ struct {
	LineStippleEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple_enable"`

}

type TxsdGlPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`

}

type XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ struct {
	TextureRECTEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT_enable"`

}

type XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate struct {
	Value TglFogCoordSrcType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "FOG_COORDINATE"
func (me XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate) ValueDefault () TglFogCoordSrcType { return TglFogCoordSrcType("FOG_COORDINATE") }

type TxsdGlPipelineSettingsChoiceFogCoordSrc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate

}

type XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ struct {
	FogCoordSrc *TxsdGlPipelineSettingsChoiceFogCoordSrc `xml:"http://www.collada.org/2005/11/COLLADASchema fog_coord_src"`

}

type XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlesPipelineSettingsChoiceFogStart `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`

}

type XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`

}

type XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`

}

type TxsdGlPipelineSettingsChoiceStencilMaskSeparate struct {
	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_

	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_

}

type XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ struct {
	StencilMaskSeparate *TxsdGlPipelineSettingsChoiceStencilMaskSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask_separate"`

}

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`

}

//	A depth texture sampler for the GLSL profile.
type TglSamplerDEPTH struct {
	TfxSamplerDEPTHCommon

}

type XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ struct {
	Value *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema value"`

}

type TxsdGlPipelineSettingsChoiceTextureDEPTH struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settingsschema_Param_XsdtNCName_

}

type XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ struct {
	TextureDEPTH *TxsdGlPipelineSettingsChoiceTextureDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH"`

}

type XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlesPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`

}

type XsdGoPkgHasAttr_Value_Tint2_165536 struct {
	Value Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "1 65536"
func (me XsdGoPkgHasAttr_Value_Tint2_165536) ValueDefault () Tint2 { return Tint2("1 65536") }

type TxsdGlPipelineSettingsChoiceLineStipple struct {
	XsdGoPkgHasAttr_Value_Tint2_165536

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ struct {
	LineStipple *TxsdGlPipelineSettingsChoiceLineStipple `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple"`

}

type XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ struct {
	Texture3DEnable *TxsdGlPipelineSettingsChoiceTexture1DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D_enable"`

}

type XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ struct {
	BlendColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema blend_color"`

}

type Tstring xsdt.String

//	Since Tstring is just a simple String type, this merely returns the current string value.
func (me Tstring) String () string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to Tstring's alias type xsdt.String.
func (me Tstring) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since Tstring is just a simple String type, this merely sets the current value from the specified string.
func (me *Tstring) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Value_Tstring_ struct {
	Value Tstring `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

type TxsdGlPipelineSettingsChoiceTextureEnvMode struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tstring_

}

type XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ struct {
	TextureEnvMode *TxsdGlPipelineSettingsChoiceTextureEnvMode `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_mode"`

}

type XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`

}

type XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`

}

//	Returns the default value for Value -- "true true true true"
func (me XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue) ValueDefault () Tbool4 { return Tbool4("true true true true") }

type TxsdGlPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`

}

type TxsdGlPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

}

type XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`

}

type XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`

}

type XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`

}

type XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`

}

type XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`

}

type XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ struct {
	PolygonOffsetPointEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_point_enable"`

}

type XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlesPipelineSettingsChoiceDepthTestEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`

}

type XsdGoPkgHasGroup_GlPipelineSettings struct {
	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_

	XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_

	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_

	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_

	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_

	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_

	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_

	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_

	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_

	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_

	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_

	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_

	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_

	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_

	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_

	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_

	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_

	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_

	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_

	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_

	XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_

	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_

	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_

	XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_

	XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_

	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_

	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_

	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_GlHookAbstract

	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_

	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_

	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_

	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_

	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_

	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_

	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_

	XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_

	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_

	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_

	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_

	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_

	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_

	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_

}

type TfxColortargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

}

type XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_ struct {
	ColorTargets []*TfxColortargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`

}

type TxsdProfileCgSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_

	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasElems_Extra

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_

	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileCgSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

type TxsdProfileCgSequenceTechnique struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_Extra

//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileCgSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

type TxsdProfileCg struct {
	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Extra

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

}

type XsdGoPkgHasElems_ProfileCg struct {
//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCgs []*TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`

}

//	Opens a block of GLSL platform-specific data types and technique declarations.
//	A group that specifies the allowable types for GLSL profile parameters.
type TglslFloat xsdt.Float

//	Returns a string representation of this TglslFloat's current non-string scalar value.
func (me TglslFloat) String () string { return xsdt.Float(me).String() }

//	Since TglslFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslFloat) SetFromString (s string)  { (*xsdt.Float)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslFloat's alias type xsdt.Float.
func (me TglslFloat) ToXsdtFloat () xsdt.Float { return xsdt.Float(me) }

type TglslListOfFloat xsdt.String

//	Since TglslListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfFloat) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Since TglslListOfFloat is just a simple String type, this merely returns the current string value.
func (me TglslListOfFloat) String () string { return xsdt.String(me).String() }

//	TglslListOfFloat defines a String containing a whitespace-separated list of TglslFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfFloat) Values () (list []TglslFloat) { var btv = new(TglslFloat); var svals = xsdt.ListValues(string(me)); list = make([]TglslFloat, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

//	This convenience method just performs a simple type conversion to TglslListOfFloat's alias type xsdt.String.
func (me TglslListOfFloat) ToXsdtString () xsdt.String { return xsdt.String(me) }

type TglslFloat3 TglslListOfFloat

//	Since TglslFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	Since TglslFloat3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3) String () string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat3's alias type TglslListOfFloat.
func (me TglslFloat3) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ struct {
	Float3 TglslFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`

}

type TglslInt xsdt.Int

//	Since TglslInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslInt) SetFromString (s string)  { (*xsdt.Int)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslInt's alias type xsdt.Int.
func (me TglslInt) ToXsdtInt () xsdt.Int { return xsdt.Int(me) }

//	Returns a string representation of this TglslInt's current non-string scalar value.
func (me TglslInt) String () string { return xsdt.Int(me).String() }

type XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ struct {
	Int TglslInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`

}

type TglslFloat2 TglslListOfFloat

//	This convenience method just performs a simple type conversion to TglslFloat2's alias type TglslListOfFloat.
func (me TglslFloat2) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	Since TglslFloat2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2) String () string { return TglslListOfFloat(me).String() }

type XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ struct {
	Float2 TglslFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`

}

type TglslFloat3X3 TglslListOfFloat

//	Since TglslFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3X3) String () string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat3X3's alias type TglslListOfFloat.
func (me TglslFloat3X3) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3X3) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ struct {
	Float3X3 TglslFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`

}

type TglslListOfInt xsdt.String

//	Since TglslListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfInt) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslListOfInt's alias type xsdt.String.
func (me TglslListOfInt) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslListOfInt is just a simple String type, this merely returns the current string value.
func (me TglslListOfInt) String () string { return xsdt.String(me).String() }

//	TglslListOfInt defines a String containing a whitespace-separated list of TglslInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfInt) Values () (list []TglslInt) { var btv = new(TglslInt); var svals = xsdt.ListValues(string(me)); list = make([]TglslInt, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TglslInt3 TglslListOfInt

//	Since TglslInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt3) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	Since TglslInt3 is just a simple String type, this merely returns the current string value.
func (me TglslInt3) String () string { return TglslListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TglslInt3's alias type TglslListOfInt.
func (me TglslInt3) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ struct {
	Int3 TglslInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`

}

type XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ struct {
	SamplerCUBE *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`

}

type TglslInt4 TglslListOfInt

//	This convenience method just performs a simple type conversion to TglslInt4's alias type TglslListOfInt.
func (me TglslInt4) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

//	Since TglslInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt4) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	Since TglslInt4 is just a simple String type, this merely returns the current string value.
func (me TglslInt4) String () string { return TglslListOfInt(me).String() }

type XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ struct {
	Int4 TglslInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`

}

type XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ struct {
	Sampler1D *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`

}

//	A surface type for the GLSL profile. This surface inherits from the fx_surface_common type and adds the
//	ability to programmatically generate textures.
//	A procedural surface generator.
//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

//	The setparam element allows you to assign a new value to a previously defined parameter.
type TglslIdentifier xsdt.Token

//	Since TglslIdentifier is just a simple String type, this merely returns the current string value.
func (me TglslIdentifier) String () string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TglslIdentifier's alias type xsdt.Token.
func (me TglslIdentifier) ToXsdtToken () xsdt.Token { return xsdt.Token(me) }

//	Since TglslIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslIdentifier) SetFromString (s string)  { (*xsdt.Token)(me).SetFromString(s) }

type XsdGoPkgHasAttr_Ref_TglslIdentifier_ struct {
	Ref TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TglslSetparamSimple struct {
	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasAttr_Ref_TglslIdentifier_

}

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ struct {
//	The setparam element allows you to assign a new value to a previously defined parameter.
	Setparams []*TglslSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

type TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator struct {
//	The include element allows you to import GLSL code to use for this surface generator.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

//	The setparam element allows you to assign a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_

//	The annotate element allows you to specify an annotation for this surface generator.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

//	The code element allows you to embed GLSL code to use for this surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

}

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
//	A procedural surface generator.
	Generator *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`

}

type TglslSurfaceType struct {
//	A procedural surface generator.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_

	TfxSurfaceCommon

}

type XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ struct {
	Surface *TglslSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`

}

type TglslBool xsdt.Boolean

//	This convenience method just performs a simple type conversion to TglslBool's alias type xsdt.Boolean.
func (me TglslBool) ToXsdtBoolean () xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TglslBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslBool) SetFromString (s string)  { (*xsdt.Boolean)(me).SetFromString(s) }

//	Returns a string representation of this TglslBool's current non-string scalar value.
func (me TglslBool) String () string { return xsdt.Boolean(me).String() }

type XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ struct {
	Bool TglslBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`

}

type XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ struct {
	SamplerDEPTH *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`

}

type TglslFloat2X2 TglslListOfFloat

//	This convenience method just performs a simple type conversion to TglslFloat2X2's alias type TglslListOfFloat.
func (me TglslFloat2X2) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2X2) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	Since TglslFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2X2) String () string { return TglslListOfFloat(me).String() }

type XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ struct {
	Float2X2 TglslFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`

}

type TglslListOfBool xsdt.String

//	Since TglslListOfBool is just a simple String type, this merely returns the current string value.
func (me TglslListOfBool) String () string { return xsdt.String(me).String() }

//	Since TglslListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfBool) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslListOfBool's alias type xsdt.String.
func (me TglslListOfBool) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	TglslListOfBool defines a String containing a whitespace-separated list of TglslBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfBool) Values () (list []TglslBool) { var btv = new(TglslBool); var svals = xsdt.ListValues(string(me)); list = make([]TglslBool, len(svals)); for i, s := range svals { btv.SetFromString(s); list[i] = *btv }; return }

type TglslBool4 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool4's alias type TglslListOfBool.
func (me TglslBool4) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool4) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

//	Since TglslBool4 is just a simple String type, this merely returns the current string value.
func (me TglslBool4) String () string { return TglslListOfBool(me).String() }

type XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ struct {
	Bool4 TglslBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`

}

type TglslInt2 TglslListOfInt

//	Since TglslInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt2) SetFromString (s string)  { (*TglslListOfInt)(me).SetFromString(s) }

//	Since TglslInt2 is just a simple String type, this merely returns the current string value.
func (me TglslInt2) String () string { return TglslListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TglslInt2's alias type TglslListOfInt.
func (me TglslInt2) ToTglslListOfInt () TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ struct {
	Int2 TglslInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`

}

type TglslFloat4 TglslListOfFloat

//	Since TglslFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslFloat4's alias type TglslListOfFloat.
func (me TglslFloat4) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4) String () string { return TglslListOfFloat(me).String() }

type XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ struct {
	Float4 TglslFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`

}

type XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ struct {
	Sampler2D *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`

}

type XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ struct {
	Float TglslFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`

}

type TglslFloat4X4 TglslListOfFloat

//	This convenience method just performs a simple type conversion to TglslFloat4X4's alias type TglslListOfFloat.
func (me TglslFloat4X4) ToTglslListOfFloat () TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4X4) String () string { return TglslListOfFloat(me).String() }

//	Since TglslFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4X4) SetFromString (s string)  { (*TglslListOfFloat)(me).SetFromString(s) }

type XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ struct {
	Float4X4 TglslFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`

}

type TglslBool3 TglslListOfBool

//	Since TglslBool3 is just a simple String type, this merely returns the current string value.
func (me TglslBool3) String () string { return TglslListOfBool(me).String() }

//	Since TglslBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool3) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

//	This convenience method just performs a simple type conversion to TglslBool3's alias type TglslListOfBool.
func (me TglslBool3) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

type XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ struct {
	Bool3 TglslBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`

}

type XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ struct {
	SamplerRECT *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`

}

type XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ struct {
	Sampler3D *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`

}

type TglslBool2 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool2's alias type TglslListOfBool.
func (me TglslBool2) ToTglslListOfBool () TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool2) SetFromString (s string)  { (*TglslListOfBool)(me).SetFromString(s) }

//	Since TglslBool2 is just a simple String type, this merely returns the current string value.
func (me TglslBool2) String () string { return TglslListOfBool(me).String() }

type XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ struct {
	Bool2 TglslBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`

}

type XsdGoPkgHasGroup_GlslParamType struct {
	XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_

	XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_

	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_

	XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_

	XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_

	XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_

	XsdGoPkgHasElem_enumchoicecg_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_

	XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_

	XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_

	XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_

	XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_

	XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_

	XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_

	XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_

	XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_

	XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_

	XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_

}

//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type TglslNewarrayType struct {
	XsdGoPkgHasGroup_GlslParamType

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_

}

type XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ struct {
	Array *TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type XsdGoPkgHasAttr_Sid_TglslIdentifier_ struct {
	Sid TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`

}

type TglslNewparam struct {
	XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_

	XsdGoPkgHasAttr_Sid_TglslIdentifier_

	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

}

type XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ struct {
	Newparams []*TglslNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`

}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	Binds values to uniform inputs of a shader.
type XsdGoPkgHasAttr_Ref_XsdtString_ struct {
	Ref xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`

}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtString_

}

type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
	Param *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
	XsdGoPkgHasGroup_GlslParamType

//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_

}

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`

}

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TglslPipelineStage xsdt.String

//	This convenience method just performs a simple type conversion to TglslPipelineStage's alias type xsdt.String.
func (me TglslPipelineStage) ToXsdtString () xsdt.String { return xsdt.String(me) }

//	Since TglslPipelineStage is just a simple String type, this merely returns the current string value.
func (me TglslPipelineStage) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglslPipelineStage is "VERTEXPROGRAM".
func (me TglslPipelineStage) IsVertexprogram () bool { return me == "VERTEXPROGRAM" }

//	Since TglslPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslPipelineStage) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TglslPipelineStage is "FRAGMENTPROGRAM".
func (me TglslPipelineStage) IsFragmentprogram () bool { return me == "FRAGMENTPROGRAM" }

type XsdGoPkgHasAttr_Stage_TglslPipelineStage_ struct {
	Stage TglslPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`

}

//	A string declaring which profile or platform the compiler is targeting this shader for.
type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
//	A string declaring which profile or platform the compiler is targeting this shader for.
	CompilerTarget *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`

}

//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
//	The entry symbol for the shader function.
	Name *TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`

}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerOptions_XsdtString_

//	A string declaring which profile or platform the compiler is targeting this shader for.
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_

//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TglslPipelineStage_

}

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`

}

type TxsdProfileGlslSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_CGschema_StencilTarget_TfxStenciltargetCommon_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_CGschema_ColorClear_TfxClearcolorCommon_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_CGschema_DepthTarget_TfxDepthtargetCommon_

	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_CGschema_DepthClear_TfxCleardepthCommon_

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_CGschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_

	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_CGschema_ColorTarget_TfxColortargetCommon_

}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ struct {
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlslSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`

}

//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ struct {
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type TglslSetarrayType struct {
	XsdGoPkgHasGroup_GlslParamType

//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_

}

type XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ struct {
	Array *TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`

}

type TglslSetparam struct {
	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasAttr_Ref_TglslIdentifier_

	XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

}

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ struct {
	Setparams []*TglslSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`

}

type TxsdProfileGlslSequenceTechnique struct {
	XsdGoPkgHasElems_Image

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

}

type XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ struct {
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlslSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

type TxsdProfileGlsl struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_Image

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Include_TfxIncludeCommon_

}

type XsdGoPkgHasElems_ProfileGlsl struct {
//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsls []*TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`

}

type XsdGoPkgHasElems_FxProfileAbstract struct {
//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCg

//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGlsl

//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCommon

//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGles

}

type TxsdEffect struct {
//	The effect element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The annotate element allows you to specify an annotation on this effect.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	This is the substituion group hook which allows you to swap in other COLLADA FX profiles.
	XsdGoPkgHasElems_FxProfileAbstract

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The image element allows you to create image resources which can be shared by multipe profiles.
	XsdGoPkgHasElems_Image

}

type XsdGoPkgHasElems_Effect struct {
//	A self contained description of a shader effect.
	Effects []*TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`

}

type TxsdLibraryEffects struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one effect element.
	XsdGoPkgHasElems_Effect

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The library_effects element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

}

type XsdGoPkgHasElems_LibraryEffects struct {
//	The library_effects element declares a module of effect elements.
	LibraryEffectses []*TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`

}

//	The library_animation_clips element declares a module of animation_clip elements.
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
type XsdGoPkgHasAttr_Start_XsdtDouble_00 struct {
	Start xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema start,attr"`

}

//	Returns the default value for Start -- 0.0
func (me XsdGoPkgHasAttr_Start_XsdtDouble_00) StartDefault () xsdt.Double { return xsdt.Double(0.0) }

//	The animation_clip must instance at least one animation element.
type XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ struct {
//	The animation_clip must instance at least one animation element.
	InstanceAnimations []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_animation"`

}

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
type XsdGoPkgHasAttr_End_XsdtDouble_ struct {
	End xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema end,attr"`

}

type TxsdAnimationClip struct {
//	The animation_clip element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
	XsdGoPkgHasAttr_End_XsdtDouble_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	XsdGoPkgHasAttr_Start_XsdtDouble_00

//	The animation_clip must instance at least one animation element.
	XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_AnimationClip struct {
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
	AnimationClips []*TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`

}

type TxsdLibraryAnimationClips struct {
//	The library_animation_clips element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There must be at least one animation_clip element.
	XsdGoPkgHasElems_AnimationClip

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_LibraryAnimationClips struct {
//	The library_animation_clips element declares a module of animation_clip elements.
	LibraryAnimationClipses []*TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`

}

//	The library_physics_models element declares a module of physics_model elements.
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
//	This element allows for describing components of a rigid_body.
//	If true, the mass is distributed along the surface of the shape
type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
//	If true, the mass is distributed along the surface of the shape
	Hollow *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`

}

type TxsdRigidBodySequenceTechniqueCommonSequenceShape struct {
//	If true, the mass is distributed along the surface of the shape
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Rotate

//	Defines a plane to use for this shape.
	XsdGoPkgHasElem_Plane

//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Translate

//	The mass of the shape.
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

//	References a physics_material for the shape.
	XsdGoPkgHasElem_InstancePhysicsMaterial

//	Defines a tapered_cylinder to use for this shape.
	XsdGoPkgHasElem_TaperedCylinder

//	Defines a cyliner to use for this shape.
	XsdGoPkgHasElem_Cylinder

//	Defines a tapered_capsule to use for this shape.
	XsdGoPkgHasElem_TaperedCapsule

//	Defines a physics_material for the shape.
	XsdGoPkgHasElem_PhysicsMaterial

//	The density of the shape.
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_

//	Defines a capsule to use for this shape.
	XsdGoPkgHasElem_Capsule

//	Defines a box to use for this shape.
	XsdGoPkgHasElem_Box

//	Instances a geometry to use to define this shape.
	XsdGoPkgHasElem_InstanceGeometry

//	Defines a sphere to use for this shape.
	XsdGoPkgHasElem_Sphere

}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ struct {
//	This element allows for describing components of a rigid_body.
	Shapes []*TxsdRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`

}

//	If false, the rigid_body is not moveable
type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
//	If false, the rigid_body is not moveable
	Dynamic *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`

}

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
	MassFrame *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`

}

type TxsdRigidBodySequenceTechniqueCommon struct {
//	Defines a physics_material for the rigid_body.
	XsdGoPkgHasElem_PhysicsMaterial

//	The total mass of the rigid-body
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

//	This element allows for describing components of a rigid_body.
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_

//	If false, the rigid_body is not moveable
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_

//	float3 – The diagonal elements of the inertia tensor (moments of inertia), which is represented
//	in the local frame of the center of mass. See above.
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_

//	References a physics_material for the rigid_body.
	XsdGoPkgHasElem_InstancePhysicsMaterial

}

type XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ struct {
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdRigidBody struct {
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_

}

type XsdGoPkgHasElems_RigidBody struct {
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBodies []*TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`

}

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
//	Defines an attachment to a rigid-body or a node.
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
//	physics_model.
type XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_ struct {
	RigidBody xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body,attr"`

}

type TxsdRigidConstraintSequenceAttachment struct {
//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Translate

//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Rotate

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The “rigid_body” attribute is a relative reference to a rigid-body within the same physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_

}

type XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ struct {
//	Defines an attachment to a rigid-body or a node.
	Attachment *TxsdRigidConstraintSequenceAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema attachment"`

}

//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
//	The angular spring properties.
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
type XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 struct {
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	Stiffness *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema stiffness"`

}

//	Returns the default value for Stiffness -- 1.0
func (me XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) StiffnessDefault () Tfloat { return Tfloat(1.0) }

//	The spring damping coefficient.
type XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 struct {
//	The spring damping coefficient.
	Damping *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema damping"`

}

//	Returns the default value for Damping -- 0.0
func (me XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) DampingDefault () Tfloat { return Tfloat(0.0) }

//	The spring's target or resting distance.
type XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 struct {
//	The spring's target or resting distance.
	TargetValue *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema target_value"`

}

//	Returns the default value for TargetValue -- 0.0
func (me XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) TargetValueDefault () Tfloat { return Tfloat(0.0) }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular struct {
//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00

//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10

//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

}

type XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ struct {
//	The angular spring properties.
	Angular *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular `xml:"http://www.collada.org/2005/11/COLLADASchema angular"`

}

//	The linear spring properties.
type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear struct {
//	The stiffness (also called spring coefficient) has units of force/distance.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10

//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00

}

type XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ struct {
//	The linear spring properties.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`

}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring struct {
//	The angular spring properties.
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_

//	The linear spring properties.
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_

}

type XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ struct {
//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	Spring *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring `xml:"http://www.collada.org/2005/11/COLLADASchema spring"`

}

//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
type XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True struct {
//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	Enabled *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema enabled"`

}

//	Returns the default value for Enabled -- true
func (me XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True) EnabledDefault () Tbool { return Tbool(true) }

//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
//	The linear element describes linear (translational) limits along each axis.
//	The maximum values for the limit.
type XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 struct {
//	The maximum values for the limit.
	Max *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema max"`

}

//	Returns the default value for Max -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) MaxDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

//	The minimum values for the limit.
type XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 struct {
//	The minimum values for the limit.
	Min *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema min"`

}

//	Returns the default value for Min -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) MinDefault () Tfloat3 { return Tfloat3("0.0 0.0 0.0") }

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear struct {
//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000

//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

}

type XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ struct {
//	The linear element describes linear (translational) limits along each axis.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`

}

//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist struct {
//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000

}

type XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ struct {
//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	SwingConeAndTwist *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist `xml:"http://www.collada.org/2005/11/COLLADASchema swing_cone_and_twist"`

}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits struct {
//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_

//	The linear element describes linear (translational) limits along each axis.
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_

}

type XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ struct {
//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
	Limits *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits `xml:"http://www.collada.org/2005/11/COLLADASchema limits"`

}

//	Indicates whether the attached rigid bodies may inter-penetrate.
type XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False struct {
//	Indicates whether the attached rigid bodies may inter-penetrate.
	Interpenetrate *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema interpenetrate"`

}

//	Returns the default value for Interpenetrate -- false
func (me XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False) InterpenetrateDefault () Tbool { return Tbool(false) }

type TxsdRigidConstraintSequenceTechniqueCommon struct {
//	Indicates whether the attached rigid bodies may inter-penetrate.
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False

//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_

//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True

//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_

}

type XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidConstraintSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
type XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ struct {
//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	RefAttachment *TxsdRigidConstraintSequenceAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema ref_attachment"`

}

type TxsdRigidConstraint struct {
//	The sid attribute is a text string value containing the sub-identifier of this element.
//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_

//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

//	Defines an attachment to a rigid-body or a node.
	XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_RigidConstraint struct {
//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
	RigidConstraints []*TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`

}

type TxsdPhysicsModel struct {
//	The physics_model element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The physics_model may define any number of rigid_body elements.
	XsdGoPkgHasElems_RigidBody

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The physics_model may define any number of rigid_constraint elements.
	XsdGoPkgHasElems_RigidConstraint

//	The physics_model may instance any number of other physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_PhysicsModel struct {
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
	PhysicsModels []*TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`

}

type TxsdLibraryPhysicsModels struct {
//	The library_physics_models element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one physics_model element.
	XsdGoPkgHasElems_PhysicsModel

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_LibraryPhysicsModels struct {
//	The library_physics_models element declares a module of physics_model elements.
	LibraryPhysicsModelses []*TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`

}

//	The library_visual_scenes element declares a module of visual_scene elements.
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
type XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_ struct {
	CameraNode xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema camera_node,attr"`

}

//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
type XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ struct {
//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
	Layers []xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema layer"`

}

type TxsdVisualSceneSequenceEvaluateSceneSequenceRender struct {
//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
	XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_

//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_

//	The instance_effect element specifies which effect to render in this compositing step
//	while evaluating the scene.
	XsdGoPkgHasElem_InstanceEffect

}

type XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ struct {
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
	Renders []*TxsdVisualSceneSequenceEvaluateSceneSequenceRender `xml:"http://www.collada.org/2005/11/COLLADASchema render"`

}

type TxsdVisualSceneSequenceEvaluateScene struct {
//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_

}

type XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ struct {
//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
	EvaluateScenes []*TxsdVisualSceneSequenceEvaluateScene `xml:"http://www.collada.org/2005/11/COLLADASchema evaluate_scene"`

}

type TxsdVisualScene struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element. This
//	value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
	XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_

//	The visual_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The visual_scene element must have at least one node element.
	XsdGoPkgHasElems_Node

}

type XsdGoPkgHasElems_VisualScene struct {
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
	VisualScenes []*TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`

}

type TxsdLibraryVisualScenes struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	There must be at least one visual_scene element.
	XsdGoPkgHasElems_VisualScene

//	The library_visual_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

}

type XsdGoPkgHasElems_LibraryVisualScenes struct {
//	The library_visual_scenes element declares a module of visual_scene elements.
	LibraryVisualSceneses []*TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`

}

//	The library_controllers element declares a module of controller elements.
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
type TxsdMorphSequenceTargets struct {
//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ struct {
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
	Targets *TxsdMorphSequenceTargets `xml:"http://www.collada.org/2005/11/COLLADASchema targets"`

}

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
//	An enumuerated type specifying the acceptable morph methods.
type TMorphMethodType xsdt.String

//	Since TMorphMethodType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMorphMethodType) SetFromString (s string)  { (*xsdt.String)(me).SetFromString(s) }

//	Returns true if the value of this enumerated TMorphMethodType is "NORMALIZED".
func (me TMorphMethodType) IsNormalized () bool { return me == "NORMALIZED" }

//	Since TMorphMethodType is just a simple String type, this merely returns the current string value.
func (me TMorphMethodType) String () string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TMorphMethodType is "RELATIVE".
func (me TMorphMethodType) IsRelative () bool { return me == "RELATIVE" }

//	This convenience method just performs a simple type conversion to TMorphMethodType's alias type xsdt.String.
func (me TMorphMethodType) ToXsdtString () xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized struct {
	Method TMorphMethodType `xml:"http://www.collada.org/2005/11/COLLADASchema method,attr"`

}

//	Returns the default value for Method -- "NORMALIZED"
func (me XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized) MethodDefault () TMorphMethodType { return TMorphMethodType("NORMALIZED") }

type TxsdMorph struct {
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
	XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized

//	The source attribute indicates the base mesh. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The morph element must contain at least two source elements.
	XsdGoPkgHasElems_Source

}

type XsdGoPkgHasElem_Morph struct {
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
	Morph *TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`

}

//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
type XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ struct {
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
	BindShapeMatrix Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bind_shape_matrix"`

}

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
type XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ struct {
//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
	V TListOfInts `xml:"http://www.collada.org/2005/11/COLLADASchema v"`

}

type TxsdSkinSequenceVertexWeights struct {
//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The count attribute describes the number of vertices in the base mesh. Required element.
	XsdGoPkgHasAttr_Count_Tuint_

//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencepolylistschema_Vcount_TListOfUInts_

//	The input element must occur at least twice.
	XsdGoPkgHasElems_inputsequencelinestripsschema_Input_TInputLocalOffset_

}

type XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ struct {
//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	VertexWeights *TxsdSkinSequenceVertexWeights `xml:"http://www.collada.org/2005/11/COLLADASchema vertex_weights"`

}

//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
type TxsdSkinSequenceJoints struct {
//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ struct {
//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	Joints *TxsdSkinSequenceJoints `xml:"http://www.collada.org/2005/11/COLLADASchema joints"`

}

type TxsdSkin struct {
//	The source attribute contains a URI reference to the base mesh, (a static mesh or a morphed mesh).
//	This also provides the bind-shape of the skinned mesh.  Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

//	The skin element must contain at least three source elements.
	XsdGoPkgHasElems_Source

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
	XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_

//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_

}

type XsdGoPkgHasElem_Skin struct {
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skin *TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`

}

type TxsdController struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Morph

//	The controller element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Skin

}

type XsdGoPkgHasElems_Controller struct {
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controllers []*TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`

}

type TxsdLibraryControllers struct {
//	The library_controllers element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	There must be at least one controller element.
	XsdGoPkgHasElems_Controller

}

type XsdGoPkgHasElems_LibraryControllers struct {
//	The library_controllers element declares a module of controller elements.
	LibraryControllerses []*TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`

}

//	The library_physics_materials element declares a module of physics_material elements.
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
type XsdGoPkgHasElems_PhysicsMaterial struct {
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterials []*TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`

}

type TxsdLibraryPhysicsMaterials struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The library_physics_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one physics_material element.
	XsdGoPkgHasElems_PhysicsMaterial

}

type XsdGoPkgHasElems_LibraryPhysicsMaterials struct {
//	The library_physics_materials element declares a module of physics_material elements.
	LibraryPhysicsMaterialses []*TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`

}

//	The library_lights element declares a module of light elements.
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`

}

type TxsdLightSequenceTechniqueCommonChoiceAmbient struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

}

type XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ struct {
//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	Ambient *TxsdLightSequenceTechniqueCommonChoiceAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`

}

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 struct {
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	FalloffExponent *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_exponent"`

}

//	Returns the default value for FalloffExponent -- 0.0
func (me XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00) FalloffExponentDefault () Tfloat { return Tfloat(0.0) }

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 struct {
//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	QuadraticAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema quadratic_attenuation"`

}

//	Returns the default value for QuadraticAttenuation -- 0.0
func (me XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) QuadraticAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 struct {
//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	LinearAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema linear_attenuation"`

}

//	Returns the default value for LinearAttenuation -- 0.0
func (me XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) LinearAttenuationDefault () Tfloat { return Tfloat(0.0) }

//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 struct {
//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	FalloffAngle *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_angle"`

}

//	Returns the default value for FalloffAngle -- 180.0
func (me XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800) FalloffAngleDefault () Tfloat { return Tfloat(180.0) }

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 struct {
//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	ConstantAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema constant_attenuation"`

}

//	Returns the default value for ConstantAttenuation -- 1.0
func (me XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) ConstantAttenuationDefault () Tfloat { return Tfloat(1.0) }

type TxsdLightSequenceTechniqueCommonChoiceSpot struct {
//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10

//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00

//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

}

type XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ struct {
//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
	Spot *TxsdLightSequenceTechniqueCommonChoiceSpot `xml:"http://www.collada.org/2005/11/COLLADASchema spot"`

}

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
type TxsdLightSequenceTechniqueCommonChoiceDirectional struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

}

type XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ struct {
//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
	Directional *TxsdLightSequenceTechniqueCommonChoiceDirectional `xml:"http://www.collada.org/2005/11/COLLADASchema directional"`

}

//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
type TxsdLightSequenceTechniqueCommonChoicePoint struct {
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

}

type XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ struct {
//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
	Point *TxsdLightSequenceTechniqueCommonChoicePoint `xml:"http://www.collada.org/2005/11/COLLADASchema point"`

}

type TxsdLightSequenceTechniqueCommon struct {
//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_

//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_

}

type XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ struct {
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
	TechniqueCommon *TxsdLightSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`

}

type TxsdLight struct {
//	The light element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_

//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

}

type XsdGoPkgHasElems_Light struct {
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
	Lights []*TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`

}

type TxsdLibraryLights struct {
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

//	There must be at least one light element.
	XsdGoPkgHasElems_Light

//	The library_lights element may contain an asset element.
	XsdGoPkgHasElem_Asset

//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

}

type XsdGoPkgHasElems_LibraryLights struct {
//	The library_lights element declares a module of light elements.
	LibraryLightses []*TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`

}

type TxsdCollada struct {
//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

//	The COLLADA element may contain any number of library_effects elements.
	XsdGoPkgHasElems_LibraryEffects

//	The COLLADA element may contain any number of library_animation_clips elements.
	XsdGoPkgHasElems_LibraryAnimationClips

//	The COLLADA element may contain any number of library_physics_models elements.
	XsdGoPkgHasElems_LibraryPhysicsModels

//	The COLLADA element may contain any number of library_visual_scenes elements.
	XsdGoPkgHasElems_LibraryVisualScenes

//	The COLLADA element may contain any number of library_controllerss elements.
	XsdGoPkgHasElems_LibraryControllers

//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryPhysicsMaterials

//	The COLLADA element may contain any number of library_lights elements.
	XsdGoPkgHasElems_LibraryLights

//	The COLLADA element may contain any number of library_physics_scenes elements.
	XsdGoPkgHasElems_LibraryPhysicsScenes

//	The COLLADA element may contain any number of library_nodes elements.
	XsdGoPkgHasElems_LibraryNodes

//	The COLLADA element may contain any number of library_animations elements.
	XsdGoPkgHasElems_LibraryAnimations

//	The COLLADA element may contain any number of library_force_fields elements.
	XsdGoPkgHasElems_LibraryForceFields

//	The COLLADA element may contain any number of library_images elements.
	XsdGoPkgHasElems_LibraryImages

//	The COLLADA element may contain any number of library_cameras elements.
	XsdGoPkgHasElems_LibraryCameras

//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryMaterials

//	The xml:base attribute allows you to define the base URI for this COLLADA document. See
//	http://www.w3.org/TR/xmlbase/ for more information.
	xml.XsdGoPkgHasAttr_Base

//	The COLLADA element must contain an asset element.
	XsdGoPkgHasElem_Asset

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
	XsdGoPkgHasAttr_Version_TVersionType_

//	The COLLADA element may contain any number of library_geometriess elements.
	XsdGoPkgHasElems_LibraryGeometries

}

type XsdGoPkgHasElems_Collada struct {
//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
	Colladas []*TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`

}

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
type XsdGoPkgHasElem_Collada struct {
//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
	Collada *TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`

}

//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type XsdGoPkgHasElems_IdrefArray struct {
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArrays []*TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`

}

//	The Name_array element declares the storage for a homogenous array of Name string values.
type XsdGoPkgHasElems_NameArray struct {
//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArrays []*TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`

}

//	The bool_array element declares the storage for a homogenous array of boolean values.
type XsdGoPkgHasElems_BoolArray struct {
//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArrays []*TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`

}

//	The float_array element declares the storage for a homogenous array of floating point values.
type XsdGoPkgHasElems_FloatArray struct {
//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArrays []*TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`

}

//	The int_array element declares the storage for a homogenous array of integer values.
type XsdGoPkgHasElems_IntArray struct {
//	The int_array element declares the storage for a homogenous array of integer values.
	IntArrays []*TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`

}

//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
type XsdGoPkgHasElems_Accessor struct {
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
	Accessors []*TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`

}

//	The param element declares parametric information regarding its parent element.
type XsdGoPkgHasElem_Param struct {
//	The param element declares parametric information regarding its parent element.
	Param *TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`

}

//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
type XsdGoPkgHasElem_Source struct {
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
	Source *TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`

}

//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
type XsdGoPkgHasElem_Geometry struct {
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
	Geometry *TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`

}

//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
type XsdGoPkgHasElems_Mesh struct {
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Meshs []*TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`

}

//	The spline element contains control vertex information sufficient to describe basic splines.
type XsdGoPkgHasElems_Spline struct {
//	The spline element contains control vertex information sufficient to describe basic splines.
	Splines []*TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`

}

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type XsdGoPkgHasElem_Lines struct {
//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
	Lines *TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`

}

//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
type XsdGoPkgHasElem_Linestrips struct {
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
	Linestrips *TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`

}

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
type XsdGoPkgHasElem_Polygons struct {
//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygons *TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`

}

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
type XsdGoPkgHasElem_Polylist struct {
//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
	Polylist *TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`

}

//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
type XsdGoPkgHasElem_Triangles struct {
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangles *TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`

}

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
type XsdGoPkgHasElem_Trifans struct {
//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifans *TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`

}

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type XsdGoPkgHasElem_Tristrips struct {
//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristrips *TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`

}

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type XsdGoPkgHasElems_Vertices struct {
//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Verticeses []*TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`

}

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type XsdGoPkgHasElem_Lookat struct {
//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
	Lookat *TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`

}

//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type XsdGoPkgHasElem_Matrix struct {
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrix *TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`

}

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type XsdGoPkgHasElem_Rotate struct {
//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotate *TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`

}

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type XsdGoPkgHasElem_Scale struct {
//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
	Scale *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`

}

//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type XsdGoPkgHasElem_Skew struct {
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
	Skew *TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`

}

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElem_Translate struct {
//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
	Translate *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`

}

//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
type XsdGoPkgHasElem_Image struct {
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
	Image *TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`

}

//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
type XsdGoPkgHasElem_Light struct {
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
	Light *TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`

}

//	Materials describe the visual appearance of a geometric object.
type XsdGoPkgHasElem_Material struct {
//	Materials describe the visual appearance of a geometric object.
	Material *TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`

}

//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
type XsdGoPkgHasElem_Camera struct {
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
	Camera *TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`

}

//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
type XsdGoPkgHasElem_Animation struct {
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
	Animation *TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`

}

//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
type XsdGoPkgHasElem_AnimationClip struct {
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
	AnimationClip *TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`

}

//	The channel element declares an output channel of an animation.
type XsdGoPkgHasElem_Channel struct {
//	The channel element declares an output channel of an animation.
	Channel *TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`

}

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
type XsdGoPkgHasElem_Sampler struct {
//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
	Sampler *TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`

}

//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
type XsdGoPkgHasElem_Controller struct {
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controller *TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`

}

//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
type XsdGoPkgHasElems_Skin struct {
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skins []*TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`

}

//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
type XsdGoPkgHasElems_Morph struct {
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
	Morphs []*TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`

}

//	The asset element defines asset management information regarding its parent element.
type XsdGoPkgHasElems_Asset struct {
//	The asset element defines asset management information regarding its parent element.
	Assets []*TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`

}

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
type XsdGoPkgHasElem_Technique struct {
//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Technique *TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`

}

//	Nodes embody the hierarchical relationship of elements in the scene.
type XsdGoPkgHasElem_Node struct {
//	Nodes embody the hierarchical relationship of elements in the scene.
	Node *TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`

}

//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
type XsdGoPkgHasElem_VisualScene struct {
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
	VisualScene *TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`

}

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
type XsdGoPkgHasElems_BindMaterial struct {
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
	BindMaterials []*TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`

}

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElem_InstanceCamera struct {
//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	InstanceCamera *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`

}

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
type XsdGoPkgHasElem_InstanceController struct {
//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	InstanceController *TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`

}

//	The instance_effect element declares the instantiation of a COLLADA effect resource.
type XsdGoPkgHasElems_InstanceEffect struct {
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	InstanceEffects []*TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`

}

//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElem_InstanceForceField struct {
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	InstanceForceField *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`

}

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElem_InstanceLight struct {
//	The instance_light element declares the instantiation of a COLLADA light resource.
	InstanceLight *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`

}

//	The instance_material element declares the instantiation of a COLLADA material resource.
type XsdGoPkgHasElem_InstanceMaterial struct {
//	The instance_material element declares the instantiation of a COLLADA material resource.
	InstanceMaterial *TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`

}

//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasElem_InstanceNode struct {
//	The instance_node element declares the instantiation of a COLLADA node resource.
	InstanceNode *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`

}

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type XsdGoPkgHasElems_InstancePhysicsMaterial struct {
//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
	InstancePhysicsMaterials []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`

}

//	This element allows instancing physics model within another physics model, or in a physics scene.
type XsdGoPkgHasElem_InstancePhysicsModel struct {
//	This element allows instancing physics model within another physics model, or in a physics scene.
	InstancePhysicsModel *TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`

}

//	This element allows instancing a rigid_body within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidBody struct {
//	This element allows instancing a rigid_body within an instance_physics_model.
	InstanceRigidBody *TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`

}

//	This element allows instancing a rigid_constraint within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidConstraint struct {
//	This element allows instancing a rigid_constraint within an instance_physics_model.
	InstanceRigidConstraint *TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`

}

//	The library_animations element declares a module of animation elements.
type XsdGoPkgHasElem_LibraryAnimations struct {
//	The library_animations element declares a module of animation elements.
	LibraryAnimations *TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`

}

//	The library_animation_clips element declares a module of animation_clip elements.
type XsdGoPkgHasElem_LibraryAnimationClips struct {
//	The library_animation_clips element declares a module of animation_clip elements.
	LibraryAnimationClips *TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`

}

//	The library_cameras element declares a module of camera elements.
type XsdGoPkgHasElem_LibraryCameras struct {
//	The library_cameras element declares a module of camera elements.
	LibraryCameras *TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`

}

//	The library_controllers element declares a module of controller elements.
type XsdGoPkgHasElem_LibraryControllers struct {
//	The library_controllers element declares a module of controller elements.
	LibraryControllers *TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`

}

//	The library_geometries element declares a module of geometry elements.
type XsdGoPkgHasElem_LibraryGeometries struct {
//	The library_geometries element declares a module of geometry elements.
	LibraryGeometries *TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`

}

//	The library_effects element declares a module of effect elements.
type XsdGoPkgHasElem_LibraryEffects struct {
//	The library_effects element declares a module of effect elements.
	LibraryEffects *TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`

}

//	The library_force_fields element declares a module of force_field elements.
type XsdGoPkgHasElem_LibraryForceFields struct {
//	The library_force_fields element declares a module of force_field elements.
	LibraryForceFields *TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`

}

//	The library_images element declares a module of image elements.
type XsdGoPkgHasElem_LibraryImages struct {
//	The library_images element declares a module of image elements.
	LibraryImages *TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`

}

//	The library_lights element declares a module of light elements.
type XsdGoPkgHasElem_LibraryLights struct {
//	The library_lights element declares a module of light elements.
	LibraryLights *TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`

}

//	The library_materials element declares a module of material elements.
type XsdGoPkgHasElem_LibraryMaterials struct {
//	The library_materials element declares a module of material elements.
	LibraryMaterials *TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`

}

//	The library_nodes element declares a module of node elements.
type XsdGoPkgHasElem_LibraryNodes struct {
//	The library_nodes element declares a module of node elements.
	LibraryNodes *TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`

}

//	The library_physics_materials element declares a module of physics_material elements.
type XsdGoPkgHasElem_LibraryPhysicsMaterials struct {
//	The library_physics_materials element declares a module of physics_material elements.
	LibraryPhysicsMaterials *TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`

}

//	The library_physics_models element declares a module of physics_model elements.
type XsdGoPkgHasElem_LibraryPhysicsModels struct {
//	The library_physics_models element declares a module of physics_model elements.
	LibraryPhysicsModels *TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`

}

//	The library_physics_scenes element declares a module of physics_scene elements.
type XsdGoPkgHasElem_LibraryPhysicsScenes struct {
//	The library_physics_scenes element declares a module of physics_scene elements.
	LibraryPhysicsScenes *TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`

}

//	The library_visual_scenes element declares a module of visual_scene elements.
type XsdGoPkgHasElem_LibraryVisualScenes struct {
//	The library_visual_scenes element declares a module of visual_scene elements.
	LibraryVisualScenes *TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`

}

//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of GLSL platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGlsl struct {
//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsl *TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`

}

//	Opens a block of COMMON platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCommon struct {
//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommon *TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`

}

//	Opens a block of CG platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCg struct {
//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCg *TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`

}

//	Opens a block of GLES platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGles struct {
//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGles *TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`

}

type XsdGoPkgHasElem_FxProfileAbstract struct {
//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCommon

//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCg

//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGles

//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGlsl

}

//	A self contained description of a shader effect.
type XsdGoPkgHasElem_Effect struct {
//	A self contained description of a shader effect.
	Effect *TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`

}

type XsdGoPkgHasElems_GlHookAbstract struct {
	GlHookAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`

}

//	An axis-aligned, centered box primitive.
type XsdGoPkgHasElems_Box struct {
//	An axis-aligned, centered box primitive.
	Boxs []*TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`

}

//	An infinite plane primitive.
type XsdGoPkgHasElems_Plane struct {
//	An infinite plane primitive.
	Planes []*TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`

}

//	A centered sphere primitive.
type XsdGoPkgHasElems_Sphere struct {
//	A centered sphere primitive.
	Spheres []*TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`

}

type XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ struct {
	Size Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`

}

type TxsdEllipsoid struct {
	XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_

}

type XsdGoPkgHasElem_Ellipsoid struct {
	Ellipsoid *TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`

}

type XsdGoPkgHasElems_Ellipsoid struct {
	Ellipsoids []*TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`

}

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
type XsdGoPkgHasElems_Cylinder struct {
//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinders []*TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`

}

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_TaperedCylinder struct {
//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinders []*TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`

}

//	A capsule primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_Capsule struct {
//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsules []*TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`

}

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
type XsdGoPkgHasElems_TaperedCapsule struct {
//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsules []*TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`

}

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
type XsdGoPkgHasElems_ConvexMesh struct {
//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMeshs []*TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`

}

//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type XsdGoPkgHasElem_ForceField struct {
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceField *TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`

}

type XsdGoPkgHasElem_PhysicsScene struct {
	PhysicsScene *TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`

}

//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
type XsdGoPkgHasElem_RigidBody struct {
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBody *TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`

}

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
type XsdGoPkgHasElem_RigidConstraint struct {
//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
	RigidConstraint *TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`

}

//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
type XsdGoPkgHasElem_PhysicsModel struct {
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
	PhysicsModel *TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`

}
